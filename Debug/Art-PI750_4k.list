
Art-PI750_4k.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0801a99c  0801a99c  0001b99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b720  0801b720  0001c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b728  0801b728  0001c728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b72c  0801b72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000294  24000000  0801b730  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001528  240002a0  0801b9c4  0001d2a0  2**5
                  ALLOC
  8 .sdram_section 00000000  c0000000  c0000000  00022401  2**0
                  CONTENTS
  9 ._user_heap_stack 00001e00  240017c8  240017c8  0001d7c8  2**0
                  ALLOC
 10 .dma_buffer   00004000  30000000  30000000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .i2c_buffer   00000401  38000000  38000000  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00022401  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031052  00000000  00000000  0002242f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006403  00000000  00000000  00053481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  00059888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ce6  00000000  00000000  0005be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042447  00000000  00000000  0005dae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a2b6  00000000  00000000  0009ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b5ac  00000000  00000000  000da1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0026578f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a620  00000000  00000000  00265818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0026fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a984 	.word	0x0801a984

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	0801a984 	.word	0x0801a984

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000688:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <MX_ADC3_Init+0xe0>)
 800068a:	4a32      	ldr	r2, [pc, #200]	@ (8000754 <MX_ADC3_Init+0xe4>)
 800068c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800068e:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <MX_ADC3_Init+0xe0>)
 8000690:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000694:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_ADC3_Init+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_ADC3_Init+0xe0>)
 800069e:	2204      	movs	r2, #4
 80006a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006bc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_4;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_ADC3_Init+0xe0>)
 80006f0:	f004 fe36 	bl	8005360 <HAL_ADC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80006fa:	f002 fd5b 	bl	80031b4 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_ADC3_Init+0xe0>)
 8000700:	2208      	movs	r2, #8
 8000702:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_ADC3_Init+0xe0>)
 8000706:	f004 fe2b 	bl	8005360 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000710:	f002 fd50 	bl	80031b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2306      	movs	r3, #6
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000720:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000726:	2304      	movs	r3, #4
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_ADC3_Init+0xe0>)
 8000738:	f005 fbb0 	bl	8005e9c <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8000742:	f002 fd37 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	240002bc 	.word	0x240002bc
 8000754:	58026000 	.word	0x58026000

08000758 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0b4      	sub	sp, #208	@ 0xd0
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	22c0      	movs	r2, #192	@ 0xc0
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f019 f93c 	bl	80199e6 <memset>
  if(adcHandle->Instance==ADC3)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a4a      	ldr	r2, [pc, #296]	@ (800089c <HAL_ADC_MspInit+0x144>)
 8000774:	4293      	cmp	r3, r2
 8000776:	f040 808c 	bne.w	8000892 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800077a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000786:	2305      	movs	r3, #5
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 30;
 800078a:	231e      	movs	r3, #30
 800078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800079a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80007a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a4:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80007aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00c ffe8 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80007c2:	f002 fcf7 	bl	80031b4 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007c6:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a34      	ldr	r2, [pc, #208]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ea:	4a2d      	ldr	r2, [pc, #180]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <HAL_ADC_MspInit+0x148>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000802:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000806:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800080a:	f004 fb65 	bl	8004ed8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream7;
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000810:	4a25      	ldr	r2, [pc, #148]	@ (80008a8 <HAL_ADC_MspInit+0x150>)
 8000812:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000814:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000816:	2273      	movs	r2, #115	@ 0x73
 8000818:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000820:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800082c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082e:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000834:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000836:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800083c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000844:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000848:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800084c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000850:	2204      	movs	r2, #4
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000856:	2201      	movs	r2, #1
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000866:	480f      	ldr	r0, [pc, #60]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000868:	f006 fada 	bl	8006e20 <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8000872:	f002 fc9f 	bl	80031b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 800087a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800087c:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <HAL_ADC_MspInit+0x14c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	207f      	movs	r0, #127	@ 0x7f
 8000888:	f006 fa95 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800088c:	207f      	movs	r0, #127	@ 0x7f
 800088e:	f006 faac 	bl	8006dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	37d0      	adds	r7, #208	@ 0xd0
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	58026000 	.word	0x58026000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	2400034c 	.word	0x2400034c
 80008a8:	400204b8 	.word	0x400204b8

080008ac <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_BDMA_Init+0x5c>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <MX_BDMA_Init+0x5c>)
 80008ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_BDMA_Init+0x5c>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2080      	movs	r0, #128	@ 0x80
 80008d6:	f006 fa6e 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80008da:	2080      	movs	r0, #128	@ 0x80
 80008dc:	f006 fa85 	bl	8006dea <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2081      	movs	r0, #129	@ 0x81
 80008e6:	f006 fa66 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80008ea:	2081      	movs	r0, #129	@ 0x81
 80008ec:	f006 fa7d 	bl	8006dea <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2082      	movs	r0, #130	@ 0x82
 80008f6:	f006 fa5e 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80008fa:	2082      	movs	r0, #130	@ 0x82
 80008fc:	f006 fa75 	bl	8006dea <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58024400 	.word	0x58024400

0800090c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream7
  */
void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_DMA_Init+0xd8>)
 8000914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000918:	4a32      	ldr	r2, [pc, #200]	@ (80009e4 <MX_DMA_Init+0xd8>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000922:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <MX_DMA_Init+0xd8>)
 8000924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000930:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <MX_DMA_Init+0xd8>)
 8000932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <MX_DMA_Init+0xd8>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <MX_DMA_Init+0xd8>)
 8000942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream7 on DMA1_Stream7 */
  hdma_memtomem_dma1_stream7.Instance = DMA1_Stream7;
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000950:	4a26      	ldr	r2, [pc, #152]	@ (80009ec <MX_DMA_Init+0xe0>)
 8000952:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream7.Init.Request = DMA_REQUEST_MEM2MEM;
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream7.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <MX_DMA_Init+0xdc>)
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream7.Init.PeriphInc = DMA_PINC_ENABLE;
 8000960:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000966:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream7.Init.MemInc = DMA_MINC_ENABLE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <MX_DMA_Init+0xdc>)
 800096a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800096e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream7.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000970:	4b1d      	ldr	r3, [pc, #116]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000976:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream7.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_DMA_Init+0xdc>)
 800097a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream7.Init.Mode = DMA_NORMAL;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream7.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000988:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800098c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream7.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000990:	2204      	movs	r2, #4
 8000992:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma1_stream7.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_DMA_Init+0xdc>)
 8000996:	2203      	movs	r2, #3
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma1_stream7.Init.MemBurst = DMA_MBURST_INC4;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_DMA_Init+0xdc>)
 800099c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma1_stream7.Init.PeriphBurst = DMA_PBURST_INC4;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_DMA_Init+0xdc>)
 80009a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80009a8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream7) != HAL_OK)
 80009aa:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <MX_DMA_Init+0xdc>)
 80009ac:	f006 fa38 	bl	8006e20 <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_DMA_Init+0xae>
  {
    Error_Handler();
 80009b6:	f002 fbfd 	bl	80031b4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	202f      	movs	r0, #47	@ 0x2f
 80009c0:	f006 f9f9 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009c4:	202f      	movs	r0, #47	@ 0x2f
 80009c6:	f006 fa10 	bl	8006dea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2046      	movs	r0, #70	@ 0x46
 80009d0:	f006 f9f1 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009d4:	2046      	movs	r0, #70	@ 0x46
 80009d6:	f006 fa08 	bl	8006dea <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58024400 	.word	0x58024400
 80009e8:	240003c4 	.word	0x240003c4
 80009ec:	400200b8 	.word	0x400200b8

080009f0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b00 <MX_FMC_Init+0x110>)
 8000a0e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a10:	4b3a      	ldr	r3, [pc, #232]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000a1c:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a22:	4b36      	ldr	r3, [pc, #216]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a28:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a2a:	2240      	movs	r2, #64	@ 0x40
 8000a2c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a2e:	4b33      	ldr	r3, [pc, #204]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a34:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a42:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000a60:	2306      	movs	r3, #6
 8000a62:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000a64:	2303      	movs	r3, #3
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RPDelay = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RCDDelay = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000a78:	f011 fb5e 	bl	8012138 <HAL_SDRAM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000a82:	f002 fb97 	bl	80031b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 3: Configure a clock configuration enable command */
   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000a86:	2301      	movs	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	60bb      	str	r3, [r7, #8]
   Command.AutoRefreshNumber      = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
   Command.ModeRegisterDefinition = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4817      	ldr	r0, [pc, #92]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000aa0:	f011 fbbe 	bl	8012220 <HAL_SDRAM_SendCommand>
   HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f004 f9c3 	bl	8004e30 <HAL_Delay>
   /* Step 5: Configure a PALL (precharge all) command */
   Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000aaa:	2302      	movs	r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000ab8:	f011 fbb2 	bl	8012220 <HAL_SDRAM_SendCommand>
   /* Step 6: Configure an Auto Refresh command */
   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000abc:	2303      	movs	r3, #3
 8000abe:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000aca:	4619      	mov	r1, r3
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000ace:	f011 fba7 	bl	8012220 <HAL_SDRAM_SendCommand>
   /* Step 7: Program the external memory mode register */
   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	607b      	str	r3, [r7, #4]
   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000ad6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000ada:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000ae6:	f011 fb9b 	bl	8012220 <HAL_SDRAM_SendCommand>
   /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
   /* Set the device refresh rate
    * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
            = [(64ms/8192) * 100MHz] - 20 = 782.25 - 20 ~ 761 */
   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 761);
 8000aea:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8000aee:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_FMC_Init+0x10c>)
 8000af0:	f011 fbcb 	bl	801228a <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	@ 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400043c 	.word	0x2400043c
 8000b00:	52004140 	.word	0x52004140

08000b04 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b8      	sub	sp, #224	@ 0xe0
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000c88 <HAL_FMC_MspInit+0x184>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 80ae 	bne.w	8000c80 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000b24:	4b58      	ldr	r3, [pc, #352]	@ (8000c88 <HAL_FMC_MspInit+0x184>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	22c0      	movs	r2, #192	@ 0xc0
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f018 ff57 	bl	80199e6 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8000b44:	2301      	movs	r3, #1
 8000b46:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00c fe1d 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000b58:	f002 fb2c 	bl	80031b4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c8c <HAL_FMC_MspInit+0x188>)
 8000b5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b62:	4a4a      	ldr	r2, [pc, #296]	@ (8000c8c <HAL_FMC_MspInit+0x188>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000b6c:	4b47      	ldr	r3, [pc, #284]	@ (8000c8c <HAL_FMC_MspInit+0x188>)
 8000b6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000b7a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b94:	230c      	movs	r3, #12
 8000b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	483b      	ldr	r0, [pc, #236]	@ (8000c90 <HAL_FMC_MspInit+0x18c>)
 8000ba2:	f008 fde7 	bl	8009774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000ba6:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000baa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4831      	ldr	r0, [pc, #196]	@ (8000c94 <HAL_FMC_MspInit+0x190>)
 8000bce:	f008 fdd1 	bl	8009774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000bd2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bec:	230c      	movs	r3, #12
 8000bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4827      	ldr	r0, [pc, #156]	@ (8000c98 <HAL_FMC_MspInit+0x194>)
 8000bfa:	f008 fdbb 	bl	8009774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000bfe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c22:	4619      	mov	r1, r3
 8000c24:	481d      	ldr	r0, [pc, #116]	@ (8000c9c <HAL_FMC_MspInit+0x198>)
 8000c26:	f008 fda5 	bl	8009774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c42:	230c      	movs	r3, #12
 8000c44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <HAL_FMC_MspInit+0x19c>)
 8000c50:	f008 fd90 	bl	8009774 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c54:	2320      	movs	r3, #32
 8000c56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c72:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <HAL_FMC_MspInit+0x1a0>)
 8000c7a:	f008 fd7b 	bl	8009774 <HAL_GPIO_Init>
 8000c7e:	e000      	b.n	8000c82 <HAL_FMC_MspInit+0x17e>
    return;
 8000c80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c82:	37e0      	adds	r7, #224	@ 0xe0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000484 	.word	0x24000484
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58021000 	.word	0x58021000
 8000c94:	58021800 	.word	0x58021800
 8000c98:	58020c00 	.word	0x58020c00
 8000c9c:	58021400 	.word	0x58021400
 8000ca0:	58020800 	.word	0x58020800
 8000ca4:	58021c00 	.word	0x58021c00

08000ca8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cb0:	f7ff ff28 	bl	8000b04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_GPIO_Init>:
     PJ2   ------> LTDC_R3
     PJ3   ------> LTDC_R4
     PJ4   ------> LTDC_R5
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd2:	4bc0      	ldr	r3, [pc, #768]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	4abe      	ldr	r2, [pc, #760]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce2:	4bbc      	ldr	r3, [pc, #752]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf0:	4bb8      	ldr	r3, [pc, #736]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	4ab7      	ldr	r2, [pc, #732]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d00:	4bb4      	ldr	r3, [pc, #720]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4bb1      	ldr	r3, [pc, #708]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4aaf      	ldr	r2, [pc, #700]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4bad      	ldr	r3, [pc, #692]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	623b      	str	r3, [r7, #32]
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4ba9      	ldr	r3, [pc, #676]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	4aa8      	ldr	r2, [pc, #672]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3c:	4ba5      	ldr	r3, [pc, #660]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4ba2      	ldr	r3, [pc, #648]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	4aa0      	ldr	r2, [pc, #640]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5a:	4b9e      	ldr	r3, [pc, #632]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d68:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	4a99      	ldr	r2, [pc, #612]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d78:	4b96      	ldr	r3, [pc, #600]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b93      	ldr	r3, [pc, #588]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a91      	ldr	r2, [pc, #580]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b8f      	ldr	r3, [pc, #572]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da4:	4b8b      	ldr	r3, [pc, #556]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a8a      	ldr	r2, [pc, #552]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b87      	ldr	r3, [pc, #540]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dc2:	4b84      	ldr	r3, [pc, #528]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a82      	ldr	r2, [pc, #520]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b80      	ldr	r3, [pc, #512]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a7b      	ldr	r2, [pc, #492]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b78      	ldr	r3, [pc, #480]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	4b75      	ldr	r3, [pc, #468]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	4a73      	ldr	r2, [pc, #460]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0e:	4b71      	ldr	r3, [pc, #452]	@ (8000fd4 <MX_GPIO_Init+0x318>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TS_RST_Pin|SDwrt_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000e22:	486d      	ldr	r0, [pc, #436]	@ (8000fd8 <MX_GPIO_Init+0x31c>)
 8000e24:	f008 fe6e 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Enable9_Pin|DMAxfr_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000e2e:	486b      	ldr	r0, [pc, #428]	@ (8000fdc <MX_GPIO_Init+0x320>)
 8000e30:	f008 fe68 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUEled_GPIO_Port, BLUEled_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e3a:	4869      	ldr	r0, [pc, #420]	@ (8000fe0 <MX_GPIO_Init+0x324>)
 8000e3c:	f008 fe62 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|LED7_Pin|LED5_Pin|LED4_Pin
 8000e40:	2200      	movs	r2, #0
 8000e42:	f641 018c 	movw	r1, #6284	@ 0x188c
 8000e46:	4867      	ldr	r0, [pc, #412]	@ (8000fe4 <MX_GPIO_Init+0x328>)
 8000e48:	f008 fe5c 	bl	8009b04 <HAL_GPIO_WritePin>
                          |LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2132      	movs	r1, #50	@ 0x32
 8000e50:	4865      	ldr	r0, [pc, #404]	@ (8000fe8 <MX_GPIO_Init+0x32c>)
 8000e52:	f008 fe57 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, ADCCplt_Pin|Trigger_Pin|Tim8Cplt_Pin_Pin|Tim1Cplt_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000e5c:	4863      	ldr	r0, [pc, #396]	@ (8000fec <MX_GPIO_Init+0x330>)
 8000e5e:	f008 fe51 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	4862      	ldr	r0, [pc, #392]	@ (8000ff0 <MX_GPIO_Init+0x334>)
 8000e68:	f008 fe4c 	bl	8009b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK2 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e6c:	237e      	movs	r3, #126	@ 0x7e
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e7c:	230e      	movs	r3, #14
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	485b      	ldr	r0, [pc, #364]	@ (8000ff4 <MX_GPIO_Init+0x338>)
 8000e88:	f008 fc74 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	484e      	ldr	r0, [pc, #312]	@ (8000fd8 <MX_GPIO_Init+0x31c>)
 8000ea0:	f008 fc68 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TS_RST_Pin|SDwrt_Pin;
 8000ea4:	f242 0308 	movw	r3, #8200	@ 0x2008
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4846      	ldr	r0, [pc, #280]	@ (8000fd8 <MX_GPIO_Init+0x31c>)
 8000ebe:	f008 fc59 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4844      	ldr	r0, [pc, #272]	@ (8000ff0 <MX_GPIO_Init+0x334>)
 8000ede:	f008 fc49 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IIC_INT_Pin;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TS_IIC_INT_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4839      	ldr	r0, [pc, #228]	@ (8000fdc <MX_GPIO_Init+0x320>)
 8000ef8:	f008 fc3c 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable9_Pin;
 8000efc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(Enable9_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4831      	ldr	r0, [pc, #196]	@ (8000fdc <MX_GPIO_Init+0x320>)
 8000f16:	f008 fc2d 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ12 PJ13 PJ11 PJ10
                           PJ9 PJ0 PJ8 PJ7
                           PJ6 PJ1 PJ2 PJ3
                           PJ4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 8000f1a:	f643 73df 	movw	r3, #16351	@ 0x3fdf
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_7
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4830      	ldr	r0, [pc, #192]	@ (8000ff8 <MX_GPIO_Init+0x33c>)
 8000f38:	f008 fc1c 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUEled_Pin;
 8000f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(BLUEled_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4822      	ldr	r0, [pc, #136]	@ (8000fe0 <MX_GPIO_Init+0x324>)
 8000f56:	f008 fc0d 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED8_Pin|LED7_Pin|LED5_Pin|LED4_Pin;
 8000f5a:	f641 0384 	movw	r3, #6276	@ 0x1884
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	481c      	ldr	r0, [pc, #112]	@ (8000fe4 <MX_GPIO_Init+0x328>)
 8000f74:	f008 fbfe 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMAxfr_Pin;
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DMAxfr_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4813      	ldr	r0, [pc, #76]	@ (8000fdc <MX_GPIO_Init+0x320>)
 8000f90:	f008 fbf0 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f94:	2340      	movs	r3, #64	@ 0x40
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <MX_GPIO_Init+0x320>)
 8000fb0:	f008 fbe0 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fb4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc6:	230e      	movs	r3, #14
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	e014      	b.n	8000ffc <MX_GPIO_Init+0x340>
 8000fd2:	bf00      	nop
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020c00 	.word	0x58020c00
 8000fdc:	58021800 	.word	0x58021800
 8000fe0:	58022000 	.word	0x58022000
 8000fe4:	58020000 	.word	0x58020000
 8000fe8:	58020800 	.word	0x58020800
 8000fec:	58021c00 	.word	0x58021c00
 8000ff0:	58020400 	.word	0x58020400
 8000ff4:	58022800 	.word	0x58022800
 8000ff8:	58022400 	.word	0x58022400
 8000ffc:	484e      	ldr	r0, [pc, #312]	@ (8001138 <MX_GPIO_Init+0x47c>)
 8000ffe:	f008 fbb9 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001002:	2308      	movs	r3, #8
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4849      	ldr	r0, [pc, #292]	@ (800113c <MX_GPIO_Init+0x480>)
 8001016:	f008 fbad 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800102a:	2309      	movs	r3, #9
 800102c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800102e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001032:	4619      	mov	r1, r3
 8001034:	4842      	ldr	r0, [pc, #264]	@ (8001140 <MX_GPIO_Init+0x484>)
 8001036:	f008 fb9d 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 800103a:	2332      	movs	r3, #50	@ 0x32
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104e:	4619      	mov	r1, r3
 8001050:	483c      	ldr	r0, [pc, #240]	@ (8001144 <MX_GPIO_Init+0x488>)
 8001052:	f008 fb8f 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = JOYstick2_Pin|JOYstick1_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105e:	2301      	movs	r3, #1
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001066:	4619      	mov	r1, r3
 8001068:	4837      	ldr	r0, [pc, #220]	@ (8001148 <MX_GPIO_Init+0x48c>)
 800106a:	f008 fb83 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TimeSet_Pin;
 800106e:	2310      	movs	r3, #16
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TimeSet_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107e:	4619      	mov	r1, r3
 8001080:	4831      	ldr	r0, [pc, #196]	@ (8001148 <MX_GPIO_Init+0x48c>)
 8001082:	f008 fb77 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	482a      	ldr	r0, [pc, #168]	@ (800114c <MX_GPIO_Init+0x490>)
 80010a4:	f008 fb66 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = ADCCplt_Pin|Trigger_Pin|Tim8Cplt_Pin_Pin|Tim1Cplt_Pin;
 80010a8:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4821      	ldr	r0, [pc, #132]	@ (8001148 <MX_GPIO_Init+0x48c>)
 80010c2:	f008 fb57 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYstickPB_Pin;
 80010c6:	2340      	movs	r3, #64	@ 0x40
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(JOYstickPB_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d8:	4619      	mov	r1, r3
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <MX_GPIO_Init+0x494>)
 80010dc:	f008 fb4a 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOYstick3_Pin|JOYstick4_Pin;
 80010e0:	2306      	movs	r3, #6
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <MX_GPIO_Init+0x490>)
 80010f4:	f008 fb3e 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80010f8:	2308      	movs	r3, #8
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001100:	2302      	movs	r3, #2
 8001102:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4810      	ldr	r0, [pc, #64]	@ (8001150 <MX_GPIO_Init+0x494>)
 8001110:	f008 fb30 	bl	8009774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SensorPWRenable_Pin;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SensorPWRenable_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001128:	4619      	mov	r1, r3
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <MX_GPIO_Init+0x490>)
 800112c:	f008 fb22 	bl	8009774 <HAL_GPIO_Init>

}
 8001130:	bf00      	nop
 8001132:	3740      	adds	r7, #64	@ 0x40
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58022000 	.word	0x58022000
 800113c:	58021800 	.word	0x58021800
 8001140:	58021400 	.word	0x58021400
 8001144:	58020800 	.word	0x58020800
 8001148:	58021c00 	.word	0x58021c00
 800114c:	58020400 	.word	0x58020400
 8001150:	58020000 	.word	0x58020000

08001154 <MX_GPIO2Init>:

/* USER CODE BEGIN 2 */
void MX_GPIO2Init(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
//
//   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
//   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
//   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_tx;
DMA_HandleTypeDef hdma_i2c4_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_I2C1_Init+0x74>)
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <MX_I2C1_Init+0x78>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_I2C1_Init+0x74>)
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <MX_I2C1_Init+0x7c>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_I2C1_Init+0x74>)
 800117c:	2201      	movs	r2, #1
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <MX_I2C1_Init+0x74>)
 80011a0:	f008 fce4 	bl	8009b6c <HAL_I2C_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011aa:	f002 f803 	bl	80031b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ae:	2100      	movs	r1, #0
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <MX_I2C1_Init+0x74>)
 80011b2:	f00a ffaf 	bl	800c114 <HAL_I2CEx_ConfigAnalogFilter>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011bc:	f001 fffa 	bl	80031b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_I2C1_Init+0x74>)
 80011c4:	f00a fff1 	bl	800c1aa <HAL_I2CEx_ConfigDigitalFilter>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f001 fff1 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	24000488 	.word	0x24000488
 80011dc:	40005400 	.word	0x40005400
 80011e0:	00c0eaff 	.word	0x00c0eaff

080011e4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_I2C4_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <MX_I2C4_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_I2C4_Init+0x74>)
 80011f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <MX_I2C4_Init+0x7c>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_I2C4_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_I2C4_Init+0x74>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_I2C4_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_I2C4_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800121e:	480e      	ldr	r0, [pc, #56]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001220:	f008 fca4 	bl	8009b6c <HAL_I2C_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800122a:	f001 ffc3 	bl	80031b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001232:	f00a ff6f 	bl	800c114 <HAL_I2CEx_ConfigAnalogFilter>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800123c:	f001 ffba 	bl	80031b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_I2C4_Init+0x74>)
 8001244:	f00a ffb1 	bl	800c1aa <HAL_I2CEx_ConfigDigitalFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800124e:	f001 ffb1 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2400050c 	.word	0x2400050c
 800125c:	58001c00 	.word	0x58001c00
 8001260:	10707dbc 	.word	0x10707dbc

08001264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0c0      	sub	sp, #256	@ 0x100
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800127c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	22c0      	movs	r2, #192	@ 0xc0
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f018 fba7 	bl	80199e6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a8d      	ldr	r2, [pc, #564]	@ (80014d4 <HAL_I2C_MspInit+0x270>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d146      	bne.n	8001330 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a2:	f04f 0208 	mov.w	r2, #8
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00c fa67 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_MspInit+0x64>
    {
      Error_Handler();
 80012c4:	f001 ff76 	bl	80031b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b83      	ldr	r3, [pc, #524]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a82      	ldr	r2, [pc, #520]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fe:	2304      	movs	r3, #4
 8001300:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001308:	4619      	mov	r1, r3
 800130a:	4874      	ldr	r0, [pc, #464]	@ (80014dc <HAL_I2C_MspInit+0x278>)
 800130c:	f008 fa32 	bl	8009774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001310:	4b71      	ldr	r3, [pc, #452]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 8001312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001316:	4a70      	ldr	r2, [pc, #448]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800131c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 8001322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800132e:	e0cb      	b.n	80014c8 <HAL_I2C_MspInit+0x264>
  else if(i2cHandle->Instance==I2C4)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	@ (80014e0 <HAL_I2C_MspInit+0x27c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	f040 80c6 	bne.w	80014c8 <HAL_I2C_MspInit+0x264>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800133c:	f04f 0210 	mov.w	r2, #16
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_HSI;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f00c fa19 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_MspInit+0x100>
      Error_Handler();
 8001360:	f001 ff28 	bl	80031b4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001364:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a5b      	ldr	r2, [pc, #364]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b58      	ldr	r3, [pc, #352]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001382:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001386:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800139c:	2304      	movs	r3, #4
 800139e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013a6:	4619      	mov	r1, r3
 80013a8:	484e      	ldr	r0, [pc, #312]	@ (80014e4 <HAL_I2C_MspInit+0x280>)
 80013aa:	f008 f9e3 	bl	8009774 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013ae:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80013b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b4:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80013b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013be:	4b46      	ldr	r3, [pc, #280]	@ (80014d8 <HAL_I2C_MspInit+0x274>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = BDMA_Channel0;
 80013cc:	4b46      	ldr	r3, [pc, #280]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013ce:	4a47      	ldr	r2, [pc, #284]	@ (80014ec <HAL_I2C_MspInit+0x288>)
 80013d0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 80013d2:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013d4:	220e      	movs	r2, #14
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d8:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013da:	2240      	movs	r2, #64	@ 0x40
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001404:	4838      	ldr	r0, [pc, #224]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 8001406:	f005 fd0b 	bl	8006e20 <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 8001410:	f001 fed0 	bl	80031b4 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8001414:	230e      	movs	r3, #14
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    pSyncConfig.SyncEnable = DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
    pSyncConfig.EventEnable = ENABLE;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
    pSyncConfig.RequestNumber = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c4_tx, &pSyncConfig) != HAL_OK)
 8001432:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001436:	4619      	mov	r1, r3
 8001438:	482b      	ldr	r0, [pc, #172]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 800143a:	f008 f883 	bl	8009544 <HAL_DMAEx_ConfigMuxSync>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_I2C_MspInit+0x1e4>
      Error_Handler();
 8001444:	f001 feb6 	bl	80031b4 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a27      	ldr	r2, [pc, #156]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38
 800144e:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_I2C_MspInit+0x284>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c4_rx.Instance = BDMA_Channel1;
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001456:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <HAL_I2C_MspInit+0x290>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 800145a:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 800145c:	220d      	movs	r2, #13
 800145e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001466:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 800146e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001472:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800148c:	4818      	ldr	r0, [pc, #96]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 800148e:	f005 fcc7 	bl	8006e20 <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_MspInit+0x238>
      Error_Handler();
 8001498:	f001 fe8c 	bl	80031b4 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014a2:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <HAL_I2C_MspInit+0x28c>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	205f      	movs	r0, #95	@ 0x5f
 80014ae:	f005 fc82 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80014b2:	205f      	movs	r0, #95	@ 0x5f
 80014b4:	f005 fc99 	bl	8006dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2060      	movs	r0, #96	@ 0x60
 80014be:	f005 fc7a 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80014c2:	2060      	movs	r0, #96	@ 0x60
 80014c4:	f005 fc91 	bl	8006dea <HAL_NVIC_EnableIRQ>
}
 80014c8:	bf00      	nop
 80014ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40005400 	.word	0x40005400
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020400 	.word	0x58020400
 80014e0:	58001c00 	.word	0x58001c00
 80014e4:	58021c00 	.word	0x58021c00
 80014e8:	24000590 	.word	0x24000590
 80014ec:	58025408 	.word	0x58025408
 80014f0:	24000608 	.word	0x24000608
 80014f4:	5802541c 	.word	0x5802541c

080014f8 <RTC_Set>:
/* USER CODE BEGIN 0 */

int RTC_Set(
		uint8_t year, uint8_t month, uint8_t day,
		uint8_t hour, uint8_t min)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b08b      	sub	sp, #44	@ 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	4603      	mov	r3, r0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	460b      	mov	r3, r1
 8001510:	717b      	strb	r3, [r7, #5]
 8001512:	4613      	mov	r3, r2
 8001514:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef res;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	memset(&time, 0, sizeof(time));
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2214      	movs	r2, #20
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f018 fa61 	bl	80199e6 <memset>
	memset(&date, 0, sizeof(date));
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2204      	movs	r2, #4
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f018 fa5a 	bl	80199e6 <memset>

	date.WeekDay = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	733b      	strb	r3, [r7, #12]
	date.Year = year;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	73fb      	strb	r3, [r7, #15]
	date.Month = month;
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	737b      	strb	r3, [r7, #13]
	date.Date = day;
 800153e:	797b      	ldrb	r3, [r7, #5]
 8001540:	73bb      	strb	r3, [r7, #14]

	res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <RTC_Set+0xa4>)
 800154c:	f00e ff98 	bl	8010480 <HAL_RTC_SetDate>
 8001550:	4603      	mov	r3, r0
 8001552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(res != HAL_OK) {
 8001556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <RTC_Set+0x6a>
		Error_Handler();
 800155e:	f001 fe29 	bl	80031b4 <Error_Handler>
	}

	time.Hours = hour;
 8001562:	793b      	ldrb	r3, [r7, #4]
 8001564:	743b      	strb	r3, [r7, #16]
	time.Minutes = min;
 8001566:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800156a:	747b      	strb	r3, [r7, #17]
	time.Seconds = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	74bb      	strb	r3, [r7, #18]

	res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <RTC_Set+0xa4>)
 800157a:	f00e fe87 	bl	801028c <HAL_RTC_SetTime>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(res != HAL_OK) {
 8001584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <RTC_Set+0x98>
		Error_Handler();
 800158c:	f001 fe12 	bl	80031b4 <Error_Handler>
	}

	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	372c      	adds	r7, #44	@ 0x2c
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	24000bf4 	.word	0x24000bf4

080015a0 <JOYstickPOS>:
//=========================================================================================================================

//volatile uint8_t keyval=0;

uint8_t JOYstickPOS()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	uint8_t	keyval=0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
	keyval = HAL_GPIO_ReadPin (JOYstickPB_GPIO_Port,JOYstickPB_Pin)<<4 ;
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	481b      	ldr	r0, [pc, #108]	@ (800161c <JOYstickPOS+0x7c>)
 80015ae:	f008 fa91 	bl	8009ad4 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOB, JOYstick4_Pin)<<3 ;
 80015b8:	2102      	movs	r1, #2
 80015ba:	4819      	ldr	r0, [pc, #100]	@ (8001620 <JOYstickPOS+0x80>)
 80015bc:	f008 fa8a 	bl	8009ad4 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4413      	add	r3, r2
 80015ca:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOB, JOYstick3_Pin)<<2 ;
 80015cc:	2104      	movs	r1, #4
 80015ce:	4814      	ldr	r0, [pc, #80]	@ (8001620 <JOYstickPOS+0x80>)
 80015d0:	f008 fa80 	bl	8009ad4 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4413      	add	r3, r2
 80015de:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOH, JOYstick2_Pin)<<1 ;
 80015e0:	2104      	movs	r1, #4
 80015e2:	4810      	ldr	r0, [pc, #64]	@ (8001624 <JOYstickPOS+0x84>)
 80015e4:	f008 fa76 	bl	8009ad4 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4413      	add	r3, r2
 80015f2:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOH, JOYstick1_Pin) ;
 80015f4:	2108      	movs	r1, #8
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <JOYstickPOS+0x84>)
 80015f8:	f008 fa6c 	bl	8009ad4 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4413      	add	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
	keyval = (~keyval) & 0x1f;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	43db      	mvns	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	71fb      	strb	r3, [r7, #7]

	return keyval;
 8001612:	79fb      	ldrb	r3, [r7, #7]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58020000 	.word	0x58020000
 8001620:	58020400 	.word	0x58020400
 8001624:	58021c00 	.word	0x58021c00

08001628 <ledDisp>:
void ledDisp(uint8_t Localval)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	if(0x01 & Localval)
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <ledDisp+0x22>
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2110      	movs	r1, #16
 8001642:	4843      	ldr	r0, [pc, #268]	@ (8001750 <ledDisp+0x128>)
 8001644:	f008 fa5e 	bl	8009b04 <HAL_GPIO_WritePin>
 8001648:	e004      	b.n	8001654 <ledDisp+0x2c>
	else
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2110      	movs	r1, #16
 800164e:	4840      	ldr	r0, [pc, #256]	@ (8001750 <ledDisp+0x128>)
 8001650:	f008 fa58 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x02 & Localval)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <ledDisp+0x44>
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	483a      	ldr	r0, [pc, #232]	@ (8001750 <ledDisp+0x128>)
 8001666:	f008 fa4d 	bl	8009b04 <HAL_GPIO_WritePin>
 800166a:	e004      	b.n	8001676 <ledDisp+0x4e>
	else
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2120      	movs	r1, #32
 8001670:	4837      	ldr	r0, [pc, #220]	@ (8001750 <ledDisp+0x128>)
 8001672:	f008 fa47 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x04 & Localval)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <ledDisp+0x66>
		HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2102      	movs	r1, #2
 8001686:	4832      	ldr	r0, [pc, #200]	@ (8001750 <ledDisp+0x128>)
 8001688:	f008 fa3c 	bl	8009b04 <HAL_GPIO_WritePin>
 800168c:	e004      	b.n	8001698 <ledDisp+0x70>
	else
		HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2102      	movs	r1, #2
 8001692:	482f      	ldr	r0, [pc, #188]	@ (8001750 <ledDisp+0x128>)
 8001694:	f008 fa36 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x08 & Localval)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <ledDisp+0x88>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	482a      	ldr	r0, [pc, #168]	@ (8001754 <ledDisp+0x12c>)
 80016aa:	f008 fa2b 	bl	8009b04 <HAL_GPIO_WritePin>
 80016ae:	e004      	b.n	80016ba <ledDisp+0x92>
	else
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2180      	movs	r1, #128	@ 0x80
 80016b4:	4827      	ldr	r0, [pc, #156]	@ (8001754 <ledDisp+0x12c>)
 80016b6:	f008 fa25 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x10 & Localval)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <ledDisp+0xaa>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2104      	movs	r1, #4
 80016ca:	4822      	ldr	r0, [pc, #136]	@ (8001754 <ledDisp+0x12c>)
 80016cc:	f008 fa1a 	bl	8009b04 <HAL_GPIO_WritePin>
 80016d0:	e004      	b.n	80016dc <ledDisp+0xb4>
	else
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	481f      	ldr	r0, [pc, #124]	@ (8001754 <ledDisp+0x12c>)
 80016d8:	f008 fa14 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x20 & Localval)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <ledDisp+0xcc>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2108      	movs	r1, #8
 80016ec:	4819      	ldr	r0, [pc, #100]	@ (8001754 <ledDisp+0x12c>)
 80016ee:	f008 fa09 	bl	8009b04 <HAL_GPIO_WritePin>
 80016f2:	e004      	b.n	80016fe <ledDisp+0xd6>
	else
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2108      	movs	r1, #8
 80016f8:	4816      	ldr	r0, [pc, #88]	@ (8001754 <ledDisp+0x12c>)
 80016fa:	f008 fa03 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x40 & Localval)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <ledDisp+0xf0>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001710:	4810      	ldr	r0, [pc, #64]	@ (8001754 <ledDisp+0x12c>)
 8001712:	f008 f9f7 	bl	8009b04 <HAL_GPIO_WritePin>
 8001716:	e005      	b.n	8001724 <ledDisp+0xfc>
	else
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800171e:	480d      	ldr	r0, [pc, #52]	@ (8001754 <ledDisp+0x12c>)
 8001720:	f008 f9f0 	bl	8009b04 <HAL_GPIO_WritePin>
	if(0x80 & Localval)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da06      	bge.n	800173a <ledDisp+0x112>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001732:	4808      	ldr	r0, [pc, #32]	@ (8001754 <ledDisp+0x12c>)
 8001734:	f008 f9e6 	bl	8009b04 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);

}
 8001738:	e005      	b.n	8001746 <ledDisp+0x11e>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <ledDisp+0x12c>)
 8001742:	f008 f9df 	bl	8009b04 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	58020800 	.word	0x58020800
 8001754:	58020000 	.word	0x58020000

08001758 <setTime>:
void setTime()
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af02      	add	r7, sp, #8
	int8_t Jsp=0,TimeItem=0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t TimeArray[12];
	RTC_DateTypeDef FILEdate;
	RTC_TimeTypeDef FILEtime;
	HAL_StatusTypeDef res;

	ssd1306_Clear();
 800176a:	f002 fb49 	bl	8003e00 <ssd1306_Clear>

	res = HAL_RTC_GetTime(&hrtc, &FILEtime, RTC_FORMAT_BIN);
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	48cf      	ldr	r0, [pc, #828]	@ (8001ab4 <setTime+0x35c>)
 8001776:	f00e fe27 	bl	80103c8 <HAL_RTC_GetTime>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if(res != HAL_OK) {
 8001780:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <setTime+0x34>
		Error_Handler();
 8001788:	f001 fd14 	bl	80031b4 <Error_Handler>
	}

	res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	48c7      	ldr	r0, [pc, #796]	@ (8001ab4 <setTime+0x35c>)
 8001796:	f00e fefb 	bl	8010590 <HAL_RTC_GetDate>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if(res != HAL_OK) {
 80017a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <setTime+0x54>
		Error_Handler();
 80017a8:	f001 fd04 	bl	80031b4 <Error_Handler>
	}
    TimeArray[0] =(FILEdate.Year  /10) %10;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	4ac2      	ldr	r2, [pc, #776]	@ (8001ab8 <setTime+0x360>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4bbf      	ldr	r3, [pc, #764]	@ (8001ab8 <setTime+0x360>)
 80017ba:	fba3 1302 	umull	r1, r3, r3, r2
 80017be:	08d9      	lsrs	r1, r3, #3
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	763b      	strb	r3, [r7, #24]
    TimeArray[1] =(FILEdate.Year - TimeArray[0])%10;
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80017d8:	1ad2      	subs	r2, r2, r3
 80017da:	4bb8      	ldr	r3, [pc, #736]	@ (8001abc <setTime+0x364>)
 80017dc:	fb83 1302 	smull	r1, r3, r3, r2
 80017e0:	1099      	asrs	r1, r3, #2
 80017e2:	17d3      	asrs	r3, r2, #31
 80017e4:	1ac9      	subs	r1, r1, r3
 80017e6:	460b      	mov	r3, r1
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	1ad1      	subs	r1, r2, r3
 80017f0:	b24b      	sxtb	r3, r1
 80017f2:	767b      	strb	r3, [r7, #25]

    TimeArray[2] =(FILEdate.Month /10)%10;
 80017f4:	7d7b      	ldrb	r3, [r7, #21]
 80017f6:	4ab0      	ldr	r2, [pc, #704]	@ (8001ab8 <setTime+0x360>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4bad      	ldr	r3, [pc, #692]	@ (8001ab8 <setTime+0x360>)
 8001802:	fba3 1302 	umull	r1, r3, r3, r2
 8001806:	08d9      	lsrs	r1, r3, #3
 8001808:	460b      	mov	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	76bb      	strb	r3, [r7, #26]
    TimeArray[3] =(FILEdate.Month - TimeArray[2])%10;
 8001818:	7d7b      	ldrb	r3, [r7, #21]
 800181a:	461a      	mov	r2, r3
 800181c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	4ba6      	ldr	r3, [pc, #664]	@ (8001abc <setTime+0x364>)
 8001824:	fb83 1302 	smull	r1, r3, r3, r2
 8001828:	1099      	asrs	r1, r3, #2
 800182a:	17d3      	asrs	r3, r2, #31
 800182c:	1ac9      	subs	r1, r1, r3
 800182e:	460b      	mov	r3, r1
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	1ad1      	subs	r1, r2, r3
 8001838:	b24b      	sxtb	r3, r1
 800183a:	76fb      	strb	r3, [r7, #27]

    TimeArray[4] =(FILEdate.Date /10)%10;
 800183c:	7dbb      	ldrb	r3, [r7, #22]
 800183e:	4a9e      	ldr	r2, [pc, #632]	@ (8001ab8 <setTime+0x360>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b9b      	ldr	r3, [pc, #620]	@ (8001ab8 <setTime+0x360>)
 800184a:	fba3 1302 	umull	r1, r3, r3, r2
 800184e:	08d9      	lsrs	r1, r3, #3
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	773b      	strb	r3, [r7, #28]
    TimeArray[5] =(FILEdate.Date - TimeArray[4])%10;
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	461a      	mov	r2, r3
 8001864:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	4b94      	ldr	r3, [pc, #592]	@ (8001abc <setTime+0x364>)
 800186c:	fb83 1302 	smull	r1, r3, r3, r2
 8001870:	1099      	asrs	r1, r3, #2
 8001872:	17d3      	asrs	r3, r2, #31
 8001874:	1ac9      	subs	r1, r1, r3
 8001876:	460b      	mov	r3, r1
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	1ad1      	subs	r1, r2, r3
 8001880:	b24b      	sxtb	r3, r1
 8001882:	777b      	strb	r3, [r7, #29]

    TimeArray[6] =(FILEtime.Hours /10)%10;
 8001884:	783b      	ldrb	r3, [r7, #0]
 8001886:	4a8c      	ldr	r2, [pc, #560]	@ (8001ab8 <setTime+0x360>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <setTime+0x360>)
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	08d9      	lsrs	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	77bb      	strb	r3, [r7, #30]
    TimeArray[7] =(FILEtime.Hours - TimeArray[6])%10;
 80018a8:	783b      	ldrb	r3, [r7, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018b0:	1ad2      	subs	r2, r2, r3
 80018b2:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <setTime+0x364>)
 80018b4:	fb83 1302 	smull	r1, r3, r3, r2
 80018b8:	1099      	asrs	r1, r3, #2
 80018ba:	17d3      	asrs	r3, r2, #31
 80018bc:	1ac9      	subs	r1, r1, r3
 80018be:	460b      	mov	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	1ad1      	subs	r1, r2, r3
 80018c8:	b24b      	sxtb	r3, r1
 80018ca:	77fb      	strb	r3, [r7, #31]

    TimeArray[8] =(FILEtime.Minutes /10)%10;
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab8 <setTime+0x360>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b77      	ldr	r3, [pc, #476]	@ (8001ab8 <setTime+0x360>)
 80018da:	fba3 1302 	umull	r1, r3, r3, r2
 80018de:	08d9      	lsrs	r1, r3, #3
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	f887 3020 	strb.w	r3, [r7, #32]
    TimeArray[9] =(FILEtime.Minutes - TimeArray[8])%10;
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	461a      	mov	r2, r3
 80018f6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <setTime+0x364>)
 80018fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001902:	1099      	asrs	r1, r3, #2
 8001904:	17d3      	asrs	r3, r2, #31
 8001906:	1ac9      	subs	r1, r1, r3
 8001908:	460b      	mov	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	1ad1      	subs	r1, r2, r3
 8001912:	b24b      	sxtb	r3, r1
 8001914:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21


	while (1)
	{
		sprintf(rtext, "%4d / %2d / %2d",
				2000+TimeArray[0]*10+TimeArray[1],
 8001918:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800192a:	f997 2019 	ldrsb.w	r2, [r7, #25]
		sprintf(rtext, "%4d / %2d / %2d",
 800192e:	441a      	add	r2, r3
				TimeArray[2]*10+TimeArray[3],
 8001930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001934:	4619      	mov	r1, r3
 8001936:	460b      	mov	r3, r1
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4619      	mov	r1, r3
 8001940:	f997 301b 	ldrsb.w	r3, [r7, #27]
		sprintf(rtext, "%4d / %2d / %2d",
 8001944:	4419      	add	r1, r3
				TimeArray[4]*10+TimeArray[5]);
 8001946:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800194a:	4618      	mov	r0, r3
 800194c:	4603      	mov	r3, r0
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4403      	add	r3, r0
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f997 301d 	ldrsb.w	r3, [r7, #29]
		sprintf(rtext, "%4d / %2d / %2d",
 800195a:	4403      	add	r3, r0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	460b      	mov	r3, r1
 8001960:	4957      	ldr	r1, [pc, #348]	@ (8001ac0 <setTime+0x368>)
 8001962:	4858      	ldr	r0, [pc, #352]	@ (8001ac4 <setTime+0x36c>)
 8001964:	f017 ffdc 	bl	8019920 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 8001968:	2100      	movs	r1, #0
 800196a:	2002      	movs	r0, #2
 800196c:	f002 fa30 	bl	8003dd0 <ssd1306_SetCursor>
 8001970:	4b55      	ldr	r3, [pc, #340]	@ (8001ac8 <setTime+0x370>)
 8001972:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001976:	4853      	ldr	r0, [pc, #332]	@ (8001ac4 <setTime+0x36c>)
 8001978:	f002 fa04 	bl	8003d84 <ssd1306_WriteString>
 800197c:	f001 ffa4 	bl	80038c8 <ssd1306_UpdateScreen>
		sprintf(rtext," %2d:%2d",
				TimeArray[6]*10+TimeArray[7],
 8001980:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	461a      	mov	r2, r3
 8001990:	f997 301f 	ldrsb.w	r3, [r7, #31]
		sprintf(rtext," %2d:%2d",
 8001994:	441a      	add	r2, r3
				TimeArray[8]*10+TimeArray[9]);
 8001996:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800199a:	4619      	mov	r1, r3
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4619      	mov	r1, r3
 80019a6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
		sprintf(rtext," %2d:%2d",
 80019aa:	440b      	add	r3, r1
 80019ac:	4947      	ldr	r1, [pc, #284]	@ (8001acc <setTime+0x374>)
 80019ae:	4845      	ldr	r0, [pc, #276]	@ (8001ac4 <setTime+0x36c>)
 80019b0:	f017 ffb6 	bl	8019920 <siprintf>
		LCD_ShowString(2, FontH*2, 6,8 , White, rtext);
 80019b4:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <setTime+0x378>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	2002      	movs	r0, #2
 80019c0:	f002 fa06 	bl	8003dd0 <ssd1306_SetCursor>
 80019c4:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <setTime+0x370>)
 80019c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019ca:	483e      	ldr	r0, [pc, #248]	@ (8001ac4 <setTime+0x36c>)
 80019cc:	f002 f9da 	bl	8003d84 <ssd1306_WriteString>
 80019d0:	f001 ff7a 	bl	80038c8 <ssd1306_UpdateScreen>
		Jsp = JOYstickPOS();
 80019d4:	f7ff fde4 	bl	80015a0 <JOYstickPOS>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		HAL_Delay(25);
 80019de:	2019      	movs	r0, #25
 80019e0:	f003 fa26 	bl	8004e30 <HAL_Delay>
		switch (Jsp){
 80019e4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80019e8:	3b01      	subs	r3, #1
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	d894      	bhi.n	8001918 <setTime+0x1c0>
 80019ee:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <setTime+0x29c>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a35 	.word	0x08001a35
 80019f8:	08001b19 	.word	0x08001b19
 80019fc:	08001919 	.word	0x08001919
 8001a00:	08001a55 	.word	0x08001a55
 8001a04:	08001919 	.word	0x08001919
 8001a08:	08001919 	.word	0x08001919
 8001a0c:	08001919 	.word	0x08001919
 8001a10:	08001ad9 	.word	0x08001ad9
 8001a14:	08001919 	.word	0x08001919
 8001a18:	08001919 	.word	0x08001919
 8001a1c:	08001919 	.word	0x08001919
 8001a20:	08001919 	.word	0x08001919
 8001a24:	08001919 	.word	0x08001919
 8001a28:	08001919 	.word	0x08001919
 8001a2c:	08001919 	.word	0x08001919
 8001a30:	08001a75 	.word	0x08001a75
		case (1):{   //R
			if (TimeItem == 9) {TimeItem = 0;} else TimeItem++ ;
 8001a34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d103      	bne.n	8001a44 <setTime+0x2ec>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a42:	e0b2      	b.n	8001baa <setTime+0x452>
			if (TimeItem == 9) {TimeItem = 0;} else TimeItem++ ;
 8001a44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a52:	e0aa      	b.n	8001baa <setTime+0x452>
		}
		case (4):{  //L
			if (TimeItem>0) {TimeItem-- ;}
 8001a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dd07      	ble.n	8001a6c <setTime+0x314>
 8001a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			else MenuItem =9;
			break;
 8001a6a:	e09e      	b.n	8001baa <setTime+0x452>
			else MenuItem =9;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <setTime+0x37c>)
 8001a6e:	2209      	movs	r2, #9
 8001a70:	701a      	strb	r2, [r3, #0]
			break;
 8001a72:	e09a      	b.n	8001baa <setTime+0x452>
		}
		case (16):{ //UP
			TimeArray[TimeItem] == 9 ? TimeArray[TimeItem]=0: TimeArray[TimeItem]++;
 8001a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a78:	3328      	adds	r3, #40	@ 0x28
 8001a7a:	443b      	add	r3, r7
 8001a7c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d107      	bne.n	8001a94 <setTime+0x33c>
 8001a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a88:	3328      	adds	r3, #40	@ 0x28
 8001a8a:	443b      	add	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001a92:	e08a      	b.n	8001baa <setTime+0x452>
			TimeArray[TimeItem] == 9 ? TimeArray[TimeItem]=0: TimeArray[TimeItem]++;
 8001a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a98:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001a9c:	443a      	add	r2, r7
 8001a9e:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	b252      	sxtb	r2, r2
 8001aaa:	3328      	adds	r3, #40	@ 0x28
 8001aac:	443b      	add	r3, r7
 8001aae:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001ab2:	e07a      	b.n	8001baa <setTime+0x452>
 8001ab4:	24000bf4 	.word	0x24000bf4
 8001ab8:	cccccccd 	.word	0xcccccccd
 8001abc:	66666667 	.word	0x66666667
 8001ac0:	0801a99c 	.word	0x0801a99c
 8001ac4:	24000008 	.word	0x24000008
 8001ac8:	24000000 	.word	0x24000000
 8001acc:	0801a9ac 	.word	0x0801a9ac
 8001ad0:	240008d8 	.word	0x240008d8
 8001ad4:	240008de 	.word	0x240008de
		}
		case (8):{ //DN
			TimeArray[TimeItem] == 0 ? TimeArray[TimeItem]=9 :TimeArray[TimeItem]--;
 8001ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001adc:	3328      	adds	r3, #40	@ 0x28
 8001ade:	443b      	add	r3, r7
 8001ae0:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <setTime+0x3a0>
 8001ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001aec:	3328      	adds	r3, #40	@ 0x28
 8001aee:	443b      	add	r3, r7
 8001af0:	2209      	movs	r2, #9
 8001af2:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001af6:	e058      	b.n	8001baa <setTime+0x452>
			TimeArray[TimeItem] == 0 ? TimeArray[TimeItem]=9 :TimeArray[TimeItem]--;
 8001af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001afc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001b00:	443a      	add	r2, r7
 8001b02:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	b252      	sxtb	r2, r2
 8001b0e:	3328      	adds	r3, #40	@ 0x28
 8001b10:	443b      	add	r3, r7
 8001b12:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001b16:	e048      	b.n	8001baa <setTime+0x452>
		}
		case (2):{
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b18:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2d8      	uxtb	r0, r3
					TimeArray[2]*10+TimeArray[3],
 8001b32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b46:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b48:	4413      	add	r3, r2
 8001b4a:	b2d9      	uxtb	r1, r3
					TimeArray[4]*10+TimeArray[5],
 8001b4c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001b60:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b62:	4413      	add	r3, r2
 8001b64:	b2dc      	uxtb	r4, r3
					TimeArray[6]*10+TimeArray[7],
 8001b66:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b7a:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b2dd      	uxtb	r5, r3
					TimeArray[8]*10+TimeArray[9]);
 8001b80:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001b94:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b96:	4413      	add	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	f7ff fcaa 	bl	80014f8 <RTC_Set>

			ssd1306_Clear();
 8001ba4:	f002 f92c 	bl	8003e00 <ssd1306_Clear>

			return;
 8001ba8:	e000      	b.n	8001bac <setTime+0x454>
		sprintf(rtext, "%4d / %2d / %2d",
 8001baa:	e6b5      	b.n	8001918 <setTime+0x1c0>

		}

	}

}
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	bf00      	nop

08001bb4 <ProcessBlock>:
	return m;
}

//=========================================================================================================================
void ProcessBlock()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8001bba:	af00      	add	r7, sp, #0
	uint32_t hist[128];
	uint32_t sharp[128];
	memset(hist,0,128*sizeof(uint32_t));
 8001bbc:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f017 ff0d 	bl	80199e6 <memset>
	memset(sharp,0,128*sizeof(uint32_t));
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f017 ff06 	bl	80199e6 <memset>
	uint32_t CS = CurrentSlot %SLOTS ? (CurrentSlot-2) %SLOTS : CurrentSlot %SLOTS ;
 8001bda:	4b8d      	ldr	r3, [pc, #564]	@ (8001e10 <ProcessBlock+0x25c>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	4b8d      	ldr	r3, [pc, #564]	@ (8001e14 <ProcessBlock+0x260>)
 8001be0:	fba3 2301 	umull	r2, r3, r3, r1
 8001be4:	0ada      	lsrs	r2, r3, #11
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	1aca      	subs	r2, r1, r3
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d00d      	beq.n	8001c10 <ProcessBlock+0x5c>
 8001bf4:	4b86      	ldr	r3, [pc, #536]	@ (8001e10 <ProcessBlock+0x25c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	1e99      	subs	r1, r3, #2
 8001bfa:	4b86      	ldr	r3, [pc, #536]	@ (8001e14 <ProcessBlock+0x260>)
 8001bfc:	fba3 2301 	umull	r2, r3, r3, r1
 8001c00:	0adb      	lsrs	r3, r3, #11
 8001c02:	461a      	mov	r2, r3
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	0213      	lsls	r3, r2, #8
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	1a8b      	subs	r3, r1, r2
 8001c0e:	e00b      	b.n	8001c28 <ProcessBlock+0x74>
 8001c10:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <ProcessBlock+0x25c>)
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	4b7f      	ldr	r3, [pc, #508]	@ (8001e14 <ProcessBlock+0x260>)
 8001c16:	fba3 2301 	umull	r2, r3, r3, r1
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	0213      	lsls	r3, r2, #8
 8001c24:	461a      	mov	r2, r3
 8001c26:	1a8b      	subs	r3, r1, r2
 8001c28:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	uint16_t *linptr = (uint16_t *)(SDRAMAREA+((CS%SLOTS)*(Npixels*2)));
 8001c2c:	f8d7 1414 	ldr.w	r1, [r7, #1044]	@ 0x414
 8001c30:	4b78      	ldr	r3, [pc, #480]	@ (8001e14 <ProcessBlock+0x260>)
 8001c32:	fba3 2301 	umull	r2, r3, r3, r1
 8001c36:	0ada      	lsrs	r2, r3, #11
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	1aca      	subs	r2, r1, r3
 8001c42:	f502 23c0 	add.w	r3, r2, #393216	@ 0x60000
 8001c46:	035b      	lsls	r3, r3, #13
 8001c48:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	uint32_t norm =0;//,zero=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
	uint32_t pindex;
	uint32_t partialdiff;//,oldp;

	for (int i=0 ; i < Npixels ;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001c58:	e076      	b.n	8001d48 <ProcessBlock+0x194>
		pindex = linptr[i];
 8001c5a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001c64:	4413      	add	r3, r2
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

		pindex = pindex>>9; //segments of 128(of 65536)
 8001c6c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001c70:	0a5b      	lsrs	r3, r3, #9
 8001c72:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
		if (pindex > 127) pindex = 127;
 8001c76:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c7c:	d902      	bls.n	8001c84 <ProcessBlock+0xd0>
 8001c7e:	237f      	movs	r3, #127	@ 0x7f
 8001c80:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
		hist[pindex]++;
 8001c84:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c88:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001c8c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	1c59      	adds	r1, r3, #1
 8001c96:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c9a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001c9e:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if (norm < hist[pindex])
 8001ca6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001caa:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001cae:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	f8d7 2424 	ldr.w	r2, [r7, #1060]	@ 0x424
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d209      	bcs.n	8001cd2 <ProcessBlock+0x11e>
			  norm = hist[pindex]; //find local max
 8001cbe:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cc2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001cc6:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424

		partialdiff = abs((int32_t)linptr[i] - (int32_t)linptr[i+1]);
 8001cd2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001cee:	4413      	add	r3, r2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bfb8      	it	lt
 8001cf8:	425b      	neglt	r3, r3
 8001cfa:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		if (partialdiff > sharp[i/(Npixels>>7)] )
 8001cfe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da00      	bge.n	8001d08 <ProcessBlock+0x154>
 8001d06:	331f      	adds	r3, #31
 8001d08:	115b      	asrs	r3, r3, #5
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d10:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d90e      	bls.n	8001d3e <ProcessBlock+0x18a>
			sharp[i/(Npixels>>7)] = partialdiff;
 8001d20:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da00      	bge.n	8001d2a <ProcessBlock+0x176>
 8001d28:	331f      	adds	r3, #31
 8001d2a:	115b      	asrs	r3, r3, #5
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d32:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001d36:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001d3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for (int i=0 ; i < Npixels ;i++){
 8001d3e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d42:	3301      	adds	r3, #1
 8001d44:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001d48:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d50:	db83      	blt.n	8001c5a <ProcessBlock+0xa6>
	}
	ssd1306_Clear();
 8001d52:	f002 f855 	bl	8003e00 <ssd1306_Clear>

	for (int i=0 ;i<128;i++){
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8001d5c:	e04c      	b.n	8001df8 <ProcessBlock+0x244>
		if (hist[i] != 0)
 8001d5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d62:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d66:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d022      	beq.n	8001db8 <ProcessBlock+0x204>
		{
			uint32_t v= hist[i]*48/norm;
 8001d72:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d76:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d7a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
			ssd1306_DrawVerticalLine(i, (int16_t)48-v ,(int16_t) v);
 8001d98:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001d9c:	b218      	sxth	r0, r3
 8001d9e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8001db0:	b212      	sxth	r2, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f001 fe28 	bl	8003a08 <ssd1306_DrawVerticalLine>
		}
		uint32_t w = sharp[i]>>10;
 8001db8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001dbc:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001dc0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	0a9b      	lsrs	r3, r3, #10
 8001dca:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
		ssd1306_DrawVerticalLine(i, (int16_t)64-w ,(int16_t) w);
 8001dce:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001dd2:	b218      	sxth	r0, r3
 8001dd4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8001de6:	b212      	sxth	r2, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f001 fe0d 	bl	8003a08 <ssd1306_DrawVerticalLine>
	for (int i=0 ;i<128;i++){
 8001dee:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8001df8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dfe:	ddae      	ble.n	8001d5e <ProcessBlock+0x1aa>

	}

	ssd1306_UpdateScreen();
 8001e00:	f001 fd62 	bl	80038c8 <ssd1306_UpdateScreen>


	//	printf("norm %d , Zeros %d\n",norm,zero);


}
 8001e04:	bf00      	nop
 8001e06:	f507 6785 	add.w	r7, r7, #1064	@ 0x428
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	24000b7c 	.word	0x24000b7c
 8001e14:	88888889 	.word	0x88888889

08001e18 <Histo>:
//=========================================================================================================================
void Histo()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	ssd1306_Clear();
 8001e1c:	f001 fff0 	bl	8003e00 <ssd1306_Clear>
	//HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET); //Clear Error light
	TransferComplete7=0;
 8001e20:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <Histo+0x11c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	TransferCompleteelse=0;
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <Histo+0x120>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4843      	ldr	r0, [pc, #268]	@ (8001f3c <Histo+0x124>)
 8001e30:	f010 fd44 	bl	80128bc <HAL_TIM_PWM_Stop>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <Histo+0x26>
 8001e3a:	f001 f9bb 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 8001e3e:	2104      	movs	r1, #4
 8001e40:	483e      	ldr	r0, [pc, #248]	@ (8001f3c <Histo+0x124>)
 8001e42:	f010 fd3b 	bl	80128bc <HAL_TIM_PWM_Stop>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <Histo+0x38>
 8001e4c:	f001 f9b2 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 8001e50:	2108      	movs	r1, #8
 8001e52:	483a      	ldr	r0, [pc, #232]	@ (8001f3c <Histo+0x124>)
 8001e54:	f010 fd32 	bl	80128bc <HAL_TIM_PWM_Stop>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <Histo+0x4a>
 8001e5e:	f001 f9a9 	bl	80031b4 <Error_Handler>
//			HAL_TIM_Base_Stop(&htim1);
//			HAL_TIM_Base_Stop_IT(&htim1);

	htim1.Init.Period = (Exposure*TIMEDenom/TIMENumer)-1;
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <Histo+0x128>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4a36      	ldr	r2, [pc, #216]	@ (8001f44 <Histo+0x12c>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3b01      	subs	r3, #1
 8001e72:	4a32      	ldr	r2, [pc, #200]	@ (8001f3c <Histo+0x124>)
 8001e74:	60d3      	str	r3, [r2, #12]
	htim1.Init.RepetitionCounter = NumLines-1;
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <Histo+0x130>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <Histo+0x124>)
 8001e7e:	6153      	str	r3, [r2, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)Error_Handler();
 8001e80:	482e      	ldr	r0, [pc, #184]	@ (8001f3c <Histo+0x124>)
 8001e82:	f010 fa2b 	bl	80122dc <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <Histo+0x78>
 8001e8c:	f001 f992 	bl	80031b4 <Error_Handler>

	Sequence=SEQ_Running;
 8001e90:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <Histo+0x134>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
	CurrentSlot=0;
 8001e96:	4b2e      	ldr	r3, [pc, #184]	@ (8001f50 <Histo+0x138>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
	LastWrittenSlot=0;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f54 <Histo+0x13c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 8001ea2:	482d      	ldr	r0, [pc, #180]	@ (8001f58 <Histo+0x140>)
 8001ea4:	f010 fa7e 	bl	80123a4 <HAL_TIM_Base_Start>
 8001ea8:	482c      	ldr	r0, [pc, #176]	@ (8001f5c <Histo+0x144>)
 8001eaa:	f010 fa7b 	bl	80123a4 <HAL_TIM_Base_Start>
 8001eae:	482c      	ldr	r0, [pc, #176]	@ (8001f60 <Histo+0x148>)
 8001eb0:	f010 fa78 	bl	80123a4 <HAL_TIM_Base_Start>

	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))Error_Handler();
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4821      	ldr	r0, [pc, #132]	@ (8001f3c <Histo+0x124>)
 8001eb8:	f010 fbf2 	bl	80126a0 <HAL_TIM_PWM_Start>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <Histo+0xae>
 8001ec2:	f001 f977 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))Error_Handler();
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	481c      	ldr	r0, [pc, #112]	@ (8001f3c <Histo+0x124>)
 8001eca:	f010 fbe9 	bl	80126a0 <HAL_TIM_PWM_Start>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <Histo+0xc0>
 8001ed4:	f001 f96e 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3))Error_Handler();
 8001ed8:	2108      	movs	r1, #8
 8001eda:	4818      	ldr	r0, [pc, #96]	@ (8001f3c <Histo+0x124>)
 8001edc:	f010 fbe0 	bl	80126a0 <HAL_TIM_PWM_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <Histo+0xd2>
 8001ee6:	f001 f965 	bl	80031b4 <Error_Handler>
//	HAL_TIM_Base_Start(&htim1);
//	HAL_TIM_Base_Start_IT(&htim1);

	HAL_Delay(80);
 8001eea:	2050      	movs	r0, #80	@ 0x50
 8001eec:	f002 ffa0 	bl	8004e30 <HAL_Delay>
	oldState = GPIO_PIN_SET;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <Histo+0x14c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
	{
		while(RunState != HALT && (SEQ_Complete != Sequence)){
 8001ef6:	e010      	b.n	8001f1a <Histo+0x102>
			if (CurrentSlot >2)ProcessBlock();
 8001ef8:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <Histo+0x138>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <Histo+0xec>
 8001f00:	f7ff fe58 	bl	8001bb4 <ProcessBlock>
			if (0 != JOYstickPOS()){
 8001f04:	f7ff fb4c 	bl	80015a0 <JOYstickPOS>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <Histo+0x102>
				RunState = HALT;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <Histo+0x150>)
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
				Sequence=SEQ_Complete;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <Histo+0x134>)
 8001f16:	2203      	movs	r2, #3
 8001f18:	701a      	strb	r2, [r3, #0]
		while(RunState != HALT && (SEQ_Complete != Sequence)){
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <Histo+0x150>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d003      	beq.n	8001f2a <Histo+0x112>
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <Histo+0x134>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d1e6      	bne.n	8001ef8 <Histo+0xe0>
			}
		}

	}
	TrialEnd();
 8001f2a:	f000 f9b3 	bl	8002294 <TrialEnd>

}//complete
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	24000b64 	.word	0x24000b64
 8001f38:	24000b68 	.word	0x24000b68
 8001f3c:	24000ccc 	.word	0x24000ccc
 8001f40:	24000b24 	.word	0x24000b24
 8001f44:	cccccccd 	.word	0xcccccccd
 8001f48:	24000b28 	.word	0x24000b28
 8001f4c:	240008da 	.word	0x240008da
 8001f50:	24000b7c 	.word	0x24000b7c
 8001f54:	24000b80 	.word	0x24000b80
 8001f58:	24000d88 	.word	0x24000d88
 8001f5c:	24000e44 	.word	0x24000e44
 8001f60:	24000f00 	.word	0x24000f00
 8001f64:	240008d9 	.word	0x240008d9
 8001f68:	24000208 	.word	0x24000208

08001f6c <TrialStart>:

//----------------------------------------------------------------------------
void TrialStart()
{
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af06      	add	r7, sp, #24
	if( SDstate == SDnotopen)
 8001f72:	4ba3      	ldr	r3, [pc, #652]	@ (8002200 <TrialStart+0x294>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 813e 	bne.w	80021f8 <TrialStart+0x28c>
	{
		ssd1306_Clear();
 8001f7c:	f001 ff40 	bl	8003e00 <ssd1306_Clear>
//		IRQCNT_HAL_UART_TxCpltCallback=0;
		IRQCNT_HAL_ADC_ConvCpltCallback=0;
 8001f80:	4ba0      	ldr	r3, [pc, #640]	@ (8002204 <TrialStart+0x298>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
//		IRQCNT_HAL_TIM_TriggerCallback1=0;
//		IRQCNT_HAL_TIM_TriggerCallback2=0;
//		IRQCNT_HAL_TIM_TriggerCallback3=0;
//		IRQCNT_HAL_TIM_TriggerCallback8=0;
//		HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET); //Clear Error light
		TransferComplete7=0;
 8001f86:	4ba0      	ldr	r3, [pc, #640]	@ (8002208 <TrialStart+0x29c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
		TransferCompleteelse=0;
 8001f8c:	4b9f      	ldr	r3, [pc, #636]	@ (800220c <TrialStart+0x2a0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
		DACval=0;BuffDiffMax=0;
 8001f92:	4b9f      	ldr	r3, [pc, #636]	@ (8002210 <TrialStart+0x2a4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4b9e      	ldr	r3, [pc, #632]	@ (8002214 <TrialStart+0x2a8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
#ifdef DISK
		f_err_code = f_mount( &FATFS_Obj, (TCHAR const*)SDPath,0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	499d      	ldr	r1, [pc, #628]	@ (8002218 <TrialStart+0x2ac>)
 8001fa2:	489e      	ldr	r0, [pc, #632]	@ (800221c <TrialStart+0x2b0>)
 8001fa4:	f016 fcc6 	bl	8018934 <f_mount>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b9c      	ldr	r3, [pc, #624]	@ (8002220 <TrialStart+0x2b4>)
 8001fae:	701a      	strb	r2, [r3, #0]
		if (f_err_code != FR_OK )
 8001fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002220 <TrialStart+0x2b4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <TrialStart+0x5c>
		{
			printf("Diskerror%d /n",f_err_code);
 8001fb8:	4b99      	ldr	r3, [pc, #612]	@ (8002220 <TrialStart+0x2b4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4899      	ldr	r0, [pc, #612]	@ (8002224 <TrialStart+0x2b8>)
 8001fc0:	f017 fc9c 	bl	80198fc <iprintf>
			{
				Error_Handler();
 8001fc4:	f001 f8f6 	bl	80031b4 <Error_Handler>
			}
		}
#endif
		HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 8001fc8:	4897      	ldr	r0, [pc, #604]	@ (8002228 <TrialStart+0x2bc>)
 8001fca:	f010 f9eb 	bl	80123a4 <HAL_TIM_Base_Start>
 8001fce:	4897      	ldr	r0, [pc, #604]	@ (800222c <TrialStart+0x2c0>)
 8001fd0:	f010 f9e8 	bl	80123a4 <HAL_TIM_Base_Start>
 8001fd4:	4896      	ldr	r0, [pc, #600]	@ (8002230 <TrialStart+0x2c4>)
 8001fd6:	f010 f9e5 	bl	80123a4 <HAL_TIM_Base_Start>

				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4895      	ldr	r0, [pc, #596]	@ (8002234 <TrialStart+0x2c8>)
 8001fde:	f010 fc6d 	bl	80128bc <HAL_TIM_PWM_Stop>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <TrialStart+0x80>
 8001fe8:	f001 f8e4 	bl	80031b4 <Error_Handler>
				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 8001fec:	2104      	movs	r1, #4
 8001fee:	4891      	ldr	r0, [pc, #580]	@ (8002234 <TrialStart+0x2c8>)
 8001ff0:	f010 fc64 	bl	80128bc <HAL_TIM_PWM_Stop>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <TrialStart+0x92>
 8001ffa:	f001 f8db 	bl	80031b4 <Error_Handler>
				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 8001ffe:	2108      	movs	r1, #8
 8002000:	488c      	ldr	r0, [pc, #560]	@ (8002234 <TrialStart+0x2c8>)
 8002002:	f010 fc5b 	bl	80128bc <HAL_TIM_PWM_Stop>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <TrialStart+0xa4>
 800200c:	f001 f8d2 	bl	80031b4 <Error_Handler>
//				HAL_TIM_Base_Stop(&htim1);
//				HAL_TIM_Base_Stop_IT(&htim1);

		htim1.Init.Period = (Exposure*TIMEDenom/TIMENumer)-1;
 8002010:	4b89      	ldr	r3, [pc, #548]	@ (8002238 <TrialStart+0x2cc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4a89      	ldr	r2, [pc, #548]	@ (800223c <TrialStart+0x2d0>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3b01      	subs	r3, #1
 8002020:	4a84      	ldr	r2, [pc, #528]	@ (8002234 <TrialStart+0x2c8>)
 8002022:	60d3      	str	r3, [r2, #12]
		htim1.Init.RepetitionCounter = NumLines-1;
 8002024:	4b86      	ldr	r3, [pc, #536]	@ (8002240 <TrialStart+0x2d4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a82      	ldr	r2, [pc, #520]	@ (8002234 <TrialStart+0x2c8>)
 800202c:	6153      	str	r3, [r2, #20]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK)Error_Handler();
 800202e:	4881      	ldr	r0, [pc, #516]	@ (8002234 <TrialStart+0x2c8>)
 8002030:	f010 f954 	bl	80122dc <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <TrialStart+0xd2>
 800203a:	f001 f8bb 	bl	80031b4 <Error_Handler>


		RTC_DateTypeDef FILEdate;
		HAL_StatusTypeDef res;

		res = HAL_RTC_GetTime(&hrtc, &Filetime, RTC_FORMAT_BIN);
 800203e:	2200      	movs	r2, #0
 8002040:	4980      	ldr	r1, [pc, #512]	@ (8002244 <TrialStart+0x2d8>)
 8002042:	4881      	ldr	r0, [pc, #516]	@ (8002248 <TrialStart+0x2dc>)
 8002044:	f00e f9c0 	bl	80103c8 <HAL_RTC_GetTime>
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
		if(res != HAL_OK) Error_Handler();
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <TrialStart+0xea>
 8002052:	f001 f8af 	bl	80031b4 <Error_Handler>


		res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 8002056:	463b      	mov	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	487a      	ldr	r0, [pc, #488]	@ (8002248 <TrialStart+0x2dc>)
 800205e:	f00e fa97 	bl	8010590 <HAL_RTC_GetDate>
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
		if(res != HAL_OK) Error_Handler();
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <TrialStart+0x104>
 800206c:	f001 f8a2 	bl	80031b4 <Error_Handler>


		HAL_Delay(800);
 8002070:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002074:	f002 fedc 	bl	8004e30 <HAL_Delay>

		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
				FILEdate.Year,
 8002078:	78fb      	ldrb	r3, [r7, #3]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800207a:	461e      	mov	r6, r3
				FILEdate.Month,
 800207c:	787b      	ldrb	r3, [r7, #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800207e:	469c      	mov	ip, r3
				FILEdate.Date,
 8002080:	78bb      	ldrb	r3, [r7, #2]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002082:	4619      	mov	r1, r3
				Filetime.Hours,
 8002084:	4b6f      	ldr	r3, [pc, #444]	@ (8002244 <TrialStart+0x2d8>)
 8002086:	781b      	ldrb	r3, [r3, #0]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002088:	4618      	mov	r0, r3
				Filetime.Minutes,
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <TrialStart+0x2d8>)
 800208c:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800208e:	461c      	mov	r4, r3
				Filetime.Seconds,
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <TrialStart+0x2d8>)
 8002092:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002094:	461d      	mov	r5, r3
				SelectNEStateValue[SelectNEState]/1000);
 8002096:	4b6d      	ldr	r3, [pc, #436]	@ (800224c <TrialStart+0x2e0>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	461a      	mov	r2, r3
 800209e:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <TrialStart+0x2e4>)
 80020a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 80020a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002254 <TrialStart+0x2e8>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	9304      	str	r3, [sp, #16]
 80020b0:	9503      	str	r5, [sp, #12]
 80020b2:	9402      	str	r4, [sp, #8]
 80020b4:	9001      	str	r0, [sp, #4]
 80020b6:	9100      	str	r1, [sp, #0]
 80020b8:	4663      	mov	r3, ip
 80020ba:	4632      	mov	r2, r6
 80020bc:	4966      	ldr	r1, [pc, #408]	@ (8002258 <TrialStart+0x2ec>)
 80020be:	4867      	ldr	r0, [pc, #412]	@ (800225c <TrialStart+0x2f0>)
 80020c0:	f017 fc2e 	bl	8019920 <siprintf>
#ifdef DISK
		f_err_code = f_open(&fp,( char *)rtext,FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80020c4:	220b      	movs	r2, #11
 80020c6:	4965      	ldr	r1, [pc, #404]	@ (800225c <TrialStart+0x2f0>)
 80020c8:	4865      	ldr	r0, [pc, #404]	@ (8002260 <TrialStart+0x2f4>)
 80020ca:	f016 fc79 	bl	80189c0 <f_open>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <TrialStart+0x2b4>)
 80020d4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(800);
 80020d6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80020da:	f002 fea9 	bl	8004e30 <HAL_Delay>
		if (f_err_code != 		FR_OK	){
 80020de:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <TrialStart+0x2b4>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <TrialStart+0x19c>
			LCD_ShowString(2, 0, 6,8, White, "FC Error");
 80020e6:	2100      	movs	r1, #0
 80020e8:	2002      	movs	r0, #2
 80020ea:	f001 fe71 	bl	8003dd0 <ssd1306_SetCursor>
 80020ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002264 <TrialStart+0x2f8>)
 80020f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020f4:	485c      	ldr	r0, [pc, #368]	@ (8002268 <TrialStart+0x2fc>)
 80020f6:	f001 fe45 	bl	8003d84 <ssd1306_WriteString>
 80020fa:	f001 fbe5 	bl	80038c8 <ssd1306_UpdateScreen>
			f_close(&fp);
 80020fe:	4858      	ldr	r0, [pc, #352]	@ (8002260 <TrialStart+0x2f4>)
 8002100:	f017 f9ed 	bl	80194de <f_close>
			Error_Handler();
 8002104:	f001 f856 	bl	80031b4 <Error_Handler>
//			f_close(&fp);
//			Error_Handler();
//		}

#endif
		secStart=((uint32_t)Filetime.Hours*3600)+((uint32_t)Filetime.Minutes*60)+(uint32_t)Filetime.Seconds;
 8002108:	4b4e      	ldr	r3, [pc, #312]	@ (8002244 <TrialStart+0x2d8>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	4b4b      	ldr	r3, [pc, #300]	@ (8002244 <TrialStart+0x2d8>)
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	4619      	mov	r1, r3
 800211c:	460b      	mov	r3, r1
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a5b      	subs	r3, r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	4a47      	ldr	r2, [pc, #284]	@ (8002244 <TrialStart+0x2d8>)
 8002128:	7892      	ldrb	r2, [r2, #2]
 800212a:	4413      	add	r3, r2
 800212c:	4a4f      	ldr	r2, [pc, #316]	@ (800226c <TrialStart+0x300>)
 800212e:	6013      	str	r3, [r2, #0]
		LCD_ShowString(2, FontH, 6, 8, White,rtext);
 8002130:	4b4f      	ldr	r3, [pc, #316]	@ (8002270 <TrialStart+0x304>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	2002      	movs	r0, #2
 8002138:	f001 fe4a 	bl	8003dd0 <ssd1306_SetCursor>
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <TrialStart+0x2f8>)
 800213e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002142:	4846      	ldr	r0, [pc, #280]	@ (800225c <TrialStart+0x2f0>)
 8002144:	f001 fe1e 	bl	8003d84 <ssd1306_WriteString>
 8002148:	f001 fbbe 	bl	80038c8 <ssd1306_UpdateScreen>

		SDstate=SDopen;
 800214c:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <TrialStart+0x294>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
		sprintf((char *)rtext,"Run %d %d  ",SelectNEStateValue[SelectNEState],SelectNLStateValue[SelectNLState]);
 8002152:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <TrialStart+0x2e0>)
 8002154:	f993 3000 	ldrsb.w	r3, [r3]
 8002158:	461a      	mov	r2, r3
 800215a:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <TrialStart+0x2e4>)
 800215c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002160:	4619      	mov	r1, r3
 8002162:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <TrialStart+0x308>)
 8002164:	f993 3000 	ldrsb.w	r3, [r3]
 8002168:	461a      	mov	r2, r3
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <TrialStart+0x30c>)
 800216c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002170:	460a      	mov	r2, r1
 8002172:	4942      	ldr	r1, [pc, #264]	@ (800227c <TrialStart+0x310>)
 8002174:	4839      	ldr	r0, [pc, #228]	@ (800225c <TrialStart+0x2f0>)
 8002176:	f017 fbd3 	bl	8019920 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 800217a:	2100      	movs	r1, #0
 800217c:	2002      	movs	r0, #2
 800217e:	f001 fe27 	bl	8003dd0 <ssd1306_SetCursor>
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <TrialStart+0x2f8>)
 8002184:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002188:	4834      	ldr	r0, [pc, #208]	@ (800225c <TrialStart+0x2f0>)
 800218a:	f001 fdfb 	bl	8003d84 <ssd1306_WriteString>
 800218e:	f001 fb9b 	bl	80038c8 <ssd1306_UpdateScreen>
		NumberOfWrites =0;
 8002192:	4b3b      	ldr	r3, [pc, #236]	@ (8002280 <TrialStart+0x314>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
		Sequence=SEQ_Running;
 8002198:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <TrialStart+0x318>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]

		CurrentSlot=0;
 800219e:	4b3a      	ldr	r3, [pc, #232]	@ (8002288 <TrialStart+0x31c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
		LastWrittenSlot=0;
 80021a4:	4b39      	ldr	r3, [pc, #228]	@ (800228c <TrialStart+0x320>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 80021aa:	481f      	ldr	r0, [pc, #124]	@ (8002228 <TrialStart+0x2bc>)
 80021ac:	f010 f8fa 	bl	80123a4 <HAL_TIM_Base_Start>
 80021b0:	481e      	ldr	r0, [pc, #120]	@ (800222c <TrialStart+0x2c0>)
 80021b2:	f010 f8f7 	bl	80123a4 <HAL_TIM_Base_Start>
 80021b6:	481e      	ldr	r0, [pc, #120]	@ (8002230 <TrialStart+0x2c4>)
 80021b8:	f010 f8f4 	bl	80123a4 <HAL_TIM_Base_Start>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))Error_Handler();
 80021bc:	2100      	movs	r1, #0
 80021be:	481d      	ldr	r0, [pc, #116]	@ (8002234 <TrialStart+0x2c8>)
 80021c0:	f010 fa6e 	bl	80126a0 <HAL_TIM_PWM_Start>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <TrialStart+0x262>
 80021ca:	f000 fff3 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))Error_Handler();
 80021ce:	2104      	movs	r1, #4
 80021d0:	4818      	ldr	r0, [pc, #96]	@ (8002234 <TrialStart+0x2c8>)
 80021d2:	f010 fa65 	bl	80126a0 <HAL_TIM_PWM_Start>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <TrialStart+0x274>
 80021dc:	f000 ffea 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3))Error_Handler();
 80021e0:	2108      	movs	r1, #8
 80021e2:	4814      	ldr	r0, [pc, #80]	@ (8002234 <TrialStart+0x2c8>)
 80021e4:	f010 fa5c 	bl	80126a0 <HAL_TIM_PWM_Start>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <TrialStart+0x286>
 80021ee:	f000 ffe1 	bl	80031b4 <Error_Handler>
//			HAL_TIM_Base_Start(&htim1);
//			HAL_TIM_Base_Start_IT(&htim1);

		oldState = GPIO_PIN_SET;
 80021f2:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <TrialStart+0x324>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
	}
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002200:	240008dc 	.word	0x240008dc
 8002204:	24000b58 	.word	0x24000b58
 8002208:	24000b64 	.word	0x24000b64
 800220c:	24000b68 	.word	0x24000b68
 8002210:	240008e0 	.word	0x240008e0
 8002214:	24000b78 	.word	0x24000b78
 8002218:	24000fc4 	.word	0x24000fc4
 800221c:	240008e8 	.word	0x240008e8
 8002220:	240008e4 	.word	0x240008e4
 8002224:	0801a9b8 	.word	0x0801a9b8
 8002228:	24000d88 	.word	0x24000d88
 800222c:	24000e44 	.word	0x24000e44
 8002230:	24000f00 	.word	0x24000f00
 8002234:	24000ccc 	.word	0x24000ccc
 8002238:	24000b24 	.word	0x24000b24
 800223c:	cccccccd 	.word	0xcccccccd
 8002240:	24000b28 	.word	0x24000b28
 8002244:	24000b40 	.word	0x24000b40
 8002248:	24000bf4 	.word	0x24000bf4
 800224c:	24000209 	.word	0x24000209
 8002250:	2400020c 	.word	0x2400020c
 8002254:	10624dd3 	.word	0x10624dd3
 8002258:	0801a9c8 	.word	0x0801a9c8
 800225c:	24000008 	.word	0x24000008
 8002260:	24000680 	.word	0x24000680
 8002264:	24000000 	.word	0x24000000
 8002268:	0801a9ec 	.word	0x0801a9ec
 800226c:	24000b54 	.word	0x24000b54
 8002270:	240008d8 	.word	0x240008d8
 8002274:	24000218 	.word	0x24000218
 8002278:	2400021c 	.word	0x2400021c
 800227c:	0801a9f8 	.word	0x0801a9f8
 8002280:	24000b84 	.word	0x24000b84
 8002284:	240008da 	.word	0x240008da
 8002288:	24000b7c 	.word	0x24000b7c
 800228c:	24000b80 	.word	0x24000b80
 8002290:	240008d9 	.word	0x240008d9

08002294 <TrialEnd>:
//=========================================================================================================================
void TrialEnd()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	if (SDstate == SDopen)
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <TrialEnd+0x60>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d102      	bne.n	80022a6 <TrialEnd+0x12>
	{
#ifdef DISK
		f_close(&fp);
 80022a0:	4815      	ldr	r0, [pc, #84]	@ (80022f8 <TrialEnd+0x64>)
 80022a2:	f017 f91c 	bl	80194de <f_close>
#endif
	}

			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 80022a6:	2100      	movs	r1, #0
 80022a8:	4814      	ldr	r0, [pc, #80]	@ (80022fc <TrialEnd+0x68>)
 80022aa:	f010 fb07 	bl	80128bc <HAL_TIM_PWM_Stop>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <TrialEnd+0x24>
 80022b4:	f000 ff7e 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 80022b8:	2104      	movs	r1, #4
 80022ba:	4810      	ldr	r0, [pc, #64]	@ (80022fc <TrialEnd+0x68>)
 80022bc:	f010 fafe 	bl	80128bc <HAL_TIM_PWM_Stop>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <TrialEnd+0x36>
 80022c6:	f000 ff75 	bl	80031b4 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 80022ca:	2108      	movs	r1, #8
 80022cc:	480b      	ldr	r0, [pc, #44]	@ (80022fc <TrialEnd+0x68>)
 80022ce:	f010 faf5 	bl	80128bc <HAL_TIM_PWM_Stop>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <TrialEnd+0x48>
 80022d8:	f000 ff6c 	bl	80031b4 <Error_Handler>
			HAL_TIM_Base_Stop(&htim2);HAL_TIM_Base_Stop(&htim3);HAL_TIM_Base_Stop(&htim8);
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <TrialEnd+0x6c>)
 80022de:	f010 f8d1 	bl	8012484 <HAL_TIM_Base_Stop>
 80022e2:	4808      	ldr	r0, [pc, #32]	@ (8002304 <TrialEnd+0x70>)
 80022e4:	f010 f8ce 	bl	8012484 <HAL_TIM_Base_Stop>
 80022e8:	4807      	ldr	r0, [pc, #28]	@ (8002308 <TrialEnd+0x74>)
 80022ea:	f010 f8cb 	bl	8012484 <HAL_TIM_Base_Stop>
//			HAL_TIM_Base_Stop(&htim1);
//			HAL_TIM_Base_Stop_IT(&htim1);



}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	240008dc 	.word	0x240008dc
 80022f8:	24000680 	.word	0x24000680
 80022fc:	24000ccc 	.word	0x24000ccc
 8002300:	24000d88 	.word	0x24000d88
 8002304:	24000e44 	.word	0x24000e44
 8002308:	24000f00 	.word	0x24000f00

0800230c <TrialComplete>:
//=========================================================================================================================
void TrialComplete()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
	if (SDstate == SDopen)
 8002312:	4b63      	ldr	r3, [pc, #396]	@ (80024a0 <TrialComplete+0x194>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	f040 80b4 	bne.w	8002484 <TrialComplete+0x178>
	{
		{

			FRESULT res;
			//			SD_WriteStartTime;
			BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 800231c:	4b61      	ldr	r3, [pc, #388]	@ (80024a4 <TrialComplete+0x198>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <TrialComplete+0x19c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	4a61      	ldr	r2, [pc, #388]	@ (80024ac <TrialComplete+0x1a0>)
 8002328:	6013      	str	r3, [r2, #0]

			while ((CurrentSlot)> (LastWrittenSlot) && (RunState != HALT))
 800232a:	e05d      	b.n	80023e8 <TrialComplete+0xdc>
			{
#ifdef DISK

				res = f_write ( &fp,														/* Pointer to the file object */
						(const void*) (SDRAMAREA+((LastWrittenSlot%SLOTS)*(Npixels*2))),	/* Pointer to the data to be written */
 800232c:	4b5e      	ldr	r3, [pc, #376]	@ (80024a8 <TrialComplete+0x19c>)
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	4b5f      	ldr	r3, [pc, #380]	@ (80024b0 <TrialComplete+0x1a4>)
 8002332:	fba3 2301 	umull	r2, r3, r3, r1
 8002336:	0ada      	lsrs	r2, r3, #11
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	1aca      	subs	r2, r1, r3
 8002342:	f502 23c0 	add.w	r3, r2, #393216	@ 0x60000
 8002346:	035b      	lsls	r3, r3, #13
				res = f_write ( &fp,														/* Pointer to the file object */
 8002348:	4619      	mov	r1, r3
 800234a:	4b5a      	ldr	r3, [pc, #360]	@ (80024b4 <TrialComplete+0x1a8>)
 800234c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002350:	4859      	ldr	r0, [pc, #356]	@ (80024b8 <TrialComplete+0x1ac>)
 8002352:	f016 fdf2 	bl	8018f3a <f_write>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
						(Npixels*2),														/* Number of bytes to write */
						(void *)&BytesWritten										/* Pointer to number of bytes written */
				);
				if (res  != FR_OK || (BytesWritten !=(Npixels*2))	){
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <TrialComplete+0x5e>
 8002360:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <TrialComplete+0x1a8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002368:	d010      	beq.n	800238c <TrialComplete+0x80>
					LCD_ShowString(2, 0, 6,8,White, "FW Error");
 800236a:	2100      	movs	r1, #0
 800236c:	2002      	movs	r0, #2
 800236e:	f001 fd2f 	bl	8003dd0 <ssd1306_SetCursor>
 8002372:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <TrialComplete+0x1b0>)
 8002374:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002378:	4851      	ldr	r0, [pc, #324]	@ (80024c0 <TrialComplete+0x1b4>)
 800237a:	f001 fd03 	bl	8003d84 <ssd1306_WriteString>
 800237e:	f001 faa3 	bl	80038c8 <ssd1306_UpdateScreen>
					f_close(&fp);
 8002382:	484d      	ldr	r0, [pc, #308]	@ (80024b8 <TrialComplete+0x1ac>)
 8002384:	f017 f8ab 	bl	80194de <f_close>
					Error_Handler();
 8002388:	f000 ff14 	bl	80031b4 <Error_Handler>
				}
#endif
				LastWrittenSlot++;
 800238c:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <TrialComplete+0x19c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a45      	ldr	r2, [pc, #276]	@ (80024a8 <TrialComplete+0x19c>)
 8002394:	6013      	str	r3, [r2, #0]
				//				SD_WriteStartTime;
				pixelPlace=((LastWrittenSlot <<7) / NumLines);
 8002396:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <TrialComplete+0x19c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	01da      	lsls	r2, r3, #7
 800239c:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <TrialComplete+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <TrialComplete+0x1bc>)
 80023a6:	6013      	str	r3, [r2, #0]
				if (pixelPlaceOld != pixelPlace){
 80023a8:	4b48      	ldr	r3, [pc, #288]	@ (80024cc <TrialComplete+0x1c0>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <TrialComplete+0x1bc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d011      	beq.n	80023d8 <TrialComplete+0xcc>
					ssd1306_DrawPixel(pixelPlace, 62);
 80023b4:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <TrialComplete+0x1bc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	213e      	movs	r1, #62	@ 0x3e
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 faad 	bl	800391c <ssd1306_DrawPixel>
					HAL_GPIO_TogglePin(BLUEled_GPIO_Port, BLUEled_Pin);
 80023c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023c6:	4842      	ldr	r0, [pc, #264]	@ (80024d0 <TrialComplete+0x1c4>)
 80023c8:	f007 fbb5 	bl	8009b36 <HAL_GPIO_TogglePin>
					ssd1306_UpdateScreen();
 80023cc:	f001 fa7c 	bl	80038c8 <ssd1306_UpdateScreen>
					pixelPlaceOld = pixelPlace;
 80023d0:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <TrialComplete+0x1bc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <TrialComplete+0x1c0>)
 80023d6:	6013      	str	r3, [r2, #0]
				}
				if (0 != JOYstickPOS()){
 80023d8:	f7ff f8e2 	bl	80015a0 <JOYstickPOS>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <TrialComplete+0xdc>
					RunState = HALT;
 80023e2:	4b3c      	ldr	r3, [pc, #240]	@ (80024d4 <TrialComplete+0x1c8>)
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
			while ((CurrentSlot)> (LastWrittenSlot) && (RunState != HALT))
 80023e8:	4b2e      	ldr	r3, [pc, #184]	@ (80024a4 <TrialComplete+0x198>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b2e      	ldr	r3, [pc, #184]	@ (80024a8 <TrialComplete+0x19c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d903      	bls.n	80023fc <TrialComplete+0xf0>
 80023f4:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <TrialComplete+0x1c8>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d197      	bne.n	800232c <TrialComplete+0x20>
				}

			}
		}
		TrialEnd();
 80023fc:	f7ff ff4a 	bl	8002294 <TrialEnd>
		HAL_StatusTypeDef res = HAL_RTC_GetTime(&hrtc, &timeEnd, RTC_FORMAT_BIN);
 8002400:	2200      	movs	r2, #0
 8002402:	4935      	ldr	r1, [pc, #212]	@ (80024d8 <TrialComplete+0x1cc>)
 8002404:	4835      	ldr	r0, [pc, #212]	@ (80024dc <TrialComplete+0x1d0>)
 8002406:	f00d ffdf 	bl	80103c8 <HAL_RTC_GetTime>
 800240a:	4603      	mov	r3, r0
 800240c:	73bb      	strb	r3, [r7, #14]
		if(res != HAL_OK) {
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <TrialComplete+0x10c>
			Error_Handler();
 8002414:	f000 fece 	bl	80031b4 <Error_Handler>
		}

		uint32_t sec = ((uint32_t)timeEnd.Hours*3600)+((uint32_t)timeEnd.Minutes*60)+((uint32_t)timeEnd.Seconds) -(secStart);
 8002418:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <TrialComplete+0x1cc>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	4b2c      	ldr	r3, [pc, #176]	@ (80024d8 <TrialComplete+0x1cc>)
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	4619      	mov	r1, r3
 800242c:	460b      	mov	r3, r1
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <TrialComplete+0x1cc>)
 8002438:	7892      	ldrb	r2, [r2, #2]
 800243a:	441a      	add	r2, r3
 800243c:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <TrialComplete+0x1d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	60bb      	str	r3, [r7, #8]
		sprintf(( char *)rtext,"Time %ld sec          ",sec);
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	4927      	ldr	r1, [pc, #156]	@ (80024e4 <TrialComplete+0x1d8>)
 8002448:	4827      	ldr	r0, [pc, #156]	@ (80024e8 <TrialComplete+0x1dc>)
 800244a:	f017 fa69 	bl	8019920 <siprintf>
		LCD_ShowString(2, 2*FontH,6,8,White,rtext);
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <TrialComplete+0x1e0>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	2002      	movs	r0, #2
 800245a:	f001 fcb9 	bl	8003dd0 <ssd1306_SetCursor>
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <TrialComplete+0x1b0>)
 8002460:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002464:	4820      	ldr	r0, [pc, #128]	@ (80024e8 <TrialComplete+0x1dc>)
 8002466:	f001 fc8d 	bl	8003d84 <ssd1306_WriteString>
 800246a:	f001 fa2d 	bl	80038c8 <ssd1306_UpdateScreen>
		SDstate= SDnotopen;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <TrialComplete+0x194>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
		RTC_DateTypeDef FILEdate;
		res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	4619      	mov	r1, r3
 800247a:	4818      	ldr	r0, [pc, #96]	@ (80024dc <TrialComplete+0x1d0>)
 800247c:	f00e f888 	bl	8010590 <HAL_RTC_GetDate>
 8002480:	4603      	mov	r3, r0
 8002482:	73bb      	strb	r3, [r7, #14]

	}//complete
	Sequence=SEQ_Ready;
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <TrialComplete+0x1e4>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800248a:	2064      	movs	r0, #100	@ 0x64
 800248c:	f002 fcd0 	bl	8004e30 <HAL_Delay>
	ledDisp(0);
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff f8c9 	bl	8001628 <ledDisp>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	240008dc 	.word	0x240008dc
 80024a4:	24000b7c 	.word	0x24000b7c
 80024a8:	24000b80 	.word	0x24000b80
 80024ac:	24000b74 	.word	0x24000b74
 80024b0:	88888889 	.word	0x88888889
 80024b4:	24000b20 	.word	0x24000b20
 80024b8:	24000680 	.word	0x24000680
 80024bc:	24000000 	.word	0x24000000
 80024c0:	0801aa04 	.word	0x0801aa04
 80024c4:	24000b28 	.word	0x24000b28
 80024c8:	24000b70 	.word	0x24000b70
 80024cc:	24000b6c 	.word	0x24000b6c
 80024d0:	58022000 	.word	0x58022000
 80024d4:	24000208 	.word	0x24000208
 80024d8:	24000b2c 	.word	0x24000b2c
 80024dc:	24000bf4 	.word	0x24000bf4
 80024e0:	24000b54 	.word	0x24000b54
 80024e4:	0801aa10 	.word	0x0801aa10
 80024e8:	24000008 	.word	0x24000008
 80024ec:	240008d8 	.word	0x240008d8
 80024f0:	240008da 	.word	0x240008da

080024f4 <TrialOngoing>:

//=========================================================================================================================
void TrialOngoing (){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

	if (SDstate == SDopen){
 80024fa:	4b58      	ldr	r3, [pc, #352]	@ (800265c <TrialOngoing+0x168>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 809a 	bne.w	8002638 <TrialOngoing+0x144>
		FRESULT res;
		BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 8002504:	4b56      	ldr	r3, [pc, #344]	@ (8002660 <TrialOngoing+0x16c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <TrialOngoing+0x170>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <TrialOngoing+0x174>)
 8002510:	6013      	str	r3, [r2, #0]
		//		SD_WriteStartTime;



		while ((CurrentSlot)> (LastWrittenSlot) ){
 8002512:	e08a      	b.n	800262a <TrialOngoing+0x136>

#ifdef DISK
			if(LastWrittenSlot == 0 ){
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <TrialOngoing+0x170>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <TrialOngoing+0x44>
				sprintf((char *)SDRAMAREA,"P5 %5d %5d 65535 ", Npixels,SelectNLStateValue[SelectNLState] );
 800251c:	4b53      	ldr	r3, [pc, #332]	@ (800266c <TrialOngoing+0x178>)
 800251e:	f993 3000 	ldrsb.w	r3, [r3]
 8002522:	461a      	mov	r2, r3
 8002524:	4b52      	ldr	r3, [pc, #328]	@ (8002670 <TrialOngoing+0x17c>)
 8002526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800252a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800252e:	4951      	ldr	r1, [pc, #324]	@ (8002674 <TrialOngoing+0x180>)
 8002530:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8002534:	f017 f9f4 	bl	8019920 <siprintf>
			}
			res = f_write ( &fp,														/* Pointer to the file object */
					(const void*) (SDRAMAREA+((LastWrittenSlot%SLOTS)*(Npixels*2))),	/* Pointer to the data to be written */
 8002538:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <TrialOngoing+0x170>)
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <TrialOngoing+0x184>)
 800253e:	fba3 2301 	umull	r2, r3, r3, r1
 8002542:	0ada      	lsrs	r2, r3, #11
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	1aca      	subs	r2, r1, r3
 800254e:	f502 23c0 	add.w	r3, r2, #393216	@ 0x60000
 8002552:	035b      	lsls	r3, r3, #13
			res = f_write ( &fp,														/* Pointer to the file object */
 8002554:	4619      	mov	r1, r3
 8002556:	4b49      	ldr	r3, [pc, #292]	@ (800267c <TrialOngoing+0x188>)
 8002558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800255c:	4848      	ldr	r0, [pc, #288]	@ (8002680 <TrialOngoing+0x18c>)
 800255e:	f016 fcec 	bl	8018f3a <f_write>
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
					(Npixels*2),														/* Number of bytes to write */
					(void *)&BytesWritten										/* Pointer to number of bytes written */
			);
			BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 8002566:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <TrialOngoing+0x16c>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b3e      	ldr	r3, [pc, #248]	@ (8002664 <TrialOngoing+0x170>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a3d      	ldr	r2, [pc, #244]	@ (8002668 <TrialOngoing+0x174>)
 8002572:	6013      	str	r3, [r2, #0]
			if(BuffDiff > BuffDiffMax)(BuffDiffMax=BuffDiff);
 8002574:	4b3c      	ldr	r3, [pc, #240]	@ (8002668 <TrialOngoing+0x174>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b42      	ldr	r3, [pc, #264]	@ (8002684 <TrialOngoing+0x190>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d903      	bls.n	8002588 <TrialOngoing+0x94>
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <TrialOngoing+0x174>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3f      	ldr	r2, [pc, #252]	@ (8002684 <TrialOngoing+0x190>)
 8002586:	6013      	str	r3, [r2, #0]
			LastWrittenSlot++;
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <TrialOngoing+0x170>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a35      	ldr	r2, [pc, #212]	@ (8002664 <TrialOngoing+0x170>)
 8002590:	6013      	str	r3, [r2, #0]
			NumberOfWrites++;
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <TrialOngoing+0x194>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a3b      	ldr	r2, [pc, #236]	@ (8002688 <TrialOngoing+0x194>)
 800259a:	6013      	str	r3, [r2, #0]


			if (res  != FR_OK	 || (BytesWritten !=(Npixels*2))	){
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <TrialOngoing+0xb8>
 80025a2:	4b36      	ldr	r3, [pc, #216]	@ (800267c <TrialOngoing+0x188>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025aa:	d010      	beq.n	80025ce <TrialOngoing+0xda>
				LCD_ShowString(2, 0,6,8,White, "FW Error");
 80025ac:	2100      	movs	r1, #0
 80025ae:	2002      	movs	r0, #2
 80025b0:	f001 fc0e 	bl	8003dd0 <ssd1306_SetCursor>
 80025b4:	4b35      	ldr	r3, [pc, #212]	@ (800268c <TrialOngoing+0x198>)
 80025b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025ba:	4835      	ldr	r0, [pc, #212]	@ (8002690 <TrialOngoing+0x19c>)
 80025bc:	f001 fbe2 	bl	8003d84 <ssd1306_WriteString>
 80025c0:	f001 f982 	bl	80038c8 <ssd1306_UpdateScreen>
				f_close(&fp);
 80025c4:	482e      	ldr	r0, [pc, #184]	@ (8002680 <TrialOngoing+0x18c>)
 80025c6:	f016 ff8a 	bl	80194de <f_close>
				Error_Handler();
 80025ca:	f000 fdf3 	bl	80031b4 <Error_Handler>

			}
#endif
			//			SD_WriteStartTime;
			pixelPlace=((LastWrittenSlot <<7) / NumLines);
 80025ce:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <TrialOngoing+0x170>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	01da      	lsls	r2, r3, #7
 80025d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <TrialOngoing+0x1a0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002698 <TrialOngoing+0x1a4>)
 80025de:	6013      	str	r3, [r2, #0]
			if (pixelPlaceOld != pixelPlace){
 80025e0:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <TrialOngoing+0x1a8>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <TrialOngoing+0x1a4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d013      	beq.n	8002614 <TrialOngoing+0x120>
//				ssd1306_DrawPixel(pixelPlace, 63);
//				ssd1306_DrawPixel(((CurrentSlot <<7) / NumLines), 61);
				HAL_GPIO_TogglePin(BLUEled_GPIO_Port, BLUEled_Pin);
 80025ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025f0:	482b      	ldr	r0, [pc, #172]	@ (80026a0 <TrialOngoing+0x1ac>)
 80025f2:	f007 faa0 	bl	8009b36 <HAL_GPIO_TogglePin>
				if (BuffDiff>SLOTS) {
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <TrialOngoing+0x174>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025fe:	d905      	bls.n	800260c <TrialOngoing+0x118>
//					HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_RESET); //error
					RunState = HALT;
 8002600:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <TrialOngoing+0x1b0>)
 8002602:	2203      	movs	r2, #3
 8002604:	701a      	strb	r2, [r3, #0]
					Sequence=SEQ_Complete;
 8002606:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <TrialOngoing+0x1b4>)
 8002608:	2203      	movs	r2, #3
 800260a:	701a      	strb	r2, [r3, #0]

				}
				//if (pixelPlace % 8 == 0)ssd1306_UpdateScreen();
//				ledDisp(1<<((LastWrittenSlot/(NumLines>>3))));
				pixelPlaceOld = pixelPlace;
 800260c:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <TrialOngoing+0x1a4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a22      	ldr	r2, [pc, #136]	@ (800269c <TrialOngoing+0x1a8>)
 8002612:	6013      	str	r3, [r2, #0]
			}
			ledDisp(((LastWrittenSlot/(NumLines>>8))));
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <TrialOngoing+0x170>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <TrialOngoing+0x1a0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ffff 	bl	8001628 <ledDisp>
		while ((CurrentSlot)> (LastWrittenSlot) ){
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <TrialOngoing+0x16c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <TrialOngoing+0x170>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	f63f af6e 	bhi.w	8002514 <TrialOngoing+0x20>

		}
	}
	ADCstate = ADC_idle;
 8002638:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <TrialOngoing+0x1b8>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
	if (0 != JOYstickPOS()){
 800263e:	f7fe ffaf 	bl	80015a0 <JOYstickPOS>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <TrialOngoing+0x160>
		RunState = HALT;
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <TrialOngoing+0x1b0>)
 800264a:	2203      	movs	r2, #3
 800264c:	701a      	strb	r2, [r3, #0]
		Sequence=SEQ_Complete;
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <TrialOngoing+0x1b4>)
 8002650:	2203      	movs	r2, #3
 8002652:	701a      	strb	r2, [r3, #0]
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	240008dc 	.word	0x240008dc
 8002660:	24000b7c 	.word	0x24000b7c
 8002664:	24000b80 	.word	0x24000b80
 8002668:	24000b74 	.word	0x24000b74
 800266c:	24000218 	.word	0x24000218
 8002670:	2400021c 	.word	0x2400021c
 8002674:	0801aa28 	.word	0x0801aa28
 8002678:	88888889 	.word	0x88888889
 800267c:	24000b20 	.word	0x24000b20
 8002680:	24000680 	.word	0x24000680
 8002684:	24000b78 	.word	0x24000b78
 8002688:	24000b84 	.word	0x24000b84
 800268c:	24000000 	.word	0x24000000
 8002690:	0801aa04 	.word	0x0801aa04
 8002694:	24000b28 	.word	0x24000b28
 8002698:	24000b70 	.word	0x24000b70
 800269c:	24000b6c 	.word	0x24000b6c
 80026a0:	58022000 	.word	0x58022000
 80026a4:	24000208 	.word	0x24000208
 80026a8:	240008da 	.word	0x240008da
 80026ac:	240008db 	.word	0x240008db

080026b0 <RunMenu>:
//__-------___________________________________________________________________________________________

void RunMenu()
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
	uint8_t Jsp=0,i=0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	71bb      	strb	r3, [r7, #6]
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
	ssd1306_Clear();
 80026be:	f001 fb9f 	bl	8003e00 <ssd1306_Clear>
	sprintf(rtext,"RunType:  %c",RunType[SelectRT]);
 80026c2:	4baf      	ldr	r3, [pc, #700]	@ (8002980 <RunMenu+0x2d0>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4bae      	ldr	r3, [pc, #696]	@ (8002984 <RunMenu+0x2d4>)
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	461a      	mov	r2, r3
 80026ce:	49ae      	ldr	r1, [pc, #696]	@ (8002988 <RunMenu+0x2d8>)
 80026d0:	48ae      	ldr	r0, [pc, #696]	@ (800298c <RunMenu+0x2dc>)
 80026d2:	f017 f925 	bl	8019920 <siprintf>
	LCD_ShowString(2, 0, 6,8 , White, rtext);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2002      	movs	r0, #2
 80026da:	f001 fb79 	bl	8003dd0 <ssd1306_SetCursor>
 80026de:	4bac      	ldr	r3, [pc, #688]	@ (8002990 <RunMenu+0x2e0>)
 80026e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026e4:	48a9      	ldr	r0, [pc, #676]	@ (800298c <RunMenu+0x2dc>)
 80026e6:	f001 fb4d 	bl	8003d84 <ssd1306_WriteString>
 80026ea:	f001 f8ed 	bl	80038c8 <ssd1306_UpdateScreen>
	sprintf(rtext,"Exposure: %d",(SelectNEStateValue[SelectNEState]));
 80026ee:	4ba9      	ldr	r3, [pc, #676]	@ (8002994 <RunMenu+0x2e4>)
 80026f0:	f993 3000 	ldrsb.w	r3, [r3]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4ba8      	ldr	r3, [pc, #672]	@ (8002998 <RunMenu+0x2e8>)
 80026f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026fc:	461a      	mov	r2, r3
 80026fe:	49a7      	ldr	r1, [pc, #668]	@ (800299c <RunMenu+0x2ec>)
 8002700:	48a2      	ldr	r0, [pc, #648]	@ (800298c <RunMenu+0x2dc>)
 8002702:	f017 f90d 	bl	8019920 <siprintf>
	LCD_ShowString(2, FontH, 6,8 , White, rtext);
 8002706:	4ba6      	ldr	r3, [pc, #664]	@ (80029a0 <RunMenu+0x2f0>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	2002      	movs	r0, #2
 800270e:	f001 fb5f 	bl	8003dd0 <ssd1306_SetCursor>
 8002712:	4b9f      	ldr	r3, [pc, #636]	@ (8002990 <RunMenu+0x2e0>)
 8002714:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002718:	489c      	ldr	r0, [pc, #624]	@ (800298c <RunMenu+0x2dc>)
 800271a:	f001 fb33 	bl	8003d84 <ssd1306_WriteString>
 800271e:	f001 f8d3 	bl	80038c8 <ssd1306_UpdateScreen>
	sprintf(rtext,"Length:   %d",SelectNLStateValue[SelectNLState]);
 8002722:	4ba0      	ldr	r3, [pc, #640]	@ (80029a4 <RunMenu+0x2f4>)
 8002724:	f993 3000 	ldrsb.w	r3, [r3]
 8002728:	461a      	mov	r2, r3
 800272a:	4b9f      	ldr	r3, [pc, #636]	@ (80029a8 <RunMenu+0x2f8>)
 800272c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002730:	461a      	mov	r2, r3
 8002732:	499e      	ldr	r1, [pc, #632]	@ (80029ac <RunMenu+0x2fc>)
 8002734:	4895      	ldr	r0, [pc, #596]	@ (800298c <RunMenu+0x2dc>)
 8002736:	f017 f8f3 	bl	8019920 <siprintf>
	LCD_ShowString(2, 2*FontH, 6,8 , White, rtext);
 800273a:	4b99      	ldr	r3, [pc, #612]	@ (80029a0 <RunMenu+0x2f0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	2002      	movs	r0, #2
 8002746:	f001 fb43 	bl	8003dd0 <ssd1306_SetCursor>
 800274a:	4b91      	ldr	r3, [pc, #580]	@ (8002990 <RunMenu+0x2e0>)
 800274c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002750:	488e      	ldr	r0, [pc, #568]	@ (800298c <RunMenu+0x2dc>)
 8002752:	f001 fb17 	bl	8003d84 <ssd1306_WriteString>
 8002756:	f001 f8b7 	bl	80038c8 <ssd1306_UpdateScreen>
	ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 800275a:	4b95      	ldr	r3, [pc, #596]	@ (80029b0 <RunMenu+0x300>)
 800275c:	f993 3000 	ldrsb.w	r3, [r3]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4a8f      	ldr	r2, [pc, #572]	@ (80029a0 <RunMenu+0x2f0>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	fb13 f302 	smulbb	r3, r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21b      	sxth	r3, r3
 800276e:	4a8c      	ldr	r2, [pc, #560]	@ (80029a0 <RunMenu+0x2f0>)
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	b212      	sxth	r2, r2
 8002774:	4619      	mov	r1, r3
 8002776:	207f      	movs	r0, #127	@ 0x7f
 8002778:	f001 f946 	bl	8003a08 <ssd1306_DrawVerticalLine>
	while (RunState == HALT)
 800277c:	e1cc      	b.n	8002b18 <RunMenu+0x468>
	{
		if (i ==0) i=1;
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <RunMenu+0xd8>
 8002784:	2301      	movs	r3, #1
 8002786:	71fb      	strb	r3, [r7, #7]
	//ledDisp(i);15
		i<<=1;
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]
		Jsp = JOYstickPOS();
 800278e:	f7fe ff07 	bl	80015a0 <JOYstickPOS>
 8002792:	4603      	mov	r3, r0
 8002794:	71bb      	strb	r3, [r7, #6]

		{
		HAL_Delay(25);
 8002796:	2019      	movs	r0, #25
 8002798:	f002 fb4a 	bl	8004e30 <HAL_Delay>
		switch (Jsp){
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	3b01      	subs	r3, #1
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	f200 816d 	bhi.w	8002a80 <RunMenu+0x3d0>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <RunMenu+0xfc>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027ed 	.word	0x080027ed
 80027b0:	08002a59 	.word	0x08002a59
 80027b4:	08002a81 	.word	0x08002a81
 80027b8:	0800288b 	.word	0x0800288b
 80027bc:	08002a81 	.word	0x08002a81
 80027c0:	08002a81 	.word	0x08002a81
 80027c4:	08002a81 	.word	0x08002a81
 80027c8:	080029db 	.word	0x080029db
 80027cc:	08002a81 	.word	0x08002a81
 80027d0:	08002a81 	.word	0x08002a81
 80027d4:	08002a81 	.word	0x08002a81
 80027d8:	08002a81 	.word	0x08002a81
 80027dc:	08002a81 	.word	0x08002a81
 80027e0:	08002a81 	.word	0x08002a81
 80027e4:	08002a81 	.word	0x08002a81
 80027e8:	08002929 	.word	0x08002929
		case (1):{   //R
			ssd1306_SetColor(Black);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f000 ffc1 	bl	8003774 <ssd1306_SetColor>
			ssd1306_DrawVerticalLine(127,0,4*FontH);     //Cursur blank
 80027f2:	4b6b      	ldr	r3, [pc, #428]	@ (80029a0 <RunMenu+0x2f0>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	207f      	movs	r0, #127	@ 0x7f
 8002802:	f001 f901 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126,0,4*FontH);     //Cursur blank
 8002806:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <RunMenu+0x2f0>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	b29b      	uxth	r3, r3
 800280e:	b21b      	sxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	2100      	movs	r1, #0
 8002814:	207e      	movs	r0, #126	@ 0x7e
 8002816:	f001 f8f7 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_SetColor(White);
 800281a:	2001      	movs	r0, #1
 800281c:	f000 ffaa 	bl	8003774 <ssd1306_SetColor>
			if (MenuItem == 2) {MenuItem = 0;} else MenuItem++ ;
 8002820:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <RunMenu+0x300>)
 8002822:	f993 3000 	ldrsb.w	r3, [r3]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d103      	bne.n	8002832 <RunMenu+0x182>
 800282a:	4b61      	ldr	r3, [pc, #388]	@ (80029b0 <RunMenu+0x300>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e008      	b.n	8002844 <RunMenu+0x194>
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <RunMenu+0x300>)
 8002834:	f993 3000 	ldrsb.w	r3, [r3]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	b25a      	sxtb	r2, r3
 8002840:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <RunMenu+0x300>)
 8002842:	701a      	strb	r2, [r3, #0]
			ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 8002844:	4b5a      	ldr	r3, [pc, #360]	@ (80029b0 <RunMenu+0x300>)
 8002846:	f993 3000 	ldrsb.w	r3, [r3]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4a54      	ldr	r2, [pc, #336]	@ (80029a0 <RunMenu+0x2f0>)
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	fb13 f302 	smulbb	r3, r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	b21b      	sxth	r3, r3
 8002858:	4a51      	ldr	r2, [pc, #324]	@ (80029a0 <RunMenu+0x2f0>)
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	b212      	sxth	r2, r2
 800285e:	4619      	mov	r1, r3
 8002860:	207f      	movs	r0, #127	@ 0x7f
 8002862:	f001 f8d1 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, MenuItem*FontH,FontH);
 8002866:	4b52      	ldr	r3, [pc, #328]	@ (80029b0 <RunMenu+0x300>)
 8002868:	f993 3000 	ldrsb.w	r3, [r3]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <RunMenu+0x2f0>)
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	fb13 f302 	smulbb	r3, r3, r2
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21b      	sxth	r3, r3
 800287a:	4a49      	ldr	r2, [pc, #292]	@ (80029a0 <RunMenu+0x2f0>)
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	b212      	sxth	r2, r2
 8002880:	4619      	mov	r1, r3
 8002882:	207e      	movs	r0, #126	@ 0x7e
 8002884:	f001 f8c0 	bl	8003a08 <ssd1306_DrawVerticalLine>
			break;
 8002888:	e0fa      	b.n	8002a80 <RunMenu+0x3d0>
		}
		case (4):{  //L
			ssd1306_SetColor(Black);
 800288a:	2000      	movs	r0, #0
 800288c:	f000 ff72 	bl	8003774 <ssd1306_SetColor>
			ssd1306_DrawVerticalLine(127, 0,4*FontH);
 8002890:	4b43      	ldr	r3, [pc, #268]	@ (80029a0 <RunMenu+0x2f0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	b29b      	uxth	r3, r3
 8002898:	b21b      	sxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	207f      	movs	r0, #127	@ 0x7f
 80028a0:	f001 f8b2 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, 0,4*FontH);
 80028a4:	4b3e      	ldr	r3, [pc, #248]	@ (80029a0 <RunMenu+0x2f0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b21b      	sxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	2100      	movs	r1, #0
 80028b2:	207e      	movs	r0, #126	@ 0x7e
 80028b4:	f001 f8a8 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_SetColor(White);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f000 ff5b 	bl	8003774 <ssd1306_SetColor>
			if (MenuItem) {MenuItem-- ;}
 80028be:	4b3c      	ldr	r3, [pc, #240]	@ (80029b0 <RunMenu+0x300>)
 80028c0:	f993 3000 	ldrsb.w	r3, [r3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <RunMenu+0x22c>
 80028c8:	4b39      	ldr	r3, [pc, #228]	@ (80029b0 <RunMenu+0x300>)
 80028ca:	f993 3000 	ldrsb.w	r3, [r3]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	b25a      	sxtb	r2, r3
 80028d6:	4b36      	ldr	r3, [pc, #216]	@ (80029b0 <RunMenu+0x300>)
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e002      	b.n	80028e2 <RunMenu+0x232>
			else MenuItem =2;
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <RunMenu+0x300>)
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
			ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 80028e2:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <RunMenu+0x300>)
 80028e4:	f993 3000 	ldrsb.w	r3, [r3]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <RunMenu+0x2f0>)
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	fb13 f302 	smulbb	r3, r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <RunMenu+0x2f0>)
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	b212      	sxth	r2, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	207f      	movs	r0, #127	@ 0x7f
 8002900:	f001 f882 	bl	8003a08 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, MenuItem*FontH,FontH);
 8002904:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <RunMenu+0x300>)
 8002906:	f993 3000 	ldrsb.w	r3, [r3]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <RunMenu+0x2f0>)
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	fb13 f302 	smulbb	r3, r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	b21b      	sxth	r3, r3
 8002918:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <RunMenu+0x2f0>)
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	b212      	sxth	r2, r2
 800291e:	4619      	mov	r1, r3
 8002920:	207e      	movs	r0, #126	@ 0x7e
 8002922:	f001 f871 	bl	8003a08 <ssd1306_DrawVerticalLine>
			break;
 8002926:	e0ab      	b.n	8002a80 <RunMenu+0x3d0>
		}
		case (16):{ //UP
			if (MenuItem == 0)
 8002928:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <RunMenu+0x300>)
 800292a:	f993 3000 	ldrsb.w	r3, [r3]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10e      	bne.n	8002950 <RunMenu+0x2a0>
			{
				if (SelectRT == 2) {SelectRT = 0;} else SelectRT++ ;
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <RunMenu+0x2d0>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d103      	bne.n	8002942 <RunMenu+0x292>
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <RunMenu+0x2d0>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
			}
			break;
 8002940:	e09e      	b.n	8002a80 <RunMenu+0x3d0>
				if (SelectRT == 2) {SelectRT = 0;} else SelectRT++ ;
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <RunMenu+0x2d0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <RunMenu+0x2d0>)
 800294c:	701a      	strb	r2, [r3, #0]
			break;
 800294e:	e097      	b.n	8002a80 <RunMenu+0x3d0>
			else if (MenuItem == 1)
 8002950:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <RunMenu+0x300>)
 8002952:	f993 3000 	ldrsb.w	r3, [r3]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d12c      	bne.n	80029b4 <RunMenu+0x304>
				if (SelectNEState == 5) {SelectNEState = 0;} else SelectNEState++ ;
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <RunMenu+0x2e4>)
 800295c:	f993 3000 	ldrsb.w	r3, [r3]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d103      	bne.n	800296c <RunMenu+0x2bc>
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <RunMenu+0x2e4>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
			break;
 800296a:	e089      	b.n	8002a80 <RunMenu+0x3d0>
				if (SelectNEState == 5) {SelectNEState = 0;} else SelectNEState++ ;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <RunMenu+0x2e4>)
 800296e:	f993 3000 	ldrsb.w	r3, [r3]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	b25a      	sxtb	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <RunMenu+0x2e4>)
 800297c:	701a      	strb	r2, [r3, #0]
			break;
 800297e:	e07f      	b.n	8002a80 <RunMenu+0x3d0>
 8002980:	24000227 	.word	0x24000227
 8002984:	24000224 	.word	0x24000224
 8002988:	0801aa3c 	.word	0x0801aa3c
 800298c:	24000008 	.word	0x24000008
 8002990:	24000000 	.word	0x24000000
 8002994:	24000209 	.word	0x24000209
 8002998:	2400020c 	.word	0x2400020c
 800299c:	0801aa4c 	.word	0x0801aa4c
 80029a0:	240008d8 	.word	0x240008d8
 80029a4:	24000218 	.word	0x24000218
 80029a8:	2400021c 	.word	0x2400021c
 80029ac:	0801aa5c 	.word	0x0801aa5c
 80029b0:	240008de 	.word	0x240008de
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
 80029b4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b2c <RunMenu+0x47c>)
 80029b6:	f993 3000 	ldrsb.w	r3, [r3]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d103      	bne.n	80029c6 <RunMenu+0x316>
 80029be:	4b5b      	ldr	r3, [pc, #364]	@ (8002b2c <RunMenu+0x47c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
			break;
 80029c4:	e05c      	b.n	8002a80 <RunMenu+0x3d0>
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
 80029c6:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <RunMenu+0x47c>)
 80029c8:	f993 3000 	ldrsb.w	r3, [r3]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	b25a      	sxtb	r2, r3
 80029d4:	4b55      	ldr	r3, [pc, #340]	@ (8002b2c <RunMenu+0x47c>)
 80029d6:	701a      	strb	r2, [r3, #0]
			break;
 80029d8:	e052      	b.n	8002a80 <RunMenu+0x3d0>
		}
		case (8):{ //DN
			if (MenuItem == 0)
 80029da:	4b55      	ldr	r3, [pc, #340]	@ (8002b30 <RunMenu+0x480>)
 80029dc:	f993 3000 	ldrsb.w	r3, [r3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <RunMenu+0x352>
			{
				if(SelectRT) {SelectRT--;} else SelectRT =2;
 80029e4:	4b53      	ldr	r3, [pc, #332]	@ (8002b34 <RunMenu+0x484>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <RunMenu+0x34a>
 80029ec:	4b51      	ldr	r3, [pc, #324]	@ (8002b34 <RunMenu+0x484>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b34 <RunMenu+0x484>)
 80029f6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
			}
			break;
 80029f8:	e042      	b.n	8002a80 <RunMenu+0x3d0>
				if(SelectRT) {SelectRT--;} else SelectRT =2;
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <RunMenu+0x484>)
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
			break;
 8002a00:	e03e      	b.n	8002a80 <RunMenu+0x3d0>
			else if (MenuItem == 1)
 8002a02:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <RunMenu+0x480>)
 8002a04:	f993 3000 	ldrsb.w	r3, [r3]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d112      	bne.n	8002a32 <RunMenu+0x382>
				if (SelectNEState) { SelectNEState--;} else  SelectNEState =5;
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <RunMenu+0x488>)
 8002a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <RunMenu+0x37a>
 8002a16:	4b48      	ldr	r3, [pc, #288]	@ (8002b38 <RunMenu+0x488>)
 8002a18:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	b25a      	sxtb	r2, r3
 8002a24:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <RunMenu+0x488>)
 8002a26:	701a      	strb	r2, [r3, #0]
			break;
 8002a28:	e02a      	b.n	8002a80 <RunMenu+0x3d0>
				if (SelectNEState) { SelectNEState--;} else  SelectNEState =5;
 8002a2a:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <RunMenu+0x488>)
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	701a      	strb	r2, [r3, #0]
			break;
 8002a30:	e026      	b.n	8002a80 <RunMenu+0x3d0>
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
 8002a32:	4b3e      	ldr	r3, [pc, #248]	@ (8002b2c <RunMenu+0x47c>)
 8002a34:	f993 3000 	ldrsb.w	r3, [r3]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <RunMenu+0x3a0>
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <RunMenu+0x47c>)
 8002a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b25a      	sxtb	r2, r3
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <RunMenu+0x47c>)
 8002a4c:	701a      	strb	r2, [r3, #0]
			break;
 8002a4e:	e017      	b.n	8002a80 <RunMenu+0x3d0>
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <RunMenu+0x47c>)
 8002a52:	2203      	movs	r2, #3
 8002a54:	701a      	strb	r2, [r3, #0]
			break;
 8002a56:	e013      	b.n	8002a80 <RunMenu+0x3d0>
		}
		case (2):{
			if (SelectRT == 0 )
 8002a58:	4b36      	ldr	r3, [pc, #216]	@ (8002b34 <RunMenu+0x484>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <RunMenu+0x3b8>
				RunState = CONTINUOUS;
 8002a60:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <RunMenu+0x48c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
			else if (SelectRT == 1 )
				RunState = SINGLE;
			else
				RunState = HISTOGRAM;
			break;
 8002a66:	e00a      	b.n	8002a7e <RunMenu+0x3ce>
			else if (SelectRT == 1 )
 8002a68:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <RunMenu+0x484>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d103      	bne.n	8002a78 <RunMenu+0x3c8>
				RunState = SINGLE;
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <RunMenu+0x48c>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
			break;
 8002a76:	e002      	b.n	8002a7e <RunMenu+0x3ce>
				RunState = HISTOGRAM;
 8002a78:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <RunMenu+0x48c>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
			break;
 8002a7e:	bf00      	nop
		}

		}
		sprintf(rtext,"RunType:  %c",RunType[SelectRT]);
 8002a80:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <RunMenu+0x484>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <RunMenu+0x490>)
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	492d      	ldr	r1, [pc, #180]	@ (8002b44 <RunMenu+0x494>)
 8002a8e:	482e      	ldr	r0, [pc, #184]	@ (8002b48 <RunMenu+0x498>)
 8002a90:	f016 ff46 	bl	8019920 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 8002a94:	2100      	movs	r1, #0
 8002a96:	2002      	movs	r0, #2
 8002a98:	f001 f99a 	bl	8003dd0 <ssd1306_SetCursor>
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b4c <RunMenu+0x49c>)
 8002a9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aa2:	4829      	ldr	r0, [pc, #164]	@ (8002b48 <RunMenu+0x498>)
 8002aa4:	f001 f96e 	bl	8003d84 <ssd1306_WriteString>
 8002aa8:	f000 ff0e 	bl	80038c8 <ssd1306_UpdateScreen>
		sprintf(rtext,"Exposure: %d    ",(SelectNEStateValue[SelectNEState]));
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <RunMenu+0x488>)
 8002aae:	f993 3000 	ldrsb.w	r3, [r3]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <RunMenu+0x4a0>)
 8002ab6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4925      	ldr	r1, [pc, #148]	@ (8002b54 <RunMenu+0x4a4>)
 8002abe:	4822      	ldr	r0, [pc, #136]	@ (8002b48 <RunMenu+0x498>)
 8002ac0:	f016 ff2e 	bl	8019920 <siprintf>
		LCD_ShowString(2, FontH, 6,8 , White, rtext);
 8002ac4:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <RunMenu+0x4a8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2002      	movs	r0, #2
 8002acc:	f001 f980 	bl	8003dd0 <ssd1306_SetCursor>
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <RunMenu+0x49c>)
 8002ad2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ad6:	481c      	ldr	r0, [pc, #112]	@ (8002b48 <RunMenu+0x498>)
 8002ad8:	f001 f954 	bl	8003d84 <ssd1306_WriteString>
 8002adc:	f000 fef4 	bl	80038c8 <ssd1306_UpdateScreen>
		sprintf(rtext,"Length:   %d    ",SelectNLStateValue[SelectNLState]);
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <RunMenu+0x47c>)
 8002ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <RunMenu+0x4ac>)
 8002aea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002aee:	461a      	mov	r2, r3
 8002af0:	491b      	ldr	r1, [pc, #108]	@ (8002b60 <RunMenu+0x4b0>)
 8002af2:	4815      	ldr	r0, [pc, #84]	@ (8002b48 <RunMenu+0x498>)
 8002af4:	f016 ff14 	bl	8019920 <siprintf>
		LCD_ShowString(2, 2*FontH, 6,8 , White, rtext);
 8002af8:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <RunMenu+0x4a8>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	2002      	movs	r0, #2
 8002b04:	f001 f964 	bl	8003dd0 <ssd1306_SetCursor>
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <RunMenu+0x49c>)
 8002b0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b0e:	480e      	ldr	r0, [pc, #56]	@ (8002b48 <RunMenu+0x498>)
 8002b10:	f001 f938 	bl	8003d84 <ssd1306_WriteString>
 8002b14:	f000 fed8 	bl	80038c8 <ssd1306_UpdateScreen>
	while (RunState == HALT)
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <RunMenu+0x48c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	f43f ae2e 	beq.w	800277e <RunMenu+0xce>
	}
	}

}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	24000218 	.word	0x24000218
 8002b30:	240008de 	.word	0x240008de
 8002b34:	24000227 	.word	0x24000227
 8002b38:	24000209 	.word	0x24000209
 8002b3c:	24000208 	.word	0x24000208
 8002b40:	24000224 	.word	0x24000224
 8002b44:	0801aa3c 	.word	0x0801aa3c
 8002b48:	24000008 	.word	0x24000008
 8002b4c:	24000000 	.word	0x24000000
 8002b50:	2400020c 	.word	0x2400020c
 8002b54:	0801aa6c 	.word	0x0801aa6c
 8002b58:	240008d8 	.word	0x240008d8
 8002b5c:	2400021c 	.word	0x2400021c
 8002b60:	0801aa80 	.word	0x0801aa80

08002b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 FontH = Font_7x10.FontHeight;
 8002b6a:	4bbb      	ldr	r3, [pc, #748]	@ (8002e58 <main+0x2f4>)
 8002b6c:	785a      	ldrb	r2, [r3, #1]
 8002b6e:	4bbb      	ldr	r3, [pc, #748]	@ (8002e5c <main+0x2f8>)
 8002b70:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b72:	f002 f8cb 	bl	8004d0c <HAL_Init>
	//	uint8_t cState=2;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b76:	f000 f9b9 	bl	8002eec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_I2C_RegisterCallback(&hi2c4,HAL_I2C_MEM_TX_COMPLETE_CB_ID,HAL_I2C_MemTxCpltCallback);
 8002b7a:	4ab9      	ldr	r2, [pc, #740]	@ (8002e60 <main+0x2fc>)
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	48b9      	ldr	r0, [pc, #740]	@ (8002e64 <main+0x300>)
 8002b80:	f007 f8cc 	bl	8009d1c <HAL_I2C_RegisterCallback>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b84:	f7fe f89a 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b88:	f7fd fec0 	bl	800090c <MX_DMA_Init>
  MX_MDMA_Init();
 8002b8c:	f000 fb1a 	bl	80031c4 <MX_MDMA_Init>
  MX_BDMA_Init();
 8002b90:	f7fd fe8c 	bl	80008ac <MX_BDMA_Init>
  MX_TIM3_Init();
 8002b94:	f001 fd66 	bl	8004664 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002b98:	f001 fdfe 	bl	8004798 <MX_TIM8_Init>
  MX_TIM1_Init();
 8002b9c:	f001 fbce 	bl	800433c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ba0:	f001 fcac 	bl	80044fc <MX_TIM2_Init>
  MX_FATFS_Init();
 8002ba4:	f012 f8d8 	bl	8014d58 <MX_FATFS_Init>
  MX_RTC_Init();
 8002ba8:	f000 fc32 	bl	8003410 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8002bac:	f000 fd0e 	bl	80035cc <MX_SDMMC1_SD_Init>
  MX_ADC3_Init();
 8002bb0:	f7fd fd5e 	bl	8000670 <MX_ADC3_Init>
  MX_FMC_Init();
 8002bb4:	f7fd ff1c 	bl	80009f0 <MX_FMC_Init>
  MX_I2C4_Init();
 8002bb8:	f7fe fb14 	bl	80011e4 <MX_I2C4_Init>
  MX_I2C1_Init();
 8002bbc:	f7fe fad2 	bl	8001164 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   MX_RTC_InitAlt();
 8002bc0:	f000 fcde 	bl	8003580 <MX_RTC_InitAlt>

  //	HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET);
	MX_GPIO2Init();  //pullups for keypad
 8002bc4:	f7fe fac6 	bl	8001154 <MX_GPIO2Init>

	for(int i=1; i<128; i++)
 8002bc8:	2301      	movs	r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e018      	b.n	8002c00 <main+0x9c>
	{
		int ret = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	2203      	movs	r2, #3
 8002bda:	48a2      	ldr	r0, [pc, #648]	@ (8002e64 <main+0x300>)
 8002bdc:	f007 fa1e 	bl	800a01c <HAL_I2C_IsDeviceReady>
 8002be0:	4603      	mov	r3, r0
 8002be2:	603b      	str	r3, [r7, #0]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <main+0x96>
		{
			// HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
		}
		else if(ret == HAL_OK)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <main+0x96>
		{
			sprintf(rtext, "0x%X", i);
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	499d      	ldr	r1, [pc, #628]	@ (8002e68 <main+0x304>)
 8002bf4:	489d      	ldr	r0, [pc, #628]	@ (8002e6c <main+0x308>)
 8002bf6:	f016 fe93 	bl	8019920 <siprintf>
	for(int i=1; i<128; i++)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c04:	dde3      	ble.n	8002bce <main+0x6a>
			//    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
		}
	}
	HAL_I2C_RegisterCallback(&hi2c4,HAL_I2C_MEM_TX_COMPLETE_CB_ID,HAL_I2C_MemTxCpltCallback);
 8002c06:	4a96      	ldr	r2, [pc, #600]	@ (8002e60 <main+0x2fc>)
 8002c08:	2105      	movs	r1, #5
 8002c0a:	4896      	ldr	r0, [pc, #600]	@ (8002e64 <main+0x300>)
 8002c0c:	f007 f886 	bl	8009d1c <HAL_I2C_RegisterCallback>

	ssd1306_Init();
 8002c10:	f000 fdc0 	bl	8003794 <ssd1306_Init>
//	HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET);
	ledDisp(255);
 8002c14:	20ff      	movs	r0, #255	@ 0xff
 8002c16:	f7fe fd07 	bl	8001628 <ledDisp>
	sprintf(rtext," Hellow World");
 8002c1a:	4995      	ldr	r1, [pc, #596]	@ (8002e70 <main+0x30c>)
 8002c1c:	4893      	ldr	r0, [pc, #588]	@ (8002e6c <main+0x308>)
 8002c1e:	f016 fe7f 	bl	8019920 <siprintf>
	LCD_ShowString(2, 0, 6,8, White, rtext);
 8002c22:	2100      	movs	r1, #0
 8002c24:	2002      	movs	r0, #2
 8002c26:	f001 f8d3 	bl	8003dd0 <ssd1306_SetCursor>
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <main+0x2f4>)
 8002c2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c30:	488e      	ldr	r0, [pc, #568]	@ (8002e6c <main+0x308>)
 8002c32:	f001 f8a7 	bl	8003d84 <ssd1306_WriteString>
 8002c36:	f000 fe47 	bl	80038c8 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 2*FontH, 6,8, White, rtext);
 8002c3a:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <main+0x2f8>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	2002      	movs	r0, #2
 8002c46:	f001 f8c3 	bl	8003dd0 <ssd1306_SetCursor>
 8002c4a:	4b83      	ldr	r3, [pc, #524]	@ (8002e58 <main+0x2f4>)
 8002c4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c50:	4886      	ldr	r0, [pc, #536]	@ (8002e6c <main+0x308>)
 8002c52:	f001 f897 	bl	8003d84 <ssd1306_WriteString>
 8002c56:	f000 fe37 	bl	80038c8 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 4*FontH, 6,8, White, rtext);
 8002c5a:	4b80      	ldr	r3, [pc, #512]	@ (8002e5c <main+0x2f8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	2002      	movs	r0, #2
 8002c66:	f001 f8b3 	bl	8003dd0 <ssd1306_SetCursor>
 8002c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e58 <main+0x2f4>)
 8002c6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c70:	487e      	ldr	r0, [pc, #504]	@ (8002e6c <main+0x308>)
 8002c72:	f001 f887 	bl	8003d84 <ssd1306_WriteString>
 8002c76:	f000 fe27 	bl	80038c8 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 6*FontH, 6,8, White, rtext);
 8002c7a:	4b78      	ldr	r3, [pc, #480]	@ (8002e5c <main+0x2f8>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	0052      	lsls	r2, r2, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	f001 f8a0 	bl	8003dd0 <ssd1306_SetCursor>
 8002c90:	4b71      	ldr	r3, [pc, #452]	@ (8002e58 <main+0x2f4>)
 8002c92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c96:	4875      	ldr	r0, [pc, #468]	@ (8002e6c <main+0x308>)
 8002c98:	f001 f874 	bl	8003d84 <ssd1306_WriteString>
 8002c9c:	f000 fe14 	bl	80038c8 <ssd1306_UpdateScreen>
	ledDisp(0);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fe fcc1 	bl	8001628 <ledDisp>

	memTest();
 8002ca6:	f000 fb9b 	bl	80033e0 <memTest>



#ifdef DISK
	if(BSP_SD_Init()!=0)
 8002caa:	f012 f86f 	bl	8014d8c <BSP_SD_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <main+0x156>
	{
		HAL_Delay(5);
 8002cb4:	2005      	movs	r0, #5
 8002cb6:	f002 f8bb 	bl	8004e30 <HAL_Delay>
	}
	if(disk_initialize(0) != RES_OK)
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f012 fb6a 	bl	8015394 <disk_initialize>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <main+0x168>
	{
		HAL_Delay(5);
 8002cc6:	2005      	movs	r0, #5
 8002cc8:	f002 f8b2 	bl	8004e30 <HAL_Delay>
	}
#endif
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)	Error_Handler();
 8002ccc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4868      	ldr	r0, [pc, #416]	@ (8002e74 <main+0x310>)
 8002cd4:	f003 fefe 	bl	8006ad4 <HAL_ADCEx_Calibration_Start>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <main+0x17e>
 8002cde:	f000 fa69 	bl	80031b4 <Error_Handler>

	HAL_ADC_RegisterCallback(&hadc3, HAL_ADC_CONVERSION_COMPLETE_CB_ID,HAL_ADC_ConvCpltCallback );
 8002ce2:	4a65      	ldr	r2, [pc, #404]	@ (8002e78 <main+0x314>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4863      	ldr	r0, [pc, #396]	@ (8002e74 <main+0x310>)
 8002ce8:	f002 fd16 	bl	8005718 <HAL_ADC_RegisterCallback>
	HAL_ADC_RegisterCallback(&hadc3, HAL_ADC_CONVERSION_HALF_CB_ID,HAL_ADC_ConvHalfCpltCallback );
 8002cec:	4a63      	ldr	r2, [pc, #396]	@ (8002e7c <main+0x318>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4860      	ldr	r0, [pc, #384]	@ (8002e74 <main+0x310>)
 8002cf2:	f002 fd11 	bl	8005718 <HAL_ADC_RegisterCallback>

	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_stream7, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8002cf6:	4a62      	ldr	r2, [pc, #392]	@ (8002e80 <main+0x31c>)
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4862      	ldr	r0, [pc, #392]	@ (8002e84 <main+0x320>)
 8002cfc:	f005 ffc6 	bl	8008c8c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_stream7, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8002d00:	4a61      	ldr	r2, [pc, #388]	@ (8002e88 <main+0x324>)
 8002d02:	2104      	movs	r1, #4
 8002d04:	485f      	ldr	r0, [pc, #380]	@ (8002e84 <main+0x320>)
 8002d06:	f005 ffc1 	bl	8008c8c <HAL_DMA_RegisterCallback>


	HAL_ADC_Start_DMA(&hadc3,(uint32_t *)dmaBuffer,DMABUFFLEN);
 8002d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0e:	495f      	ldr	r1, [pc, #380]	@ (8002e8c <main+0x328>)
 8002d10:	4858      	ldr	r0, [pc, #352]	@ (8002e74 <main+0x310>)
 8002d12:	f002 fd9d 	bl	8005850 <HAL_ADC_Start_DMA>

	if (HAL_OK != HAL_TIM_Base_Start_IT(&htim1)) Error_Handler();
 8002d16:	485e      	ldr	r0, [pc, #376]	@ (8002e90 <main+0x32c>)
 8002d18:	f00f fbdc 	bl	80124d4 <HAL_TIM_Base_Start_IT>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <main+0x1c2>
 8002d22:	f000 fa47 	bl	80031b4 <Error_Handler>


	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2))Error_Handler();
 8002d26:	2104      	movs	r1, #4
 8002d28:	485a      	ldr	r0, [pc, #360]	@ (8002e94 <main+0x330>)
 8002d2a:	f00f fcb9 	bl	80126a0 <HAL_TIM_PWM_Start>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <main+0x1d4>
 8002d34:	f000 fa3e 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1))		Error_Handler();
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4856      	ldr	r0, [pc, #344]	@ (8002e94 <main+0x330>)
 8002d3c:	f00f fcb0 	bl	80126a0 <HAL_TIM_PWM_Start>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <main+0x1e6>
 8002d46:	f000 fa35 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1))		Error_Handler();
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4852      	ldr	r0, [pc, #328]	@ (8002e98 <main+0x334>)
 8002d4e:	f00f fca7 	bl	80126a0 <HAL_TIM_PWM_Start>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <main+0x1f8>
 8002d58:	f000 fa2c 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2))		Error_Handler();
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	484e      	ldr	r0, [pc, #312]	@ (8002e98 <main+0x334>)
 8002d60:	f00f fc9e 	bl	80126a0 <HAL_TIM_PWM_Start>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <main+0x20a>
 8002d6a:	f000 fa23 	bl	80031b4 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1))		Error_Handler();
 8002d6e:	2100      	movs	r1, #0
 8002d70:	484a      	ldr	r0, [pc, #296]	@ (8002e9c <main+0x338>)
 8002d72:	f00f fc95 	bl	80126a0 <HAL_TIM_PWM_Start>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <main+0x21c>
 8002d7c:	f000 fa1a 	bl	80031b4 <Error_Handler>

	//RTC_Set(23, 5, 5, 11,28, 0,5) ;  //CLOCK INITILAIZE

	if (HAL_GPIO_ReadPin (GPIOH, TimeSet_Pin)==0) setTime();
 8002d80:	2110      	movs	r1, #16
 8002d82:	4847      	ldr	r0, [pc, #284]	@ (8002ea0 <main+0x33c>)
 8002d84:	f006 fea6 	bl	8009ad4 <HAL_GPIO_ReadPin>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <main+0x22e>
 8002d8e:	f7fe fce3 	bl	8001758 <setTime>
#ifdef ONEPWR
	HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_SET);
 8002d92:	2201      	movs	r2, #1
 8002d94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d98:	4842      	ldr	r0, [pc, #264]	@ (8002ea4 <main+0x340>)
 8002d9a:	f006 feb3 	bl	8009b04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002d9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002da2:	f002 f845 	bl	8004e30 <HAL_Delay>
	HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal* 125 boards
 8002da6:	2200      	movs	r2, #0
 8002da8:	2101      	movs	r1, #1
 8002daa:	483f      	ldr	r0, [pc, #252]	@ (8002ea8 <main+0x344>)
 8002dac:	f006 feaa 	bl	8009b04 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002db0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db4:	f002 f83c 	bl	8004e30 <HAL_Delay>
#endif
	HAL_Delay(500);
 8002db8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dbc:	f002 f838 	bl	8004e30 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		RunMenu();
 8002dc0:	f7ff fc76 	bl	80026b0 <RunMenu>
//		RunState = HISTOGRAM;//}{ menu test debug

		Exposure = (SelectNEStateValue[SelectNEState]);
 8002dc4:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <main+0x348>)
 8002dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b38      	ldr	r3, [pc, #224]	@ (8002eb0 <main+0x34c>)
 8002dce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <main+0x350>)
 8002dd6:	601a      	str	r2, [r3, #0]
		NumLines = SelectNLStateValue[SelectNLState];
 8002dd8:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <main+0x354>)
 8002dda:	f993 3000 	ldrsb.w	r3, [r3]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <main+0x358>)
 8002de2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <main+0x35c>)
 8002dea:	601a      	str	r2, [r3, #0]
		//
		if (RunState == HISTOGRAM)
 8002dec:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <main+0x360>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d102      	bne.n	8002dfa <main+0x296>
			HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_SET);
			HAL_Delay(500);
			HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal
			HAL_Delay(500);
#endif
			Histo();
 8002df4:	f7ff f810 	bl	8001e18 <Histo>
 8002df8:	e072      	b.n	8002ee0 <main+0x37c>
			HAL_Delay(500);
			HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal
			HAL_Delay(500);
#endif
			do{
				TrialStart();
 8002dfa:	f7ff f8b7 	bl	8001f6c <TrialStart>
				while (1){

					if (SEQ_Complete == Sequence){  //================================================================
 8002dfe:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <main+0x364>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d116      	bne.n	8002e34 <main+0x2d0>
						TrialComplete();
 8002e06:	f7ff fa81 	bl	800230c <TrialComplete>
						sprintf(rtext," Complete          ");
 8002e0a:	4930      	ldr	r1, [pc, #192]	@ (8002ecc <main+0x368>)
 8002e0c:	4817      	ldr	r0, [pc, #92]	@ (8002e6c <main+0x308>)
 8002e0e:	f016 fd87 	bl	8019920 <siprintf>
						LCD_ShowString(2, 0, 6,8, White, rtext);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2002      	movs	r0, #2
 8002e16:	f000 ffdb 	bl	8003dd0 <ssd1306_SetCursor>
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <main+0x2f4>)
 8002e1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e20:	4812      	ldr	r0, [pc, #72]	@ (8002e6c <main+0x308>)
 8002e22:	f000 ffaf 	bl	8003d84 <ssd1306_WriteString>
 8002e26:	f000 fd4f 	bl	80038c8 <ssd1306_UpdateScreen>
						HAL_Delay(1000);
 8002e2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e2e:	f001 ffff 	bl	8004e30 <HAL_Delay>

						break;
 8002e32:	e051      	b.n	8002ed8 <main+0x374>
					}
					if (ADCstate == ADC_2half && Sequence==SEQ_ONgoing){//============================================
 8002e34:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <main+0x36c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d105      	bne.n	8002e48 <main+0x2e4>
 8002e3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <main+0x364>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d101      	bne.n	8002e48 <main+0x2e4>
						TrialOngoing();
 8002e44:	f7ff fb56 	bl	80024f4 <TrialOngoing>
					}
					if (xferState == Ready){
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <main+0x370>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d1d6      	bne.n	8002dfe <main+0x29a>
						xferState = NotReady;
 8002e50:	4b20      	ldr	r3, [pc, #128]	@ (8002ed4 <main+0x370>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
					if (SEQ_Complete == Sequence){  //================================================================
 8002e56:	e7d2      	b.n	8002dfe <main+0x29a>
 8002e58:	24000000 	.word	0x24000000
 8002e5c:	240008d8 	.word	0x240008d8
 8002e60:	08003e99 	.word	0x08003e99
 8002e64:	2400050c 	.word	0x2400050c
 8002e68:	0801aa94 	.word	0x0801aa94
 8002e6c:	24000008 	.word	0x24000008
 8002e70:	0801aa9c 	.word	0x0801aa9c
 8002e74:	240002bc 	.word	0x240002bc
 8002e78:	08003005 	.word	0x08003005
 8002e7c:	08005e61 	.word	0x08005e61
 8002e80:	08003129 	.word	0x08003129
 8002e84:	240003c4 	.word	0x240003c4
 8002e88:	0800317d 	.word	0x0800317d
 8002e8c:	30000000 	.word	0x30000000
 8002e90:	24000ccc 	.word	0x24000ccc
 8002e94:	24000d88 	.word	0x24000d88
 8002e98:	24000e44 	.word	0x24000e44
 8002e9c:	24000f00 	.word	0x24000f00
 8002ea0:	58021c00 	.word	0x58021c00
 8002ea4:	58021800 	.word	0x58021800
 8002ea8:	58020400 	.word	0x58020400
 8002eac:	24000209 	.word	0x24000209
 8002eb0:	2400020c 	.word	0x2400020c
 8002eb4:	24000b24 	.word	0x24000b24
 8002eb8:	24000218 	.word	0x24000218
 8002ebc:	2400021c 	.word	0x2400021c
 8002ec0:	24000b28 	.word	0x24000b28
 8002ec4:	24000208 	.word	0x24000208
 8002ec8:	240008da 	.word	0x240008da
 8002ecc:	0801aaac 	.word	0x0801aaac
 8002ed0:	240008db 	.word	0x240008db
 8002ed4:	240008dd 	.word	0x240008dd
					}

				}//******************************************************************************************************
			}while (RunState == CONTINUOUS);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <main+0x384>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d08c      	beq.n	8002dfa <main+0x296>
			HAL_Delay(250);
			HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_RESET);
			HAL_Delay(100);
#endif
		}
		RunState = HALT;
 8002ee0:	4b01      	ldr	r3, [pc, #4]	@ (8002ee8 <main+0x384>)
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	701a      	strb	r2, [r3, #0]
		RunMenu();
 8002ee6:	e76b      	b.n	8002dc0 <main+0x25c>
 8002ee8:	24000208 	.word	0x24000208

08002eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09c      	sub	sp, #112	@ 0x70
 8002ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ef6:	224c      	movs	r2, #76	@ 0x4c
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f016 fd73 	bl	80199e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2220      	movs	r2, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f016 fd6d 	bl	80199e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f009 fc33 	bl	800c778 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b38      	ldr	r3, [pc, #224]	@ (8002ff8 <SystemClock_Config+0x10c>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	4a37      	ldr	r2, [pc, #220]	@ (8002ff8 <SystemClock_Config+0x10c>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002f22:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <SystemClock_Config+0x10c>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <SystemClock_Config+0x110>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4a32      	ldr	r2, [pc, #200]	@ (8002ffc <SystemClock_Config+0x110>)
 8002f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f36:	6193      	str	r3, [r2, #24]
 8002f38:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <SystemClock_Config+0x110>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f44:	bf00      	nop
 8002f46:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <SystemClock_Config+0x110>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f52:	d1f8      	bne.n	8002f46 <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f54:	f009 fc00 	bl	800c758 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f58:	f001 ff8e 	bl	8004e78 <HAL_GetREVID>
 8002f5c:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <SystemClock_Config+0x114>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <SystemClock_Config+0x114>)
 8002f62:	f023 0318 	bic.w	r3, r3, #24
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002f68:	2307      	movs	r3, #7
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f72:	2301      	movs	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f7a:	2340      	movs	r3, #64	@ 0x40
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f82:	2302      	movs	r3, #2
 8002f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002f86:	2305      	movs	r3, #5
 8002f88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002f8a:	23a0      	movs	r3, #160	@ 0xa0
 8002f8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8002f92:	2314      	movs	r3, #20
 8002f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f009 fc1e 	bl	800c7ec <HAL_RCC_OscConfig>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002fb6:	f000 f8fd 	bl	80031b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fba:	233f      	movs	r3, #63	@ 0x3f
 8002fbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002fca:	2340      	movs	r3, #64	@ 0x40
 8002fcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8002fce:	2350      	movs	r3, #80	@ 0x50
 8002fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8002fd2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002fd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002fd8:	2340      	movs	r3, #64	@ 0x40
 8002fda:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00a f85d 	bl	800d0a0 <HAL_RCC_ClockConfig>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8002fec:	f000 f8e2 	bl	80031b4 <Error_Handler>
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3770      	adds	r7, #112	@ 0x70
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58000400 	.word	0x58000400
 8002ffc:	58024800 	.word	0x58024800
 8003000:	58024400 	.word	0x58024400

08003004 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
//HAL_ADC_ConvCpltCallback
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	if (Sequence!=SEQ_Ready){
 800300c:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_ADC_ConvCpltCallback+0x64>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_ADC_ConvCpltCallback+0x5a>
		//		CPLT_ADC_GPIO;
		xferState = Ready;
 8003014:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_ADC_ConvCpltCallback+0x68>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
		Sequence = SEQ_ONgoing;
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_ADC_ConvCpltCallback+0x64>)
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
		//		dmaBuffer[1] = (uint32_t )CurrentSlot;
		//		dmaBuffer[2] = (uint32_t )CurrentSlot%SLOTS;
		//		dmaBuffer[3] = (uint32_t )0x0;
		////		dmaBuffer[4] = (uint32_t )0xffffffff;

		HAL_DMA_Start_IT(&hdma_memtomem_dma1_stream7,(uint32_t )dmaBuffer, (uint32_t )(SDRAMAREA+((CurrentSlot%SLOTS)*(Npixels*2))), 2*Npixels*2);
 8003020:	4813      	ldr	r0, [pc, #76]	@ (8003070 <HAL_ADC_ConvCpltCallback+0x6c>)
 8003022:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_ADC_ConvCpltCallback+0x70>)
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <HAL_ADC_ConvCpltCallback+0x74>)
 8003028:	fba3 2301 	umull	r2, r3, r3, r1
 800302c:	0ada      	lsrs	r2, r3, #11
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	1aca      	subs	r2, r1, r3
 8003038:	f502 23c0 	add.w	r3, r2, #393216	@ 0x60000
 800303c:	035a      	lsls	r2, r3, #13
 800303e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003042:	4601      	mov	r1, r0
 8003044:	480d      	ldr	r0, [pc, #52]	@ (800307c <HAL_ADC_ConvCpltCallback+0x78>)
 8003046:	f004 fa47 	bl	80074d8 <HAL_DMA_Start_IT>
		CurrentSlot+=2;
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_ADC_ConvCpltCallback+0x70>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3302      	adds	r3, #2
 8003050:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_ADC_ConvCpltCallback+0x70>)
 8003052:	6013      	str	r3, [r2, #0]

		IRQCNT_HAL_ADC_ConvCpltCallback++;
 8003054:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_ADC_ConvCpltCallback+0x7c>)
 800305c:	6013      	str	r3, [r2, #0]
		//		CPLT_ADC_GPIO;
	}
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	240008da 	.word	0x240008da
 800306c:	240008dd 	.word	0x240008dd
 8003070:	30000000 	.word	0x30000000
 8003074:	24000b7c 	.word	0x24000b7c
 8003078:	88888889 	.word	0x88888889
 800307c:	240003c4 	.word	0x240003c4
 8003080:	24000b58 	.word	0x24000b58

08003084 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d126      	bne.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		//		CPLT_TIM1pe_GPIO;
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))		Error_Handler();
 8003094:	2100      	movs	r1, #0
 8003096:	4815      	ldr	r0, [pc, #84]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003098:	f00f fc10 	bl	80128bc <HAL_TIM_PWM_Stop>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0x22>
 80030a2:	f000 f887 	bl	80031b4 <Error_Handler>
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))		Error_Handler();
 80030a6:	2104      	movs	r1, #4
 80030a8:	4810      	ldr	r0, [pc, #64]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80030aa:	f00f fc07 	bl	80128bc <HAL_TIM_PWM_Stop>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_TIM_PeriodElapsedCallback+0x34>
 80030b4:	f000 f87e 	bl	80031b4 <Error_Handler>
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))		Error_Handler();
 80030b8:	2108      	movs	r1, #8
 80030ba:	480c      	ldr	r0, [pc, #48]	@ (80030ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80030bc:	f00f fbfe 	bl	80128bc <HAL_TIM_PWM_Stop>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_PeriodElapsedCallback+0x46>
 80030c6:	f000 f875 	bl	80031b4 <Error_Handler>
//		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1))	Error_Handler();
		if (Sequence!=SEQ_Ready)
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_TIM_PeriodElapsedCallback+0x54>
			Sequence=SEQ_Complete;
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80030d4:	2203      	movs	r2, #3
 80030d6:	701a      	strb	r2, [r3, #0]
		IRQCNT_HAL_TIM_PeriodElapsedCallback1++;
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80030e0:	6013      	str	r3, [r2, #0]
		//		CPLT_TIM1pe_GPIO;
	}
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	24000ccc 	.word	0x24000ccc
 80030f0:	240008da 	.word	0x240008da
 80030f4:	24000b5c 	.word	0x24000b5c

080030f8 <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a07      	ldr	r2, [pc, #28]	@ (8003120 <HAL_TIM_TriggerCallback+0x28>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d104      	bne.n	8003112 <HAL_TIM_TriggerCallback+0x1a>
	{
		//		TRIGGER_TIM1_GPIO;
		IRQCNT_HAL_TIM_TriggerCallback1++;
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_TIM_TriggerCallback+0x2c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <HAL_TIM_TriggerCallback+0x2c>)
 8003110:	6013      	str	r3, [r2, #0]
		//		TRIGGER_TIM1_GPIO;
	}

}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	24000ccc 	.word	0x24000ccc
 8003124:	24000b60 	.word	0x24000b60

08003128 <TransferComplete>:
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	if (hdma == &hdma_memtomem_dma1_stream7){
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <TransferComplete+0x40>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d10c      	bne.n	8003152 <TransferComplete+0x2a>
		//CurrentSlot++;
		if (SEQ_ONgoing == Sequence)
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <TransferComplete+0x44>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d102      	bne.n	8003146 <TransferComplete+0x1e>
		{
			//			DMA_XFR_CPLT_GPIO;
			ADCstate=ADC_2half;
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <TransferComplete+0x48>)
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]

			//			DMA_XFR_CPLT_GPIO;
		}
		TransferComplete7++;
 8003146:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <TransferComplete+0x4c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <TransferComplete+0x4c>)
 800314e:	6013      	str	r3, [r2, #0]
	}else{
		TransferCompleteelse++;
	}
}
 8003150:	e004      	b.n	800315c <TransferComplete+0x34>
		TransferCompleteelse++;
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <TransferComplete+0x50>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	4a07      	ldr	r2, [pc, #28]	@ (8003178 <TransferComplete+0x50>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	240003c4 	.word	0x240003c4
 800316c:	240008da 	.word	0x240008da
 8003170:	240008db 	.word	0x240008db
 8003174:	24000b64 	.word	0x24000b64
 8003178:	24000b68 	.word	0x24000b68

0800317c <TransferError>:
void TransferError(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	ledDisp(0xE0);
 8003184:	20e0      	movs	r0, #224	@ 0xe0
 8003186:	f7fe fa4f 	bl	8001628 <ledDisp>
	HAL_Delay(1500);
 800318a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800318e:	f001 fe4f 	bl	8004e30 <HAL_Delay>
	if (SDstate == SDopen)
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <TransferError+0x30>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <TransferError+0x24>
	{
#ifdef DISK
		f_close(&fp);
 800319a:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <TransferError+0x34>)
 800319c:	f016 f99f 	bl	80194de <f_close>
#endif
	}

	Error_Handler();
 80031a0:	f000 f808 	bl	80031b4 <Error_Handler>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	240008dc 	.word	0x240008dc
 80031b0:	24000680 	.word	0x24000680

080031b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
}
 80031ba:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
//	HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_RESET);
	__disable_irq();
	while (1)
	{
		ledDisp(0xf0);
 80031bc:	20f0      	movs	r0, #240	@ 0xf0
 80031be:	f7fe fa33 	bl	8001628 <ledDisp>
 80031c2:	e7fb      	b.n	80031bc <Error_Handler+0x8>

080031c4 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sdmmc1_command_end_0
  */
void MX_MDMA_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80031ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003284 <MX_MDMA_Init+0xc0>)
 80031cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <MX_MDMA_Init+0xc0>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80031da:	4b2a      	ldr	r3, [pc, #168]	@ (8003284 <MX_MDMA_Init+0xc0>)
 80031dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_command_end_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_command_end_0.Instance = MDMA_Channel0;
 80031e8:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <MX_MDMA_Init+0xc4>)
 80031ea:	4a28      	ldr	r2, [pc, #160]	@ (800328c <MX_MDMA_Init+0xc8>)
 80031ec:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Request = MDMA_REQUEST_SDMMC1_COMMAND_END;
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <MX_MDMA_Init+0xc4>)
 80031f0:	221f      	movs	r2, #31
 80031f2:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80031f4:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <MX_MDMA_Init+0xc4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Priority = MDMA_PRIORITY_LOW;
 80031fa:	4b23      	ldr	r3, [pc, #140]	@ (8003288 <MX_MDMA_Init+0xc4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003200:	4b21      	ldr	r3, [pc, #132]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003208:	f240 2202 	movw	r2, #514	@ 0x202
 800320c:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003210:	f640 0208 	movw	r2, #2056	@ 0x808
 8003214:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003218:	2220      	movs	r2, #32
 800321a:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <MX_MDMA_Init+0xc4>)
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.BufferTransferLength = 1;
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <MX_MDMA_Init+0xc4>)
 800322c:	2201      	movs	r2, #1
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003230:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003232:	2200      	movs	r2, #0
 8003234:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003236:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBlockAddressOffset = 0;
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <MX_MDMA_Init+0xc4>)
 800323e:	2200      	movs	r2, #0
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBlockAddressOffset = 0;
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <MX_MDMA_Init+0xc4>)
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_command_end_0) != HAL_OK)
 8003248:	480f      	ldr	r0, [pc, #60]	@ (8003288 <MX_MDMA_Init+0xc4>)
 800324a:	f008 fffa 	bl	800c242 <HAL_MDMA_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_MDMA_Init+0x94>
  {
    Error_Handler();
 8003254:	f7ff ffae 	bl	80031b4 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_command_end_0, 0, 0) != HAL_OK)
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	480a      	ldr	r0, [pc, #40]	@ (8003288 <MX_MDMA_Init+0xc4>)
 800325e:	f009 f83c 	bl	800c2da <HAL_MDMA_ConfigPostRequestMask>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_MDMA_Init+0xa8>
  {
    Error_Handler();
 8003268:	f7ff ffa4 	bl	80031b4 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	207a      	movs	r0, #122	@ 0x7a
 8003272:	f003 fda0 	bl	8006db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8003276:	207a      	movs	r0, #122	@ 0x7a
 8003278:	f003 fdb7 	bl	8006dea <HAL_NVIC_EnableIRQ>

}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400
 8003288:	24000b88 	.word	0x24000b88
 800328c:	52000040 	.word	0x52000040

08003290 <memTestDataBus>:
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	2301      	movs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e00c      	b.n	80032b8 <memTestDataBus+0x28>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <memTestDataBus+0x22>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	e006      	b.n	80032c0 <memTestDataBus+0x30>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ef      	bne.n	800329e <memTestDataBus+0xe>
 80032be:	2300      	movs	r3, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <memTestAddressBus>:
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3b01      	subs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	f04f 3355 	mov.w	r3, #1431655765	@ 0x55555555
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e008      	b.n	8003302 <memTestAddressBus+0x36>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f1      	bne.n	80032f0 <memTestAddressBus+0x24>
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	2301      	movs	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e00f      	b.n	8003342 <memTestAddressBus+0x76>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	429a      	cmp	r2, r3
 8003330:	d004      	beq.n	800333c <memTestAddressBus+0x70>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	e04b      	b.n	80033d4 <memTestAddressBus+0x108>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ea      	bne.n	8003322 <memTestAddressBus+0x56>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	2301      	movs	r3, #1
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e034      	b.n	80033c8 <memTestAddressBus+0xfc>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d004      	beq.n	800337e <memTestAddressBus+0xb2>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	e02a      	b.n	80033d4 <memTestAddressBus+0x108>
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e013      	b.n	80033ac <memTestAddressBus+0xe0>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d008      	beq.n	80033a6 <memTestAddressBus+0xda>
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	429a      	cmp	r2, r3
 800339a:	d004      	beq.n	80033a6 <memTestAddressBus+0xda>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	e016      	b.n	80033d4 <memTestAddressBus+0x108>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e6      	bne.n	8003384 <memTestAddressBus+0xb8>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1c5      	bne.n	800335e <memTestAddressBus+0x92>
 80033d2:	2300      	movs	r3, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	3724      	adds	r7, #36	@ 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <memTest>:
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 80033e8:	f7ff ff52 	bl	8003290 <memTestDataBus>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <memTest+0x24>
 80033f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033f6:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 80033fa:	f7ff ff67 	bl	80032cc <memTestAddressBus>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <memTest+0x2a>
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	e000      	b.n	800340c <memTest+0x2c>
 800340a:	2300      	movs	r3, #0
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}

08003410 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003424:	2300      	movs	r3, #0
 8003426:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003428:	4b3a      	ldr	r3, [pc, #232]	@ (8003514 <MX_RTC_Init+0x104>)
 800342a:	4a3b      	ldr	r2, [pc, #236]	@ (8003518 <MX_RTC_Init+0x108>)
 800342c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800342e:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <MX_RTC_Init+0x104>)
 8003430:	2200      	movs	r2, #0
 8003432:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003434:	4b37      	ldr	r3, [pc, #220]	@ (8003514 <MX_RTC_Init+0x104>)
 8003436:	227f      	movs	r2, #127	@ 0x7f
 8003438:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800343a:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <MX_RTC_Init+0x104>)
 800343c:	22ff      	movs	r2, #255	@ 0xff
 800343e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003440:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <MX_RTC_Init+0x104>)
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003446:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <MX_RTC_Init+0x104>)
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800344c:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <MX_RTC_Init+0x104>)
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003452:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <MX_RTC_Init+0x104>)
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003458:	482e      	ldr	r0, [pc, #184]	@ (8003514 <MX_RTC_Init+0x104>)
 800345a:	f00c fe95 	bl	8010188 <HAL_RTC_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003464:	f7ff fea6 	bl	80031b4 <Error_Handler>



  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8003468:	2313      	movs	r3, #19
 800346a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 800346c:	2330      	movs	r3, #48	@ 0x30
 800346e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003470:	2300      	movs	r3, #0
 8003472:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8003478:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800347c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	2201      	movs	r2, #1
 8003482:	4619      	mov	r1, r3
 8003484:	4823      	ldr	r0, [pc, #140]	@ (8003514 <MX_RTC_Init+0x104>)
 8003486:	f00c ff01 	bl	801028c <HAL_RTC_SetTime>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003490:	f7ff fe90 	bl	80031b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003494:	2307      	movs	r3, #7
 8003496:	703b      	strb	r3, [r7, #0]
  sDate.Month = 0x08;
 8003498:	2308      	movs	r3, #8
 800349a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x8;
 800349c:	2308      	movs	r3, #8
 800349e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80034a0:	2324      	movs	r3, #36	@ 0x24
 80034a2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034a4:	463b      	mov	r3, r7
 80034a6:	2201      	movs	r2, #1
 80034a8:	4619      	mov	r1, r3
 80034aa:	481a      	ldr	r0, [pc, #104]	@ (8003514 <MX_RTC_Init+0x104>)
 80034ac:	f00c ffe8 	bl	8010480 <HAL_RTC_SetDate>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80034b6:	f7ff fe7d 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80034ba:	2313      	movs	r3, #19
 80034bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 80034be:	2330      	movs	r3, #48	@ 0x30
 80034c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 80034ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80034ce:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	2201      	movs	r2, #1
 80034d4:	4619      	mov	r1, r3
 80034d6:	480f      	ldr	r0, [pc, #60]	@ (8003514 <MX_RTC_Init+0x104>)
 80034d8:	f00c fed8 	bl	801028c <HAL_RTC_SetTime>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80034e2:	f7ff fe67 	bl	80031b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80034e6:	2307      	movs	r3, #7
 80034e8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80034ea:	2311      	movs	r3, #17
 80034ec:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 80034ee:	2302      	movs	r3, #2
 80034f0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80034f2:	2323      	movs	r3, #35	@ 0x23
 80034f4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034f6:	463b      	mov	r3, r7
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	@ (8003514 <MX_RTC_Init+0x104>)
 80034fe:	f00c ffbf 	bl	8010480 <HAL_RTC_SetDate>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_RTC_Init+0xfc>
  {
    Error_Handler();
 8003508:	f7ff fe54 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	24000bf4 	.word	0x24000bf4
 8003518:	58004000 	.word	0x58004000

0800351c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0b2      	sub	sp, #200	@ 0xc8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	22c0      	movs	r2, #192	@ 0xc0
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f016 fa5a 	bl	80199e6 <memset>
  if(rtcHandle->Instance==RTC)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HAL_RTC_MspInit+0x5c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d119      	bne.n	8003570 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800353c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800354c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	4618      	mov	r0, r3
 8003556:	f00a f919 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003560:	f7ff fe28 	bl	80031b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RTC_MspInit+0x60>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	4a04      	ldr	r2, [pc, #16]	@ (800357c <HAL_RTC_MspInit+0x60>)
 800356a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003570:	bf00      	nop
 8003572:	37c8      	adds	r7, #200	@ 0xc8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58004000 	.word	0x58004000
 800357c:	58024400 	.word	0x58024400

08003580 <MX_RTC_InitAlt>:
  }
}

/* USER CODE BEGIN 1 */
void MX_RTC_InitAlt(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	hrtc.Instance = RTC;
 8003584:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 8003586:	4a10      	ldr	r2, [pc, #64]	@ (80035c8 <MX_RTC_InitAlt+0x48>)
 8003588:	601a      	str	r2, [r3, #0]
 hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
 hrtc.Init.AsynchPrediv = 127;
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 8003592:	227f      	movs	r2, #127	@ 0x7f
 8003594:	609a      	str	r2, [r3, #8]
 hrtc.Init.SynchPrediv = 255;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 8003598:	22ff      	movs	r2, #255	@ 0xff
 800359a:	60da      	str	r2, [r3, #12]
 hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
 hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035a2:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
 hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035a8:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
// hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035ae:	4805      	ldr	r0, [pc, #20]	@ (80035c4 <MX_RTC_InitAlt+0x44>)
 80035b0:	f00c fdea 	bl	8010188 <HAL_RTC_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_RTC_InitAlt+0x3e>
 {
   Error_Handler();
 80035ba:	f7ff fdfb 	bl	80031b4 <Error_Handler>
 }
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	24000bf4 	.word	0x24000bf4
 80035c8:	58004000 	.word	0x58004000

080035cc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003604 <MX_SDMMC1_SD_Init+0x38>)
 80035d4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80035dc:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80035e2:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035e8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80035ea:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <MX_SDMMC1_SD_Init+0x34>)
 80035f2:	2202      	movs	r2, #2
 80035f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	24000c18 	.word	0x24000c18
 8003604:	52007000 	.word	0x52007000

08003608 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b0bc      	sub	sp, #240	@ 0xf0
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003620:	f107 0318 	add.w	r3, r7, #24
 8003624:	22c0      	movs	r2, #192	@ 0xc0
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f016 f9dc 	bl	80199e6 <memset>
  if(sdHandle->Instance==SDMMC1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3c      	ldr	r2, [pc, #240]	@ (8003724 <HAL_SD_MspInit+0x11c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d171      	bne.n	800371c <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003638:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003644:	2300      	movs	r3, #0
 8003646:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003648:	f107 0318 	add.w	r3, r7, #24
 800364c:	4618      	mov	r0, r3
 800364e:	f00a f89d 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003658:	f7ff fdac 	bl	80031b4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800365c:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <HAL_SD_MspInit+0x120>)
 800365e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003662:	4a31      	ldr	r2, [pc, #196]	@ (8003728 <HAL_SD_MspInit+0x120>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003668:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800366c:	4b2e      	ldr	r3, [pc, #184]	@ (8003728 <HAL_SD_MspInit+0x120>)
 800366e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <HAL_SD_MspInit+0x120>)
 800367c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003680:	4a29      	ldr	r2, [pc, #164]	@ (8003728 <HAL_SD_MspInit+0x120>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800368a:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <HAL_SD_MspInit+0x120>)
 800368c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003698:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_SD_MspInit+0x120>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369e:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_SD_MspInit+0x120>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003728 <HAL_SD_MspInit+0x120>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 80036b6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80036ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ca:	2303      	movs	r3, #3
 80036cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80036d0:	230c      	movs	r3, #12
 80036d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036da:	4619      	mov	r1, r3
 80036dc:	4813      	ldr	r0, [pc, #76]	@ (800372c <HAL_SD_MspInit+0x124>)
 80036de:	f006 f849 	bl	8009774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036e2:	2304      	movs	r3, #4
 80036e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80036fa:	230c      	movs	r3, #12
 80036fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003700:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003704:	4619      	mov	r1, r3
 8003706:	480a      	ldr	r0, [pc, #40]	@ (8003730 <HAL_SD_MspInit+0x128>)
 8003708:	f006 f834 	bl	8009774 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800370c:	2200      	movs	r2, #0
 800370e:	2100      	movs	r1, #0
 8003710:	2031      	movs	r0, #49	@ 0x31
 8003712:	f003 fb50 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003716:	2031      	movs	r0, #49	@ 0x31
 8003718:	f003 fb67 	bl	8006dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800371c:	bf00      	nop
 800371e:	37f0      	adds	r7, #240	@ 0xf0
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	52007000 	.word	0x52007000
 8003728:	58024400 	.word	0x58024400
 800372c:	58020800 	.word	0x58020800
 8003730:	58020c00 	.word	0x58020c00

08003734 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
 8003748:	2340      	movs	r3, #64	@ 0x40
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8003758:	2380      	movs	r3, #128	@ 0x80
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8003768:	2340      	movs	r3, #64	@ 0x40
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 800377e:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <ssd1306_SetColor+0x1c>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	7153      	strb	r3, [r2, #5]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	24000cbc 	.word	0x24000cbc

08003794 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8003798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800379c:	2205      	movs	r2, #5
 800379e:	2178      	movs	r1, #120	@ 0x78
 80037a0:	4846      	ldr	r0, [pc, #280]	@ (80038bc <ssd1306_Init+0x128>)
 80037a2:	f006 fc3b 	bl	800a01c <HAL_I2C_IsDeviceReady>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 80037ac:	4b44      	ldr	r3, [pc, #272]	@ (80038c0 <ssd1306_Init+0x12c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e07f      	b.n	80038b6 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 80037b6:	2064      	movs	r0, #100	@ 0x64
 80037b8:	f001 fb3a 	bl	8004e30 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 80037bc:	20ae      	movs	r0, #174	@ 0xae
 80037be:	f000 fb2b 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80037c2:	20d5      	movs	r0, #213	@ 0xd5
 80037c4:	f000 fb28 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80037c8:	20f0      	movs	r0, #240	@ 0xf0
 80037ca:	f000 fb25 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 80037ce:	20a8      	movs	r0, #168	@ 0xa8
 80037d0:	f000 fb22 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 80037d4:	f7ff ffb6 	bl	8003744 <height>
 80037d8:	4603      	mov	r3, r0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fb19 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80037e6:	20d3      	movs	r0, #211	@ 0xd3
 80037e8:	f000 fb16 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 fb13 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 80037f2:	2040      	movs	r0, #64	@ 0x40
 80037f4:	f000 fb10 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 80037f8:	208d      	movs	r0, #141	@ 0x8d
 80037fa:	f000 fb0d 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80037fe:	2014      	movs	r0, #20
 8003800:	f000 fb0a 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8003804:	2020      	movs	r0, #32
 8003806:	f000 fb07 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 fb04 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8003810:	20a0      	movs	r0, #160	@ 0xa0
 8003812:	f000 fb01 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8003816:	20c0      	movs	r0, #192	@ 0xc0
 8003818:	f000 fafe 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 800381c:	20da      	movs	r0, #218	@ 0xda
 800381e:	f000 fafb 	bl	8003e18 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8003822:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <ssd1306_Init+0x130>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 800382a:	2012      	movs	r0, #18
 800382c:	f000 faf4 	bl	8003e18 <ssd1306_WriteCommand>
 8003830:	e006      	b.n	8003840 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <ssd1306_Init+0x130>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 800383a:	2002      	movs	r0, #2
 800383c:	f000 faec 	bl	8003e18 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 8003840:	2081      	movs	r0, #129	@ 0x81
 8003842:	f000 fae9 	bl	8003e18 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8003846:	4b1f      	ldr	r3, [pc, #124]	@ (80038c4 <ssd1306_Init+0x130>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 800384e:	20cf      	movs	r0, #207	@ 0xcf
 8003850:	f000 fae2 	bl	8003e18 <ssd1306_WriteCommand>
 8003854:	e006      	b.n	8003864 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8003856:	4b1b      	ldr	r3, [pc, #108]	@ (80038c4 <ssd1306_Init+0x130>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 800385e:	208f      	movs	r0, #143	@ 0x8f
 8003860:	f000 fada 	bl	8003e18 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8003864:	20d9      	movs	r0, #217	@ 0xd9
 8003866:	f000 fad7 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800386a:	20f1      	movs	r0, #241	@ 0xf1
 800386c:	f000 fad4 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8003870:	20db      	movs	r0, #219	@ 0xdb
 8003872:	f000 fad1 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8003876:	2040      	movs	r0, #64	@ 0x40
 8003878:	f000 face 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800387c:	20a4      	movs	r0, #164	@ 0xa4
 800387e:	f000 facb 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8003882:	20a6      	movs	r0, #166	@ 0xa6
 8003884:	f000 fac8 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8003888:	202e      	movs	r0, #46	@ 0x2e
 800388a:	f000 fac5 	bl	8003e18 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800388e:	20af      	movs	r0, #175	@ 0xaf
 8003890:	f000 fac2 	bl	8003e18 <ssd1306_WriteCommand>
//	ssd1306_WriteCommand(0xA7);
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <ssd1306_Init+0x12c>)
 8003896:	2200      	movs	r2, #0
 8003898:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800389a:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <ssd1306_Init+0x12c>)
 800389c:	2200      	movs	r2, #0
 800389e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = White;
 80038a0:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <ssd1306_Init+0x12c>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 80038a6:	f000 faab 	bl	8003e00 <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80038aa:	f000 f80d 	bl	80038c8 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <ssd1306_Init+0x12c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 80038b4:	2301      	movs	r3, #1
//    SSD1306.CurrentX = 0;
//    SSD1306.CurrentY = 0;
//
//    SSD1306.Initialized = 1;
//    return 1;
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2400050c 	.word	0x2400050c
 80038c0:	24000cbc 	.word	0x24000cbc
 80038c4:	24000cc4 	.word	0x24000cc4

080038c8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	e019      	b.n	8003908 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	3b50      	subs	r3, #80	@ 0x50
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa9c 	bl	8003e18 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f000 fa99 	bl	8003e18 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80038e6:	2010      	movs	r0, #16
 80038e8:	f000 fa96 	bl	8003e18 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	01db      	lsls	r3, r3, #7
 80038f0:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <ssd1306_UpdateScreen+0x50>)
 80038f2:	189c      	adds	r4, r3, r2
 80038f4:	f7ff ff1e 	bl	8003734 <width>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4619      	mov	r1, r3
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 faad 	bl	8003e5c <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	3301      	adds	r3, #1
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	2b07      	cmp	r3, #7
 800390c:	d9e2      	bls.n	80038d4 <ssd1306_UpdateScreen+0xc>
	}
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	38000000 	.word	0x38000000

0800391c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	460a      	mov	r2, r1
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	4613      	mov	r3, r2
 800392a:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 800392c:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <ssd1306_DrawPixel+0xe4>)
 800392e:	795b      	ldrb	r3, [r3, #5]
 8003930:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	b29c      	uxth	r4, r3
 8003936:	f7ff ff0d 	bl	8003754 <ssd1306_GetWidth>
 800393a:	4603      	mov	r3, r0
 800393c:	429c      	cmp	r4, r3
 800393e:	d25a      	bcs.n	80039f6 <ssd1306_DrawPixel+0xda>
 8003940:	79bb      	ldrb	r3, [r7, #6]
 8003942:	b29c      	uxth	r4, r3
 8003944:	f7ff ff0e 	bl	8003764 <ssd1306_GetHeight>
 8003948:	4603      	mov	r3, r0
 800394a:	429c      	cmp	r4, r3
 800394c:	d253      	bcs.n	80039f6 <ssd1306_DrawPixel+0xda>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800394e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <ssd1306_DrawPixel+0xe4>)
 8003950:	791b      	ldrb	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d121      	bne.n	80039ae <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 800396a:	79fc      	ldrb	r4, [r7, #7]
 800396c:	79bb      	ldrb	r3, [r7, #6]
 800396e:	08db      	lsrs	r3, r3, #3
 8003970:	b2dd      	uxtb	r5, r3
 8003972:	462e      	mov	r6, r5
 8003974:	f7ff fede 	bl	8003734 <width>
 8003978:	4603      	mov	r3, r0
 800397a:	4618      	mov	r0, r3
 800397c:	4603      	mov	r3, r0
 800397e:	fb06 f303 	mul.w	r3, r6, r3
 8003982:	4423      	add	r3, r4
 8003984:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <ssd1306_DrawPixel+0xe8>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	b25a      	sxtb	r2, r3
 800398a:	79bb      	ldrb	r3, [r7, #6]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	b25b      	sxtb	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b259      	sxtb	r1, r3
 800399c:	79fa      	ldrb	r2, [r7, #7]
 800399e:	462b      	mov	r3, r5
 80039a0:	fb00 f303 	mul.w	r3, r0, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	b2c9      	uxtb	r1, r1
 80039a8:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <ssd1306_DrawPixel+0xe8>)
 80039aa:	54d1      	strb	r1, [r2, r3]
 80039ac:	e024      	b.n	80039f8 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 80039ae:	79fc      	ldrb	r4, [r7, #7]
 80039b0:	79bb      	ldrb	r3, [r7, #6]
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	b2dd      	uxtb	r5, r3
 80039b6:	462e      	mov	r6, r5
 80039b8:	f7ff febc 	bl	8003734 <width>
 80039bc:	4603      	mov	r3, r0
 80039be:	4618      	mov	r0, r3
 80039c0:	4603      	mov	r3, r0
 80039c2:	fb06 f303 	mul.w	r3, r6, r3
 80039c6:	4423      	add	r3, r4
 80039c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <ssd1306_DrawPixel+0xe8>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	b25a      	sxtb	r2, r3
 80039ce:	79bb      	ldrb	r3, [r7, #6]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	4013      	ands	r3, r2
 80039e2:	b259      	sxtb	r1, r3
 80039e4:	79fa      	ldrb	r2, [r7, #7]
 80039e6:	462b      	mov	r3, r5
 80039e8:	fb00 f303 	mul.w	r3, r0, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	b2c9      	uxtb	r1, r1
 80039f0:	4a04      	ldr	r2, [pc, #16]	@ (8003a04 <ssd1306_DrawPixel+0xe8>)
 80039f2:	54d1      	strb	r1, [r2, r3]
 80039f4:	e000      	b.n	80039f8 <ssd1306_DrawPixel+0xdc>
		return;
 80039f6:	bf00      	nop
	}
}
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	24000cbc 	.word	0x24000cbc
 8003a04:	38000000 	.word	0x38000000

08003a08 <ssd1306_DrawVerticalLine>:
    	}; break;
  }
}

void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
 8003a12:	460b      	mov	r3, r1
 8003a14:	80bb      	strh	r3, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	807b      	strh	r3, [r7, #2]
  if (x < 0 || x >= width()) return;
 8003a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f2c0 8113 	blt.w	8003c4a <ssd1306_DrawVerticalLine+0x242>
 8003a24:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003a28:	f7ff fe84 	bl	8003734 <width>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	429c      	cmp	r4, r3
 8003a30:	f280 810b 	bge.w	8003c4a <ssd1306_DrawVerticalLine+0x242>

  if (y < 0)
 8003a34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da06      	bge.n	8003a4a <ssd1306_DrawVerticalLine+0x42>
  {
    length += y;
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	88bb      	ldrh	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	807b      	strh	r3, [r7, #2]
    y = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	80bb      	strh	r3, [r7, #4]
  }

  if ( (y + length) > height())
 8003a4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a52:	18d4      	adds	r4, r2, r3
 8003a54:	f7ff fe76 	bl	8003744 <height>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	429c      	cmp	r4, r3
 8003a5c:	dd07      	ble.n	8003a6e <ssd1306_DrawVerticalLine+0x66>
  {
    length = (height() - y);
 8003a5e:	f7ff fe71 	bl	8003744 <height>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	88bb      	ldrh	r3, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	807b      	strh	r3, [r7, #2]
  }

  if (length <= 0) return;
 8003a6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f340 80eb 	ble.w	8003c4e <ssd1306_DrawVerticalLine+0x246>


  uint8_t yOffset = y & 7;
 8003a78:	88bb      	ldrh	r3, [r7, #4]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	73fb      	strb	r3, [r7, #15]
  uint8_t drawBit;
  uint8_t *bufferPtr = SSD1306_Buffer;
 8003a82:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <ssd1306_DrawVerticalLine+0x254>)
 8003a84:	613b      	str	r3, [r7, #16]

  bufferPtr += (y >> 3) * width();
 8003a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a8a:	10db      	asrs	r3, r3, #3
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	461c      	mov	r4, r3
 8003a90:	f7ff fe50 	bl	8003734 <width>
 8003a94:	4603      	mov	r3, r0
 8003a96:	fb04 f303 	mul.w	r3, r4, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  bufferPtr += x;
 8003aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (yOffset)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d056      	beq.n	8003b60 <ssd1306_DrawVerticalLine+0x158>
  {
    yOffset = 8 - yOffset;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	f1c3 0308 	rsb	r3, r3, #8
 8003ab8:	73fb      	strb	r3, [r7, #15]
    drawBit = ~(0xFF >> (yOffset));
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	22ff      	movs	r2, #255	@ 0xff
 8003abe:	fa42 f303 	asr.w	r3, r2, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	75fb      	strb	r3, [r7, #23]

    if (length < yOffset)
 8003ac8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	da0c      	bge.n	8003aec <ssd1306_DrawVerticalLine+0xe4>
    {
      drawBit &= (0xFF >> (yOffset - length));
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	22ff      	movs	r2, #255	@ 0xff
 8003adc:	fa42 f303 	asr.w	r3, r2, r3
 8003ae0:	b25a      	sxtb	r2, r3
 8003ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	75fb      	strb	r3, [r7, #23]
    }

    switch (SSD1306.Color)
 8003aec:	4b5c      	ldr	r3, [pc, #368]	@ (8003c60 <ssd1306_DrawVerticalLine+0x258>)
 8003aee:	795b      	ldrb	r3, [r3, #5]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d01a      	beq.n	8003b2a <ssd1306_DrawVerticalLine+0x122>
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	dc20      	bgt.n	8003b3a <ssd1306_DrawVerticalLine+0x132>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <ssd1306_DrawVerticalLine+0x108>
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11c      	bne.n	8003b3a <ssd1306_DrawVerticalLine+0x132>
    {
      case White:   *bufferPtr |=  drawBit; break;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e014      	b.n	8003b3a <ssd1306_DrawVerticalLine+0x132>
      case Black:   *bufferPtr &= ~drawBit; break;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b25a      	sxtb	r2, r3
 8003b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	b25b      	sxtb	r3, r3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e007      	b.n	8003b3a <ssd1306_DrawVerticalLine+0x132>
      case Inverse: *bufferPtr ^=  drawBit; break;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	4053      	eors	r3, r2
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	bf00      	nop
    }

    if (length < yOffset) return;
 8003b3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f2c0 8086 	blt.w	8003c52 <ssd1306_DrawVerticalLine+0x24a>

    length -= yOffset;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	807b      	strh	r3, [r7, #2]
    bufferPtr += width();
 8003b52:	f7ff fdef 	bl	8003734 <width>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  }

  if (length >= 8)
 8003b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	dd3c      	ble.n	8003be2 <ssd1306_DrawVerticalLine+0x1da>
  {
    switch (SSD1306.Color)
 8003b68:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <ssd1306_DrawVerticalLine+0x258>)
 8003b6a:	795b      	ldrb	r3, [r3, #5]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	dc02      	bgt.n	8003b76 <ssd1306_DrawVerticalLine+0x16e>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da03      	bge.n	8003b7c <ssd1306_DrawVerticalLine+0x174>
 8003b74:	e035      	b.n	8003be2 <ssd1306_DrawVerticalLine+0x1da>
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d01b      	beq.n	8003bb2 <ssd1306_DrawVerticalLine+0x1aa>
 8003b7a:	e032      	b.n	8003be2 <ssd1306_DrawVerticalLine+0x1da>
    {
      case White:
      case Black:
        drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8003b7c:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <ssd1306_DrawVerticalLine+0x258>)
 8003b7e:	795b      	ldrb	r3, [r3, #5]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <ssd1306_DrawVerticalLine+0x180>
 8003b84:	23ff      	movs	r3, #255	@ 0xff
 8003b86:	e000      	b.n	8003b8a <ssd1306_DrawVerticalLine+0x182>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
        do {
          *bufferPtr = drawBit;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	7dfa      	ldrb	r2, [r7, #23]
 8003b90:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8003b92:	f7ff fdcf 	bl	8003734 <width>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
          length -= 8;
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	3b08      	subs	r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 8003ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	dced      	bgt.n	8003b8c <ssd1306_DrawVerticalLine+0x184>
        break;
 8003bb0:	e017      	b.n	8003be2 <ssd1306_DrawVerticalLine+0x1da>
      case Inverse:
        do {
          *bufferPtr = ~(*bufferPtr);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8003bbe:	f7ff fdb9 	bl	8003734 <width>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
          length -= 8;
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	3b08      	subs	r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 8003bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bd8:	2b07      	cmp	r3, #7
 8003bda:	dd01      	ble.n	8003be0 <ssd1306_DrawVerticalLine+0x1d8>
      case Inverse:
 8003bdc:	bf00      	nop
 8003bde:	e7e8      	b.n	8003bb2 <ssd1306_DrawVerticalLine+0x1aa>
        break;
 8003be0:	bf00      	nop
    }
  }

  if (length > 0)
 8003be2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dd34      	ble.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
  {
    drawBit = (1 << (length & 7)) - 1;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
    switch (SSD1306.Color)
 8003bfc:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <ssd1306_DrawVerticalLine+0x258>)
 8003bfe:	795b      	ldrb	r3, [r3, #5]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d01a      	beq.n	8003c3a <ssd1306_DrawVerticalLine+0x232>
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	dc25      	bgt.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <ssd1306_DrawVerticalLine+0x218>
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d121      	bne.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
    {
      case White:   *bufferPtr |=  drawBit; break;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e019      	b.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
      case Black:   *bufferPtr &= ~drawBit; break;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b25a      	sxtb	r2, r3
 8003c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e00c      	b.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
      case Inverse: *bufferPtr ^=  drawBit; break;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	4053      	eors	r3, r2
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e004      	b.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
  if (x < 0 || x >= width()) return;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
  if (length <= 0) return;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <ssd1306_DrawVerticalLine+0x24c>
    if (length < yOffset) return;
 8003c52:	bf00      	nop
    }
  }
}
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	38000000 	.word	0x38000000
 8003c60:	24000cbc 	.word	0x24000cbc

08003c64 <ssd1306_WriteChar>:
//		pY += 8;
//	}
//}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	e883 0006 	stmia.w	r3, {r1, r2}
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c74:	f7ff fd5e 	bl	8003734 <width>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	793b      	ldrb	r3, [r7, #4]
 8003c84:	440b      	add	r3, r1
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dd0a      	ble.n	8003ca0 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8003c8a:	f7ff fd5b 	bl	8003744 <height>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003c94:	885b      	ldrh	r3, [r3, #2]
 8003c96:	4619      	mov	r1, r3
 8003c98:	797b      	ldrb	r3, [r7, #5]
 8003c9a:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dc01      	bgt.n	8003ca4 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e069      	b.n	8003d78 <ssd1306_WriteChar+0x114>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e059      	b.n	8003d5e <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	3b20      	subs	r3, #32
 8003cb0:	7979      	ldrb	r1, [r7, #5]
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	440b      	add	r3, r1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e041      	b.n	8003d4e <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b2d8      	uxtb	r0, r3
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003cea:	885b      	ldrh	r3, [r3, #2]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f7ff fe10 	bl	800391c <ssd1306_DrawPixel>
 8003cfc:	e024      	b.n	8003d48 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8003cfe:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d00:	795b      	ldrb	r3, [r3, #5]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d10:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003d12:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	b2d8      	uxtb	r0, r3
 8003d20:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d22:	885b      	ldrh	r3, [r3, #2]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7ff fdf4 	bl	800391c <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8003d34:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d36:	795b      	ldrb	r3, [r3, #5]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d46:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	793b      	ldrb	r3, [r7, #4]
 8003d50:	461a      	mov	r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d3b8      	bcc.n	8003cca <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	797b      	ldrb	r3, [r7, #5]
 8003d60:	461a      	mov	r2, r3
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d3a0      	bcc.n	8003caa <ssd1306_WriteChar+0x46>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	793a      	ldrb	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <ssd1306_WriteChar+0x11c>)
 8003d74:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	24000cbc 	.word	0x24000cbc

08003d84 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8003d92:	e012      	b.n	8003dba <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	7818      	ldrb	r0, [r3, #0]
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d9e:	f7ff ff61 	bl	8003c64 <ssd1306_WriteChar>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d002      	beq.n	8003db4 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	e008      	b.n	8003dc6 <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
	while (*str)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e8      	bne.n	8003d94 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460a      	mov	r2, r1
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <ssd1306_SetCursor+0x2c>)
 8003de6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003de8:	79bb      	ldrb	r3, [r7, #6]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4b03      	ldr	r3, [pc, #12]	@ (8003dfc <ssd1306_SetCursor+0x2c>)
 8003dee:	805a      	strh	r2, [r3, #2]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	24000cbc 	.word	0x24000cbc

08003e00 <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8003e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <ssd1306_Clear+0x14>)
 8003e0c:	f015 fdeb 	bl	80199e6 <memset>
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	38000000 	.word	0x38000000

08003e18 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	D3command = command; //must be in D3 ram space
 8003e22:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <ssd1306_WriteCommand+0x3c>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	7013      	strb	r3, [r2, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8003e28:	bf00      	nop
 8003e2a:	480b      	ldr	r0, [pc, #44]	@ (8003e58 <ssd1306_WriteCommand+0x40>)
 8003e2c:	f006 fab5 	bl	800a39a <HAL_I2C_GetState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d1f9      	bne.n	8003e2a <ssd1306_WriteCommand+0x12>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &D3command, 1);
 8003e36:	2301      	movs	r3, #1
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <ssd1306_WriteCommand+0x3c>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2301      	movs	r3, #1
 8003e40:	2200      	movs	r2, #0
 8003e42:	2178      	movs	r1, #120	@ 0x78
 8003e44:	4804      	ldr	r0, [pc, #16]	@ (8003e58 <ssd1306_WriteCommand+0x40>)
 8003e46:	f006 f803 	bl	8009e50 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	38000400 	.word	0x38000400
 8003e58:	2400050c 	.word	0x2400050c

08003e5c <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8003e68:	bf00      	nop
 8003e6a:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <ssd1306_WriteData+0x38>)
 8003e6c:	f006 fa95 	bl	800a39a <HAL_I2C_GetState>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d1f9      	bne.n	8003e6a <ssd1306_WriteData+0xe>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	2178      	movs	r1, #120	@ 0x78
 8003e84:	4803      	ldr	r0, [pc, #12]	@ (8003e94 <ssd1306_WriteData+0x38>)
 8003e86:	f005 ffe3 	bl	8009e50 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	2400050c 	.word	0x2400050c

08003e98 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <HAL_MspInit+0x54>)
 8003eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eb8:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <HAL_MspInit+0x54>)
 8003eba:	f043 0302 	orr.w	r3, r3, #2
 8003ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <HAL_MspInit+0x54>)
 8003ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_MspInit+0x54>)
 8003ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <HAL_MspInit+0x54>)
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003edc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <HAL_MspInit+0x54>)
 8003ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003eee:	f000 ffe3 	bl	8004eb8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003ef2:	2002      	movs	r0, #2
 8003ef4:	f000 ffcc 	bl	8004e90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	58024400 	.word	0x58024400

08003f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <NMI_Handler+0x4>

08003f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
	  volatile unsigned long _AFSR ;
	  volatile unsigned long _BFAR ;
	  volatile unsigned long _MMAR ;
	// Configurable Fault Status Register
	  // Consists of MMSR, BFSR and UFSR
	  _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HardFault_Handler+0x30>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]

	  // Hard Fault Status Register
	  _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
 8003f18:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HardFault_Handler+0x34>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	613b      	str	r3, [r7, #16]

	  // Debug Fault Status Register
	  _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HardFault_Handler+0x38>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

	  // Auxiliary Fault Status Register
	  _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
 8003f24:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <HardFault_Handler+0x3c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60bb      	str	r3, [r7, #8]

	  // Read the Fault Address Registers. These may not contain valid values.
	  // Check BFARVALID/MMARVALID to see if they are valid values
	  // MemManage Fault Address Register
	  _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HardFault_Handler+0x40>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	603b      	str	r3, [r7, #0]
	  // Bus Fault Address Register
	  _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <HardFault_Handler+0x44>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	607b      	str	r3, [r7, #4]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f36:	bf00      	nop
 8003f38:	e7fd      	b.n	8003f36 <HardFault_Handler+0x2a>
 8003f3a:	bf00      	nop
 8003f3c:	e000ed28 	.word	0xe000ed28
 8003f40:	e000ed2c 	.word	0xe000ed2c
 8003f44:	e000ed30 	.word	0xe000ed30
 8003f48:	e000ed3c 	.word	0xe000ed3c
 8003f4c:	e000ed34 	.word	0xe000ed34
 8003f50:	e000ed38 	.word	0xe000ed38

08003f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <MemManage_Handler+0x4>

08003f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <BusFault_Handler+0x4>

08003f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <UsageFault_Handler+0x4>

08003f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f9a:	f000 ff29 	bl	8004df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <TIM1_UP_IRQHandler+0x10>)
 8003faa:	f00e fd85 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	24000ccc 	.word	0x24000ccc

08003fb8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003fbe:	f00e fd7b 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	24000ccc 	.word	0x24000ccc

08003fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <TIM2_IRQHandler+0x10>)
 8003fd2:	f00e fd71 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	24000d88 	.word	0x24000d88

08003fe0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fe4:	4802      	ldr	r0, [pc, #8]	@ (8003ff0 <TIM3_IRQHandler+0x10>)
 8003fe6:	f00e fd67 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	24000e44 	.word	0x24000e44

08003ff4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ff8:	4802      	ldr	r0, [pc, #8]	@ (8004004 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ffa:	f00e fd5d 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	24000f00 	.word	0x24000f00

08004008 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800400c:	4802      	ldr	r0, [pc, #8]	@ (8004018 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800400e:	f00e fd53 	bl	8012ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	24000f00 	.word	0x24000f00

0800401c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_stream7);
 8004020:	4802      	ldr	r0, [pc, #8]	@ (800402c <DMA1_Stream7_IRQHandler+0x10>)
 8004022:	f003 ff09 	bl	8007e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	240003c4 	.word	0x240003c4

08004030 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004034:	4802      	ldr	r0, [pc, #8]	@ (8004040 <SDMMC1_IRQHandler+0x10>)
 8004036:	f00c fe75 	bl	8010d24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	24000c18 	.word	0x24000c18

08004044 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004048:	4802      	ldr	r0, [pc, #8]	@ (8004054 <DMA2_Stream7_IRQHandler+0x10>)
 800404a:	f003 fef5 	bl	8007e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2400034c 	.word	0x2400034c

08004058 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800405c:	4802      	ldr	r0, [pc, #8]	@ (8004068 <I2C4_EV_IRQHandler+0x10>)
 800405e:	f006 f8c9 	bl	800a1f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2400050c 	.word	0x2400050c

0800406c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8004070:	4802      	ldr	r0, [pc, #8]	@ (800407c <I2C4_ER_IRQHandler+0x10>)
 8004072:	f006 f8d9 	bl	800a228 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2400050c 	.word	0x2400050c

08004080 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_command_end_0);
 8004084:	4802      	ldr	r0, [pc, #8]	@ (8004090 <MDMA_IRQHandler+0x10>)
 8004086:	f008 f97b 	bl	800c380 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	24000b88 	.word	0x24000b88

08004094 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004098:	4802      	ldr	r0, [pc, #8]	@ (80040a4 <ADC3_IRQHandler+0x10>)
 800409a:	f001 fc9d 	bl	80059d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	240002bc 	.word	0x240002bc

080040a8 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c4_tx);
 80040ac:	4802      	ldr	r0, [pc, #8]	@ (80040b8 <DMAMUX2_OVR_IRQHandler+0x10>)
 80040ae:	f005 fb0f 	bl	80096d0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	24000590 	.word	0x24000590

080040bc <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 80040c0:	4802      	ldr	r0, [pc, #8]	@ (80040cc <BDMA_Channel0_IRQHandler+0x10>)
 80040c2:	f003 feb9 	bl	8007e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24000590 	.word	0x24000590

080040d0 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 80040d4:	4802      	ldr	r0, [pc, #8]	@ (80040e0 <BDMA_Channel1_IRQHandler+0x10>)
 80040d6:	f003 feaf 	bl	8007e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	24000608 	.word	0x24000608

080040e4 <_read>:
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e00a      	b.n	800410c <_read+0x28>
 80040f6:	f3af 8000 	nop.w
 80040fa:	4601      	mov	r1, r0
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	60ba      	str	r2, [r7, #8]
 8004102:	b2ca      	uxtb	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	dbf0      	blt.n	80040f6 <_read+0x12>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_write>:
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e009      	b.n	8004144 <_write+0x26>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	60ba      	str	r2, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f3af 8000 	nop.w
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	dbf1      	blt.n	8004130 <_write+0x12>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_close>:
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_fstat>:
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	2300      	movs	r3, #0
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_isatty>:
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	2301      	movs	r3, #1
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_lseek>:
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_sbrk>:
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	4a14      	ldr	r2, [pc, #80]	@ (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	4b13      	ldr	r3, [pc, #76]	@ (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	@ (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <_sbrk+0x40>
 80041f0:	f015 fc48 	bl	8019a84 <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	220c      	movs	r2, #12
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e009      	b.n	8004214 <_sbrk+0x54>
 8004200:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <_sbrk+0x64>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	24080000 	.word	0x24080000
 8004220:	00001600 	.word	0x00001600
 8004224:	24000cc8 	.word	0x24000cc8
 8004228:	240017c8 	.word	0x240017c8

0800422c <SystemInit>:
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
 8004230:	4b37      	ldr	r3, [pc, #220]	@ (8004310 <SystemInit+0xe4>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	4a36      	ldr	r2, [pc, #216]	@ (8004310 <SystemInit+0xe4>)
 8004238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800423c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8004240:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <SystemInit+0xe8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2b06      	cmp	r3, #6
 800424a:	d807      	bhi.n	800425c <SystemInit+0x30>
 800424c:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <SystemInit+0xe8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 030f 	bic.w	r3, r3, #15
 8004254:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <SystemInit+0xe8>)
 8004256:	f043 0307 	orr.w	r3, r3, #7
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <SystemInit+0xec>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <SystemInit+0xec>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <SystemInit+0xec>)
 800426a:	2200      	movs	r2, #0
 800426c:	611a      	str	r2, [r3, #16]
 800426e:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <SystemInit+0xec>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4929      	ldr	r1, [pc, #164]	@ (8004318 <SystemInit+0xec>)
 8004274:	4b29      	ldr	r3, [pc, #164]	@ (800431c <SystemInit+0xf0>)
 8004276:	4013      	ands	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
 800427a:	4b26      	ldr	r3, [pc, #152]	@ (8004314 <SystemInit+0xe8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <SystemInit+0x6a>
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <SystemInit+0xe8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 030f 	bic.w	r3, r3, #15
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <SystemInit+0xe8>)
 8004290:	f043 0307 	orr.w	r3, r3, #7
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b20      	ldr	r3, [pc, #128]	@ (8004318 <SystemInit+0xec>)
 8004298:	2200      	movs	r2, #0
 800429a:	619a      	str	r2, [r3, #24]
 800429c:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <SystemInit+0xec>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
 80042a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <SystemInit+0xec>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	621a      	str	r2, [r3, #32]
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <SystemInit+0xec>)
 80042aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <SystemInit+0xf4>)
 80042ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <SystemInit+0xec>)
 80042b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <SystemInit+0xf8>)
 80042b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <SystemInit+0xec>)
 80042b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <SystemInit+0xfc>)
 80042b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80042ba:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <SystemInit+0xec>)
 80042bc:	2200      	movs	r2, #0
 80042be:	635a      	str	r2, [r3, #52]	@ 0x34
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <SystemInit+0xec>)
 80042c2:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <SystemInit+0xfc>)
 80042c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <SystemInit+0xec>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042cc:	4b12      	ldr	r3, [pc, #72]	@ (8004318 <SystemInit+0xec>)
 80042ce:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <SystemInit+0xfc>)
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d2:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <SystemInit+0xec>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <SystemInit+0xec>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004318 <SystemInit+0xec>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <SystemInit+0xec>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <SystemInit+0x100>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b10      	ldr	r3, [pc, #64]	@ (8004330 <SystemInit+0x104>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f6:	d202      	bcs.n	80042fe <SystemInit+0xd2>
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <SystemInit+0x108>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <SystemInit+0x10c>)
 8004300:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00
 8004314:	52002000 	.word	0x52002000
 8004318:	58024400 	.word	0x58024400
 800431c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004320:	02020200 	.word	0x02020200
 8004324:	01ff0000 	.word	0x01ff0000
 8004328:	01010280 	.word	0x01010280
 800432c:	5c001000 	.word	0x5c001000
 8004330:	ffff0000 	.word	0xffff0000
 8004334:	51008108 	.word	0x51008108
 8004338:	52004000 	.word	0x52004000

0800433c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b09a      	sub	sp, #104	@ 0x68
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004342:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004350:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800435c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
 800436c:	615a      	str	r2, [r3, #20]
 800436e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	222c      	movs	r2, #44	@ 0x2c
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f015 fb35 	bl	80199e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800437c:	4b5a      	ldr	r3, [pc, #360]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 800437e:	4a5b      	ldr	r2, [pc, #364]	@ (80044ec <MX_TIM1_Init+0x1b0>)
 8004380:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((Usec*TIMENumer/TIMEDenom)-1);
 8004382:	4b59      	ldr	r3, [pc, #356]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 8004384:	223d      	movs	r2, #61	@ 0x3d
 8004386:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004388:	4b57      	ldr	r3, [pc, #348]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((Exposure*TIMEDenom/TIMENumer)-1);
 800438e:	4b58      	ldr	r3, [pc, #352]	@ (80044f0 <MX_TIM1_Init+0x1b4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4a57      	ldr	r2, [pc, #348]	@ (80044f4 <MX_TIM1_Init+0x1b8>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	3b01      	subs	r3, #1
 800439e:	4a52      	ldr	r2, [pc, #328]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043a0:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043a2:	4b51      	ldr	r3, [pc, #324]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = NumLines;
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <MX_TIM1_Init+0x1bc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4e      	ldr	r2, [pc, #312]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043ae:	6153      	str	r3, [r2, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043b0:	4b4d      	ldr	r3, [pc, #308]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043b2:	2280      	movs	r2, #128	@ 0x80
 80043b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043b6:	484c      	ldr	r0, [pc, #304]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043b8:	f00d ff90 	bl	80122dc <HAL_TIM_Base_Init>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80043c2:	f7fe fef7 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80043d0:	4619      	mov	r1, r3
 80043d2:	4845      	ldr	r0, [pc, #276]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043d4:	f00e fdae 	bl	8012f34 <HAL_TIM_ConfigClockSource>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80043de:	f7fe fee9 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043e2:	4841      	ldr	r0, [pc, #260]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043e4:	f00e f8ee 	bl	80125c4 <HAL_TIM_PWM_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80043ee:	f7fe fee1 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80043f2:	2108      	movs	r1, #8
 80043f4:	483c      	ldr	r0, [pc, #240]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80043f6:	f00e faf7 	bl	80129e8 <HAL_TIM_OnePulse_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004400:	f7fe fed8 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8004404:	2340      	movs	r3, #64	@ 0x40
 8004406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004408:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800440c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800440e:	2380      	movs	r3, #128	@ 0x80
 8004410:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004412:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004416:	4619      	mov	r1, r3
 8004418:	4833      	ldr	r0, [pc, #204]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 800441a:	f00f fc9d 	bl	8013d58 <HAL_TIMEx_MasterConfigSynchronization>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004424:	f7fe fec6 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004428:	2370      	movs	r3, #112	@ 0x70
 800442a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 4;
 800442c:	2304      	movs	r3, #4
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004430:	2302      	movs	r3, #2
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004434:	2300      	movs	r3, #0
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800443c:	2300      	movs	r3, #0
 800443e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004440:	2300      	movs	r3, #0
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004444:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004448:	2200      	movs	r2, #0
 800444a:	4619      	mov	r1, r3
 800444c:	4826      	ldr	r0, [pc, #152]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 800444e:	f00e fc5d 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8004458:	f7fe feac 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 800445c:	2303      	movs	r3, #3
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004460:	2304      	movs	r3, #4
 8004462:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004464:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004468:	2204      	movs	r2, #4
 800446a:	4619      	mov	r1, r3
 800446c:	481e      	ldr	r0, [pc, #120]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 800446e:	f00e fc4d 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004478:	f7fe fe9c 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800447c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004480:	2208      	movs	r2, #8
 8004482:	4619      	mov	r1, r3
 8004484:	4818      	ldr	r0, [pc, #96]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 8004486:	f00e fc41 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004490:	f7fe fe90 	bl	80031b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004494:	2300      	movs	r3, #0
 8004496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80044ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80044b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4807      	ldr	r0, [pc, #28]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80044ca:	f00f fcd3 	bl	8013e74 <HAL_TIMEx_ConfigBreakDeadTime>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80044d4:	f7fe fe6e 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044d8:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <MX_TIM1_Init+0x1ac>)
 80044da:	f000 fb07 	bl	8004aec <HAL_TIM_MspPostInit>

}
 80044de:	bf00      	nop
 80044e0:	3768      	adds	r7, #104	@ 0x68
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	24000ccc 	.word	0x24000ccc
 80044ec:	40010000 	.word	0x40010000
 80044f0:	24000b24 	.word	0x24000b24
 80044f4:	cccccccd 	.word	0xcccccccd
 80044f8:	24000b28 	.word	0x24000b28

080044fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b094      	sub	sp, #80	@ 0x50
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004502:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004520:	f107 0320 	add.w	r3, r7, #32
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	615a      	str	r2, [r3, #20]
 800453c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800453e:	4b48      	ldr	r3, [pc, #288]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004540:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004546:	4b46      	ldr	r3, [pc, #280]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004548:	2200      	movs	r2, #0
 800454a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454c:	4b44      	ldr	r3, [pc, #272]	@ (8004660 <MX_TIM2_Init+0x164>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = BlankTime;
 8004552:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004554:	f240 7207 	movw	r2, #1799	@ 0x707
 8004558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800455a:	4b41      	ldr	r3, [pc, #260]	@ (8004660 <MX_TIM2_Init+0x164>)
 800455c:	2200      	movs	r2, #0
 800455e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004566:	483e      	ldr	r0, [pc, #248]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004568:	f00d feb8 	bl	80122dc <HAL_TIM_Base_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004572:	f7fe fe1f 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800457a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800457c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004580:	4619      	mov	r1, r3
 8004582:	4837      	ldr	r0, [pc, #220]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004584:	f00e fcd6 	bl	8012f34 <HAL_TIM_ConfigClockSource>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800458e:	f7fe fe11 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004592:	4833      	ldr	r0, [pc, #204]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004594:	f00e f816 	bl	80125c4 <HAL_TIM_PWM_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 800459e:	f7fe fe09 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80045a2:	2108      	movs	r1, #8
 80045a4:	482e      	ldr	r0, [pc, #184]	@ (8004660 <MX_TIM2_Init+0x164>)
 80045a6:	f00e fa1f 	bl	80129e8 <HAL_TIM_OnePulse_Init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80045b0:	f7fe fe00 	bl	80031b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80045b4:	2306      	movs	r3, #6
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80045bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	4827      	ldr	r0, [pc, #156]	@ (8004660 <MX_TIM2_Init+0x164>)
 80045c4:	f00e fdae 	bl	8013124 <HAL_TIM_SlaveConfigSynchro>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80045ce:	f7fe fdf1 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045da:	f107 0320 	add.w	r3, r7, #32
 80045de:	4619      	mov	r1, r3
 80045e0:	481f      	ldr	r0, [pc, #124]	@ (8004660 <MX_TIM2_Init+0x164>)
 80045e2:	f00f fbb9 	bl	8013d58 <HAL_TIMEx_MasterConfigSynchronization>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80045ec:	f7fe fde2 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80045f0:	2370      	movs	r3, #112	@ 0x70
 80045f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Usec/3-1;
 80045f4:	2320      	movs	r3, #32
 80045f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80045fc:	2304      	movs	r3, #4
 80045fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004600:	1d3b      	adds	r3, r7, #4
 8004602:	2200      	movs	r2, #0
 8004604:	4619      	mov	r1, r3
 8004606:	4816      	ldr	r0, [pc, #88]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004608:	f00e fb80 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8004612:	f7fe fdcf 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004616:	2360      	movs	r3, #96	@ 0x60
 8004618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (Usec/4) -1;
 800461a:	2318      	movs	r3, #24
 800461c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	2204      	movs	r2, #4
 8004622:	4619      	mov	r1, r3
 8004624:	480e      	ldr	r0, [pc, #56]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004626:	f00e fb71 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM2_Init+0x138>
  {
    Error_Handler();
 8004630:	f7fe fdc0 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	220c      	movs	r2, #12
 8004640:	4619      	mov	r1, r3
 8004642:	4807      	ldr	r0, [pc, #28]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004644:	f00e fb62 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <MX_TIM2_Init+0x156>
  {
    Error_Handler();
 800464e:	f7fe fdb1 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004652:	4803      	ldr	r0, [pc, #12]	@ (8004660 <MX_TIM2_Init+0x164>)
 8004654:	f000 fa4a 	bl	8004aec <HAL_TIM_MspPostInit>

}
 8004658:	bf00      	nop
 800465a:	3750      	adds	r7, #80	@ 0x50
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	24000d88 	.word	0x24000d88

08004664 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b094      	sub	sp, #80	@ 0x50
 8004668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004688:	f107 0320 	add.w	r3, r7, #32
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	615a      	str	r2, [r3, #20]
 80046a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004794 <MX_TIM3_Init+0x130>)
 80046aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046ac:	4b38      	ldr	r3, [pc, #224]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046b2:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (Usec*TIMENumer/TIMEDenom-1);
 80046b8:	4b35      	ldr	r3, [pc, #212]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046ba:	223d      	movs	r2, #61	@ 0x3d
 80046bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046be:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046c4:	4b32      	ldr	r3, [pc, #200]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046ca:	4831      	ldr	r0, [pc, #196]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046cc:	f00d fe06 	bl	80122dc <HAL_TIM_Base_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80046d6:	f7fe fd6d 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046de:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80046e4:	4619      	mov	r1, r3
 80046e6:	482a      	ldr	r0, [pc, #168]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046e8:	f00e fc24 	bl	8012f34 <HAL_TIM_ConfigClockSource>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80046f2:	f7fe fd5f 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046f6:	4826      	ldr	r0, [pc, #152]	@ (8004790 <MX_TIM3_Init+0x12c>)
 80046f8:	f00d ff64 	bl	80125c4 <HAL_TIM_PWM_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8004702:	f7fe fd57 	bl	80031b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8004706:	2305      	movs	r3, #5
 8004708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800470a:	2300      	movs	r3, #0
 800470c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800470e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004712:	4619      	mov	r1, r3
 8004714:	481e      	ldr	r0, [pc, #120]	@ (8004790 <MX_TIM3_Init+0x12c>)
 8004716:	f00e fd05 	bl	8013124 <HAL_TIM_SlaveConfigSynchro>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8004720:	f7fe fd48 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8004724:	2360      	movs	r3, #96	@ 0x60
 8004726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800472c:	f107 0320 	add.w	r3, r7, #32
 8004730:	4619      	mov	r1, r3
 8004732:	4817      	ldr	r0, [pc, #92]	@ (8004790 <MX_TIM3_Init+0x12c>)
 8004734:	f00f fb10 	bl	8013d58 <HAL_TIMEx_MasterConfigSynchronization>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800473e:	f7fe fd39 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004742:	2360      	movs	r3, #96	@ 0x60
 8004744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = ((Usec/4)-1);
 8004746:	2318      	movs	r3, #24
 8004748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	2200      	movs	r2, #0
 8004756:	4619      	mov	r1, r3
 8004758:	480d      	ldr	r0, [pc, #52]	@ (8004790 <MX_TIM3_Init+0x12c>)
 800475a:	f00e fad7 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004764:	f7fe fd26 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.Pulse = (((Usec/4))-1);
 8004768:	2318      	movs	r3, #24
 800476a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	2204      	movs	r2, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4807      	ldr	r0, [pc, #28]	@ (8004790 <MX_TIM3_Init+0x12c>)
 8004774:	f00e faca 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 800477e:	f7fe fd19 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004782:	4803      	ldr	r0, [pc, #12]	@ (8004790 <MX_TIM3_Init+0x12c>)
 8004784:	f000 f9b2 	bl	8004aec <HAL_TIM_MspPostInit>

}
 8004788:	bf00      	nop
 800478a:	3750      	adds	r7, #80	@ 0x50
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	24000e44 	.word	0x24000e44
 8004794:	40000400 	.word	0x40000400

08004798 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b09e      	sub	sp, #120	@ 0x78
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800479e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80047ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
 80047d8:	615a      	str	r2, [r3, #20]
 80047da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047dc:	463b      	mov	r3, r7
 80047de:	222c      	movs	r2, #44	@ 0x2c
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f015 f8ff 	bl	80199e6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047e8:	4b60      	ldr	r3, [pc, #384]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80047ea:	4a61      	ldr	r2, [pc, #388]	@ (8004970 <MX_TIM8_Init+0x1d8>)
 80047ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047ee:	4b5f      	ldr	r3, [pc, #380]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f4:	4b5d      	ldr	r3, [pc, #372]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = (Usec*TIMENumer/TIMEDenom)-1;
 80047fa:	4b5c      	ldr	r3, [pc, #368]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80047fc:	223d      	movs	r2, #61	@ 0x3d
 80047fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004800:	4b5a      	ldr	r3, [pc, #360]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004802:	2200      	movs	r2, #0
 8004804:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = Npixels-1;
 8004806:	4b59      	ldr	r3, [pc, #356]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004808:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800480c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800480e:	4b57      	ldr	r3, [pc, #348]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004814:	4855      	ldr	r0, [pc, #340]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004816:	f00d fd61 	bl	80122dc <HAL_TIM_Base_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8004820:	f7fe fcc8 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004828:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800482a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800482e:	4619      	mov	r1, r3
 8004830:	484e      	ldr	r0, [pc, #312]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004832:	f00e fb7f 	bl	8012f34 <HAL_TIM_ConfigClockSource>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800483c:	f7fe fcba 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004840:	484a      	ldr	r0, [pc, #296]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004842:	f00d febf 	bl	80125c4 <HAL_TIM_PWM_Init>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 800484c:	f7fe fcb2 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8004850:	2108      	movs	r1, #8
 8004852:	4846      	ldr	r0, [pc, #280]	@ (800496c <MX_TIM8_Init+0x1d4>)
 8004854:	f00e f8c8 	bl	80129e8 <HAL_TIM_OnePulse_Init>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800485e:	f7fe fca9 	bl	80031b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004862:	2306      	movs	r3, #6
 8004864:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8004866:	2370      	movs	r3, #112	@ 0x70
 8004868:	65bb      	str	r3, [r7, #88]	@ 0x58
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800486a:	2300      	movs	r3, #0
 800486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800486e:	2300      	movs	r3, #0
 8004870:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerFilter = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8004876:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800487a:	4619      	mov	r1, r3
 800487c:	483b      	ldr	r0, [pc, #236]	@ (800496c <MX_TIM8_Init+0x1d4>)
 800487e:	f00e fc51 	bl	8013124 <HAL_TIM_SlaveConfigSynchro>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8004888:	f7fe fc94 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800488c:	2320      	movs	r3, #32
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8004890:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800489a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800489e:	4619      	mov	r1, r3
 80048a0:	4832      	ldr	r0, [pc, #200]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80048a2:	f00f fa59 	bl	8013d58 <HAL_TIMEx_MasterConfigSynchronization>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80048ac:	f7fe fc82 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80048b0:	2370      	movs	r3, #112	@ 0x70
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = ((Usec/4)-1);
 80048b4:	2318      	movs	r3, #24
 80048b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048b8:	2300      	movs	r3, #0
 80048ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048bc:	2300      	movs	r3, #0
 80048be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80048c0:	2304      	movs	r3, #4
 80048c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048c8:	2300      	movs	r3, #0
 80048ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048d0:	2200      	movs	r2, #0
 80048d2:	4619      	mov	r1, r3
 80048d4:	4825      	ldr	r0, [pc, #148]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80048d6:	f00e fa19 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 80048e0:	f7fe fc68 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 80048e4:	2302      	movs	r3, #2
 80048e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80048e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048ec:	2204      	movs	r2, #4
 80048ee:	4619      	mov	r1, r3
 80048f0:	481e      	ldr	r0, [pc, #120]	@ (800496c <MX_TIM8_Init+0x1d4>)
 80048f2:	f00e fa0b 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_TIM8_Init+0x168>
  {
    Error_Handler();
 80048fc:	f7fe fc5a 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004904:	2208      	movs	r2, #8
 8004906:	4619      	mov	r1, r3
 8004908:	4818      	ldr	r0, [pc, #96]	@ (800496c <MX_TIM8_Init+0x1d4>)
 800490a:	f00e f9ff 	bl	8012d0c <HAL_TIM_PWM_ConfigChannel>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8004914:	f7fe fc4e 	bl	80031b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800491c:	2300      	movs	r3, #0
 800491e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800492c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004930:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800493a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800493e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004944:	2300      	movs	r3, #0
 8004946:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004948:	463b      	mov	r3, r7
 800494a:	4619      	mov	r1, r3
 800494c:	4807      	ldr	r0, [pc, #28]	@ (800496c <MX_TIM8_Init+0x1d4>)
 800494e:	f00f fa91 	bl	8013e74 <HAL_TIMEx_ConfigBreakDeadTime>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_TIM8_Init+0x1c4>
  {
    Error_Handler();
 8004958:	f7fe fc2c 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800495c:	4803      	ldr	r0, [pc, #12]	@ (800496c <MX_TIM8_Init+0x1d4>)
 800495e:	f000 f8c5 	bl	8004aec <HAL_TIM_MspPostInit>

}
 8004962:	bf00      	nop
 8004964:	3778      	adds	r7, #120	@ 0x78
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	24000f00 	.word	0x24000f00
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	@ 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	f107 031c 	add.w	r3, r7, #28
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a51      	ldr	r2, [pc, #324]	@ (8004ad8 <HAL_TIM_Base_MspInit+0x164>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d11f      	bne.n	80049d6 <HAL_TIM_Base_MspInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004996:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800499c:	4a4f      	ldr	r2, [pc, #316]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049a6:	4b4d      	ldr	r3, [pc, #308]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 80049a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	2019      	movs	r0, #25
 80049ba:	f002 f9fc 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80049be:	2019      	movs	r0, #25
 80049c0:	f002 fa13 	bl	8006dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80049c4:	2200      	movs	r2, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	201a      	movs	r0, #26
 80049ca:	f002 f9f4 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80049ce:	201a      	movs	r0, #26
 80049d0:	f002 fa0b 	bl	8006dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80049d4:	e07c      	b.n	8004ad0 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049de:	d117      	bne.n	8004a10 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049e0:	4b3e      	ldr	r3, [pc, #248]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e6:	4a3d      	ldr	r2, [pc, #244]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049f0:	4b3a      	ldr	r3, [pc, #232]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 80049f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	201c      	movs	r0, #28
 8004a04:	f002 f9d7 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a08:	201c      	movs	r0, #28
 8004a0a:	f002 f9ee 	bl	8006dea <HAL_NVIC_EnableIRQ>
}
 8004a0e:	e05f      	b.n	8004ad0 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM3)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a32      	ldr	r2, [pc, #200]	@ (8004ae0 <HAL_TIM_Base_MspInit+0x16c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d117      	bne.n	8004a4a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	201d      	movs	r0, #29
 8004a3e:	f002 f9ba 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a42:	201d      	movs	r0, #29
 8004a44:	f002 f9d1 	bl	8006dea <HAL_NVIC_EnableIRQ>
}
 8004a48:	e042      	b.n	8004ad0 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a25      	ldr	r2, [pc, #148]	@ (8004ae4 <HAL_TIM_Base_MspInit+0x170>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d13d      	bne.n	8004ad0 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a54:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a5a:	4a20      	ldr	r2, [pc, #128]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a64:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a72:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a78:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a82:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <HAL_TIM_Base_MspInit+0x168>)
 8004a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a90:	2308      	movs	r3, #8
 8004a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004aa4:	f107 031c 	add.w	r3, r7, #28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	480f      	ldr	r0, [pc, #60]	@ (8004ae8 <HAL_TIM_Base_MspInit+0x174>)
 8004aac:	f004 fe62 	bl	8009774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	202c      	movs	r0, #44	@ 0x2c
 8004ab6:	f002 f97e 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004aba:	202c      	movs	r0, #44	@ 0x2c
 8004abc:	f002 f995 	bl	8006dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	202d      	movs	r0, #45	@ 0x2d
 8004ac6:	f002 f976 	bl	8006db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004aca:	202d      	movs	r0, #45	@ 0x2d
 8004acc:	f002 f98d 	bl	8006dea <HAL_NVIC_EnableIRQ>
}
 8004ad0:	bf00      	nop
 8004ad2:	3730      	adds	r7, #48	@ 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40010400 	.word	0x40010400
 8004ae8:	58022000 	.word	0x58022000

08004aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	@ 0x30
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af4:	f107 031c 	add.w	r3, r7, #28
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	60da      	str	r2, [r3, #12]
 8004b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a63      	ldr	r2, [pc, #396]	@ (8004c98 <HAL_TIM_MspPostInit+0x1ac>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d120      	bne.n	8004b50 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	4b63      	ldr	r3, [pc, #396]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b14:	4a61      	ldr	r2, [pc, #388]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ROG_Pin|GPIO_PIN_9|GPIO_PIN_8;
 8004b2c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	4619      	mov	r1, r3
 8004b48:	4855      	ldr	r0, [pc, #340]	@ (8004ca0 <HAL_TIM_MspPostInit+0x1b4>)
 8004b4a:	f004 fe13 	bl	8009774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004b4e:	e09e      	b.n	8004c8e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b58:	d140      	bne.n	8004bdc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5a:	4b50      	ldr	r3, [pc, #320]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b60:	4a4e      	ldr	r2, [pc, #312]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b78:	4b48      	ldr	r3, [pc, #288]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7e:	4a47      	ldr	r2, [pc, #284]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b88:	4b44      	ldr	r3, [pc, #272]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004b96:	f248 0302 	movw	r3, #32770	@ 0x8002
 8004b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bac:	f107 031c 	add.w	r3, r7, #28
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	483b      	ldr	r0, [pc, #236]	@ (8004ca0 <HAL_TIM_MspPostInit+0x1b4>)
 8004bb4:	f004 fdde 	bl	8009774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bce:	f107 031c 	add.w	r3, r7, #28
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4833      	ldr	r0, [pc, #204]	@ (8004ca4 <HAL_TIM_MspPostInit+0x1b8>)
 8004bd6:	f004 fdcd 	bl	8009774 <HAL_GPIO_Init>
}
 8004bda:	e058      	b.n	8004c8e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM3)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a31      	ldr	r2, [pc, #196]	@ (8004ca8 <HAL_TIM_MspPostInit+0x1bc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d11f      	bne.n	8004c26 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bec:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bf6:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|sensorClk_Pin;
 8004c04:	23c0      	movs	r3, #192	@ 0xc0
 8004c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c10:	2302      	movs	r3, #2
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c14:	2302      	movs	r3, #2
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c18:	f107 031c 	add.w	r3, r7, #28
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4823      	ldr	r0, [pc, #140]	@ (8004cac <HAL_TIM_MspPostInit+0x1c0>)
 8004c20:	f004 fda8 	bl	8009774 <HAL_GPIO_Init>
}
 8004c24:	e033      	b.n	8004c8e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM8)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <HAL_TIM_MspPostInit+0x1c4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d12e      	bne.n	8004c8e <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c36:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c40:	4b16      	ldr	r3, [pc, #88]	@ (8004c9c <HAL_TIM_MspPostInit+0x1b0>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c4e:	23c0      	movs	r3, #192	@ 0xc0
 8004c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2302      	movs	r3, #2
 8004c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c62:	f107 031c 	add.w	r3, r7, #28
 8004c66:	4619      	mov	r1, r3
 8004c68:	4812      	ldr	r0, [pc, #72]	@ (8004cb4 <HAL_TIM_MspPostInit+0x1c8>)
 8004c6a:	f004 fd83 	bl	8009774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c6e:	2320      	movs	r3, #32
 8004c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c72:	2302      	movs	r3, #2
 8004c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c82:	f107 031c 	add.w	r3, r7, #28
 8004c86:	4619      	mov	r1, r3
 8004c88:	480a      	ldr	r0, [pc, #40]	@ (8004cb4 <HAL_TIM_MspPostInit+0x1c8>)
 8004c8a:	f004 fd73 	bl	8009774 <HAL_GPIO_Init>
}
 8004c8e:	bf00      	nop
 8004c90:	3730      	adds	r7, #48	@ 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	58020000 	.word	0x58020000
 8004ca4:	58020400 	.word	0x58020400
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	58020800 	.word	0x58020800
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	58022000 	.word	0x58022000

08004cb8 <Reset_Handler>:
 8004cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cf0 <LoopFillZerobss+0xe>
 8004cbc:	f7ff fab6 	bl	800422c <SystemInit>
 8004cc0:	480c      	ldr	r0, [pc, #48]	@ (8004cf4 <LoopFillZerobss+0x12>)
 8004cc2:	490d      	ldr	r1, [pc, #52]	@ (8004cf8 <LoopFillZerobss+0x16>)
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cfc <LoopFillZerobss+0x1a>)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e002      	b.n	8004cd0 <LoopCopyDataInit>

08004cca <CopyDataInit>:
 8004cca:	58d4      	ldr	r4, [r2, r3]
 8004ccc:	50c4      	str	r4, [r0, r3]
 8004cce:	3304      	adds	r3, #4

08004cd0 <LoopCopyDataInit>:
 8004cd0:	18c4      	adds	r4, r0, r3
 8004cd2:	428c      	cmp	r4, r1
 8004cd4:	d3f9      	bcc.n	8004cca <CopyDataInit>
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d00 <LoopFillZerobss+0x1e>)
 8004cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8004d04 <LoopFillZerobss+0x22>)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e001      	b.n	8004ce2 <LoopFillZerobss>

08004cde <FillZerobss>:
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	3204      	adds	r2, #4

08004ce2 <LoopFillZerobss>:
 8004ce2:	42a2      	cmp	r2, r4
 8004ce4:	d3fb      	bcc.n	8004cde <FillZerobss>
 8004ce6:	f014 fed3 	bl	8019a90 <__libc_init_array>
 8004cea:	f7fd ff3b 	bl	8002b64 <main>
 8004cee:	4770      	bx	lr
 8004cf0:	24080000 	.word	0x24080000
 8004cf4:	24000000 	.word	0x24000000
 8004cf8:	24000294 	.word	0x24000294
 8004cfc:	0801b730 	.word	0x0801b730
 8004d00:	240002a0 	.word	0x240002a0
 8004d04:	240017c8 	.word	0x240017c8

08004d08 <ADC_IRQHandler>:
 8004d08:	e7fe      	b.n	8004d08 <ADC_IRQHandler>
	...

08004d0c <HAL_Init>:
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	2003      	movs	r0, #3
 8004d14:	f002 f844 	bl	8006da0 <HAL_NVIC_SetPriorityGrouping>
 8004d18:	f008 fb78 	bl	800d40c <HAL_RCC_GetSysClockFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <HAL_Init+0x68>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	4913      	ldr	r1, [pc, #76]	@ (8004d78 <HAL_Init+0x6c>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <HAL_Init+0x68>)
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <HAL_Init+0x6c>)
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d7c <HAL_Init+0x70>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <HAL_Init+0x74>)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	200f      	movs	r0, #15
 8004d58:	f000 f814 	bl	8004d84 <HAL_InitTick>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_Init+0x5a>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e002      	b.n	8004d6c <HAL_Init+0x60>
 8004d66:	f7ff f8a1 	bl	8003eac <HAL_MspInit>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	58024400 	.word	0x58024400
 8004d78:	0801b280 	.word	0x0801b280
 8004d7c:	2400022c 	.word	0x2400022c
 8004d80:	24000228 	.word	0x24000228

08004d84 <HAL_InitTick>:
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	4b15      	ldr	r3, [pc, #84]	@ (8004de4 <HAL_InitTick+0x60>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_InitTick+0x14>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e021      	b.n	8004ddc <HAL_InitTick+0x58>
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_InitTick+0x64>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b11      	ldr	r3, [pc, #68]	@ (8004de4 <HAL_InitTick+0x60>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	4618      	mov	r0, r3
 8004db0:	f002 f829 	bl	8006e06 <HAL_SYSTICK_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_InitTick+0x3a>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00e      	b.n	8004ddc <HAL_InitTick+0x58>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d80a      	bhi.n	8004dda <HAL_InitTick+0x56>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	f001 fff3 	bl	8006db6 <HAL_NVIC_SetPriority>
 8004dd0:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <HAL_InitTick+0x68>)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_InitTick+0x58>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	24000234 	.word	0x24000234
 8004de8:	24000228 	.word	0x24000228
 8004dec:	24000230 	.word	0x24000230

08004df0 <HAL_IncTick>:
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_IncTick+0x20>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_IncTick+0x24>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_IncTick+0x24>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	24000234 	.word	0x24000234
 8004e14:	24000fbc 	.word	0x24000fbc

08004e18 <HAL_GetTick>:
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_GetTick+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	24000fbc 	.word	0x24000fbc

08004e30 <HAL_Delay>:
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	f7ff ffee 	bl	8004e18 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d005      	beq.n	8004e56 <HAL_Delay+0x26>
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <HAL_Delay+0x44>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	bf00      	nop
 8004e58:	f7ff ffde 	bl	8004e18 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d8f7      	bhi.n	8004e58 <HAL_Delay+0x28>
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	24000234 	.word	0x24000234

08004e78 <HAL_GetREVID>:
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_GetREVID+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	5c001000 	.word	0x5c001000

08004e90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 0202 	bic.w	r2, r3, #2
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	58003c00 	.word	0x58003c00

08004eb8 <HAL_SYSCFG_DisableVREFBUF>:
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	58003c00 	.word	0x58003c00

08004ed8 <HAL_SYSCFG_AnalogSwitchConfig>:
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	58000400 	.word	0x58000400

08004f04 <LL_ADC_SetCommonClock>:
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_ADC_SetCommonPathInternalCh>:
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_ADC_GetCommonPathInternalCh>:
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <LL_ADC_SetOffset>:
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3360      	adds	r3, #96	@ 0x60
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <LL_ADC_SetDataRightShift>:
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	611a      	str	r2, [r3, #16]
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_ADC_SetOffsetSignedSaturation>:
 8004fde:	b480      	push	{r7}
 8004fe0:	b087      	sub	sp, #28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3360      	adds	r3, #96	@ 0x60
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	431a      	orrs	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_ADC_REG_IsTriggerSourceSWStart>:
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800502c:	2300      	movs	r3, #0
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <LL_ADC_REG_SetSequencerRanks>:
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3330      	adds	r3, #48	@ 0x30
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	4413      	add	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	211f      	movs	r1, #31
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	401a      	ands	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0e9b      	lsrs	r3, r3, #26
 8005072:	f003 011f 	and.w	r1, r3, #31
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	431a      	orrs	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <LL_ADC_REG_SetDataTransferMode>:
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80050d0:	2300      	movs	r3, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_ADC_SetChannelSamplingTime>:
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3314      	adds	r3, #20
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	0e5b      	lsrs	r3, r3, #25
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0d1b      	lsrs	r3, r3, #20
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2107      	movs	r1, #7
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	0d1b      	lsrs	r3, r3, #20
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	431a      	orrs	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_SetChannelSingleDiff>:
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800514c:	43db      	mvns	r3, r3
 800514e:	401a      	ands	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0318 	and.w	r3, r3, #24
 8005156:	4908      	ldr	r1, [pc, #32]	@ (8005178 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005158:	40d9      	lsrs	r1, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	400b      	ands	r3, r1
 800515e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005162:	431a      	orrs	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	000fffff 	.word	0x000fffff

0800517c <LL_ADC_GetMultimode>:
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_ADC_GetMultiDMATransfer>:
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_ADC_DisableDeepPowerDown>:
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b04      	ldr	r3, [pc, #16]	@ (80051d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6093      	str	r3, [r2, #8]
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	5fffffc0 	.word	0x5fffffc0

080051d8 <LL_ADC_IsDeepPowerDownEnabled>:
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ec:	d101      	bne.n	80051f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80051f2:	2300      	movs	r3, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_ADC_EnableInternalRegulator>:
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <LL_ADC_EnableInternalRegulator+0x24>)
 800520e:	4013      	ands	r3, r2
 8005210:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	6fffffc0 	.word	0x6fffffc0

08005228 <LL_ADC_IsInternalRegulatorEnabled>:
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523c:	d101      	bne.n	8005242 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005242:	2300      	movs	r3, #0
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_ADC_Enable>:
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <LL_ADC_Enable+0x24>)
 800525e:	4013      	ands	r3, r2
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	7fffffc0 	.word	0x7fffffc0

08005278 <LL_ADC_Disable>:
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <LL_ADC_Disable+0x24>)
 8005286:	4013      	ands	r3, r2
 8005288:	f043 0202 	orr.w	r2, r3, #2
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	7fffffc0 	.word	0x7fffffc0

080052a0 <LL_ADC_IsEnabled>:
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <LL_ADC_IsEnabled+0x18>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <LL_ADC_IsEnabled+0x1a>
 80052b8:	2300      	movs	r3, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_ADC_IsDisableOngoing>:
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d101      	bne.n	80052de <LL_ADC_IsDisableOngoing+0x18>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <LL_ADC_IsDisableOngoing+0x1a>
 80052de:	2300      	movs	r3, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_ADC_REG_StartConversion>:
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <LL_ADC_REG_StartConversion+0x24>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	7fffffc0 	.word	0x7fffffc0

08005314 <LL_ADC_REG_IsConversionOngoing>:
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d101      	bne.n	800532c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800532c:	2300      	movs	r3, #0
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_ADC_INJ_IsConversionOngoing>:
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b08      	cmp	r3, #8
 800534c:	d101      	bne.n	8005352 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005352:	2300      	movs	r3, #0
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_ADC_Init>:
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b089      	sub	sp, #36	@ 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	2300      	movs	r3, #0
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_ADC_Init+0x1a>
 8005376:	2301      	movs	r3, #1
 8005378:	e1c4      	b.n	8005704 <HAL_ADC_Init+0x3a4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005384:	2b00      	cmp	r3, #0
 8005386:	d131      	bne.n	80053ec <HAL_ADC_Init+0x8c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a72      	ldr	r2, [pc, #456]	@ (8005554 <HAL_ADC_Init+0x1f4>)
 800538c:	665a      	str	r2, [r3, #100]	@ 0x64
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a71      	ldr	r2, [pc, #452]	@ (8005558 <HAL_ADC_Init+0x1f8>)
 8005392:	669a      	str	r2, [r3, #104]	@ 0x68
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a71      	ldr	r2, [pc, #452]	@ (800555c <HAL_ADC_Init+0x1fc>)
 8005398:	66da      	str	r2, [r3, #108]	@ 0x6c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a70      	ldr	r2, [pc, #448]	@ (8005560 <HAL_ADC_Init+0x200>)
 800539e:	671a      	str	r2, [r3, #112]	@ 0x70
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a70      	ldr	r2, [pc, #448]	@ (8005564 <HAL_ADC_Init+0x204>)
 80053a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005568 <HAL_ADC_Init+0x208>)
 80053aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a6f      	ldr	r2, [pc, #444]	@ (800556c <HAL_ADC_Init+0x20c>)
 80053b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005570 <HAL_ADC_Init+0x210>)
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a6d      	ldr	r2, [pc, #436]	@ (8005574 <HAL_ADC_Init+0x214>)
 80053be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d103      	bne.n	80053d4 <HAL_ADC_Init+0x74>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a6a      	ldr	r2, [pc, #424]	@ (8005578 <HAL_ADC_Init+0x218>)
 80053d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fef1 	bl	80051d8 <LL_ADC_IsDeepPowerDownEnabled>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <HAL_ADC_Init+0xa6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fed7 	bl	80051b4 <LL_ADC_DisableDeepPowerDown>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff0c 	bl	8005228 <LL_ADC_IsInternalRegulatorEnabled>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d114      	bne.n	8005440 <HAL_ADC_Init+0xe0>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fef0 	bl	8005200 <LL_ADC_EnableInternalRegulator>
 8005420:	4b56      	ldr	r3, [pc, #344]	@ (800557c <HAL_ADC_Init+0x21c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	4a56      	ldr	r2, [pc, #344]	@ (8005580 <HAL_ADC_Init+0x220>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	3301      	adds	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	e002      	b.n	800543a <HAL_ADC_Init+0xda>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	3b01      	subs	r3, #1
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f9      	bne.n	8005434 <HAL_ADC_Init+0xd4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff feef 	bl	8005228 <LL_ADC_IsInternalRegulatorEnabled>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10d      	bne.n	800546c <HAL_ADC_Init+0x10c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005454:	f043 0210 	orr.w	r2, r3, #16
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	659a      	str	r2, [r3, #88]	@ 0x58
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff4f 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005476:	6178      	str	r0, [r7, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8136 	bne.w	80056f2 <HAL_ADC_Init+0x392>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 8132 	bne.w	80056f2 <HAL_ADC_Init+0x392>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fefc 	bl	80052a0 <LL_ADC_IsEnabled>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d136      	bne.n	800551c <HAL_ADC_Init+0x1bc>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a34      	ldr	r2, [pc, #208]	@ (8005584 <HAL_ADC_Init+0x224>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_ADC_Init+0x162>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a32      	ldr	r2, [pc, #200]	@ (8005588 <HAL_ADC_Init+0x228>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10e      	bne.n	80054e0 <HAL_ADC_Init+0x180>
 80054c2:	4830      	ldr	r0, [pc, #192]	@ (8005584 <HAL_ADC_Init+0x224>)
 80054c4:	f7ff feec 	bl	80052a0 <LL_ADC_IsEnabled>
 80054c8:	4604      	mov	r4, r0
 80054ca:	482f      	ldr	r0, [pc, #188]	@ (8005588 <HAL_ADC_Init+0x228>)
 80054cc:	f7ff fee8 	bl	80052a0 <LL_ADC_IsEnabled>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4323      	orrs	r3, r4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e008      	b.n	80054f2 <HAL_ADC_Init+0x192>
 80054e0:	482a      	ldr	r0, [pc, #168]	@ (800558c <HAL_ADC_Init+0x22c>)
 80054e2:	f7ff fedd 	bl	80052a0 <LL_ADC_IsEnabled>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <HAL_ADC_Init+0x1bc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <HAL_ADC_Init+0x224>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_ADC_Init+0x1aa>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a20      	ldr	r2, [pc, #128]	@ (8005588 <HAL_ADC_Init+0x228>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_ADC_Init+0x1ae>
 800550a:	4a21      	ldr	r2, [pc, #132]	@ (8005590 <HAL_ADC_Init+0x230>)
 800550c:	e000      	b.n	8005510 <HAL_ADC_Init+0x1b0>
 800550e:	4a21      	ldr	r2, [pc, #132]	@ (8005594 <HAL_ADC_Init+0x234>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7ff fcf4 	bl	8004f04 <LL_ADC_SetCommonClock>
 800551c:	f7ff fcac 	bl	8004e78 <HAL_GetREVID>
 8005520:	4603      	mov	r3, r0
 8005522:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005526:	4293      	cmp	r3, r2
 8005528:	d936      	bls.n	8005598 <HAL_ADC_Init+0x238>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b10      	cmp	r3, #16
 8005530:	d132      	bne.n	8005598 <HAL_ADC_Init+0x238>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7d5b      	ldrb	r3, [r3, #21]
 8005536:	035a      	lsls	r2, r3, #13
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7f1b      	ldrb	r3, [r3, #28]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	4313      	orrs	r3, r2
 800554c:	f043 030c 	orr.w	r3, r3, #12
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e02f      	b.n	80055b4 <HAL_ADC_Init+0x254>
 8005554:	08003005 	.word	0x08003005
 8005558:	08005e61 	.word	0x08005e61
 800555c:	08005e75 	.word	0x08005e75
 8005560:	08005e89 	.word	0x08005e89
 8005564:	08006b9d 	.word	0x08006b9d
 8005568:	08006bb1 	.word	0x08006bb1
 800556c:	08006bc5 	.word	0x08006bc5
 8005570:	08006bd9 	.word	0x08006bd9
 8005574:	08006bed 	.word	0x08006bed
 8005578:	08000759 	.word	0x08000759
 800557c:	24000228 	.word	0x24000228
 8005580:	053e2d63 	.word	0x053e2d63
 8005584:	40022000 	.word	0x40022000
 8005588:	40022100 	.word	0x40022100
 800558c:	58026000 	.word	0x58026000
 8005590:	40022300 	.word	0x40022300
 8005594:	58026300 	.word	0x58026300
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7d5b      	ldrb	r3, [r3, #21]
 800559c:	035a      	lsls	r2, r3, #13
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7f1b      	ldrb	r3, [r3, #28]
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7f1b      	ldrb	r3, [r3, #28]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <HAL_ADC_Init+0x26a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	045b      	lsls	r3, r3, #17
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_ADC_Init+0x286>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	4313      	orrs	r3, r2
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	4b47      	ldr	r3, [pc, #284]	@ (800570c <HAL_ADC_Init+0x3ac>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	430b      	orrs	r3, r1
 80055f8:	60d3      	str	r3, [r2, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fe88 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005604:	6138      	str	r0, [r7, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fe95 	bl	800533a <LL_ADC_INJ_IsConversionOngoing>
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d14a      	bne.n	80056ae <HAL_ADC_Init+0x34e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d147      	bne.n	80056ae <HAL_ADC_Init+0x34e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7d1b      	ldrb	r3, [r3, #20]
 8005622:	039a      	lsls	r2, r3, #14
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <HAL_ADC_Init+0x3b0>)
 8005634:	4013      	ands	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	430b      	orrs	r3, r1
 800563e:	60d3      	str	r3, [r2, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005646:	2b01      	cmp	r3, #1
 8005648:	d11b      	bne.n	8005682 <HAL_ADC_Init+0x322>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	4b2f      	ldr	r3, [pc, #188]	@ (8005714 <HAL_ADC_Init+0x3b4>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800565e:	3a01      	subs	r2, #1
 8005660:	0411      	lsls	r1, r2, #16
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005666:	4311      	orrs	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005672:	430a      	orrs	r2, r1
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	611a      	str	r2, [r3, #16]
 8005680:	e007      	b.n	8005692 <HAL_ADC_Init+0x332>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	611a      	str	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	611a      	str	r2, [r3, #16]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 f8d5 	bl	8006858 <ADC_ConfigureBoostMode>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10c      	bne.n	80056d0 <HAL_ADC_Init+0x370>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	f023 010f 	bic.w	r1, r3, #15
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	1e5a      	subs	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80056ce:	e007      	b.n	80056e0 <HAL_ADC_Init+0x380>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 020f 	bic.w	r2, r2, #15
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	f043 0201 	orr.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80056f0:	e007      	b.n	8005702 <HAL_ADC_Init+0x3a2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f043 0210 	orr.w	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	7ffb      	ldrb	r3, [r7, #31]
 8005704:	4618      	mov	r0, r3
 8005706:	3724      	adds	r7, #36	@ 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd90      	pop	{r4, r7, pc}
 800570c:	fff0c003 	.word	0xfff0c003
 8005710:	ffffbffc 	.word	0xffffbffc
 8005714:	fc00f81e 	.word	0xfc00f81e

08005718 <HAL_ADC_RegisterCallback>:
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	460b      	mov	r3, r1
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	72fb      	strb	r3, [r7, #11]
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <HAL_ADC_RegisterCallback+0x28>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005734:	f043 0210 	orr.w	r2, r3, #16
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	659a      	str	r2, [r3, #88]	@ 0x58
 800573c:	2301      	movs	r3, #1
 800573e:	e080      	b.n	8005842 <HAL_ADC_RegisterCallback+0x12a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d054      	beq.n	80057f6 <HAL_ADC_RegisterCallback+0xde>
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	2b0a      	cmp	r3, #10
 8005750:	d848      	bhi.n	80057e4 <HAL_ADC_RegisterCallback+0xcc>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <HAL_ADC_RegisterCallback+0x40>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005785 	.word	0x08005785
 800575c:	0800578d 	.word	0x0800578d
 8005760:	08005795 	.word	0x08005795
 8005764:	0800579d 	.word	0x0800579d
 8005768:	080057a5 	.word	0x080057a5
 800576c:	080057ad 	.word	0x080057ad
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057c7 	.word	0x080057c7
 800577c:	080057d1 	.word	0x080057d1
 8005780:	080057db 	.word	0x080057db
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	665a      	str	r2, [r3, #100]	@ 0x64
 800578a:	e059      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	669a      	str	r2, [r3, #104]	@ 0x68
 8005792:	e055      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	66da      	str	r2, [r3, #108]	@ 0x6c
 800579a:	e051      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80057a2:	e04d      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80057aa:	e049      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	679a      	str	r2, [r3, #120]	@ 0x78
 80057b2:	e045      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80057ba:	e041      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80057c4:	e03c      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80057ce:	e037      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80057d8:	e032      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80057e2:	e02d      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e8:	f043 0210 	orr.w	r2, r3, #16
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80057f0:	2301      	movs	r3, #1
 80057f2:	75fb      	strb	r3, [r7, #23]
 80057f4:	e024      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d118      	bne.n	8005830 <HAL_ADC_RegisterCallback+0x118>
 80057fe:	7afb      	ldrb	r3, [r7, #11]
 8005800:	2b09      	cmp	r3, #9
 8005802:	d002      	beq.n	800580a <HAL_ADC_RegisterCallback+0xf2>
 8005804:	2b0a      	cmp	r3, #10
 8005806:	d005      	beq.n	8005814 <HAL_ADC_RegisterCallback+0xfc>
 8005808:	e009      	b.n	800581e <HAL_ADC_RegisterCallback+0x106>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005812:	e015      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800581c:	e010      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f043 0210 	orr.w	r2, r3, #16
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	659a      	str	r2, [r3, #88]	@ 0x58
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
 800582e:	e007      	b.n	8005840 <HAL_ADC_RegisterCallback+0x128>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005834:	f043 0210 	orr.w	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	659a      	str	r2, [r3, #88]	@ 0x58
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	4618      	mov	r0, r3
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <HAL_ADC_Start_DMA>:
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a55      	ldr	r2, [pc, #340]	@ (80059b8 <HAL_ADC_Start_DMA+0x168>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_ADC_Start_DMA+0x20>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a54      	ldr	r2, [pc, #336]	@ (80059bc <HAL_ADC_Start_DMA+0x16c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <HAL_ADC_Start_DMA+0x24>
 8005870:	4b53      	ldr	r3, [pc, #332]	@ (80059c0 <HAL_ADC_Start_DMA+0x170>)
 8005872:	e000      	b.n	8005876 <HAL_ADC_Start_DMA+0x26>
 8005874:	4b53      	ldr	r3, [pc, #332]	@ (80059c4 <HAL_ADC_Start_DMA+0x174>)
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fc80 	bl	800517c <LL_ADC_GetMultimode>
 800587c:	6138      	str	r0, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fd46 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 808c 	bne.w	80059a8 <HAL_ADC_Start_DMA+0x158>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_ADC_Start_DMA+0x4e>
 800589a:	2302      	movs	r3, #2
 800589c:	e087      	b.n	80059ae <HAL_ADC_Start_DMA+0x15e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_ADC_Start_DMA+0x68>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d002      	beq.n	80058b8 <HAL_ADC_Start_DMA+0x68>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b09      	cmp	r3, #9
 80058b6:	d170      	bne.n	800599a <HAL_ADC_Start_DMA+0x14a>
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fe4b 	bl	8006554 <ADC_Enable>
 80058be:	4603      	mov	r3, r0
 80058c0:	75fb      	strb	r3, [r7, #23]
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d163      	bne.n	8005990 <HAL_ADC_Start_DMA+0x140>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058cc:	4b3e      	ldr	r3, [pc, #248]	@ (80059c8 <HAL_ADC_Start_DMA+0x178>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a37      	ldr	r2, [pc, #220]	@ (80059bc <HAL_ADC_Start_DMA+0x16c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d002      	beq.n	80058e8 <HAL_ADC_Start_DMA+0x98>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	e000      	b.n	80058ea <HAL_ADC_Start_DMA+0x9a>
 80058e8:	4b33      	ldr	r3, [pc, #204]	@ (80059b8 <HAL_ADC_Start_DMA+0x168>)
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d002      	beq.n	80058f8 <HAL_ADC_Start_DMA+0xa8>
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_ADC_Start_DMA+0xb4>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <HAL_ADC_Start_DMA+0xce>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005914:	f023 0206 	bic.w	r2, r3, #6
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	659a      	str	r2, [r3, #88]	@ 0x58
 800591c:	e002      	b.n	8005924 <HAL_ADC_Start_DMA+0xd4>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	659a      	str	r2, [r3, #88]	@ 0x58
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005928:	4a28      	ldr	r2, [pc, #160]	@ (80059cc <HAL_ADC_Start_DMA+0x17c>)
 800592a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005930:	4a27      	ldr	r2, [pc, #156]	@ (80059d0 <HAL_ADC_Start_DMA+0x180>)
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005938:	4a26      	ldr	r2, [pc, #152]	@ (80059d4 <HAL_ADC_Start_DMA+0x184>)
 800593a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	221c      	movs	r2, #28
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0210 	orr.w	r2, r2, #16
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7ff fb93 	bl	8005092 <LL_ADC_REG_SetDataTransferMode>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3340      	adds	r3, #64	@ 0x40
 8005976:	4619      	mov	r1, r3
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f001 fdac 	bl	80074d8 <HAL_DMA_Start_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fcaf 	bl	80052ec <LL_ADC_REG_StartConversion>
 800598e:	e00d      	b.n	80059ac <HAL_ADC_Start_DMA+0x15c>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005998:	e008      	b.n	80059ac <HAL_ADC_Start_DMA+0x15c>
 800599a:	2301      	movs	r3, #1
 800599c:	75fb      	strb	r3, [r7, #23]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80059a6:	e001      	b.n	80059ac <HAL_ADC_Start_DMA+0x15c>
 80059a8:	2302      	movs	r3, #2
 80059aa:	75fb      	strb	r3, [r7, #23]
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40022000 	.word	0x40022000
 80059bc:	40022100 	.word	0x40022100
 80059c0:	40022300 	.word	0x40022300
 80059c4:	58026300 	.word	0x58026300
 80059c8:	fffff0fe 	.word	0xfffff0fe
 80059cc:	08006727 	.word	0x08006727
 80059d0:	08006803 	.word	0x08006803
 80059d4:	08006821 	.word	0x08006821

080059d8 <HAL_ADC_IRQHandler>:
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a89      	ldr	r2, [pc, #548]	@ (8005c20 <HAL_ADC_IRQHandler+0x248>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_ADC_IRQHandler+0x30>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a88      	ldr	r2, [pc, #544]	@ (8005c24 <HAL_ADC_IRQHandler+0x24c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_ADC_IRQHandler+0x34>
 8005a08:	4b87      	ldr	r3, [pc, #540]	@ (8005c28 <HAL_ADC_IRQHandler+0x250>)
 8005a0a:	e000      	b.n	8005a0e <HAL_ADC_IRQHandler+0x36>
 8005a0c:	4b87      	ldr	r3, [pc, #540]	@ (8005c2c <HAL_ADC_IRQHandler+0x254>)
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fbb4 	bl	800517c <LL_ADC_GetMultimode>
 8005a14:	6178      	str	r0, [r7, #20]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <HAL_ADC_IRQHandler+0x7c>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <HAL_ADC_IRQHandler+0x7c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <HAL_ADC_IRQHandler+0x6a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2202      	movs	r2, #2
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_ADC_IRQHandler+0x90>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <HAL_ADC_IRQHandler+0xa6>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8084 	beq.w	8005b7c <HAL_ADC_IRQHandler+0x1a4>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d07e      	beq.n	8005b7c <HAL_ADC_IRQHandler+0x1a4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <HAL_ADC_IRQHandler+0xbe>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff faba 	bl	8005014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d062      	beq.n	8005b6c <HAL_ADC_IRQHandler+0x194>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8005c24 <HAL_ADC_IRQHandler+0x24c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d002      	beq.n	8005ab6 <HAL_ADC_IRQHandler+0xde>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	e000      	b.n	8005ab8 <HAL_ADC_IRQHandler+0xe0>
 8005ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c20 <HAL_ADC_IRQHandler+0x248>)
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d008      	beq.n	8005ad2 <HAL_ADC_IRQHandler+0xfa>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_ADC_IRQHandler+0xfa>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d002      	beq.n	8005ad2 <HAL_ADC_IRQHandler+0xfa>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b09      	cmp	r3, #9
 8005ad0:	d104      	bne.n	8005adc <HAL_ADC_IRQHandler+0x104>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	623b      	str	r3, [r7, #32]
 8005ada:	e00c      	b.n	8005af6 <HAL_ADC_IRQHandler+0x11e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a50      	ldr	r2, [pc, #320]	@ (8005c24 <HAL_ADC_IRQHandler+0x24c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d002      	beq.n	8005aec <HAL_ADC_IRQHandler+0x114>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	e000      	b.n	8005aee <HAL_ADC_IRQHandler+0x116>
 8005aec:	4b4c      	ldr	r3, [pc, #304]	@ (8005c20 <HAL_ADC_IRQHandler+0x248>)
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d135      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x194>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d12e      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x194>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fbfe 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11a      	bne.n	8005b54 <HAL_ADC_IRQHandler+0x17c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 020c 	bic.w	r2, r2, #12
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d112      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x194>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f043 0201 	orr.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b52:	e00b      	b.n	8005b6c <HAL_ADC_IRQHandler+0x194>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b58:	f043 0210 	orr.w	r2, r3, #16
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	220c      	movs	r2, #12
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <HAL_ADC_IRQHandler+0x1b8>
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_ADC_IRQHandler+0x1d0>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80a2 	beq.w	8005ce0 <HAL_ADC_IRQHandler+0x308>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 809c 	beq.w	8005ce0 <HAL_ADC_IRQHandler+0x308>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_ADC_IRQHandler+0x1e8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fa77 	bl	80050b8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fa1f 	bl	8005014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bd6:	60b8      	str	r0, [r7, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <HAL_ADC_IRQHandler+0x24c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d002      	beq.n	8005be8 <HAL_ADC_IRQHandler+0x210>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	e000      	b.n	8005bea <HAL_ADC_IRQHandler+0x212>
 8005be8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <HAL_ADC_IRQHandler+0x248>)
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d008      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x22c>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x22c>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d002      	beq.n	8005c04 <HAL_ADC_IRQHandler+0x22c>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d104      	bne.n	8005c0e <HAL_ADC_IRQHandler+0x236>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e015      	b.n	8005c3a <HAL_ADC_IRQHandler+0x262>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <HAL_ADC_IRQHandler+0x24c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <HAL_ADC_IRQHandler+0x258>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	e009      	b.n	8005c32 <HAL_ADC_IRQHandler+0x25a>
 8005c1e:	bf00      	nop
 8005c20:	40022000 	.word	0x40022000
 8005c24:	40022100 	.word	0x40022100
 8005c28:	40022300 	.word	0x40022300
 8005c2c:	58026300 	.word	0x58026300
 8005c30:	4b87      	ldr	r3, [pc, #540]	@ (8005e50 <HAL_ADC_IRQHandler+0x478>)
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d047      	beq.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_ADC_IRQHandler+0x282>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03f      	beq.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d13a      	bne.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d133      	bne.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d12e      	bne.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fb5f 	bl	800533a <LL_ADC_INJ_IsConversionOngoing>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11a      	bne.n	8005cb8 <HAL_ADC_IRQHandler+0x2e0>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d112      	bne.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cb6:	e00b      	b.n	8005cd0 <HAL_ADC_IRQHandler+0x2f8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	f043 0210 	orr.w	r2, r3, #16
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc8:	f043 0201 	orr.w	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2260      	movs	r2, #96	@ 0x60
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d012      	beq.n	8005d10 <HAL_ADC_IRQHandler+0x338>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <HAL_ADC_IRQHandler+0x338>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2280      	movs	r2, #128	@ 0x80
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d013      	beq.n	8005d42 <HAL_ADC_IRQHandler+0x36a>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <HAL_ADC_IRQHandler+0x36a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d28:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d014      	beq.n	8005d76 <HAL_ADC_IRQHandler+0x39e>
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <HAL_ADC_IRQHandler+0x39e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d044      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x432>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03f      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x432>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_ADC_IRQHandler+0x3c0>
 8005d92:	2301      	movs	r3, #1
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d96:	e021      	b.n	8005ddc <HAL_ADC_IRQHandler+0x404>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <HAL_ADC_IRQHandler+0x3f2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e50 <HAL_ADC_IRQHandler+0x478>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_ADC_IRQHandler+0x3da>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a29      	ldr	r2, [pc, #164]	@ (8005e54 <HAL_ADC_IRQHandler+0x47c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_ADC_IRQHandler+0x3de>
 8005db2:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <HAL_ADC_IRQHandler+0x480>)
 8005db4:	e000      	b.n	8005db8 <HAL_ADC_IRQHandler+0x3e0>
 8005db6:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <HAL_ADC_IRQHandler+0x484>)
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff f9ed 	bl	8005198 <LL_ADC_GetMultiDMATransfer>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_ADC_IRQHandler+0x404>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc8:	e008      	b.n	8005ddc <HAL_ADC_IRQHandler+0x404>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_ADC_IRQHandler+0x404>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10f      	bne.n	8005e02 <HAL_ADC_IRQHandler+0x42a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	655a      	str	r2, [r3, #84]	@ 0x54
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	f043 0202 	orr.w	r2, r3, #2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2210      	movs	r2, #16
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d019      	beq.n	8005e48 <HAL_ADC_IRQHandler+0x470>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d014      	beq.n	8005e48 <HAL_ADC_IRQHandler+0x470>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	f043 0208 	orr.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
 8005e48:	bf00      	nop
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40022000 	.word	0x40022000
 8005e54:	40022100 	.word	0x40022100
 8005e58:	40022300 	.word	0x40022300
 8005e5c:	58026300 	.word	0x58026300

08005e60 <HAL_ADC_ConvHalfCpltCallback>:
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_ADC_LevelOutOfWindowCallback>:
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_ADC_ErrorCallback>:
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_ADC_ConfigChannel>:
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b0a1      	sub	sp, #132	@ 0x84
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005eac:	2300      	movs	r3, #0
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a65      	ldr	r2, [pc, #404]	@ (800604c <HAL_ADC_ConfigChannel+0x1b0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x2a>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e32e      	b.n	8006524 <HAL_ADC_ConfigChannel+0x688>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff fa1e 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8313 	bne.w	8006506 <HAL_ADC_ConfigChannel+0x66a>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	db2c      	blt.n	8005f42 <HAL_ADC_ConfigChannel+0xa6>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d108      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x6a>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	0e9b      	lsrs	r3, r3, #26
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	2201      	movs	r2, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	e016      	b.n	8005f34 <HAL_ADC_ConfigChannel+0x98>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0e:	fa93 f3a3 	rbit	r3, r3
 8005f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x86>
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e003      	b.n	8005f2a <HAL_ADC_ConfigChannel+0x8e>
 8005f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f24:	fab3 f383 	clz	r3, r3
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	69d1      	ldr	r1, [r2, #28]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	61d3      	str	r3, [r2, #28]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7ff f873 	bl	800503a <LL_ADC_REG_SetSequencerRanks>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff f9db 	bl	8005314 <LL_ADC_REG_IsConversionOngoing>
 8005f5e:	67b8      	str	r0, [r7, #120]	@ 0x78
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff f9e8 	bl	800533a <LL_ADC_INJ_IsConversionOngoing>
 8005f6a:	6778      	str	r0, [r7, #116]	@ 0x74
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 80b8 	bne.w	80060e4 <HAL_ADC_ConfigChannel+0x248>
 8005f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 80b4 	bne.w	80060e4 <HAL_ADC_ConfigChannel+0x248>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f7ff f8a8 	bl	80050de <LL_ADC_SetChannelSamplingTime>
 8005f8e:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <HAL_ADC_ConfigChannel+0x1b4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f9a:	d10b      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x118>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	e01d      	b.n	8005ff0 <HAL_ADC_ConfigChannel+0x154>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_ADC_ConfigChannel+0x13e>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	e00a      	b.n	8005ff0 <HAL_ADC_ConfigChannel+0x154>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	089b      	lsrs	r3, r3, #2
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d02c      	beq.n	8006054 <HAL_ADC_ConfigChannel+0x1b8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6919      	ldr	r1, [r3, #16]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006008:	f7fe ffb0 	bl	8004f6c <LL_ADC_SetOffset>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6919      	ldr	r1, [r3, #16]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	7e5b      	ldrb	r3, [r3, #25]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x186>
 800601c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006020:	e000      	b.n	8006024 <HAL_ADC_ConfigChannel+0x188>
 8006022:	2300      	movs	r3, #0
 8006024:	461a      	mov	r2, r3
 8006026:	f7fe ffda 	bl	8004fde <LL_ADC_SetOffsetSignedSaturation>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6919      	ldr	r1, [r3, #16]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	7e1b      	ldrb	r3, [r3, #24]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d102      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x1a4>
 800603a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800603e:	e000      	b.n	8006042 <HAL_ADC_ConfigChannel+0x1a6>
 8006040:	2300      	movs	r3, #0
 8006042:	461a      	mov	r2, r3
 8006044:	f7fe ffb2 	bl	8004fac <LL_ADC_SetDataRightShift>
 8006048:	e04c      	b.n	80060e4 <HAL_ADC_ConfigChannel+0x248>
 800604a:	bf00      	nop
 800604c:	47ff0000 	.word	0x47ff0000
 8006050:	5c001000 	.word	0x5c001000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	069b      	lsls	r3, r3, #26
 8006064:	429a      	cmp	r2, r3
 8006066:	d107      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x1dc>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006076:	661a      	str	r2, [r3, #96]	@ 0x60
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	069b      	lsls	r3, r3, #26
 8006088:	429a      	cmp	r2, r3
 800608a:	d107      	bne.n	800609c <HAL_ADC_ConfigChannel+0x200>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800609a:	665a      	str	r2, [r3, #100]	@ 0x64
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	069b      	lsls	r3, r3, #26
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d107      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x224>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80060be:	669a      	str	r2, [r3, #104]	@ 0x68
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	069b      	lsls	r3, r3, #26
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d107      	bne.n	80060e4 <HAL_ADC_ConfigChannel+0x248>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80060e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff f8d9 	bl	80052a0 <LL_ADC_IsEnabled>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8211 	bne.w	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	461a      	mov	r2, r3
 8006104:	f7ff f816 	bl	8005134 <LL_ADC_SetChannelSingleDiff>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4aa1      	ldr	r2, [pc, #644]	@ (8006394 <HAL_ADC_ConfigChannel+0x4f8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f040 812e 	bne.w	8006370 <HAL_ADC_ConfigChannel+0x4d4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <HAL_ADC_ConfigChannel+0x2a0>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0e9b      	lsrs	r3, r3, #26
 800612a:	3301      	adds	r3, #1
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	2b09      	cmp	r3, #9
 8006132:	bf94      	ite	ls
 8006134:	2301      	movls	r3, #1
 8006136:	2300      	movhi	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e019      	b.n	8006170 <HAL_ADC_ConfigChannel+0x2d4>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006144:	fa93 f3a3 	rbit	r3, r3
 8006148:	657b      	str	r3, [r7, #84]	@ 0x54
 800614a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800614c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800614e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x2bc>
 8006154:	2320      	movs	r3, #32
 8006156:	e003      	b.n	8006160 <HAL_ADC_ConfigChannel+0x2c4>
 8006158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800615a:	fab3 f383 	clz	r3, r3
 800615e:	b2db      	uxtb	r3, r3
 8006160:	3301      	adds	r3, #1
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2b09      	cmp	r3, #9
 8006168:	bf94      	ite	ls
 800616a:	2301      	movls	r3, #1
 800616c:	2300      	movhi	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d079      	beq.n	8006268 <HAL_ADC_ConfigChannel+0x3cc>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x2f4>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0e9b      	lsrs	r3, r3, #26
 8006186:	3301      	adds	r3, #1
 8006188:	069b      	lsls	r3, r3, #26
 800618a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800618e:	e015      	b.n	80061bc <HAL_ADC_ConfigChannel+0x320>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006198:	fa93 f3a3 	rbit	r3, r3
 800619c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800619e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x310>
 80061a8:	2320      	movs	r3, #32
 80061aa:	e003      	b.n	80061b4 <HAL_ADC_ConfigChannel+0x318>
 80061ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ae:	fab3 f383 	clz	r3, r3
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	3301      	adds	r3, #1
 80061b6:	069b      	lsls	r3, r3, #26
 80061b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x340>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	0e9b      	lsrs	r3, r3, #26
 80061ce:	3301      	adds	r3, #1
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2101      	movs	r1, #1
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	e017      	b.n	800620c <HAL_ADC_ConfigChannel+0x370>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e4:	fa93 f3a3 	rbit	r3, r3
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_ADC_ConfigChannel+0x35c>
 80061f4:	2320      	movs	r3, #32
 80061f6:	e003      	b.n	8006200 <HAL_ADC_ConfigChannel+0x364>
 80061f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fa:	fab3 f383 	clz	r3, r3
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	3301      	adds	r3, #1
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2101      	movs	r1, #1
 8006208:	fa01 f303 	lsl.w	r3, r1, r3
 800620c:	ea42 0103 	orr.w	r1, r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x396>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	0e9b      	lsrs	r3, r3, #26
 8006222:	3301      	adds	r3, #1
 8006224:	f003 021f 	and.w	r2, r3, #31
 8006228:	4613      	mov	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	051b      	lsls	r3, r3, #20
 8006230:	e018      	b.n	8006264 <HAL_ADC_ConfigChannel+0x3c8>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_ADC_ConfigChannel+0x3b2>
 800624a:	2320      	movs	r3, #32
 800624c:	e003      	b.n	8006256 <HAL_ADC_ConfigChannel+0x3ba>
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	b2db      	uxtb	r3, r3
 8006256:	3301      	adds	r3, #1
 8006258:	f003 021f 	and.w	r2, r3, #31
 800625c:	4613      	mov	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4413      	add	r3, r2
 8006262:	051b      	lsls	r3, r3, #20
 8006264:	430b      	orrs	r3, r1
 8006266:	e07e      	b.n	8006366 <HAL_ADC_ConfigChannel+0x4ca>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006270:	2b00      	cmp	r3, #0
 8006272:	d107      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x3e8>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	0e9b      	lsrs	r3, r3, #26
 800627a:	3301      	adds	r3, #1
 800627c:	069b      	lsls	r3, r3, #26
 800627e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006282:	e015      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x414>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_ADC_ConfigChannel+0x404>
 800629c:	2320      	movs	r3, #32
 800629e:	e003      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x40c>
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	fab3 f383 	clz	r3, r3
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	069b      	lsls	r3, r3, #26
 80062ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <HAL_ADC_ConfigChannel+0x434>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	0e9b      	lsrs	r3, r3, #26
 80062c2:	3301      	adds	r3, #1
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	e017      	b.n	8006300 <HAL_ADC_ConfigChannel+0x464>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	623b      	str	r3, [r7, #32]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x450>
 80062e8:	2320      	movs	r3, #32
 80062ea:	e003      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x458>
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	fab3 f383 	clz	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	ea42 0103 	orr.w	r1, r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10d      	bne.n	800632c <HAL_ADC_ConfigChannel+0x490>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	0e9b      	lsrs	r3, r3, #26
 8006316:	3301      	adds	r3, #1
 8006318:	f003 021f 	and.w	r2, r3, #31
 800631c:	4613      	mov	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	4413      	add	r3, r2
 8006322:	3b1e      	subs	r3, #30
 8006324:	051b      	lsls	r3, r3, #20
 8006326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800632a:	e01b      	b.n	8006364 <HAL_ADC_ConfigChannel+0x4c8>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x4ac>
 8006344:	2320      	movs	r3, #32
 8006346:	e003      	b.n	8006350 <HAL_ADC_ConfigChannel+0x4b4>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3301      	adds	r3, #1
 8006352:	f003 021f 	and.w	r2, r3, #31
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	3b1e      	subs	r3, #30
 800635e:	051b      	lsls	r3, r3, #20
 8006360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006364:	430b      	orrs	r3, r1
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	6892      	ldr	r2, [r2, #8]
 800636a:	4619      	mov	r1, r3
 800636c:	f7fe feb7 	bl	80050de <LL_ADC_SetChannelSamplingTime>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f280 80cf 	bge.w	8006518 <HAL_ADC_ConfigChannel+0x67c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a06      	ldr	r2, [pc, #24]	@ (8006398 <HAL_ADC_ConfigChannel+0x4fc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_ADC_ConfigChannel+0x4f2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a04      	ldr	r2, [pc, #16]	@ (800639c <HAL_ADC_ConfigChannel+0x500>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10a      	bne.n	80063a4 <HAL_ADC_ConfigChannel+0x508>
 800638e:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <HAL_ADC_ConfigChannel+0x504>)
 8006390:	e009      	b.n	80063a6 <HAL_ADC_ConfigChannel+0x50a>
 8006392:	bf00      	nop
 8006394:	47ff0000 	.word	0x47ff0000
 8006398:	40022000 	.word	0x40022000
 800639c:	40022100 	.word	0x40022100
 80063a0:	40022300 	.word	0x40022300
 80063a4:	4b61      	ldr	r3, [pc, #388]	@ (800652c <HAL_ADC_ConfigChannel+0x690>)
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fdd2 	bl	8004f50 <LL_ADC_GetCommonPathInternalCh>
 80063ac:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5f      	ldr	r2, [pc, #380]	@ (8006530 <HAL_ADC_ConfigChannel+0x694>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_ADC_ConfigChannel+0x526>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006534 <HAL_ADC_ConfigChannel+0x698>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10e      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x544>
 80063c2:	485b      	ldr	r0, [pc, #364]	@ (8006530 <HAL_ADC_ConfigChannel+0x694>)
 80063c4:	f7fe ff6c 	bl	80052a0 <LL_ADC_IsEnabled>
 80063c8:	4604      	mov	r4, r0
 80063ca:	485a      	ldr	r0, [pc, #360]	@ (8006534 <HAL_ADC_ConfigChannel+0x698>)
 80063cc:	f7fe ff68 	bl	80052a0 <LL_ADC_IsEnabled>
 80063d0:	4603      	mov	r3, r0
 80063d2:	4323      	orrs	r3, r4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf0c      	ite	eq
 80063d8:	2301      	moveq	r3, #1
 80063da:	2300      	movne	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e008      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x556>
 80063e0:	4855      	ldr	r0, [pc, #340]	@ (8006538 <HAL_ADC_ConfigChannel+0x69c>)
 80063e2:	f7fe ff5d 	bl	80052a0 <LL_ADC_IsEnabled>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d07d      	beq.n	80064f2 <HAL_ADC_ConfigChannel+0x656>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a50      	ldr	r2, [pc, #320]	@ (800653c <HAL_ADC_ConfigChannel+0x6a0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d130      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x5c6>
 8006400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d12b      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x5c6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4a      	ldr	r2, [pc, #296]	@ (8006538 <HAL_ADC_ConfigChannel+0x69c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	f040 8081 	bne.w	8006518 <HAL_ADC_ConfigChannel+0x67c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a45      	ldr	r2, [pc, #276]	@ (8006530 <HAL_ADC_ConfigChannel+0x694>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_ADC_ConfigChannel+0x58e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <HAL_ADC_ConfigChannel+0x698>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <HAL_ADC_ConfigChannel+0x592>
 800642a:	4a45      	ldr	r2, [pc, #276]	@ (8006540 <HAL_ADC_ConfigChannel+0x6a4>)
 800642c:	e000      	b.n	8006430 <HAL_ADC_ConfigChannel+0x594>
 800642e:	4a3f      	ldr	r2, [pc, #252]	@ (800652c <HAL_ADC_ConfigChannel+0x690>)
 8006430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006432:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7fe fd76 	bl	8004f2a <LL_ADC_SetCommonPathInternalCh>
 800643e:	4b41      	ldr	r3, [pc, #260]	@ (8006544 <HAL_ADC_ConfigChannel+0x6a8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	099b      	lsrs	r3, r3, #6
 8006444:	4a40      	ldr	r2, [pc, #256]	@ (8006548 <HAL_ADC_ConfigChannel+0x6ac>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	099b      	lsrs	r3, r3, #6
 800644c:	3301      	adds	r3, #1
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	e002      	b.n	800645a <HAL_ADC_ConfigChannel+0x5be>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3b01      	subs	r3, #1
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f9      	bne.n	8006454 <HAL_ADC_ConfigChannel+0x5b8>
 8006460:	e05a      	b.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a39      	ldr	r2, [pc, #228]	@ (800654c <HAL_ADC_ConfigChannel+0x6b0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d11e      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x60e>
 800646c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d119      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x60e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2f      	ldr	r2, [pc, #188]	@ (8006538 <HAL_ADC_ConfigChannel+0x69c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d14b      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2a      	ldr	r2, [pc, #168]	@ (8006530 <HAL_ADC_ConfigChannel+0x694>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <HAL_ADC_ConfigChannel+0x5f8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a29      	ldr	r2, [pc, #164]	@ (8006534 <HAL_ADC_ConfigChannel+0x698>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d101      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x5fc>
 8006494:	4a2a      	ldr	r2, [pc, #168]	@ (8006540 <HAL_ADC_ConfigChannel+0x6a4>)
 8006496:	e000      	b.n	800649a <HAL_ADC_ConfigChannel+0x5fe>
 8006498:	4a24      	ldr	r2, [pc, #144]	@ (800652c <HAL_ADC_ConfigChannel+0x690>)
 800649a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800649c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe fd41 	bl	8004f2a <LL_ADC_SetCommonPathInternalCh>
 80064a8:	e036      	b.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a28      	ldr	r2, [pc, #160]	@ (8006550 <HAL_ADC_ConfigChannel+0x6b4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d131      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80064b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d12c      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006538 <HAL_ADC_ConfigChannel+0x69c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d127      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a18      	ldr	r2, [pc, #96]	@ (8006530 <HAL_ADC_ConfigChannel+0x694>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_ADC_ConfigChannel+0x640>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a17      	ldr	r2, [pc, #92]	@ (8006534 <HAL_ADC_ConfigChannel+0x698>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d101      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x644>
 80064dc:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <HAL_ADC_ConfigChannel+0x6a4>)
 80064de:	e000      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x646>
 80064e0:	4a12      	ldr	r2, [pc, #72]	@ (800652c <HAL_ADC_ConfigChannel+0x690>)
 80064e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7fe fd1d 	bl	8004f2a <LL_ADC_SetCommonPathInternalCh>
 80064f0:	e012      	b.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006504:	e008      	b.n	8006518 <HAL_ADC_ConfigChannel+0x67c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	655a      	str	r2, [r3, #84]	@ 0x54
 8006512:	2301      	movs	r3, #1
 8006514:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006520:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006524:	4618      	mov	r0, r3
 8006526:	3784      	adds	r7, #132	@ 0x84
 8006528:	46bd      	mov	sp, r7
 800652a:	bd90      	pop	{r4, r7, pc}
 800652c:	58026300 	.word	0x58026300
 8006530:	40022000 	.word	0x40022000
 8006534:	40022100 	.word	0x40022100
 8006538:	58026000 	.word	0x58026000
 800653c:	cb840000 	.word	0xcb840000
 8006540:	40022300 	.word	0x40022300
 8006544:	24000228 	.word	0x24000228
 8006548:	053e2d63 	.word	0x053e2d63
 800654c:	c7520000 	.word	0xc7520000
 8006550:	cfb80000 	.word	0xcfb80000

08006554 <ADC_Enable>:
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fe9d 	bl	80052a0 <LL_ADC_IsEnabled>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d16e      	bne.n	800664a <ADC_Enable+0xf6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	4b38      	ldr	r3, [pc, #224]	@ (8006654 <ADC_Enable+0x100>)
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <ADC_Enable+0x42>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	f043 0210 	orr.w	r2, r3, #16
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	f043 0201 	orr.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	659a      	str	r2, [r3, #88]	@ 0x58
 8006592:	2301      	movs	r3, #1
 8006594:	e05a      	b.n	800664c <ADC_Enable+0xf8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fe58 	bl	8005250 <LL_ADC_Enable>
 80065a0:	f7fe fc3a 	bl	8004e18 <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006658 <ADC_Enable+0x104>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <ADC_Enable+0x66>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a29      	ldr	r2, [pc, #164]	@ (800665c <ADC_Enable+0x108>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <ADC_Enable+0x6a>
 80065ba:	4b29      	ldr	r3, [pc, #164]	@ (8006660 <ADC_Enable+0x10c>)
 80065bc:	e000      	b.n	80065c0 <ADC_Enable+0x6c>
 80065be:	4b29      	ldr	r3, [pc, #164]	@ (8006664 <ADC_Enable+0x110>)
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fddb 	bl	800517c <LL_ADC_GetMultimode>
 80065c6:	60b8      	str	r0, [r7, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a23      	ldr	r2, [pc, #140]	@ (800665c <ADC_Enable+0x108>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d002      	beq.n	80065d8 <ADC_Enable+0x84>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	e000      	b.n	80065da <ADC_Enable+0x86>
 80065d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006658 <ADC_Enable+0x104>)
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02c      	beq.n	800663c <ADC_Enable+0xe8>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d130      	bne.n	800664a <ADC_Enable+0xf6>
 80065e8:	e028      	b.n	800663c <ADC_Enable+0xe8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fe56 	bl	80052a0 <LL_ADC_IsEnabled>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <ADC_Enable+0xb0>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fe26 	bl	8005250 <LL_ADC_Enable>
 8006604:	f7fe fc08 	bl	8004e18 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d914      	bls.n	800663c <ADC_Enable+0xe8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d00d      	beq.n	800663c <ADC_Enable+0xe8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	f043 0210 	orr.w	r2, r3, #16
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	655a      	str	r2, [r3, #84]	@ 0x54
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006630:	f043 0201 	orr.w	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	659a      	str	r2, [r3, #88]	@ 0x58
 8006638:	2301      	movs	r3, #1
 800663a:	e007      	b.n	800664c <ADC_Enable+0xf8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d1cf      	bne.n	80065ea <ADC_Enable+0x96>
 800664a:	2300      	movs	r3, #0
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	8000003f 	.word	0x8000003f
 8006658:	40022000 	.word	0x40022000
 800665c:	40022100 	.word	0x40022100
 8006660:	40022300 	.word	0x40022300
 8006664:	58026300 	.word	0x58026300

08006668 <ADC_Disable>:
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe fe26 	bl	80052c6 <LL_ADC_IsDisableOngoing>
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe fe0d 	bl	80052a0 <LL_ADC_IsEnabled>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d047      	beq.n	800671c <ADC_Disable+0xb4>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d144      	bne.n	800671c <ADC_Disable+0xb4>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 030d 	and.w	r3, r3, #13
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10c      	bne.n	80066ba <ADC_Disable+0x52>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fde7 	bl	8005278 <LL_ADC_Disable>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2203      	movs	r2, #3
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f7fe fbb1 	bl	8004e18 <HAL_GetTick>
 80066b6:	60b8      	str	r0, [r7, #8]
 80066b8:	e029      	b.n	800670e <ADC_Disable+0xa6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	f043 0210 	orr.w	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80066d2:	2301      	movs	r3, #1
 80066d4:	e023      	b.n	800671e <ADC_Disable+0xb6>
 80066d6:	f7fe fb9f 	bl	8004e18 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d914      	bls.n	800670e <ADC_Disable+0xa6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <ADC_Disable+0xa6>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	f043 0210 	orr.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	659a      	str	r2, [r3, #88]	@ 0x58
 800670a:	2301      	movs	r3, #1
 800670c:	e007      	b.n	800671e <ADC_Disable+0xb6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1dc      	bne.n	80066d6 <ADC_Disable+0x6e>
 800671c:	2300      	movs	r3, #0
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <ADC_DMAConvCplt>:
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800673c:	2b00      	cmp	r3, #0
 800673e:	d14c      	bne.n	80067da <ADC_DMAConvCplt+0xb4>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	655a      	str	r2, [r3, #84]	@ 0x54
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d021      	beq.n	800679e <ADC_DMAConvCplt+0x78>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fc58 	bl	8005014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d032      	beq.n	80067d0 <ADC_DMAConvCplt+0xaa>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d12b      	bne.n	80067d0 <ADC_DMAConvCplt+0xaa>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11f      	bne.n	80067d0 <ADC_DMAConvCplt+0xaa>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006794:	f043 0201 	orr.w	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	655a      	str	r2, [r3, #84]	@ 0x54
 800679c:	e018      	b.n	80067d0 <ADC_DMAConvCplt+0xaa>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d111      	bne.n	80067d0 <ADC_DMAConvCplt+0xaa>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <ADC_DMAConvCplt+0xaa>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	f043 0201 	orr.w	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	4798      	blx	r3
 80067d8:	e00f      	b.n	80067fa <ADC_DMAConvCplt+0xd4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <ADC_DMAConvCplt+0xca>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	4798      	blx	r3
 80067ee:	e004      	b.n	80067fa <ADC_DMAConvCplt+0xd4>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <ADC_DMAHalfConvCplt>:
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	4798      	blx	r3
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <ADC_DMAError>:
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800683e:	f043 0204 	orr.w	r2, r3, #4
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	659a      	str	r2, [r3, #88]	@ 0x58
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	4798      	blx	r3
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <ADC_ConfigureBoostMode>:
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7a      	ldr	r2, [pc, #488]	@ (8006a50 <ADC_ConfigureBoostMode+0x1f8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <ADC_ConfigureBoostMode+0x1c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a79      	ldr	r2, [pc, #484]	@ (8006a54 <ADC_ConfigureBoostMode+0x1fc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d109      	bne.n	8006888 <ADC_ConfigureBoostMode+0x30>
 8006874:	4b78      	ldr	r3, [pc, #480]	@ (8006a58 <ADC_ConfigureBoostMode+0x200>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e008      	b.n	800689a <ADC_ConfigureBoostMode+0x42>
 8006888:	4b74      	ldr	r3, [pc, #464]	@ (8006a5c <ADC_ConfigureBoostMode+0x204>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01c      	beq.n	80068d8 <ADC_ConfigureBoostMode+0x80>
 800689e:	f006 ff2f 	bl	800d700 <HAL_RCC_GetHCLKFreq>
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068ac:	d010      	beq.n	80068d0 <ADC_ConfigureBoostMode+0x78>
 80068ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068b2:	d873      	bhi.n	800699c <ADC_ConfigureBoostMode+0x144>
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b8:	d002      	beq.n	80068c0 <ADC_ConfigureBoostMode+0x68>
 80068ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068be:	d16d      	bne.n	800699c <ADC_ConfigureBoostMode+0x144>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e068      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e064      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 80068d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80068dc:	f04f 0100 	mov.w	r1, #0
 80068e0:	f008 f95e 	bl	800eba0 <HAL_RCCEx_GetPeriphCLKFreq>
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80068ee:	d051      	beq.n	8006994 <ADC_ConfigureBoostMode+0x13c>
 80068f0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80068f4:	d854      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 80068f6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80068fa:	d047      	beq.n	800698c <ADC_ConfigureBoostMode+0x134>
 80068fc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006900:	d84e      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006902:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006906:	d03d      	beq.n	8006984 <ADC_ConfigureBoostMode+0x12c>
 8006908:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800690c:	d848      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800690e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006912:	d033      	beq.n	800697c <ADC_ConfigureBoostMode+0x124>
 8006914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006918:	d842      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800691a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800691e:	d029      	beq.n	8006974 <ADC_ConfigureBoostMode+0x11c>
 8006920:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006924:	d83c      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006926:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800692a:	d01a      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 800692c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006930:	d836      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006932:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006936:	d014      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006938:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800693c:	d830      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006942:	d00e      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006948:	d82a      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800694a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800694e:	d008      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006950:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006954:	d824      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800695a:	d002      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 800695c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006960:	d11e      	bne.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	0c9b      	lsrs	r3, r3, #18
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e016      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e012      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e00e      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e00a      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	e006      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e002      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
 80069a0:	bf00      	nop
 80069a2:	f7fe fa69 	bl	8004e78 <HAL_GetREVID>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d815      	bhi.n	80069dc <ADC_ConfigureBoostMode+0x184>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <ADC_ConfigureBoostMode+0x208>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d908      	bls.n	80069ca <ADC_ConfigureBoostMode+0x172>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	e03e      	b.n	8006a48 <ADC_ConfigureBoostMode+0x1f0>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	e035      	b.n	8006a48 <ADC_ConfigureBoostMode+0x1f0>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <ADC_ConfigureBoostMode+0x20c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d808      	bhi.n	80069fc <ADC_ConfigureBoostMode+0x1a4>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80069f8:	609a      	str	r2, [r3, #8]
 80069fa:	e025      	b.n	8006a48 <ADC_ConfigureBoostMode+0x1f0>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <ADC_ConfigureBoostMode+0x210>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d80a      	bhi.n	8006a1a <ADC_ConfigureBoostMode+0x1c2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	e016      	b.n	8006a48 <ADC_ConfigureBoostMode+0x1f0>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	@ (8006a6c <ADC_ConfigureBoostMode+0x214>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d80a      	bhi.n	8006a38 <ADC_ConfigureBoostMode+0x1e0>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	e007      	b.n	8006a48 <ADC_ConfigureBoostMode+0x1f0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006a46:	609a      	str	r2, [r3, #8]
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40022000 	.word	0x40022000
 8006a54:	40022100 	.word	0x40022100
 8006a58:	40022300 	.word	0x40022300
 8006a5c:	58026300 	.word	0x58026300
 8006a60:	01312d00 	.word	0x01312d00
 8006a64:	005f5e10 	.word	0x005f5e10
 8006a68:	00bebc20 	.word	0x00bebc20
 8006a6c:	017d7840 	.word	0x017d7840

08006a70 <LL_ADC_StartCalibration>:
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <LL_ADC_StartCalibration+0x38>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a90:	430a      	orrs	r2, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	3ffeffc0 	.word	0x3ffeffc0

08006aac <LL_ADC_IsCalibrationOnGoing>:
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ac0:	d101      	bne.n	8006ac6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_ADCEx_Calibration_Start>:
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_ADCEx_Calibration_Start+0x1e>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e04c      	b.n	8006b8c <HAL_ADCEx_Calibration_Start+0xb8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff fdb4 	bl	8006668 <ADC_Disable>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d135      	bne.n	8006b76 <HAL_ADCEx_Calibration_Start+0xa2>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b0e:	4b21      	ldr	r3, [pc, #132]	@ (8006b94 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	f043 0202 	orr.w	r2, r3, #2
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff ffa4 	bl	8006a70 <LL_ADC_StartCalibration>
 8006b28:	e014      	b.n	8006b54 <HAL_ADCEx_Calibration_Start+0x80>
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	4a19      	ldr	r2, [pc, #100]	@ (8006b98 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d30d      	bcc.n	8006b54 <HAL_ADCEx_Calibration_Start+0x80>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3c:	f023 0312 	bic.w	r3, r3, #18
 8006b40:	f043 0210 	orr.w	r2, r3, #16
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006b50:	2301      	movs	r3, #1
 8006b52:	e01b      	b.n	8006b8c <HAL_ADCEx_Calibration_Start+0xb8>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff ffa7 	bl	8006aac <LL_ADC_IsCalibrationOnGoing>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e2      	bne.n	8006b2a <HAL_ADCEx_Calibration_Start+0x56>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b68:	f023 0303 	bic.w	r3, r3, #3
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b74:	e005      	b.n	8006b82 <HAL_ADCEx_Calibration_Start+0xae>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7a:	f043 0210 	orr.w	r2, r3, #16
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	ffffeefd 	.word	0xffffeefd
 8006b98:	25c3f800 	.word	0x25c3f800

08006b9c <HAL_ADCEx_InjectedConvCpltCallback>:
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_ADCEx_EndOfSamplingCallback>:
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <__NVIC_SetPriorityGrouping>:
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <__NVIC_SetPriorityGrouping+0x40>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <__NVIC_SetPriorityGrouping+0x44>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	4a04      	ldr	r2, [pc, #16]	@ (8006c40 <__NVIC_SetPriorityGrouping+0x40>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	60d3      	str	r3, [r2, #12]
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	e000ed00 	.word	0xe000ed00
 8006c44:	05fa0000 	.word	0x05fa0000

08006c48 <__NVIC_GetPriorityGrouping>:
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__NVIC_GetPriorityGrouping+0x18>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	e000ed00 	.word	0xe000ed00

08006c64 <__NVIC_EnableIRQ>:
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	80fb      	strh	r3, [r7, #6]
 8006c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	db0b      	blt.n	8006c8e <__NVIC_EnableIRQ+0x2a>
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	f003 021f 	and.w	r2, r3, #31
 8006c7c:	4907      	ldr	r1, [pc, #28]	@ (8006c9c <__NVIC_EnableIRQ+0x38>)
 8006c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	2001      	movs	r0, #1
 8006c86:	fa00 f202 	lsl.w	r2, r0, r2
 8006c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000e100 	.word	0xe000e100

08006ca0 <__NVIC_SetPriority>:
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	80fb      	strh	r3, [r7, #6]
 8006cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	db0a      	blt.n	8006cca <__NVIC_SetPriority+0x2a>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	490c      	ldr	r1, [pc, #48]	@ (8006cec <__NVIC_SetPriority+0x4c>)
 8006cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cbe:	0112      	lsls	r2, r2, #4
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8006cc8:	e00a      	b.n	8006ce0 <__NVIC_SetPriority+0x40>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	4908      	ldr	r1, [pc, #32]	@ (8006cf0 <__NVIC_SetPriority+0x50>)
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3b04      	subs	r3, #4
 8006cd8:	0112      	lsls	r2, r2, #4
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	440b      	add	r3, r1
 8006cde:	761a      	strb	r2, [r3, #24]
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	e000e100 	.word	0xe000e100
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <NVIC_EncodePriority>:
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	@ 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	bf28      	it	cs
 8006d12:	2304      	movcs	r3, #4
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2b06      	cmp	r3, #6
 8006d1c:	d902      	bls.n	8006d24 <NVIC_EncodePriority+0x30>
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3b03      	subs	r3, #3
 8006d22:	e000      	b.n	8006d26 <NVIC_EncodePriority+0x32>
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	401a      	ands	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	43d9      	mvns	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	400b      	ands	r3, r1
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3724      	adds	r7, #36	@ 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <SysTick_Config>:
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d6c:	d301      	bcc.n	8006d72 <SysTick_Config+0x16>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e00f      	b.n	8006d92 <SysTick_Config+0x36>
 8006d72:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <SysTick_Config+0x40>)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	210f      	movs	r1, #15
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	f7ff ff8e 	bl	8006ca0 <__NVIC_SetPriority>
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <SysTick_Config+0x40>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	609a      	str	r2, [r3, #8]
 8006d8a:	4b04      	ldr	r3, [pc, #16]	@ (8006d9c <SysTick_Config+0x40>)
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000e010 	.word	0xe000e010

08006da0 <HAL_NVIC_SetPriorityGrouping>:
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ff29 	bl	8006c00 <__NVIC_SetPriorityGrouping>
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_NVIC_SetPriority>:
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	81fb      	strh	r3, [r7, #14]
 8006dc4:	f7ff ff40 	bl	8006c48 <__NVIC_GetPriorityGrouping>
 8006dc8:	6178      	str	r0, [r7, #20]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	6978      	ldr	r0, [r7, #20]
 8006dd0:	f7ff ff90 	bl	8006cf4 <NVIC_EncodePriority>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff ff5f 	bl	8006ca0 <__NVIC_SetPriority>
 8006de2:	bf00      	nop
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_NVIC_EnableIRQ>:
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	4603      	mov	r3, r0
 8006df2:	80fb      	strh	r3, [r7, #6]
 8006df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff ff33 	bl	8006c64 <__NVIC_EnableIRQ>
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_SYSTICK_Config>:
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff ffa4 	bl	8006d5c <SysTick_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <HAL_DMA_Init>:
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	f7fd fff6 	bl	8004e18 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_DMA_Init+0x18>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e316      	b.n	8007466 <HAL_DMA_Init+0x646>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a66      	ldr	r2, [pc, #408]	@ (8006fd8 <HAL_DMA_Init+0x1b8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d04a      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a65      	ldr	r2, [pc, #404]	@ (8006fdc <HAL_DMA_Init+0x1bc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d045      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a63      	ldr	r2, [pc, #396]	@ (8006fe0 <HAL_DMA_Init+0x1c0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d040      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a62      	ldr	r2, [pc, #392]	@ (8006fe4 <HAL_DMA_Init+0x1c4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d03b      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a60      	ldr	r2, [pc, #384]	@ (8006fe8 <HAL_DMA_Init+0x1c8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d036      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8006fec <HAL_DMA_Init+0x1cc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d031      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a5d      	ldr	r2, [pc, #372]	@ (8006ff0 <HAL_DMA_Init+0x1d0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d02c      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a5c      	ldr	r2, [pc, #368]	@ (8006ff4 <HAL_DMA_Init+0x1d4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d027      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ff8 <HAL_DMA_Init+0x1d8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a59      	ldr	r2, [pc, #356]	@ (8006ffc <HAL_DMA_Init+0x1dc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a57      	ldr	r2, [pc, #348]	@ (8007000 <HAL_DMA_Init+0x1e0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a56      	ldr	r2, [pc, #344]	@ (8007004 <HAL_DMA_Init+0x1e4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a54      	ldr	r2, [pc, #336]	@ (8007008 <HAL_DMA_Init+0x1e8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a53      	ldr	r2, [pc, #332]	@ (800700c <HAL_DMA_Init+0x1ec>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a51      	ldr	r2, [pc, #324]	@ (8007010 <HAL_DMA_Init+0x1f0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_DMA_Init+0xb8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a50      	ldr	r2, [pc, #320]	@ (8007014 <HAL_DMA_Init+0x1f4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d101      	bne.n	8006edc <HAL_DMA_Init+0xbc>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <HAL_DMA_Init+0xbe>
 8006edc:	2300      	movs	r3, #0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 813b 	beq.w	800715a <HAL_DMA_Init+0x33a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a37      	ldr	r2, [pc, #220]	@ (8006fd8 <HAL_DMA_Init+0x1b8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d04a      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a36      	ldr	r2, [pc, #216]	@ (8006fdc <HAL_DMA_Init+0x1bc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d045      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a34      	ldr	r2, [pc, #208]	@ (8006fe0 <HAL_DMA_Init+0x1c0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d040      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a33      	ldr	r2, [pc, #204]	@ (8006fe4 <HAL_DMA_Init+0x1c4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d03b      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a31      	ldr	r2, [pc, #196]	@ (8006fe8 <HAL_DMA_Init+0x1c8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d036      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a30      	ldr	r2, [pc, #192]	@ (8006fec <HAL_DMA_Init+0x1cc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d031      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2e      	ldr	r2, [pc, #184]	@ (8006ff0 <HAL_DMA_Init+0x1d0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d02c      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff4 <HAL_DMA_Init+0x1d4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d027      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff8 <HAL_DMA_Init+0x1d8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2a      	ldr	r2, [pc, #168]	@ (8006ffc <HAL_DMA_Init+0x1dc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d01d      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a28      	ldr	r2, [pc, #160]	@ (8007000 <HAL_DMA_Init+0x1e0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a27      	ldr	r2, [pc, #156]	@ (8007004 <HAL_DMA_Init+0x1e4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a25      	ldr	r2, [pc, #148]	@ (8007008 <HAL_DMA_Init+0x1e8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a24      	ldr	r2, [pc, #144]	@ (800700c <HAL_DMA_Init+0x1ec>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a22      	ldr	r2, [pc, #136]	@ (8007010 <HAL_DMA_Init+0x1f0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_DMA_Init+0x174>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a21      	ldr	r2, [pc, #132]	@ (8007014 <HAL_DMA_Init+0x1f4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d108      	bne.n	8006fa6 <HAL_DMA_Init+0x186>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	e007      	b.n	8006fb6 <HAL_DMA_Init+0x196>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e02f      	b.n	8007018 <HAL_DMA_Init+0x1f8>
 8006fb8:	f7fd ff2e 	bl	8004e18 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d928      	bls.n	8007018 <HAL_DMA_Init+0x1f8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e246      	b.n	8007466 <HAL_DMA_Init+0x646>
 8006fd8:	40020010 	.word	0x40020010
 8006fdc:	40020028 	.word	0x40020028
 8006fe0:	40020040 	.word	0x40020040
 8006fe4:	40020058 	.word	0x40020058
 8006fe8:	40020070 	.word	0x40020070
 8006fec:	40020088 	.word	0x40020088
 8006ff0:	400200a0 	.word	0x400200a0
 8006ff4:	400200b8 	.word	0x400200b8
 8006ff8:	40020410 	.word	0x40020410
 8006ffc:	40020428 	.word	0x40020428
 8007000:	40020440 	.word	0x40020440
 8007004:	40020458 	.word	0x40020458
 8007008:	40020470 	.word	0x40020470
 800700c:	40020488 	.word	0x40020488
 8007010:	400204a0 	.word	0x400204a0
 8007014:	400204b8 	.word	0x400204b8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1c8      	bne.n	8006fb8 <HAL_DMA_Init+0x198>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4b83      	ldr	r3, [pc, #524]	@ (8007240 <HAL_DMA_Init+0x420>)
 8007032:	4013      	ands	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	431a      	orrs	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	4313      	orrs	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	2b04      	cmp	r3, #4
 800706a:	d107      	bne.n	800707c <HAL_DMA_Init+0x25c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007074:	4313      	orrs	r3, r2
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	4b71      	ldr	r3, [pc, #452]	@ (8007244 <HAL_DMA_Init+0x424>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b71      	ldr	r3, [pc, #452]	@ (8007248 <HAL_DMA_Init+0x428>)
 8007082:	4013      	ands	r3, r2
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007088:	d328      	bcc.n	80070dc <HAL_DMA_Init+0x2bc>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b28      	cmp	r3, #40	@ 0x28
 8007090:	d903      	bls.n	800709a <HAL_DMA_Init+0x27a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b2e      	cmp	r3, #46	@ 0x2e
 8007098:	d917      	bls.n	80070ca <HAL_DMA_Init+0x2aa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b3e      	cmp	r3, #62	@ 0x3e
 80070a0:	d903      	bls.n	80070aa <HAL_DMA_Init+0x28a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b42      	cmp	r3, #66	@ 0x42
 80070a8:	d90f      	bls.n	80070ca <HAL_DMA_Init+0x2aa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b46      	cmp	r3, #70	@ 0x46
 80070b0:	d903      	bls.n	80070ba <HAL_DMA_Init+0x29a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b48      	cmp	r3, #72	@ 0x48
 80070b8:	d907      	bls.n	80070ca <HAL_DMA_Init+0x2aa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b4e      	cmp	r3, #78	@ 0x4e
 80070c0:	d905      	bls.n	80070ce <HAL_DMA_Init+0x2ae>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b52      	cmp	r3, #82	@ 0x52
 80070c8:	d801      	bhi.n	80070ce <HAL_DMA_Init+0x2ae>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <HAL_DMA_Init+0x2b0>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_DMA_Init+0x2bc>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0307 	bic.w	r3, r3, #7
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	2b04      	cmp	r3, #4
 8007104:	d117      	bne.n	8007136 <HAL_DMA_Init+0x316>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_Init+0x316>
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f002 f889 	bl	8009230 <DMA_CheckFifoParam>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <HAL_DMA_Init+0x316>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2240      	movs	r2, #64	@ 0x40
 8007128:	655a      	str	r2, [r3, #84]	@ 0x54
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007132:	2301      	movs	r3, #1
 8007134:	e197      	b.n	8007466 <HAL_DMA_Init+0x646>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	615a      	str	r2, [r3, #20]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 ffc4 	bl	80090cc <DMA_CalcBaseAndBitshift>
 8007144:	4603      	mov	r3, r0
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	223f      	movs	r2, #63	@ 0x3f
 8007152:	409a      	lsls	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	e0cd      	b.n	80072f6 <HAL_DMA_Init+0x4d6>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3b      	ldr	r2, [pc, #236]	@ (800724c <HAL_DMA_Init+0x42c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a39      	ldr	r2, [pc, #228]	@ (8007250 <HAL_DMA_Init+0x430>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a38      	ldr	r2, [pc, #224]	@ (8007254 <HAL_DMA_Init+0x434>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a36      	ldr	r2, [pc, #216]	@ (8007258 <HAL_DMA_Init+0x438>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a35      	ldr	r2, [pc, #212]	@ (800725c <HAL_DMA_Init+0x43c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a33      	ldr	r2, [pc, #204]	@ (8007260 <HAL_DMA_Init+0x440>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a32      	ldr	r2, [pc, #200]	@ (8007264 <HAL_DMA_Init+0x444>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_DMA_Init+0x38a>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a30      	ldr	r2, [pc, #192]	@ (8007268 <HAL_DMA_Init+0x448>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d101      	bne.n	80071ae <HAL_DMA_Init+0x38e>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <HAL_DMA_Init+0x390>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8097 	beq.w	80072e4 <HAL_DMA_Init+0x4c4>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a24      	ldr	r2, [pc, #144]	@ (800724c <HAL_DMA_Init+0x42c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d021      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	@ (8007250 <HAL_DMA_Init+0x430>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01c      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	@ (8007254 <HAL_DMA_Init+0x434>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d017      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007258 <HAL_DMA_Init+0x438>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d012      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	@ (800725c <HAL_DMA_Init+0x43c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00d      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007260 <HAL_DMA_Init+0x440>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d008      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007264 <HAL_DMA_Init+0x444>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <HAL_DMA_Init+0x3e4>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	@ (8007268 <HAL_DMA_Init+0x448>)
 8007202:	4293      	cmp	r3, r2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4b13      	ldr	r3, [pc, #76]	@ (800726c <HAL_DMA_Init+0x44c>)
 8007220:	4013      	ands	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b40      	cmp	r3, #64	@ 0x40
 800722a:	d021      	beq.n	8007270 <HAL_DMA_Init+0x450>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b80      	cmp	r3, #128	@ 0x80
 8007232:	d102      	bne.n	800723a <HAL_DMA_Init+0x41a>
 8007234:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007238:	e01b      	b.n	8007272 <HAL_DMA_Init+0x452>
 800723a:	2300      	movs	r3, #0
 800723c:	e019      	b.n	8007272 <HAL_DMA_Init+0x452>
 800723e:	bf00      	nop
 8007240:	fe10803f 	.word	0xfe10803f
 8007244:	5c001000 	.word	0x5c001000
 8007248:	ffff0000 	.word	0xffff0000
 800724c:	58025408 	.word	0x58025408
 8007250:	5802541c 	.word	0x5802541c
 8007254:	58025430 	.word	0x58025430
 8007258:	58025444 	.word	0x58025444
 800725c:	58025458 	.word	0x58025458
 8007260:	5802546c 	.word	0x5802546c
 8007264:	58025480 	.word	0x58025480
 8007268:	58025494 	.word	0x58025494
 800726c:	fffe000f 	.word	0xfffe000f
 8007270:	2310      	movs	r3, #16
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68d2      	ldr	r2, [r2, #12]
 8007276:	08d2      	lsrs	r2, r2, #3
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	08db      	lsrs	r3, r3, #3
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	08db      	lsrs	r3, r3, #3
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	4313      	orrs	r3, r2
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	4b6e      	ldr	r3, [pc, #440]	@ (8007470 <HAL_DMA_Init+0x650>)
 80072b8:	4413      	add	r3, r2
 80072ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007474 <HAL_DMA_Init+0x654>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	009a      	lsls	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 feff 	bl	80090cc <DMA_CalcBaseAndBitshift>
 80072ce:	4603      	mov	r3, r0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2201      	movs	r2, #1
 80072dc:	409a      	lsls	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	e008      	b.n	80072f6 <HAL_DMA_Init+0x4d6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2240      	movs	r2, #64	@ 0x40
 80072e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2203      	movs	r2, #3
 80072ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80072f2:	2301      	movs	r3, #1
 80072f4:	e0b7      	b.n	8007466 <HAL_DMA_Init+0x646>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a5f      	ldr	r2, [pc, #380]	@ (8007478 <HAL_DMA_Init+0x658>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d072      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a5d      	ldr	r2, [pc, #372]	@ (800747c <HAL_DMA_Init+0x65c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d06d      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a5c      	ldr	r2, [pc, #368]	@ (8007480 <HAL_DMA_Init+0x660>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d068      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a5a      	ldr	r2, [pc, #360]	@ (8007484 <HAL_DMA_Init+0x664>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d063      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a59      	ldr	r2, [pc, #356]	@ (8007488 <HAL_DMA_Init+0x668>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d05e      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a57      	ldr	r2, [pc, #348]	@ (800748c <HAL_DMA_Init+0x66c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d059      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a56      	ldr	r2, [pc, #344]	@ (8007490 <HAL_DMA_Init+0x670>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d054      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a54      	ldr	r2, [pc, #336]	@ (8007494 <HAL_DMA_Init+0x674>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04f      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a53      	ldr	r2, [pc, #332]	@ (8007498 <HAL_DMA_Init+0x678>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d04a      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a51      	ldr	r2, [pc, #324]	@ (800749c <HAL_DMA_Init+0x67c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d045      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a50      	ldr	r2, [pc, #320]	@ (80074a0 <HAL_DMA_Init+0x680>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d040      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a4e      	ldr	r2, [pc, #312]	@ (80074a4 <HAL_DMA_Init+0x684>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d03b      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a4d      	ldr	r2, [pc, #308]	@ (80074a8 <HAL_DMA_Init+0x688>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d036      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a4b      	ldr	r2, [pc, #300]	@ (80074ac <HAL_DMA_Init+0x68c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d031      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4a      	ldr	r2, [pc, #296]	@ (80074b0 <HAL_DMA_Init+0x690>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d02c      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a48      	ldr	r2, [pc, #288]	@ (80074b4 <HAL_DMA_Init+0x694>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d027      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a47      	ldr	r2, [pc, #284]	@ (80074b8 <HAL_DMA_Init+0x698>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d022      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a45      	ldr	r2, [pc, #276]	@ (80074bc <HAL_DMA_Init+0x69c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a44      	ldr	r2, [pc, #272]	@ (80074c0 <HAL_DMA_Init+0x6a0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d018      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a42      	ldr	r2, [pc, #264]	@ (80074c4 <HAL_DMA_Init+0x6a4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a41      	ldr	r2, [pc, #260]	@ (80074c8 <HAL_DMA_Init+0x6a8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a3f      	ldr	r2, [pc, #252]	@ (80074cc <HAL_DMA_Init+0x6ac>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d009      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3e      	ldr	r2, [pc, #248]	@ (80074d0 <HAL_DMA_Init+0x6b0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_DMA_Init+0x5c6>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a3c      	ldr	r2, [pc, #240]	@ (80074d4 <HAL_DMA_Init+0x6b4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <HAL_DMA_Init+0x5ca>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <HAL_DMA_Init+0x5cc>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d032      	beq.n	8007456 <HAL_DMA_Init+0x636>
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 ff99 	bl	8009328 <DMA_CalcDMAMUXChannelBaseAndMask>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b80      	cmp	r3, #128	@ 0x80
 80073fc:	d102      	bne.n	8007404 <HAL_DMA_Init+0x5e4>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <HAL_DMA_Init+0x624>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b08      	cmp	r3, #8
 8007428:	d80c      	bhi.n	8007444 <HAL_DMA_Init+0x624>
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f002 f816 	bl	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	e008      	b.n	8007456 <HAL_DMA_Init+0x636>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	66da      	str	r2, [r3, #108]	@ 0x6c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	671a      	str	r2, [r3, #112]	@ 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	675a      	str	r2, [r3, #116]	@ 0x74
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	655a      	str	r2, [r3, #84]	@ 0x54
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007464:	2300      	movs	r3, #0
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	a7fdabf8 	.word	0xa7fdabf8
 8007474:	cccccccd 	.word	0xcccccccd
 8007478:	40020010 	.word	0x40020010
 800747c:	40020028 	.word	0x40020028
 8007480:	40020040 	.word	0x40020040
 8007484:	40020058 	.word	0x40020058
 8007488:	40020070 	.word	0x40020070
 800748c:	40020088 	.word	0x40020088
 8007490:	400200a0 	.word	0x400200a0
 8007494:	400200b8 	.word	0x400200b8
 8007498:	40020410 	.word	0x40020410
 800749c:	40020428 	.word	0x40020428
 80074a0:	40020440 	.word	0x40020440
 80074a4:	40020458 	.word	0x40020458
 80074a8:	40020470 	.word	0x40020470
 80074ac:	40020488 	.word	0x40020488
 80074b0:	400204a0 	.word	0x400204a0
 80074b4:	400204b8 	.word	0x400204b8
 80074b8:	58025408 	.word	0x58025408
 80074bc:	5802541c 	.word	0x5802541c
 80074c0:	58025430 	.word	0x58025430
 80074c4:	58025444 	.word	0x58025444
 80074c8:	58025458 	.word	0x58025458
 80074cc:	5802546c 	.word	0x5802546c
 80074d0:	58025480 	.word	0x58025480
 80074d4:	58025494 	.word	0x58025494

080074d8 <HAL_DMA_Start_IT>:
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_DMA_Start_IT+0x1c>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e226      	b.n	8007942 <HAL_DMA_Start_IT+0x46a>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_DMA_Start_IT+0x2a>
 80074fe:	2302      	movs	r3, #2
 8007500:	e21f      	b.n	8007942 <HAL_DMA_Start_IT+0x46a>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b01      	cmp	r3, #1
 8007514:	f040 820a 	bne.w	800792c <HAL_DMA_Start_IT+0x454>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	655a      	str	r2, [r3, #84]	@ 0x54
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a68      	ldr	r2, [pc, #416]	@ (80076cc <HAL_DMA_Start_IT+0x1f4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d04a      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a66      	ldr	r2, [pc, #408]	@ (80076d0 <HAL_DMA_Start_IT+0x1f8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d045      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a65      	ldr	r2, [pc, #404]	@ (80076d4 <HAL_DMA_Start_IT+0x1fc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d040      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a63      	ldr	r2, [pc, #396]	@ (80076d8 <HAL_DMA_Start_IT+0x200>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d03b      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a62      	ldr	r2, [pc, #392]	@ (80076dc <HAL_DMA_Start_IT+0x204>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d036      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a60      	ldr	r2, [pc, #384]	@ (80076e0 <HAL_DMA_Start_IT+0x208>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d031      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a5f      	ldr	r2, [pc, #380]	@ (80076e4 <HAL_DMA_Start_IT+0x20c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d02c      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a5d      	ldr	r2, [pc, #372]	@ (80076e8 <HAL_DMA_Start_IT+0x210>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d027      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a5c      	ldr	r2, [pc, #368]	@ (80076ec <HAL_DMA_Start_IT+0x214>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a5a      	ldr	r2, [pc, #360]	@ (80076f0 <HAL_DMA_Start_IT+0x218>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01d      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a59      	ldr	r2, [pc, #356]	@ (80076f4 <HAL_DMA_Start_IT+0x21c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a57      	ldr	r2, [pc, #348]	@ (80076f8 <HAL_DMA_Start_IT+0x220>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a56      	ldr	r2, [pc, #344]	@ (80076fc <HAL_DMA_Start_IT+0x224>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a54      	ldr	r2, [pc, #336]	@ (8007700 <HAL_DMA_Start_IT+0x228>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a53      	ldr	r2, [pc, #332]	@ (8007704 <HAL_DMA_Start_IT+0x22c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_DMA_Start_IT+0xee>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a51      	ldr	r2, [pc, #324]	@ (8007708 <HAL_DMA_Start_IT+0x230>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d108      	bne.n	80075d8 <HAL_DMA_Start_IT+0x100>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0201 	bic.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e007      	b.n	80075e8 <HAL_DMA_Start_IT+0x110>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f001 fbc0 	bl	8008d74 <DMA_SetConfig>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a34      	ldr	r2, [pc, #208]	@ (80076cc <HAL_DMA_Start_IT+0x1f4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d04a      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a33      	ldr	r2, [pc, #204]	@ (80076d0 <HAL_DMA_Start_IT+0x1f8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d045      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a31      	ldr	r2, [pc, #196]	@ (80076d4 <HAL_DMA_Start_IT+0x1fc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d040      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a30      	ldr	r2, [pc, #192]	@ (80076d8 <HAL_DMA_Start_IT+0x200>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d03b      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2e      	ldr	r2, [pc, #184]	@ (80076dc <HAL_DMA_Start_IT+0x204>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d036      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a2d      	ldr	r2, [pc, #180]	@ (80076e0 <HAL_DMA_Start_IT+0x208>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d031      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2b      	ldr	r2, [pc, #172]	@ (80076e4 <HAL_DMA_Start_IT+0x20c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d02c      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2a      	ldr	r2, [pc, #168]	@ (80076e8 <HAL_DMA_Start_IT+0x210>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d027      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a28      	ldr	r2, [pc, #160]	@ (80076ec <HAL_DMA_Start_IT+0x214>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d022      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a27      	ldr	r2, [pc, #156]	@ (80076f0 <HAL_DMA_Start_IT+0x218>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d01d      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a25      	ldr	r2, [pc, #148]	@ (80076f4 <HAL_DMA_Start_IT+0x21c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a24      	ldr	r2, [pc, #144]	@ (80076f8 <HAL_DMA_Start_IT+0x220>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a22      	ldr	r2, [pc, #136]	@ (80076fc <HAL_DMA_Start_IT+0x224>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a21      	ldr	r2, [pc, #132]	@ (8007700 <HAL_DMA_Start_IT+0x228>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1f      	ldr	r2, [pc, #124]	@ (8007704 <HAL_DMA_Start_IT+0x22c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_DMA_Start_IT+0x1bc>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1e      	ldr	r2, [pc, #120]	@ (8007708 <HAL_DMA_Start_IT+0x230>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d101      	bne.n	8007698 <HAL_DMA_Start_IT+0x1c0>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_DMA_Start_IT+0x1c2>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d036      	beq.n	800770c <HAL_DMA_Start_IT+0x234>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f023 021e 	bic.w	r2, r3, #30
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0216 	orr.w	r2, r2, #22
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d03e      	beq.n	8007738 <HAL_DMA_Start_IT+0x260>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0208 	orr.w	r2, r2, #8
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e035      	b.n	8007738 <HAL_DMA_Start_IT+0x260>
 80076cc:	40020010 	.word	0x40020010
 80076d0:	40020028 	.word	0x40020028
 80076d4:	40020040 	.word	0x40020040
 80076d8:	40020058 	.word	0x40020058
 80076dc:	40020070 	.word	0x40020070
 80076e0:	40020088 	.word	0x40020088
 80076e4:	400200a0 	.word	0x400200a0
 80076e8:	400200b8 	.word	0x400200b8
 80076ec:	40020410 	.word	0x40020410
 80076f0:	40020428 	.word	0x40020428
 80076f4:	40020440 	.word	0x40020440
 80076f8:	40020458 	.word	0x40020458
 80076fc:	40020470 	.word	0x40020470
 8007700:	40020488 	.word	0x40020488
 8007704:	400204a0 	.word	0x400204a0
 8007708:	400204b8 	.word	0x400204b8
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f023 020e 	bic.w	r2, r3, #14
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 020a 	orr.w	r2, r2, #10
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_DMA_Start_IT+0x260>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0204 	orr.w	r2, r2, #4
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a83      	ldr	r2, [pc, #524]	@ (800794c <HAL_DMA_Start_IT+0x474>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d072      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a82      	ldr	r2, [pc, #520]	@ (8007950 <HAL_DMA_Start_IT+0x478>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d06d      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a80      	ldr	r2, [pc, #512]	@ (8007954 <HAL_DMA_Start_IT+0x47c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d068      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a7f      	ldr	r2, [pc, #508]	@ (8007958 <HAL_DMA_Start_IT+0x480>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d063      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a7d      	ldr	r2, [pc, #500]	@ (800795c <HAL_DMA_Start_IT+0x484>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d05e      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a7c      	ldr	r2, [pc, #496]	@ (8007960 <HAL_DMA_Start_IT+0x488>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d059      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a7a      	ldr	r2, [pc, #488]	@ (8007964 <HAL_DMA_Start_IT+0x48c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d054      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a79      	ldr	r2, [pc, #484]	@ (8007968 <HAL_DMA_Start_IT+0x490>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d04f      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a77      	ldr	r2, [pc, #476]	@ (800796c <HAL_DMA_Start_IT+0x494>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d04a      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a76      	ldr	r2, [pc, #472]	@ (8007970 <HAL_DMA_Start_IT+0x498>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d045      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a74      	ldr	r2, [pc, #464]	@ (8007974 <HAL_DMA_Start_IT+0x49c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d040      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a73      	ldr	r2, [pc, #460]	@ (8007978 <HAL_DMA_Start_IT+0x4a0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d03b      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a71      	ldr	r2, [pc, #452]	@ (800797c <HAL_DMA_Start_IT+0x4a4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d036      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a70      	ldr	r2, [pc, #448]	@ (8007980 <HAL_DMA_Start_IT+0x4a8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d031      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a6e      	ldr	r2, [pc, #440]	@ (8007984 <HAL_DMA_Start_IT+0x4ac>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d02c      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6d      	ldr	r2, [pc, #436]	@ (8007988 <HAL_DMA_Start_IT+0x4b0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d027      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a6b      	ldr	r2, [pc, #428]	@ (800798c <HAL_DMA_Start_IT+0x4b4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d022      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a6a      	ldr	r2, [pc, #424]	@ (8007990 <HAL_DMA_Start_IT+0x4b8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d01d      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a68      	ldr	r2, [pc, #416]	@ (8007994 <HAL_DMA_Start_IT+0x4bc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d018      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a67      	ldr	r2, [pc, #412]	@ (8007998 <HAL_DMA_Start_IT+0x4c0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d013      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a65      	ldr	r2, [pc, #404]	@ (800799c <HAL_DMA_Start_IT+0x4c4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00e      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a64      	ldr	r2, [pc, #400]	@ (80079a0 <HAL_DMA_Start_IT+0x4c8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a62      	ldr	r2, [pc, #392]	@ (80079a4 <HAL_DMA_Start_IT+0x4cc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_DMA_Start_IT+0x350>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a61      	ldr	r2, [pc, #388]	@ (80079a8 <HAL_DMA_Start_IT+0x4d0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d101      	bne.n	800782c <HAL_DMA_Start_IT+0x354>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <HAL_DMA_Start_IT+0x356>
 800782c:	2300      	movs	r3, #0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01a      	beq.n	8007868 <HAL_DMA_Start_IT+0x390>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <HAL_DMA_Start_IT+0x378>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800784a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <HAL_DMA_Start_IT+0x390>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007862:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a37      	ldr	r2, [pc, #220]	@ (800794c <HAL_DMA_Start_IT+0x474>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d04a      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a36      	ldr	r2, [pc, #216]	@ (8007950 <HAL_DMA_Start_IT+0x478>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d045      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a34      	ldr	r2, [pc, #208]	@ (8007954 <HAL_DMA_Start_IT+0x47c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d040      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a33      	ldr	r2, [pc, #204]	@ (8007958 <HAL_DMA_Start_IT+0x480>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d03b      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a31      	ldr	r2, [pc, #196]	@ (800795c <HAL_DMA_Start_IT+0x484>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d036      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a30      	ldr	r2, [pc, #192]	@ (8007960 <HAL_DMA_Start_IT+0x488>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d031      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007964 <HAL_DMA_Start_IT+0x48c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d02c      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007968 <HAL_DMA_Start_IT+0x490>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d027      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a2b      	ldr	r2, [pc, #172]	@ (800796c <HAL_DMA_Start_IT+0x494>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d022      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007970 <HAL_DMA_Start_IT+0x498>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d01d      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a28      	ldr	r2, [pc, #160]	@ (8007974 <HAL_DMA_Start_IT+0x49c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d018      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a27      	ldr	r2, [pc, #156]	@ (8007978 <HAL_DMA_Start_IT+0x4a0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d013      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a25      	ldr	r2, [pc, #148]	@ (800797c <HAL_DMA_Start_IT+0x4a4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00e      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a24      	ldr	r2, [pc, #144]	@ (8007980 <HAL_DMA_Start_IT+0x4a8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d009      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a22      	ldr	r2, [pc, #136]	@ (8007984 <HAL_DMA_Start_IT+0x4ac>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d004      	beq.n	8007908 <HAL_DMA_Start_IT+0x430>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a21      	ldr	r2, [pc, #132]	@ (8007988 <HAL_DMA_Start_IT+0x4b0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <HAL_DMA_Start_IT+0x442>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e012      	b.n	8007940 <HAL_DMA_Start_IT+0x468>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e009      	b.n	8007940 <HAL_DMA_Start_IT+0x468>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007932:	655a      	str	r2, [r3, #84]	@ 0x54
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40020010 	.word	0x40020010
 8007950:	40020028 	.word	0x40020028
 8007954:	40020040 	.word	0x40020040
 8007958:	40020058 	.word	0x40020058
 800795c:	40020070 	.word	0x40020070
 8007960:	40020088 	.word	0x40020088
 8007964:	400200a0 	.word	0x400200a0
 8007968:	400200b8 	.word	0x400200b8
 800796c:	40020410 	.word	0x40020410
 8007970:	40020428 	.word	0x40020428
 8007974:	40020440 	.word	0x40020440
 8007978:	40020458 	.word	0x40020458
 800797c:	40020470 	.word	0x40020470
 8007980:	40020488 	.word	0x40020488
 8007984:	400204a0 	.word	0x400204a0
 8007988:	400204b8 	.word	0x400204b8
 800798c:	58025408 	.word	0x58025408
 8007990:	5802541c 	.word	0x5802541c
 8007994:	58025430 	.word	0x58025430
 8007998:	58025444 	.word	0x58025444
 800799c:	58025458 	.word	0x58025458
 80079a0:	5802546c 	.word	0x5802546c
 80079a4:	58025480 	.word	0x58025480
 80079a8:	58025494 	.word	0x58025494

080079ac <HAL_DMA_Abort_IT>:
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_DMA_Abort_IT+0x12>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e237      	b.n	8007e2e <HAL_DMA_Abort_IT+0x482>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d004      	beq.n	80079d4 <HAL_DMA_Abort_IT+0x28>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2280      	movs	r2, #128	@ 0x80
 80079ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80079d0:	2301      	movs	r3, #1
 80079d2:	e22c      	b.n	8007e2e <HAL_DMA_Abort_IT+0x482>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a5c      	ldr	r2, [pc, #368]	@ (8007b4c <HAL_DMA_Abort_IT+0x1a0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d04a      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a5b      	ldr	r2, [pc, #364]	@ (8007b50 <HAL_DMA_Abort_IT+0x1a4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d045      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a59      	ldr	r2, [pc, #356]	@ (8007b54 <HAL_DMA_Abort_IT+0x1a8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d040      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a58      	ldr	r2, [pc, #352]	@ (8007b58 <HAL_DMA_Abort_IT+0x1ac>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d03b      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a56      	ldr	r2, [pc, #344]	@ (8007b5c <HAL_DMA_Abort_IT+0x1b0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d036      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a55      	ldr	r2, [pc, #340]	@ (8007b60 <HAL_DMA_Abort_IT+0x1b4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d031      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a53      	ldr	r2, [pc, #332]	@ (8007b64 <HAL_DMA_Abort_IT+0x1b8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02c      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a52      	ldr	r2, [pc, #328]	@ (8007b68 <HAL_DMA_Abort_IT+0x1bc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d027      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a50      	ldr	r2, [pc, #320]	@ (8007b6c <HAL_DMA_Abort_IT+0x1c0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a4f      	ldr	r2, [pc, #316]	@ (8007b70 <HAL_DMA_Abort_IT+0x1c4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d01d      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8007b74 <HAL_DMA_Abort_IT+0x1c8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a4c      	ldr	r2, [pc, #304]	@ (8007b78 <HAL_DMA_Abort_IT+0x1cc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a4a      	ldr	r2, [pc, #296]	@ (8007b7c <HAL_DMA_Abort_IT+0x1d0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a49      	ldr	r2, [pc, #292]	@ (8007b80 <HAL_DMA_Abort_IT+0x1d4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a47      	ldr	r2, [pc, #284]	@ (8007b84 <HAL_DMA_Abort_IT+0x1d8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_DMA_Abort_IT+0xc8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a46      	ldr	r2, [pc, #280]	@ (8007b88 <HAL_DMA_Abort_IT+0x1dc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d101      	bne.n	8007a78 <HAL_DMA_Abort_IT+0xcc>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <HAL_DMA_Abort_IT+0xce>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8086 	beq.w	8007b8c <HAL_DMA_Abort_IT+0x1e0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8007b4c <HAL_DMA_Abort_IT+0x1a0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d04a      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a2e      	ldr	r2, [pc, #184]	@ (8007b50 <HAL_DMA_Abort_IT+0x1a4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d045      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8007b54 <HAL_DMA_Abort_IT+0x1a8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d040      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8007b58 <HAL_DMA_Abort_IT+0x1ac>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d03b      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a29      	ldr	r2, [pc, #164]	@ (8007b5c <HAL_DMA_Abort_IT+0x1b0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d036      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a28      	ldr	r2, [pc, #160]	@ (8007b60 <HAL_DMA_Abort_IT+0x1b4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d031      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a26      	ldr	r2, [pc, #152]	@ (8007b64 <HAL_DMA_Abort_IT+0x1b8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02c      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a25      	ldr	r2, [pc, #148]	@ (8007b68 <HAL_DMA_Abort_IT+0x1bc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d027      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a23      	ldr	r2, [pc, #140]	@ (8007b6c <HAL_DMA_Abort_IT+0x1c0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d022      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a22      	ldr	r2, [pc, #136]	@ (8007b70 <HAL_DMA_Abort_IT+0x1c4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d01d      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a20      	ldr	r2, [pc, #128]	@ (8007b74 <HAL_DMA_Abort_IT+0x1c8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d018      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1f      	ldr	r2, [pc, #124]	@ (8007b78 <HAL_DMA_Abort_IT+0x1cc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1d      	ldr	r2, [pc, #116]	@ (8007b7c <HAL_DMA_Abort_IT+0x1d0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00e      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b80 <HAL_DMA_Abort_IT+0x1d4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d009      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1a      	ldr	r2, [pc, #104]	@ (8007b84 <HAL_DMA_Abort_IT+0x1d8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x17c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a19      	ldr	r2, [pc, #100]	@ (8007b88 <HAL_DMA_Abort_IT+0x1dc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d108      	bne.n	8007b3a <HAL_DMA_Abort_IT+0x18e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e178      	b.n	8007e2c <HAL_DMA_Abort_IT+0x480>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e16f      	b.n	8007e2c <HAL_DMA_Abort_IT+0x480>
 8007b4c:	40020010 	.word	0x40020010
 8007b50:	40020028 	.word	0x40020028
 8007b54:	40020040 	.word	0x40020040
 8007b58:	40020058 	.word	0x40020058
 8007b5c:	40020070 	.word	0x40020070
 8007b60:	40020088 	.word	0x40020088
 8007b64:	400200a0 	.word	0x400200a0
 8007b68:	400200b8 	.word	0x400200b8
 8007b6c:	40020410 	.word	0x40020410
 8007b70:	40020428 	.word	0x40020428
 8007b74:	40020440 	.word	0x40020440
 8007b78:	40020458 	.word	0x40020458
 8007b7c:	40020470 	.word	0x40020470
 8007b80:	40020488 	.word	0x40020488
 8007b84:	400204a0 	.word	0x400204a0
 8007b88:	400204b8 	.word	0x400204b8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 020e 	bic.w	r2, r2, #14
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a6c      	ldr	r2, [pc, #432]	@ (8007d54 <HAL_DMA_Abort_IT+0x3a8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a6b      	ldr	r2, [pc, #428]	@ (8007d58 <HAL_DMA_Abort_IT+0x3ac>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a69      	ldr	r2, [pc, #420]	@ (8007d5c <HAL_DMA_Abort_IT+0x3b0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a68      	ldr	r2, [pc, #416]	@ (8007d60 <HAL_DMA_Abort_IT+0x3b4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a66      	ldr	r2, [pc, #408]	@ (8007d64 <HAL_DMA_Abort_IT+0x3b8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a65      	ldr	r2, [pc, #404]	@ (8007d68 <HAL_DMA_Abort_IT+0x3bc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a63      	ldr	r2, [pc, #396]	@ (8007d6c <HAL_DMA_Abort_IT+0x3c0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a62      	ldr	r2, [pc, #392]	@ (8007d70 <HAL_DMA_Abort_IT+0x3c4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a60      	ldr	r2, [pc, #384]	@ (8007d74 <HAL_DMA_Abort_IT+0x3c8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5f      	ldr	r2, [pc, #380]	@ (8007d78 <HAL_DMA_Abort_IT+0x3cc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a5d      	ldr	r2, [pc, #372]	@ (8007d7c <HAL_DMA_Abort_IT+0x3d0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d80 <HAL_DMA_Abort_IT+0x3d4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5a      	ldr	r2, [pc, #360]	@ (8007d84 <HAL_DMA_Abort_IT+0x3d8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a59      	ldr	r2, [pc, #356]	@ (8007d88 <HAL_DMA_Abort_IT+0x3dc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a57      	ldr	r2, [pc, #348]	@ (8007d8c <HAL_DMA_Abort_IT+0x3e0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <HAL_DMA_Abort_IT+0x290>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a56      	ldr	r2, [pc, #344]	@ (8007d90 <HAL_DMA_Abort_IT+0x3e4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d108      	bne.n	8007c4e <HAL_DMA_Abort_IT+0x2a2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e007      	b.n	8007c5e <HAL_DMA_Abort_IT+0x2b2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3c      	ldr	r2, [pc, #240]	@ (8007d54 <HAL_DMA_Abort_IT+0x3a8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d072      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8007d58 <HAL_DMA_Abort_IT+0x3ac>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d06d      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a39      	ldr	r2, [pc, #228]	@ (8007d5c <HAL_DMA_Abort_IT+0x3b0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d068      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a37      	ldr	r2, [pc, #220]	@ (8007d60 <HAL_DMA_Abort_IT+0x3b4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d063      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a36      	ldr	r2, [pc, #216]	@ (8007d64 <HAL_DMA_Abort_IT+0x3b8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d05e      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a34      	ldr	r2, [pc, #208]	@ (8007d68 <HAL_DMA_Abort_IT+0x3bc>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d059      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a33      	ldr	r2, [pc, #204]	@ (8007d6c <HAL_DMA_Abort_IT+0x3c0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d054      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a31      	ldr	r2, [pc, #196]	@ (8007d70 <HAL_DMA_Abort_IT+0x3c4>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d04f      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a30      	ldr	r2, [pc, #192]	@ (8007d74 <HAL_DMA_Abort_IT+0x3c8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04a      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8007d78 <HAL_DMA_Abort_IT+0x3cc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d045      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8007d7c <HAL_DMA_Abort_IT+0x3d0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d040      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d80 <HAL_DMA_Abort_IT+0x3d4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2a      	ldr	r2, [pc, #168]	@ (8007d84 <HAL_DMA_Abort_IT+0x3d8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d036      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	@ (8007d88 <HAL_DMA_Abort_IT+0x3dc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d031      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a27      	ldr	r2, [pc, #156]	@ (8007d8c <HAL_DMA_Abort_IT+0x3e0>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02c      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a25      	ldr	r2, [pc, #148]	@ (8007d90 <HAL_DMA_Abort_IT+0x3e4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d027      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a24      	ldr	r2, [pc, #144]	@ (8007d94 <HAL_DMA_Abort_IT+0x3e8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a22      	ldr	r2, [pc, #136]	@ (8007d98 <HAL_DMA_Abort_IT+0x3ec>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a21      	ldr	r2, [pc, #132]	@ (8007d9c <HAL_DMA_Abort_IT+0x3f0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <HAL_DMA_Abort_IT+0x3f4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007da4 <HAL_DMA_Abort_IT+0x3f8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <HAL_DMA_Abort_IT+0x3fc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dac <HAL_DMA_Abort_IT+0x400>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_DMA_Abort_IT+0x3a2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a19      	ldr	r2, [pc, #100]	@ (8007db0 <HAL_DMA_Abort_IT+0x404>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d132      	bne.n	8007db4 <HAL_DMA_Abort_IT+0x408>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e031      	b.n	8007db6 <HAL_DMA_Abort_IT+0x40a>
 8007d52:	bf00      	nop
 8007d54:	40020010 	.word	0x40020010
 8007d58:	40020028 	.word	0x40020028
 8007d5c:	40020040 	.word	0x40020040
 8007d60:	40020058 	.word	0x40020058
 8007d64:	40020070 	.word	0x40020070
 8007d68:	40020088 	.word	0x40020088
 8007d6c:	400200a0 	.word	0x400200a0
 8007d70:	400200b8 	.word	0x400200b8
 8007d74:	40020410 	.word	0x40020410
 8007d78:	40020428 	.word	0x40020428
 8007d7c:	40020440 	.word	0x40020440
 8007d80:	40020458 	.word	0x40020458
 8007d84:	40020470 	.word	0x40020470
 8007d88:	40020488 	.word	0x40020488
 8007d8c:	400204a0 	.word	0x400204a0
 8007d90:	400204b8 	.word	0x400204b8
 8007d94:	58025408 	.word	0x58025408
 8007d98:	5802541c 	.word	0x5802541c
 8007d9c:	58025430 	.word	0x58025430
 8007da0:	58025444 	.word	0x58025444
 8007da4:	58025458 	.word	0x58025458
 8007da8:	5802546c 	.word	0x5802546c
 8007dac:	58025480 	.word	0x58025480
 8007db0:	58025494 	.word	0x58025494
 8007db4:	2300      	movs	r3, #0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d028      	beq.n	8007e0c <HAL_DMA_Abort_IT+0x460>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2201      	movs	r2, #1
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	605a      	str	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00c      	beq.n	8007e0c <HAL_DMA_Abort_IT+0x460>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e0a:	605a      	str	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_DMA_Abort_IT+0x480>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop

08007e38 <HAL_DMA_IRQHandler>:
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	@ 0x28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	4b67      	ldr	r3, [pc, #412]	@ (8007fe4 <HAL_DMA_IRQHandler+0x1ac>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a67      	ldr	r2, [pc, #412]	@ (8007fe8 <HAL_DMA_IRQHandler+0x1b0>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	0a9b      	lsrs	r3, r3, #10
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e56:	623b      	str	r3, [r7, #32]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8007fec <HAL_DMA_IRQHandler+0x1b4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d04a      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a5d      	ldr	r2, [pc, #372]	@ (8007ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d045      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a5c      	ldr	r2, [pc, #368]	@ (8007ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d040      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8007ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d03b      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a59      	ldr	r2, [pc, #356]	@ (8007ffc <HAL_DMA_IRQHandler+0x1c4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d036      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a57      	ldr	r2, [pc, #348]	@ (8008000 <HAL_DMA_IRQHandler+0x1c8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d031      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a56      	ldr	r2, [pc, #344]	@ (8008004 <HAL_DMA_IRQHandler+0x1cc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d02c      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a54      	ldr	r2, [pc, #336]	@ (8008008 <HAL_DMA_IRQHandler+0x1d0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d027      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a53      	ldr	r2, [pc, #332]	@ (800800c <HAL_DMA_IRQHandler+0x1d4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a51      	ldr	r2, [pc, #324]	@ (8008010 <HAL_DMA_IRQHandler+0x1d8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01d      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a50      	ldr	r2, [pc, #320]	@ (8008014 <HAL_DMA_IRQHandler+0x1dc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a4e      	ldr	r2, [pc, #312]	@ (8008018 <HAL_DMA_IRQHandler+0x1e0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a4d      	ldr	r2, [pc, #308]	@ (800801c <HAL_DMA_IRQHandler+0x1e4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8008020 <HAL_DMA_IRQHandler+0x1e8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a4a      	ldr	r2, [pc, #296]	@ (8008024 <HAL_DMA_IRQHandler+0x1ec>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xd2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a48      	ldr	r2, [pc, #288]	@ (8008028 <HAL_DMA_IRQHandler+0x1f0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d101      	bne.n	8007f0e <HAL_DMA_IRQHandler+0xd6>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_DMA_IRQHandler+0xd8>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 842b 	beq.w	800876c <HAL_DMA_IRQHandler+0x934>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	2208      	movs	r2, #8
 8007f20:	409a      	lsls	r2, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	4013      	ands	r3, r2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80a2 	beq.w	8008070 <HAL_DMA_IRQHandler+0x238>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a2e      	ldr	r2, [pc, #184]	@ (8007fec <HAL_DMA_IRQHandler+0x1b4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d04a      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d045      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2b      	ldr	r2, [pc, #172]	@ (8007ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d040      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d03b      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a28      	ldr	r2, [pc, #160]	@ (8007ffc <HAL_DMA_IRQHandler+0x1c4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d036      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a27      	ldr	r2, [pc, #156]	@ (8008000 <HAL_DMA_IRQHandler+0x1c8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d031      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a25      	ldr	r2, [pc, #148]	@ (8008004 <HAL_DMA_IRQHandler+0x1cc>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d02c      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a24      	ldr	r2, [pc, #144]	@ (8008008 <HAL_DMA_IRQHandler+0x1d0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d027      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a22      	ldr	r2, [pc, #136]	@ (800800c <HAL_DMA_IRQHandler+0x1d4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d022      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a21      	ldr	r2, [pc, #132]	@ (8008010 <HAL_DMA_IRQHandler+0x1d8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01d      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1f      	ldr	r2, [pc, #124]	@ (8008014 <HAL_DMA_IRQHandler+0x1dc>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d018      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8008018 <HAL_DMA_IRQHandler+0x1e0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d013      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800801c <HAL_DMA_IRQHandler+0x1e4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00e      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <HAL_DMA_IRQHandler+0x1e8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d009      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_DMA_IRQHandler+0x1ec>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x194>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a18      	ldr	r2, [pc, #96]	@ (8008028 <HAL_DMA_IRQHandler+0x1f0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d12f      	bne.n	800802c <HAL_DMA_IRQHandler+0x1f4>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf14      	ite	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	2300      	moveq	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	e02e      	b.n	8008040 <HAL_DMA_IRQHandler+0x208>
 8007fe2:	bf00      	nop
 8007fe4:	24000228 	.word	0x24000228
 8007fe8:	1b4e81b5 	.word	0x1b4e81b5
 8007fec:	40020010 	.word	0x40020010
 8007ff0:	40020028 	.word	0x40020028
 8007ff4:	40020040 	.word	0x40020040
 8007ff8:	40020058 	.word	0x40020058
 8007ffc:	40020070 	.word	0x40020070
 8008000:	40020088 	.word	0x40020088
 8008004:	400200a0 	.word	0x400200a0
 8008008:	400200b8 	.word	0x400200b8
 800800c:	40020410 	.word	0x40020410
 8008010:	40020428 	.word	0x40020428
 8008014:	40020440 	.word	0x40020440
 8008018:	40020458 	.word	0x40020458
 800801c:	40020470 	.word	0x40020470
 8008020:	40020488 	.word	0x40020488
 8008024:	400204a0 	.word	0x400204a0
 8008028:	400204b8 	.word	0x400204b8
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf14      	ite	ne
 800803a:	2301      	movne	r3, #1
 800803c:	2300      	moveq	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d015      	beq.n	8008070 <HAL_DMA_IRQHandler+0x238>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0204 	bic.w	r2, r2, #4
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	2208      	movs	r2, #8
 800805e:	409a      	lsls	r2, r3
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	609a      	str	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008068:	f043 0201 	orr.w	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d06e      	beq.n	8008164 <HAL_DMA_IRQHandler+0x32c>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a69      	ldr	r2, [pc, #420]	@ (8008230 <HAL_DMA_IRQHandler+0x3f8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d04a      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a67      	ldr	r2, [pc, #412]	@ (8008234 <HAL_DMA_IRQHandler+0x3fc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d045      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a66      	ldr	r2, [pc, #408]	@ (8008238 <HAL_DMA_IRQHandler+0x400>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d040      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a64      	ldr	r2, [pc, #400]	@ (800823c <HAL_DMA_IRQHandler+0x404>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d03b      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a63      	ldr	r2, [pc, #396]	@ (8008240 <HAL_DMA_IRQHandler+0x408>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d036      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a61      	ldr	r2, [pc, #388]	@ (8008244 <HAL_DMA_IRQHandler+0x40c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d031      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a60      	ldr	r2, [pc, #384]	@ (8008248 <HAL_DMA_IRQHandler+0x410>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d02c      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a5e      	ldr	r2, [pc, #376]	@ (800824c <HAL_DMA_IRQHandler+0x414>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d027      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a5d      	ldr	r2, [pc, #372]	@ (8008250 <HAL_DMA_IRQHandler+0x418>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d022      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a5b      	ldr	r2, [pc, #364]	@ (8008254 <HAL_DMA_IRQHandler+0x41c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01d      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a5a      	ldr	r2, [pc, #360]	@ (8008258 <HAL_DMA_IRQHandler+0x420>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a58      	ldr	r2, [pc, #352]	@ (800825c <HAL_DMA_IRQHandler+0x424>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a57      	ldr	r2, [pc, #348]	@ (8008260 <HAL_DMA_IRQHandler+0x428>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a55      	ldr	r2, [pc, #340]	@ (8008264 <HAL_DMA_IRQHandler+0x42c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a54      	ldr	r2, [pc, #336]	@ (8008268 <HAL_DMA_IRQHandler+0x430>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_DMA_IRQHandler+0x2ee>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a52      	ldr	r2, [pc, #328]	@ (800826c <HAL_DMA_IRQHandler+0x434>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d10a      	bne.n	800813c <HAL_DMA_IRQHandler+0x304>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008130:	2b00      	cmp	r3, #0
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e003      	b.n	8008144 <HAL_DMA_IRQHandler+0x30c>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00d      	beq.n	8008164 <HAL_DMA_IRQHandler+0x32c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815c:	f043 0202 	orr.w	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	655a      	str	r2, [r3, #84]	@ 0x54
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2204      	movs	r2, #4
 800816e:	409a      	lsls	r2, r3
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 808f 	beq.w	8008298 <HAL_DMA_IRQHandler+0x460>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a2c      	ldr	r2, [pc, #176]	@ (8008230 <HAL_DMA_IRQHandler+0x3f8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d04a      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a2a      	ldr	r2, [pc, #168]	@ (8008234 <HAL_DMA_IRQHandler+0x3fc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d045      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a29      	ldr	r2, [pc, #164]	@ (8008238 <HAL_DMA_IRQHandler+0x400>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d040      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a27      	ldr	r2, [pc, #156]	@ (800823c <HAL_DMA_IRQHandler+0x404>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d03b      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a26      	ldr	r2, [pc, #152]	@ (8008240 <HAL_DMA_IRQHandler+0x408>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d036      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a24      	ldr	r2, [pc, #144]	@ (8008244 <HAL_DMA_IRQHandler+0x40c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d031      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a23      	ldr	r2, [pc, #140]	@ (8008248 <HAL_DMA_IRQHandler+0x410>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d02c      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a21      	ldr	r2, [pc, #132]	@ (800824c <HAL_DMA_IRQHandler+0x414>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d027      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a20      	ldr	r2, [pc, #128]	@ (8008250 <HAL_DMA_IRQHandler+0x418>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d022      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008254 <HAL_DMA_IRQHandler+0x41c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d01d      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008258 <HAL_DMA_IRQHandler+0x420>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d018      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <HAL_DMA_IRQHandler+0x424>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d013      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008260 <HAL_DMA_IRQHandler+0x428>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00e      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a18      	ldr	r2, [pc, #96]	@ (8008264 <HAL_DMA_IRQHandler+0x42c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d009      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a17      	ldr	r2, [pc, #92]	@ (8008268 <HAL_DMA_IRQHandler+0x430>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d004      	beq.n	800821a <HAL_DMA_IRQHandler+0x3e2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a15      	ldr	r2, [pc, #84]	@ (800826c <HAL_DMA_IRQHandler+0x434>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d12a      	bne.n	8008270 <HAL_DMA_IRQHandler+0x438>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	bf14      	ite	ne
 8008228:	2301      	movne	r3, #1
 800822a:	2300      	moveq	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	e023      	b.n	8008278 <HAL_DMA_IRQHandler+0x440>
 8008230:	40020010 	.word	0x40020010
 8008234:	40020028 	.word	0x40020028
 8008238:	40020040 	.word	0x40020040
 800823c:	40020058 	.word	0x40020058
 8008240:	40020070 	.word	0x40020070
 8008244:	40020088 	.word	0x40020088
 8008248:	400200a0 	.word	0x400200a0
 800824c:	400200b8 	.word	0x400200b8
 8008250:	40020410 	.word	0x40020410
 8008254:	40020428 	.word	0x40020428
 8008258:	40020440 	.word	0x40020440
 800825c:	40020458 	.word	0x40020458
 8008260:	40020470 	.word	0x40020470
 8008264:	40020488 	.word	0x40020488
 8008268:	400204a0 	.word	0x400204a0
 800826c:	400204b8 	.word	0x400204b8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <HAL_DMA_IRQHandler+0x460>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2204      	movs	r2, #4
 8008286:	409a      	lsls	r2, r3
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008290:	f043 0204 	orr.w	r2, r3, #4
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	655a      	str	r2, [r3, #84]	@ 0x54
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	2210      	movs	r2, #16
 80082a2:	409a      	lsls	r2, r3
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80a6 	beq.w	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a85      	ldr	r2, [pc, #532]	@ (80084c8 <HAL_DMA_IRQHandler+0x690>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d04a      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a83      	ldr	r2, [pc, #524]	@ (80084cc <HAL_DMA_IRQHandler+0x694>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d045      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a82      	ldr	r2, [pc, #520]	@ (80084d0 <HAL_DMA_IRQHandler+0x698>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d040      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a80      	ldr	r2, [pc, #512]	@ (80084d4 <HAL_DMA_IRQHandler+0x69c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d03b      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a7f      	ldr	r2, [pc, #508]	@ (80084d8 <HAL_DMA_IRQHandler+0x6a0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d036      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a7d      	ldr	r2, [pc, #500]	@ (80084dc <HAL_DMA_IRQHandler+0x6a4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d031      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a7c      	ldr	r2, [pc, #496]	@ (80084e0 <HAL_DMA_IRQHandler+0x6a8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d02c      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a7a      	ldr	r2, [pc, #488]	@ (80084e4 <HAL_DMA_IRQHandler+0x6ac>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d027      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a79      	ldr	r2, [pc, #484]	@ (80084e8 <HAL_DMA_IRQHandler+0x6b0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d022      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a77      	ldr	r2, [pc, #476]	@ (80084ec <HAL_DMA_IRQHandler+0x6b4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01d      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a76      	ldr	r2, [pc, #472]	@ (80084f0 <HAL_DMA_IRQHandler+0x6b8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d018      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a74      	ldr	r2, [pc, #464]	@ (80084f4 <HAL_DMA_IRQHandler+0x6bc>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d013      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a73      	ldr	r2, [pc, #460]	@ (80084f8 <HAL_DMA_IRQHandler+0x6c0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00e      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a71      	ldr	r2, [pc, #452]	@ (80084fc <HAL_DMA_IRQHandler+0x6c4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d009      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a70      	ldr	r2, [pc, #448]	@ (8008500 <HAL_DMA_IRQHandler+0x6c8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d004      	beq.n	800834e <HAL_DMA_IRQHandler+0x516>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a6e      	ldr	r2, [pc, #440]	@ (8008504 <HAL_DMA_IRQHandler+0x6cc>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d10a      	bne.n	8008364 <HAL_DMA_IRQHandler+0x52c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf14      	ite	ne
 800835c:	2301      	movne	r3, #1
 800835e:	2300      	moveq	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	e009      	b.n	8008378 <HAL_DMA_IRQHandler+0x540>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf14      	ite	ne
 8008372:	2301      	movne	r3, #1
 8008374:	2300      	moveq	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d03e      	beq.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	2210      	movs	r2, #16
 8008386:	409a      	lsls	r2, r3
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	609a      	str	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d018      	beq.n	80083cc <HAL_DMA_IRQHandler+0x594>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d108      	bne.n	80083ba <HAL_DMA_IRQHandler+0x582>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d024      	beq.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
 80083b8:	e01f      	b.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01b      	beq.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
 80083ca:	e016      	b.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d107      	bne.n	80083ea <HAL_DMA_IRQHandler+0x5b2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0208 	bic.w	r2, r2, #8
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_DMA_IRQHandler+0x5c2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	2220      	movs	r2, #32
 8008404:	409a      	lsls	r2, r3
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8110 	beq.w	8008630 <HAL_DMA_IRQHandler+0x7f8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a2c      	ldr	r2, [pc, #176]	@ (80084c8 <HAL_DMA_IRQHandler+0x690>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d04a      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a2b      	ldr	r2, [pc, #172]	@ (80084cc <HAL_DMA_IRQHandler+0x694>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d045      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a29      	ldr	r2, [pc, #164]	@ (80084d0 <HAL_DMA_IRQHandler+0x698>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d040      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a28      	ldr	r2, [pc, #160]	@ (80084d4 <HAL_DMA_IRQHandler+0x69c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d03b      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a26      	ldr	r2, [pc, #152]	@ (80084d8 <HAL_DMA_IRQHandler+0x6a0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d036      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a25      	ldr	r2, [pc, #148]	@ (80084dc <HAL_DMA_IRQHandler+0x6a4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d031      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a23      	ldr	r2, [pc, #140]	@ (80084e0 <HAL_DMA_IRQHandler+0x6a8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d02c      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a22      	ldr	r2, [pc, #136]	@ (80084e4 <HAL_DMA_IRQHandler+0x6ac>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d027      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <HAL_DMA_IRQHandler+0x6b0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d022      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1f      	ldr	r2, [pc, #124]	@ (80084ec <HAL_DMA_IRQHandler+0x6b4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01d      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <HAL_DMA_IRQHandler+0x6b8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d018      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <HAL_DMA_IRQHandler+0x6bc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d013      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1a      	ldr	r2, [pc, #104]	@ (80084f8 <HAL_DMA_IRQHandler+0x6c0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00e      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a19      	ldr	r2, [pc, #100]	@ (80084fc <HAL_DMA_IRQHandler+0x6c4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d009      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a17      	ldr	r2, [pc, #92]	@ (8008500 <HAL_DMA_IRQHandler+0x6c8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x678>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a16      	ldr	r2, [pc, #88]	@ (8008504 <HAL_DMA_IRQHandler+0x6cc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d12b      	bne.n	8008508 <HAL_DMA_IRQHandler+0x6d0>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bf14      	ite	ne
 80084be:	2301      	movne	r3, #1
 80084c0:	2300      	moveq	r3, #0
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	e02a      	b.n	800851c <HAL_DMA_IRQHandler+0x6e4>
 80084c6:	bf00      	nop
 80084c8:	40020010 	.word	0x40020010
 80084cc:	40020028 	.word	0x40020028
 80084d0:	40020040 	.word	0x40020040
 80084d4:	40020058 	.word	0x40020058
 80084d8:	40020070 	.word	0x40020070
 80084dc:	40020088 	.word	0x40020088
 80084e0:	400200a0 	.word	0x400200a0
 80084e4:	400200b8 	.word	0x400200b8
 80084e8:	40020410 	.word	0x40020410
 80084ec:	40020428 	.word	0x40020428
 80084f0:	40020440 	.word	0x40020440
 80084f4:	40020458 	.word	0x40020458
 80084f8:	40020470 	.word	0x40020470
 80084fc:	40020488 	.word	0x40020488
 8008500:	400204a0 	.word	0x400204a0
 8008504:	400204b8 	.word	0x400204b8
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8087 	beq.w	8008630 <HAL_DMA_IRQHandler+0x7f8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	2220      	movs	r2, #32
 800852c:	409a      	lsls	r2, r3
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	609a      	str	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b04      	cmp	r3, #4
 800853c:	d139      	bne.n	80085b2 <HAL_DMA_IRQHandler+0x77a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0216 	bic.w	r2, r2, #22
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800855c:	615a      	str	r2, [r3, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <HAL_DMA_IRQHandler+0x736>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <HAL_DMA_IRQHandler+0x746>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0208 	bic.w	r2, r2, #8
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008582:	f003 031f 	and.w	r3, r3, #31
 8008586:	223f      	movs	r2, #63	@ 0x3f
 8008588:	409a      	lsls	r2, r3
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	609a      	str	r2, [r3, #8]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 834a 	beq.w	8008c3c <HAL_DMA_IRQHandler+0xe04>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
 80085b0:	e344      	b.n	8008c3c <HAL_DMA_IRQHandler+0xe04>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d018      	beq.n	80085f2 <HAL_DMA_IRQHandler+0x7ba>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d108      	bne.n	80085e0 <HAL_DMA_IRQHandler+0x7a8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d02c      	beq.n	8008630 <HAL_DMA_IRQHandler+0x7f8>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
 80085de:	e027      	b.n	8008630 <HAL_DMA_IRQHandler+0x7f8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d023      	beq.n	8008630 <HAL_DMA_IRQHandler+0x7f8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
 80085f0:	e01e      	b.n	8008630 <HAL_DMA_IRQHandler+0x7f8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10f      	bne.n	8008620 <HAL_DMA_IRQHandler+0x7e8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0210 	bic.w	r2, r2, #16
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <HAL_DMA_IRQHandler+0x7f8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8306 	beq.w	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8088 	beq.w	8008758 <HAL_DMA_IRQHandler+0x920>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2204      	movs	r2, #4
 800864c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a7a      	ldr	r2, [pc, #488]	@ (8008840 <HAL_DMA_IRQHandler+0xa08>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d04a      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a79      	ldr	r2, [pc, #484]	@ (8008844 <HAL_DMA_IRQHandler+0xa0c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d045      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a77      	ldr	r2, [pc, #476]	@ (8008848 <HAL_DMA_IRQHandler+0xa10>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d040      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a76      	ldr	r2, [pc, #472]	@ (800884c <HAL_DMA_IRQHandler+0xa14>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d03b      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a74      	ldr	r2, [pc, #464]	@ (8008850 <HAL_DMA_IRQHandler+0xa18>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d036      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a73      	ldr	r2, [pc, #460]	@ (8008854 <HAL_DMA_IRQHandler+0xa1c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d031      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a71      	ldr	r2, [pc, #452]	@ (8008858 <HAL_DMA_IRQHandler+0xa20>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d02c      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a70      	ldr	r2, [pc, #448]	@ (800885c <HAL_DMA_IRQHandler+0xa24>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d027      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008860 <HAL_DMA_IRQHandler+0xa28>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d022      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a6d      	ldr	r2, [pc, #436]	@ (8008864 <HAL_DMA_IRQHandler+0xa2c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01d      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a6b      	ldr	r2, [pc, #428]	@ (8008868 <HAL_DMA_IRQHandler+0xa30>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d018      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a6a      	ldr	r2, [pc, #424]	@ (800886c <HAL_DMA_IRQHandler+0xa34>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d013      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a68      	ldr	r2, [pc, #416]	@ (8008870 <HAL_DMA_IRQHandler+0xa38>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00e      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a67      	ldr	r2, [pc, #412]	@ (8008874 <HAL_DMA_IRQHandler+0xa3c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a65      	ldr	r2, [pc, #404]	@ (8008878 <HAL_DMA_IRQHandler+0xa40>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d004      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x8b8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a64      	ldr	r2, [pc, #400]	@ (800887c <HAL_DMA_IRQHandler+0xa44>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d108      	bne.n	8008702 <HAL_DMA_IRQHandler+0x8ca>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0201 	bic.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e007      	b.n	8008712 <HAL_DMA_IRQHandler+0x8da>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800871a:	429a      	cmp	r2, r3
 800871c:	d307      	bcc.n	800872e <HAL_DMA_IRQHandler+0x8f6>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f2      	bne.n	8008712 <HAL_DMA_IRQHandler+0x8da>
 800872c:	e000      	b.n	8008730 <HAL_DMA_IRQHandler+0x8f8>
 800872e:	bf00      	nop
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <HAL_DMA_IRQHandler+0x910>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2203      	movs	r2, #3
 8008742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008746:	e003      	b.n	8008750 <HAL_DMA_IRQHandler+0x918>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8272 	beq.w	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
 800876a:	e26c      	b.n	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a43      	ldr	r2, [pc, #268]	@ (8008880 <HAL_DMA_IRQHandler+0xa48>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d022      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a42      	ldr	r2, [pc, #264]	@ (8008884 <HAL_DMA_IRQHandler+0xa4c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d01d      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a40      	ldr	r2, [pc, #256]	@ (8008888 <HAL_DMA_IRQHandler+0xa50>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d018      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a3f      	ldr	r2, [pc, #252]	@ (800888c <HAL_DMA_IRQHandler+0xa54>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d013      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a3d      	ldr	r2, [pc, #244]	@ (8008890 <HAL_DMA_IRQHandler+0xa58>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00e      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a3c      	ldr	r2, [pc, #240]	@ (8008894 <HAL_DMA_IRQHandler+0xa5c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d009      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a3a      	ldr	r2, [pc, #232]	@ (8008898 <HAL_DMA_IRQHandler+0xa60>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <HAL_DMA_IRQHandler+0x984>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a39      	ldr	r2, [pc, #228]	@ (800889c <HAL_DMA_IRQHandler+0xa64>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d101      	bne.n	80087c0 <HAL_DMA_IRQHandler+0x988>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <HAL_DMA_IRQHandler+0x98a>
 80087c0:	2300      	movs	r3, #0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 823f 	beq.w	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2204      	movs	r2, #4
 80087da:	409a      	lsls	r2, r3
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80cd 	beq.w	8008980 <HAL_DMA_IRQHandler+0xb48>
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80c7 	beq.w	8008980 <HAL_DMA_IRQHandler+0xb48>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f6:	f003 031f 	and.w	r3, r3, #31
 80087fa:	2204      	movs	r2, #4
 80087fc:	409a      	lsls	r2, r3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d049      	beq.n	80088a0 <HAL_DMA_IRQHandler+0xa68>
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <HAL_DMA_IRQHandler+0x9f2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 8210 	beq.w	8008c40 <HAL_DMA_IRQHandler+0xe08>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
 8008828:	e20a      	b.n	8008c40 <HAL_DMA_IRQHandler+0xe08>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8206 	beq.w	8008c40 <HAL_DMA_IRQHandler+0xe08>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
 800883c:	e200      	b.n	8008c40 <HAL_DMA_IRQHandler+0xe08>
 800883e:	bf00      	nop
 8008840:	40020010 	.word	0x40020010
 8008844:	40020028 	.word	0x40020028
 8008848:	40020040 	.word	0x40020040
 800884c:	40020058 	.word	0x40020058
 8008850:	40020070 	.word	0x40020070
 8008854:	40020088 	.word	0x40020088
 8008858:	400200a0 	.word	0x400200a0
 800885c:	400200b8 	.word	0x400200b8
 8008860:	40020410 	.word	0x40020410
 8008864:	40020428 	.word	0x40020428
 8008868:	40020440 	.word	0x40020440
 800886c:	40020458 	.word	0x40020458
 8008870:	40020470 	.word	0x40020470
 8008874:	40020488 	.word	0x40020488
 8008878:	400204a0 	.word	0x400204a0
 800887c:	400204b8 	.word	0x400204b8
 8008880:	58025408 	.word	0x58025408
 8008884:	5802541c 	.word	0x5802541c
 8008888:	58025430 	.word	0x58025430
 800888c:	58025444 	.word	0x58025444
 8008890:	58025458 	.word	0x58025458
 8008894:	5802546c 	.word	0x5802546c
 8008898:	58025480 	.word	0x58025480
 800889c:	58025494 	.word	0x58025494
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d160      	bne.n	800896c <HAL_DMA_IRQHandler+0xb34>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a7f      	ldr	r2, [pc, #508]	@ (8008aac <HAL_DMA_IRQHandler+0xc74>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d04a      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a7d      	ldr	r2, [pc, #500]	@ (8008ab0 <HAL_DMA_IRQHandler+0xc78>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d045      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a7c      	ldr	r2, [pc, #496]	@ (8008ab4 <HAL_DMA_IRQHandler+0xc7c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d040      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a7a      	ldr	r2, [pc, #488]	@ (8008ab8 <HAL_DMA_IRQHandler+0xc80>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d03b      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a79      	ldr	r2, [pc, #484]	@ (8008abc <HAL_DMA_IRQHandler+0xc84>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d036      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a77      	ldr	r2, [pc, #476]	@ (8008ac0 <HAL_DMA_IRQHandler+0xc88>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d031      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a76      	ldr	r2, [pc, #472]	@ (8008ac4 <HAL_DMA_IRQHandler+0xc8c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d02c      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a74      	ldr	r2, [pc, #464]	@ (8008ac8 <HAL_DMA_IRQHandler+0xc90>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d027      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a73      	ldr	r2, [pc, #460]	@ (8008acc <HAL_DMA_IRQHandler+0xc94>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d022      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a71      	ldr	r2, [pc, #452]	@ (8008ad0 <HAL_DMA_IRQHandler+0xc98>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01d      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a70      	ldr	r2, [pc, #448]	@ (8008ad4 <HAL_DMA_IRQHandler+0xc9c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d018      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a6e      	ldr	r2, [pc, #440]	@ (8008ad8 <HAL_DMA_IRQHandler+0xca0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a6d      	ldr	r2, [pc, #436]	@ (8008adc <HAL_DMA_IRQHandler+0xca4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00e      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a6b      	ldr	r2, [pc, #428]	@ (8008ae0 <HAL_DMA_IRQHandler+0xca8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a6a      	ldr	r2, [pc, #424]	@ (8008ae4 <HAL_DMA_IRQHandler+0xcac>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_DMA_IRQHandler+0xb12>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a68      	ldr	r2, [pc, #416]	@ (8008ae8 <HAL_DMA_IRQHandler+0xcb0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d108      	bne.n	800895c <HAL_DMA_IRQHandler+0xb24>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0208 	bic.w	r2, r2, #8
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e007      	b.n	800896c <HAL_DMA_IRQHandler+0xb34>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8165 	beq.w	8008c40 <HAL_DMA_IRQHandler+0xe08>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
 800897e:	e15f      	b.n	8008c40 <HAL_DMA_IRQHandler+0xe08>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	f003 031f 	and.w	r3, r3, #31
 8008988:	2202      	movs	r2, #2
 800898a:	409a      	lsls	r2, r3
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4013      	ands	r3, r2
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80c5 	beq.w	8008b20 <HAL_DMA_IRQHandler+0xce8>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80bf 	beq.w	8008b20 <HAL_DMA_IRQHandler+0xce8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a6:	f003 031f 	and.w	r3, r3, #31
 80089aa:	2202      	movs	r2, #2
 80089ac:	409a      	lsls	r2, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d018      	beq.n	80089ee <HAL_DMA_IRQHandler+0xbb6>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <HAL_DMA_IRQHandler+0xba2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 813a 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
 80089d8:	e134      	b.n	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 8130 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
 80089ec:	e12a      	b.n	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8089 	bne.w	8008b0c <HAL_DMA_IRQHandler+0xcd4>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a2b      	ldr	r2, [pc, #172]	@ (8008aac <HAL_DMA_IRQHandler+0xc74>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d04a      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a29      	ldr	r2, [pc, #164]	@ (8008ab0 <HAL_DMA_IRQHandler+0xc78>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d045      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a28      	ldr	r2, [pc, #160]	@ (8008ab4 <HAL_DMA_IRQHandler+0xc7c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d040      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a26      	ldr	r2, [pc, #152]	@ (8008ab8 <HAL_DMA_IRQHandler+0xc80>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d03b      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a25      	ldr	r2, [pc, #148]	@ (8008abc <HAL_DMA_IRQHandler+0xc84>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d036      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a23      	ldr	r2, [pc, #140]	@ (8008ac0 <HAL_DMA_IRQHandler+0xc88>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d031      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a22      	ldr	r2, [pc, #136]	@ (8008ac4 <HAL_DMA_IRQHandler+0xc8c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d02c      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a20      	ldr	r2, [pc, #128]	@ (8008ac8 <HAL_DMA_IRQHandler+0xc90>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d027      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008acc <HAL_DMA_IRQHandler+0xc94>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d022      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad0 <HAL_DMA_IRQHandler+0xc98>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01d      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad4 <HAL_DMA_IRQHandler+0xc9c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d018      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ad8 <HAL_DMA_IRQHandler+0xca0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a19      	ldr	r2, [pc, #100]	@ (8008adc <HAL_DMA_IRQHandler+0xca4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a17      	ldr	r2, [pc, #92]	@ (8008ae0 <HAL_DMA_IRQHandler+0xca8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	@ (8008ae4 <HAL_DMA_IRQHandler+0xcac>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_DMA_IRQHandler+0xc62>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a14      	ldr	r2, [pc, #80]	@ (8008ae8 <HAL_DMA_IRQHandler+0xcb0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d128      	bne.n	8008aec <HAL_DMA_IRQHandler+0xcb4>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0214 	bic.w	r2, r2, #20
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e027      	b.n	8008afc <HAL_DMA_IRQHandler+0xcc4>
 8008aac:	40020010 	.word	0x40020010
 8008ab0:	40020028 	.word	0x40020028
 8008ab4:	40020040 	.word	0x40020040
 8008ab8:	40020058 	.word	0x40020058
 8008abc:	40020070 	.word	0x40020070
 8008ac0:	40020088 	.word	0x40020088
 8008ac4:	400200a0 	.word	0x400200a0
 8008ac8:	400200b8 	.word	0x400200b8
 8008acc:	40020410 	.word	0x40020410
 8008ad0:	40020428 	.word	0x40020428
 8008ad4:	40020440 	.word	0x40020440
 8008ad8:	40020458 	.word	0x40020458
 8008adc:	40020470 	.word	0x40020470
 8008ae0:	40020488 	.word	0x40020488
 8008ae4:	400204a0 	.word	0x400204a0
 8008ae8:	400204b8 	.word	0x400204b8
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 020a 	bic.w	r2, r2, #10
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8097 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
 8008b1e:	e091      	b.n	8008c44 <HAL_DMA_IRQHandler+0xe0c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2208      	movs	r2, #8
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 8088 	beq.w	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 8082 	beq.w	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a41      	ldr	r2, [pc, #260]	@ (8008c4c <HAL_DMA_IRQHandler+0xe14>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d04a      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a3f      	ldr	r2, [pc, #252]	@ (8008c50 <HAL_DMA_IRQHandler+0xe18>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d045      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8008c54 <HAL_DMA_IRQHandler+0xe1c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d040      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a3c      	ldr	r2, [pc, #240]	@ (8008c58 <HAL_DMA_IRQHandler+0xe20>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d03b      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8008c5c <HAL_DMA_IRQHandler+0xe24>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d036      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a39      	ldr	r2, [pc, #228]	@ (8008c60 <HAL_DMA_IRQHandler+0xe28>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d031      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a38      	ldr	r2, [pc, #224]	@ (8008c64 <HAL_DMA_IRQHandler+0xe2c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d02c      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a36      	ldr	r2, [pc, #216]	@ (8008c68 <HAL_DMA_IRQHandler+0xe30>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d027      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a35      	ldr	r2, [pc, #212]	@ (8008c6c <HAL_DMA_IRQHandler+0xe34>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d022      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a33      	ldr	r2, [pc, #204]	@ (8008c70 <HAL_DMA_IRQHandler+0xe38>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01d      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a32      	ldr	r2, [pc, #200]	@ (8008c74 <HAL_DMA_IRQHandler+0xe3c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d018      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a30      	ldr	r2, [pc, #192]	@ (8008c78 <HAL_DMA_IRQHandler+0xe40>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8008c7c <HAL_DMA_IRQHandler+0xe44>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00e      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008c80 <HAL_DMA_IRQHandler+0xe48>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d009      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008c84 <HAL_DMA_IRQHandler+0xe4c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_DMA_IRQHandler+0xdaa>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c88 <HAL_DMA_IRQHandler+0xe50>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d108      	bne.n	8008bf4 <HAL_DMA_IRQHandler+0xdbc>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 021c 	bic.w	r2, r2, #28
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	e007      	b.n	8008c04 <HAL_DMA_IRQHandler+0xdcc>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 020e 	bic.w	r2, r2, #14
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	409a      	lsls	r2, r3
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	605a      	str	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	655a      	str	r2, [r3, #84]	@ 0x54
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	e004      	b.n	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008c3c:	bf00      	nop
 8008c3e:	e002      	b.n	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <HAL_DMA_IRQHandler+0xe0e>
 8008c44:	bf00      	nop
 8008c46:	3728      	adds	r7, #40	@ 0x28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40020010 	.word	0x40020010
 8008c50:	40020028 	.word	0x40020028
 8008c54:	40020040 	.word	0x40020040
 8008c58:	40020058 	.word	0x40020058
 8008c5c:	40020070 	.word	0x40020070
 8008c60:	40020088 	.word	0x40020088
 8008c64:	400200a0 	.word	0x400200a0
 8008c68:	400200b8 	.word	0x400200b8
 8008c6c:	40020410 	.word	0x40020410
 8008c70:	40020428 	.word	0x40020428
 8008c74:	40020440 	.word	0x40020440
 8008c78:	40020458 	.word	0x40020458
 8008c7c:	40020470 	.word	0x40020470
 8008c80:	40020488 	.word	0x40020488
 8008c84:	400204a0 	.word	0x400204a0
 8008c88:	400204b8 	.word	0x400204b8

08008c8c <HAL_DMA_RegisterCallback>:
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	460b      	mov	r3, r1
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	72fb      	strb	r3, [r7, #11]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_DMA_RegisterCallback+0x1c>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e045      	b.n	8008d34 <HAL_DMA_RegisterCallback+0xa8>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_DMA_RegisterCallback+0x2a>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e03e      	b.n	8008d34 <HAL_DMA_RegisterCallback+0xa8>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d12d      	bne.n	8008d26 <HAL_DMA_RegisterCallback+0x9a>
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d827      	bhi.n	8008d20 <HAL_DMA_RegisterCallback+0x94>
 8008cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <HAL_DMA_RegisterCallback+0x4c>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008cf6:	e018      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8008cfe:	e014      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	645a      	str	r2, [r3, #68]	@ 0x44
 8008d06:	e010      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	649a      	str	r2, [r3, #72]	@ 0x48
 8008d0e:	e00c      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008d16:	e008      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8008d1e:	e004      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d20:	2301      	movs	r3, #1
 8008d22:	75fb      	strb	r3, [r7, #23]
 8008d24:	e001      	b.n	8008d2a <HAL_DMA_RegisterCallback+0x9e>
 8008d26:	2301      	movs	r3, #1
 8008d28:	75fb      	strb	r3, [r7, #23]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	4618      	mov	r0, r3
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_DMA_GetState>:
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_DMA_GetError>:
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <DMA_SetConfig>:
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	613b      	str	r3, [r7, #16]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a7f      	ldr	r2, [pc, #508]	@ (8008f90 <DMA_SetConfig+0x21c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d072      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a7d      	ldr	r2, [pc, #500]	@ (8008f94 <DMA_SetConfig+0x220>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d06d      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a7c      	ldr	r2, [pc, #496]	@ (8008f98 <DMA_SetConfig+0x224>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d068      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a7a      	ldr	r2, [pc, #488]	@ (8008f9c <DMA_SetConfig+0x228>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d063      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a79      	ldr	r2, [pc, #484]	@ (8008fa0 <DMA_SetConfig+0x22c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d05e      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a77      	ldr	r2, [pc, #476]	@ (8008fa4 <DMA_SetConfig+0x230>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d059      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a76      	ldr	r2, [pc, #472]	@ (8008fa8 <DMA_SetConfig+0x234>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d054      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a74      	ldr	r2, [pc, #464]	@ (8008fac <DMA_SetConfig+0x238>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d04f      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a73      	ldr	r2, [pc, #460]	@ (8008fb0 <DMA_SetConfig+0x23c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d04a      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a71      	ldr	r2, [pc, #452]	@ (8008fb4 <DMA_SetConfig+0x240>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d045      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a70      	ldr	r2, [pc, #448]	@ (8008fb8 <DMA_SetConfig+0x244>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d040      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a6e      	ldr	r2, [pc, #440]	@ (8008fbc <DMA_SetConfig+0x248>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d03b      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a6d      	ldr	r2, [pc, #436]	@ (8008fc0 <DMA_SetConfig+0x24c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d036      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a6b      	ldr	r2, [pc, #428]	@ (8008fc4 <DMA_SetConfig+0x250>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d031      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8008fc8 <DMA_SetConfig+0x254>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d02c      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a68      	ldr	r2, [pc, #416]	@ (8008fcc <DMA_SetConfig+0x258>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d027      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a67      	ldr	r2, [pc, #412]	@ (8008fd0 <DMA_SetConfig+0x25c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d022      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a65      	ldr	r2, [pc, #404]	@ (8008fd4 <DMA_SetConfig+0x260>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d01d      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a64      	ldr	r2, [pc, #400]	@ (8008fd8 <DMA_SetConfig+0x264>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d018      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a62      	ldr	r2, [pc, #392]	@ (8008fdc <DMA_SetConfig+0x268>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a61      	ldr	r2, [pc, #388]	@ (8008fe0 <DMA_SetConfig+0x26c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00e      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a5f      	ldr	r2, [pc, #380]	@ (8008fe4 <DMA_SetConfig+0x270>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d009      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8008fe8 <DMA_SetConfig+0x274>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d004      	beq.n	8008e7e <DMA_SetConfig+0x10a>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a5c      	ldr	r2, [pc, #368]	@ (8008fec <DMA_SetConfig+0x278>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d101      	bne.n	8008e82 <DMA_SetConfig+0x10e>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <DMA_SetConfig+0x110>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00d      	beq.n	8008ea4 <DMA_SetConfig+0x130>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008e90:	605a      	str	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d004      	beq.n	8008ea4 <DMA_SetConfig+0x130>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a39      	ldr	r2, [pc, #228]	@ (8008f90 <DMA_SetConfig+0x21c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d04a      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a38      	ldr	r2, [pc, #224]	@ (8008f94 <DMA_SetConfig+0x220>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d045      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a36      	ldr	r2, [pc, #216]	@ (8008f98 <DMA_SetConfig+0x224>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d040      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a35      	ldr	r2, [pc, #212]	@ (8008f9c <DMA_SetConfig+0x228>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d03b      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a33      	ldr	r2, [pc, #204]	@ (8008fa0 <DMA_SetConfig+0x22c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d036      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a32      	ldr	r2, [pc, #200]	@ (8008fa4 <DMA_SetConfig+0x230>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d031      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a30      	ldr	r2, [pc, #192]	@ (8008fa8 <DMA_SetConfig+0x234>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d02c      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a2f      	ldr	r2, [pc, #188]	@ (8008fac <DMA_SetConfig+0x238>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d027      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8008fb0 <DMA_SetConfig+0x23c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d022      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb4 <DMA_SetConfig+0x240>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d01d      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb8 <DMA_SetConfig+0x244>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d018      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a29      	ldr	r2, [pc, #164]	@ (8008fbc <DMA_SetConfig+0x248>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d013      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a27      	ldr	r2, [pc, #156]	@ (8008fc0 <DMA_SetConfig+0x24c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00e      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a26      	ldr	r2, [pc, #152]	@ (8008fc4 <DMA_SetConfig+0x250>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d009      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a24      	ldr	r2, [pc, #144]	@ (8008fc8 <DMA_SetConfig+0x254>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d004      	beq.n	8008f44 <DMA_SetConfig+0x1d0>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a23      	ldr	r2, [pc, #140]	@ (8008fcc <DMA_SetConfig+0x258>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d101      	bne.n	8008f48 <DMA_SetConfig+0x1d4>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <DMA_SetConfig+0x1d6>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d059      	beq.n	8009002 <DMA_SetConfig+0x28e>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	223f      	movs	r2, #63	@ 0x3f
 8008f58:	409a      	lsls	r2, r3
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	609a      	str	r2, [r3, #8]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b40      	cmp	r3, #64	@ 0x40
 8008f7c:	d138      	bne.n	8008ff0 <DMA_SetConfig+0x27c>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	609a      	str	r2, [r3, #8]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	e086      	b.n	800909e <DMA_SetConfig+0x32a>
 8008f90:	40020010 	.word	0x40020010
 8008f94:	40020028 	.word	0x40020028
 8008f98:	40020040 	.word	0x40020040
 8008f9c:	40020058 	.word	0x40020058
 8008fa0:	40020070 	.word	0x40020070
 8008fa4:	40020088 	.word	0x40020088
 8008fa8:	400200a0 	.word	0x400200a0
 8008fac:	400200b8 	.word	0x400200b8
 8008fb0:	40020410 	.word	0x40020410
 8008fb4:	40020428 	.word	0x40020428
 8008fb8:	40020440 	.word	0x40020440
 8008fbc:	40020458 	.word	0x40020458
 8008fc0:	40020470 	.word	0x40020470
 8008fc4:	40020488 	.word	0x40020488
 8008fc8:	400204a0 	.word	0x400204a0
 8008fcc:	400204b8 	.word	0x400204b8
 8008fd0:	58025408 	.word	0x58025408
 8008fd4:	5802541c 	.word	0x5802541c
 8008fd8:	58025430 	.word	0x58025430
 8008fdc:	58025444 	.word	0x58025444
 8008fe0:	58025458 	.word	0x58025458
 8008fe4:	5802546c 	.word	0x5802546c
 8008fe8:	58025480 	.word	0x58025480
 8008fec:	58025494 	.word	0x58025494
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	e04d      	b.n	800909e <DMA_SetConfig+0x32a>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a29      	ldr	r2, [pc, #164]	@ (80090ac <DMA_SetConfig+0x338>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d022      	beq.n	8009052 <DMA_SetConfig+0x2de>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a27      	ldr	r2, [pc, #156]	@ (80090b0 <DMA_SetConfig+0x33c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d01d      	beq.n	8009052 <DMA_SetConfig+0x2de>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a26      	ldr	r2, [pc, #152]	@ (80090b4 <DMA_SetConfig+0x340>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d018      	beq.n	8009052 <DMA_SetConfig+0x2de>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a24      	ldr	r2, [pc, #144]	@ (80090b8 <DMA_SetConfig+0x344>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d013      	beq.n	8009052 <DMA_SetConfig+0x2de>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a23      	ldr	r2, [pc, #140]	@ (80090bc <DMA_SetConfig+0x348>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00e      	beq.n	8009052 <DMA_SetConfig+0x2de>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a21      	ldr	r2, [pc, #132]	@ (80090c0 <DMA_SetConfig+0x34c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d009      	beq.n	8009052 <DMA_SetConfig+0x2de>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a20      	ldr	r2, [pc, #128]	@ (80090c4 <DMA_SetConfig+0x350>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d004      	beq.n	8009052 <DMA_SetConfig+0x2de>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1e      	ldr	r2, [pc, #120]	@ (80090c8 <DMA_SetConfig+0x354>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d101      	bne.n	8009056 <DMA_SetConfig+0x2e2>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <DMA_SetConfig+0x2e4>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d020      	beq.n	800909e <DMA_SetConfig+0x32a>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009060:	f003 031f 	and.w	r3, r3, #31
 8009064:	2201      	movs	r2, #1
 8009066:	409a      	lsls	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	605a      	str	r2, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d108      	bne.n	800908e <DMA_SetConfig+0x31a>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	609a      	str	r2, [r3, #8]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	e007      	b.n	800909e <DMA_SetConfig+0x32a>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	609a      	str	r2, [r3, #8]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	58025408 	.word	0x58025408
 80090b0:	5802541c 	.word	0x5802541c
 80090b4:	58025430 	.word	0x58025430
 80090b8:	58025444 	.word	0x58025444
 80090bc:	58025458 	.word	0x58025458
 80090c0:	5802546c 	.word	0x5802546c
 80090c4:	58025480 	.word	0x58025480
 80090c8:	58025494 	.word	0x58025494

080090cc <DMA_CalcBaseAndBitshift>:
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a42      	ldr	r2, [pc, #264]	@ (80091e4 <DMA_CalcBaseAndBitshift+0x118>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d04a      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a41      	ldr	r2, [pc, #260]	@ (80091e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d045      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a3f      	ldr	r2, [pc, #252]	@ (80091ec <DMA_CalcBaseAndBitshift+0x120>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d040      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a3e      	ldr	r2, [pc, #248]	@ (80091f0 <DMA_CalcBaseAndBitshift+0x124>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d03b      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a3c      	ldr	r2, [pc, #240]	@ (80091f4 <DMA_CalcBaseAndBitshift+0x128>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d036      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a3b      	ldr	r2, [pc, #236]	@ (80091f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d031      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a39      	ldr	r2, [pc, #228]	@ (80091fc <DMA_CalcBaseAndBitshift+0x130>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02c      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a38      	ldr	r2, [pc, #224]	@ (8009200 <DMA_CalcBaseAndBitshift+0x134>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d027      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a36      	ldr	r2, [pc, #216]	@ (8009204 <DMA_CalcBaseAndBitshift+0x138>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d022      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a35      	ldr	r2, [pc, #212]	@ (8009208 <DMA_CalcBaseAndBitshift+0x13c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d01d      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a33      	ldr	r2, [pc, #204]	@ (800920c <DMA_CalcBaseAndBitshift+0x140>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a32      	ldr	r2, [pc, #200]	@ (8009210 <DMA_CalcBaseAndBitshift+0x144>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a30      	ldr	r2, [pc, #192]	@ (8009214 <DMA_CalcBaseAndBitshift+0x148>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00e      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a2f      	ldr	r2, [pc, #188]	@ (8009218 <DMA_CalcBaseAndBitshift+0x14c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a2d      	ldr	r2, [pc, #180]	@ (800921c <DMA_CalcBaseAndBitshift+0x150>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <DMA_CalcBaseAndBitshift+0xa8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a2c      	ldr	r2, [pc, #176]	@ (8009220 <DMA_CalcBaseAndBitshift+0x154>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d101      	bne.n	8009178 <DMA_CalcBaseAndBitshift+0xac>
 8009174:	2301      	movs	r3, #1
 8009176:	e000      	b.n	800917a <DMA_CalcBaseAndBitshift+0xae>
 8009178:	2300      	movs	r3, #0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d024      	beq.n	80091c8 <DMA_CalcBaseAndBitshift+0xfc>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	3b10      	subs	r3, #16
 8009186:	4a27      	ldr	r2, [pc, #156]	@ (8009224 <DMA_CalcBaseAndBitshift+0x158>)
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	4a24      	ldr	r2, [pc, #144]	@ (8009228 <DMA_CalcBaseAndBitshift+0x15c>)
 8009198:	5cd3      	ldrb	r3, [r2, r3]
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d908      	bls.n	80091b8 <DMA_CalcBaseAndBitshift+0xec>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b1f      	ldr	r3, [pc, #124]	@ (800922c <DMA_CalcBaseAndBitshift+0x160>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	1d1a      	adds	r2, r3, #4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80091b6:	e00d      	b.n	80091d4 <DMA_CalcBaseAndBitshift+0x108>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	4b1b      	ldr	r3, [pc, #108]	@ (800922c <DMA_CalcBaseAndBitshift+0x160>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091c6:	e005      	b.n	80091d4 <DMA_CalcBaseAndBitshift+0x108>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	40020010 	.word	0x40020010
 80091e8:	40020028 	.word	0x40020028
 80091ec:	40020040 	.word	0x40020040
 80091f0:	40020058 	.word	0x40020058
 80091f4:	40020070 	.word	0x40020070
 80091f8:	40020088 	.word	0x40020088
 80091fc:	400200a0 	.word	0x400200a0
 8009200:	400200b8 	.word	0x400200b8
 8009204:	40020410 	.word	0x40020410
 8009208:	40020428 	.word	0x40020428
 800920c:	40020440 	.word	0x40020440
 8009210:	40020458 	.word	0x40020458
 8009214:	40020470 	.word	0x40020470
 8009218:	40020488 	.word	0x40020488
 800921c:	400204a0 	.word	0x400204a0
 8009220:	400204b8 	.word	0x400204b8
 8009224:	aaaaaaab 	.word	0xaaaaaaab
 8009228:	0801b290 	.word	0x0801b290
 800922c:	fffffc00 	.word	0xfffffc00

08009230 <DMA_CheckFifoParam>:
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d120      	bne.n	8009286 <DMA_CheckFifoParam+0x56>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009248:	2b03      	cmp	r3, #3
 800924a:	d858      	bhi.n	80092fe <DMA_CheckFifoParam+0xce>
 800924c:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <DMA_CheckFifoParam+0x24>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	08009277 	.word	0x08009277
 800925c:	08009265 	.word	0x08009265
 8009260:	080092ff 	.word	0x080092ff
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d048      	beq.n	8009302 <DMA_CheckFifoParam+0xd2>
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e045      	b.n	8009302 <DMA_CheckFifoParam+0xd2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800927e:	d142      	bne.n	8009306 <DMA_CheckFifoParam+0xd6>
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e03f      	b.n	8009306 <DMA_CheckFifoParam+0xd6>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800928e:	d123      	bne.n	80092d8 <DMA_CheckFifoParam+0xa8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	2b03      	cmp	r3, #3
 8009296:	d838      	bhi.n	800930a <DMA_CheckFifoParam+0xda>
 8009298:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <DMA_CheckFifoParam+0x70>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092b1 	.word	0x080092b1
 80092a4:	080092b7 	.word	0x080092b7
 80092a8:	080092b1 	.word	0x080092b1
 80092ac:	080092c9 	.word	0x080092c9
 80092b0:	2301      	movs	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e030      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d025      	beq.n	800930e <DMA_CheckFifoParam+0xde>
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]
 80092c6:	e022      	b.n	800930e <DMA_CheckFifoParam+0xde>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80092d0:	d11f      	bne.n	8009312 <DMA_CheckFifoParam+0xe2>
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
 80092d6:	e01c      	b.n	8009312 <DMA_CheckFifoParam+0xe2>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d902      	bls.n	80092e6 <DMA_CheckFifoParam+0xb6>
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d003      	beq.n	80092ec <DMA_CheckFifoParam+0xbc>
 80092e4:	e018      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	e015      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00e      	beq.n	8009316 <DMA_CheckFifoParam+0xe6>
 80092f8:	2301      	movs	r3, #1
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e00b      	b.n	8009316 <DMA_CheckFifoParam+0xe6>
 80092fe:	bf00      	nop
 8009300:	e00a      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 8009302:	bf00      	nop
 8009304:	e008      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 8009306:	bf00      	nop
 8009308:	e006      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 800930a:	bf00      	nop
 800930c:	e004      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 800930e:	bf00      	nop
 8009310:	e002      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <DMA_CheckFifoParam+0xe8>
 8009316:	bf00      	nop
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	4618      	mov	r0, r3
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop

08009328 <DMA_CalcDMAMUXChannelBaseAndMask>:
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60bb      	str	r3, [r7, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a38      	ldr	r2, [pc, #224]	@ (800941c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d022      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a36      	ldr	r2, [pc, #216]	@ (8009420 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d01d      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a35      	ldr	r2, [pc, #212]	@ (8009424 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d018      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a33      	ldr	r2, [pc, #204]	@ (8009428 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d013      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a32      	ldr	r2, [pc, #200]	@ (800942c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00e      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a30      	ldr	r2, [pc, #192]	@ (8009430 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d009      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a2f      	ldr	r2, [pc, #188]	@ (8009434 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d004      	beq.n	8009386 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a2d      	ldr	r2, [pc, #180]	@ (8009438 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d101      	bne.n	800938a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01a      	beq.n	80093c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	3b08      	subs	r3, #8
 8009398:	4a28      	ldr	r2, [pc, #160]	@ (800943c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800939a:	fba2 2303 	umull	r2, r3, r2, r3
 800939e:	091b      	lsrs	r3, r3, #4
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4b26      	ldr	r3, [pc, #152]	@ (8009440 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	461a      	mov	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a24      	ldr	r2, [pc, #144]	@ (8009444 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80093b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f003 031f 	and.w	r3, r3, #31
 80093bc:	2201      	movs	r2, #1
 80093be:	409a      	lsls	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80093c4:	e024      	b.n	8009410 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	3b10      	subs	r3, #16
 80093ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009448 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	091b      	lsrs	r3, r3, #4
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4a1c      	ldr	r2, [pc, #112]	@ (800944c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d806      	bhi.n	80093ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009450 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d902      	bls.n	80093ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3308      	adds	r3, #8
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4b18      	ldr	r3, [pc, #96]	@ (8009454 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	@ (8009458 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009400:	665a      	str	r2, [r3, #100]	@ 0x64
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	2201      	movs	r2, #1
 800940a:	409a      	lsls	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	669a      	str	r2, [r3, #104]	@ 0x68
 8009410:	bf00      	nop
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	58025408 	.word	0x58025408
 8009420:	5802541c 	.word	0x5802541c
 8009424:	58025430 	.word	0x58025430
 8009428:	58025444 	.word	0x58025444
 800942c:	58025458 	.word	0x58025458
 8009430:	5802546c 	.word	0x5802546c
 8009434:	58025480 	.word	0x58025480
 8009438:	58025494 	.word	0x58025494
 800943c:	cccccccd 	.word	0xcccccccd
 8009440:	16009600 	.word	0x16009600
 8009444:	58025880 	.word	0x58025880
 8009448:	aaaaaaab 	.word	0xaaaaaaab
 800944c:	400204b8 	.word	0x400204b8
 8009450:	4002040f 	.word	0x4002040f
 8009454:	10008200 	.word	0x10008200
 8009458:	40020880 	.word	0x40020880

0800945c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d04a      	beq.n	8009508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b08      	cmp	r3, #8
 8009476:	d847      	bhi.n	8009508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a25      	ldr	r2, [pc, #148]	@ (8009514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d022      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a24      	ldr	r2, [pc, #144]	@ (8009518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01d      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a22      	ldr	r2, [pc, #136]	@ (800951c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d018      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a21      	ldr	r2, [pc, #132]	@ (8009520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d013      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00e      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d009      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	@ (800952c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d004      	beq.n	80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d101      	bne.n	80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80094c8:	2301      	movs	r3, #1
 80094ca:	e000      	b.n	80094ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80094cc:	2300      	movs	r3, #0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4b17      	ldr	r3, [pc, #92]	@ (8009534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	66da      	str	r2, [r3, #108]	@ 0x6c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a15      	ldr	r2, [pc, #84]	@ (8009538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80094e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80094e6:	e009      	b.n	80094fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4b14      	ldr	r3, [pc, #80]	@ (800953c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	461a      	mov	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80094fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b01      	subs	r3, #1
 8009500:	2201      	movs	r2, #1
 8009502:	409a      	lsls	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	675a      	str	r2, [r3, #116]	@ 0x74
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	58025408 	.word	0x58025408
 8009518:	5802541c 	.word	0x5802541c
 800951c:	58025430 	.word	0x58025430
 8009520:	58025444 	.word	0x58025444
 8009524:	58025458 	.word	0x58025458
 8009528:	5802546c 	.word	0x5802546c
 800952c:	58025480 	.word	0x58025480
 8009530:	58025494 	.word	0x58025494
 8009534:	1600963f 	.word	0x1600963f
 8009538:	58025940 	.word	0x58025940
 800953c:	1000823f 	.word	0x1000823f
 8009540:	40020940 	.word	0x40020940

08009544 <HAL_DMAEx_ConfigMuxSync>:
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	2300      	movs	r3, #0
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	7a1b      	ldrb	r3, [r3, #8]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d154      	bne.n	8009608 <HAL_DMAEx_ConfigMuxSync+0xc4>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a4b      	ldr	r2, [pc, #300]	@ (8009690 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d049      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a49      	ldr	r2, [pc, #292]	@ (8009694 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d044      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a48      	ldr	r2, [pc, #288]	@ (8009698 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d03f      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a46      	ldr	r2, [pc, #280]	@ (800969c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d03a      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a45      	ldr	r2, [pc, #276]	@ (80096a0 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d035      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a43      	ldr	r2, [pc, #268]	@ (80096a4 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d030      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a42      	ldr	r2, [pc, #264]	@ (80096a8 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d02b      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a40      	ldr	r2, [pc, #256]	@ (80096ac <HAL_DMAEx_ConfigMuxSync+0x168>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d026      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a3f      	ldr	r2, [pc, #252]	@ (80096b0 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d021      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a3d      	ldr	r2, [pc, #244]	@ (80096b4 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d01c      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a3c      	ldr	r2, [pc, #240]	@ (80096b8 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d017      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a3a      	ldr	r2, [pc, #232]	@ (80096bc <HAL_DMAEx_ConfigMuxSync+0x178>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d012      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a39      	ldr	r2, [pc, #228]	@ (80096c0 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00d      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a37      	ldr	r2, [pc, #220]	@ (80096c4 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d008      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a36      	ldr	r2, [pc, #216]	@ (80096c8 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <HAL_DMAEx_ConfigMuxSync+0xb8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a34      	ldr	r2, [pc, #208]	@ (80096cc <HAL_DMAEx_ConfigMuxSync+0x188>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	60bb      	str	r3, [r7, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	d131      	bne.n	8009678 <HAL_DMAEx_ConfigMuxSync+0x134>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_DMAEx_ConfigMuxSync+0xde>
 800961e:	2302      	movs	r3, #2
 8009620:	e02f      	b.n	8009682 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009634:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	b2d9      	uxtb	r1, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	061a      	lsls	r2, r3, #24
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	3b01      	subs	r3, #1
 800964c:	04db      	lsls	r3, r3, #19
 800964e:	431a      	orrs	r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	431a      	orrs	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	7a1b      	ldrb	r3, [r3, #8]
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	431a      	orrs	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	7a5b      	ldrb	r3, [r3, #9]
 8009660:	025b      	lsls	r3, r3, #9
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009668:	430a      	orrs	r2, r1
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009674:	2300      	movs	r3, #0
 8009676:	e004      	b.n	8009682 <HAL_DMAEx_ConfigMuxSync+0x13e>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800967e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009680:	2301      	movs	r3, #1
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40020010 	.word	0x40020010
 8009694:	40020028 	.word	0x40020028
 8009698:	40020040 	.word	0x40020040
 800969c:	40020058 	.word	0x40020058
 80096a0:	40020070 	.word	0x40020070
 80096a4:	40020088 	.word	0x40020088
 80096a8:	400200a0 	.word	0x400200a0
 80096ac:	400200b8 	.word	0x400200b8
 80096b0:	40020410 	.word	0x40020410
 80096b4:	40020428 	.word	0x40020428
 80096b8:	40020440 	.word	0x40020440
 80096bc:	40020458 	.word	0x40020458
 80096c0:	40020470 	.word	0x40020470
 80096c4:	40020488 	.word	0x40020488
 80096c8:	400204a0 	.word	0x400204a0
 80096cc:	400204b8 	.word	0x400204b8

080096d0 <HAL_DMAEx_MUX_IRQHandler>:
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d01a      	beq.n	800971e <HAL_DMAEx_MUX_IRQHandler+0x4e>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	655a      	str	r2, [r3, #84]	@ 0x54
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_DMAEx_MUX_IRQHandler+0x4e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d022      	beq.n	800976c <HAL_DMAEx_MUX_IRQHandler+0x9c>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009730:	4013      	ands	r3, r2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01a      	beq.n	800976c <HAL_DMAEx_MUX_IRQHandler+0x9c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800974e:	605a      	str	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009754:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	655a      	str	r2, [r3, #84]	@ 0x54
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <HAL_DMAEx_MUX_IRQHandler+0x9c>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	4798      	blx	r3
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_GPIO_Init>:
 8009774:	b480      	push	{r7}
 8009776:	b089      	sub	sp, #36	@ 0x24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	4b89      	ldr	r3, [pc, #548]	@ (80099a8 <HAL_GPIO_Init+0x234>)
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	e194      	b.n	8009ab2 <HAL_GPIO_Init+0x33e>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	2101      	movs	r1, #1
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	fa01 f303 	lsl.w	r3, r1, r3
 8009794:	4013      	ands	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 8186 	beq.w	8009aac <HAL_GPIO_Init+0x338>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f003 0303 	and.w	r3, r3, #3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d005      	beq.n	80097b8 <HAL_GPIO_Init+0x44>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d130      	bne.n	800981a <HAL_GPIO_Init+0xa6>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	2203      	movs	r2, #3
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	43db      	mvns	r3, r3
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	4013      	ands	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	fa02 f303 	lsl.w	r3, r2, r3
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4313      	orrs	r3, r2
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	2201      	movs	r2, #1
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43db      	mvns	r3, r3
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	4013      	ands	r3, r2
 80097fc:	61bb      	str	r3, [r7, #24]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0201 	and.w	r2, r3, #1
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	4313      	orrs	r3, r2
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d017      	beq.n	8009856 <HAL_GPIO_Init+0xe2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	61bb      	str	r3, [r7, #24]
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	2203      	movs	r2, #3
 8009832:	fa02 f303 	lsl.w	r3, r2, r3
 8009836:	43db      	mvns	r3, r3
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	4013      	ands	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	4313      	orrs	r3, r2
 800984e:	61bb      	str	r3, [r7, #24]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d123      	bne.n	80098aa <HAL_GPIO_Init+0x136>
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	08da      	lsrs	r2, r3, #3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3208      	adds	r2, #8
 800986a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	220f      	movs	r2, #15
 800987a:	fa02 f303 	lsl.w	r3, r2, r3
 800987e:	43db      	mvns	r3, r3
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	4013      	ands	r3, r2
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	4313      	orrs	r3, r2
 800989a:	61bb      	str	r3, [r7, #24]
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	08da      	lsrs	r2, r3, #3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3208      	adds	r2, #8
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	005b      	lsls	r3, r3, #1
 80098b4:	2203      	movs	r2, #3
 80098b6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ba:	43db      	mvns	r3, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4013      	ands	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f003 0203 	and.w	r2, r3, #3
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	61bb      	str	r3, [r7, #24]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80e0 	beq.w	8009aac <HAL_GPIO_Init+0x338>
 80098ec:	4b2f      	ldr	r3, [pc, #188]	@ (80099ac <HAL_GPIO_Init+0x238>)
 80098ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098f2:	4a2e      	ldr	r2, [pc, #184]	@ (80099ac <HAL_GPIO_Init+0x238>)
 80098f4:	f043 0302 	orr.w	r3, r3, #2
 80098f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80098fc:	4b2b      	ldr	r3, [pc, #172]	@ (80099ac <HAL_GPIO_Init+0x238>)
 80098fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4a29      	ldr	r2, [pc, #164]	@ (80099b0 <HAL_GPIO_Init+0x23c>)
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	089b      	lsrs	r3, r3, #2
 8009910:	3302      	adds	r3, #2
 8009912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	220f      	movs	r2, #15
 8009922:	fa02 f303 	lsl.w	r3, r2, r3
 8009926:	43db      	mvns	r3, r3
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	4013      	ands	r3, r2
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a20      	ldr	r2, [pc, #128]	@ (80099b4 <HAL_GPIO_Init+0x240>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d052      	beq.n	80099dc <HAL_GPIO_Init+0x268>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a1f      	ldr	r2, [pc, #124]	@ (80099b8 <HAL_GPIO_Init+0x244>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d031      	beq.n	80099a2 <HAL_GPIO_Init+0x22e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a1e      	ldr	r2, [pc, #120]	@ (80099bc <HAL_GPIO_Init+0x248>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d02b      	beq.n	800999e <HAL_GPIO_Init+0x22a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a1d      	ldr	r2, [pc, #116]	@ (80099c0 <HAL_GPIO_Init+0x24c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d025      	beq.n	800999a <HAL_GPIO_Init+0x226>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a1c      	ldr	r2, [pc, #112]	@ (80099c4 <HAL_GPIO_Init+0x250>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d01f      	beq.n	8009996 <HAL_GPIO_Init+0x222>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a1b      	ldr	r2, [pc, #108]	@ (80099c8 <HAL_GPIO_Init+0x254>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d019      	beq.n	8009992 <HAL_GPIO_Init+0x21e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a1a      	ldr	r2, [pc, #104]	@ (80099cc <HAL_GPIO_Init+0x258>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <HAL_GPIO_Init+0x21a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a19      	ldr	r2, [pc, #100]	@ (80099d0 <HAL_GPIO_Init+0x25c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00d      	beq.n	800998a <HAL_GPIO_Init+0x216>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a18      	ldr	r2, [pc, #96]	@ (80099d4 <HAL_GPIO_Init+0x260>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d007      	beq.n	8009986 <HAL_GPIO_Init+0x212>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a17      	ldr	r2, [pc, #92]	@ (80099d8 <HAL_GPIO_Init+0x264>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d101      	bne.n	8009982 <HAL_GPIO_Init+0x20e>
 800997e:	2309      	movs	r3, #9
 8009980:	e02d      	b.n	80099de <HAL_GPIO_Init+0x26a>
 8009982:	230a      	movs	r3, #10
 8009984:	e02b      	b.n	80099de <HAL_GPIO_Init+0x26a>
 8009986:	2308      	movs	r3, #8
 8009988:	e029      	b.n	80099de <HAL_GPIO_Init+0x26a>
 800998a:	2307      	movs	r3, #7
 800998c:	e027      	b.n	80099de <HAL_GPIO_Init+0x26a>
 800998e:	2306      	movs	r3, #6
 8009990:	e025      	b.n	80099de <HAL_GPIO_Init+0x26a>
 8009992:	2305      	movs	r3, #5
 8009994:	e023      	b.n	80099de <HAL_GPIO_Init+0x26a>
 8009996:	2304      	movs	r3, #4
 8009998:	e021      	b.n	80099de <HAL_GPIO_Init+0x26a>
 800999a:	2303      	movs	r3, #3
 800999c:	e01f      	b.n	80099de <HAL_GPIO_Init+0x26a>
 800999e:	2302      	movs	r3, #2
 80099a0:	e01d      	b.n	80099de <HAL_GPIO_Init+0x26a>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e01b      	b.n	80099de <HAL_GPIO_Init+0x26a>
 80099a6:	bf00      	nop
 80099a8:	58000080 	.word	0x58000080
 80099ac:	58024400 	.word	0x58024400
 80099b0:	58000400 	.word	0x58000400
 80099b4:	58020000 	.word	0x58020000
 80099b8:	58020400 	.word	0x58020400
 80099bc:	58020800 	.word	0x58020800
 80099c0:	58020c00 	.word	0x58020c00
 80099c4:	58021000 	.word	0x58021000
 80099c8:	58021400 	.word	0x58021400
 80099cc:	58021800 	.word	0x58021800
 80099d0:	58021c00 	.word	0x58021c00
 80099d4:	58022000 	.word	0x58022000
 80099d8:	58022400 	.word	0x58022400
 80099dc:	2300      	movs	r3, #0
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	f002 0203 	and.w	r2, r2, #3
 80099e4:	0092      	lsls	r2, r2, #2
 80099e6:	4093      	lsls	r3, r2
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	4938      	ldr	r1, [pc, #224]	@ (8009ad0 <HAL_GPIO_Init+0x35c>)
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	089b      	lsrs	r3, r3, #2
 80099f4:	3302      	adds	r3, #2
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	61bb      	str	r3, [r7, #24]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	43db      	mvns	r3, r3
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_GPIO_Init+0x2ae>
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	61bb      	str	r3, [r7, #24]
 8009a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	43db      	mvns	r3, r3
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	4013      	ands	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <HAL_GPIO_Init+0x2dc>
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	6053      	str	r3, [r2, #4]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	43db      	mvns	r3, r3
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	4013      	ands	r3, r2
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <HAL_GPIO_Init+0x308>
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	61bb      	str	r3, [r7, #24]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	605a      	str	r2, [r3, #4]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <HAL_GPIO_Init+0x332>
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	61fb      	str	r3, [r7, #28]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f47f ae63 	bne.w	8009788 <HAL_GPIO_Init+0x14>
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	3724      	adds	r7, #36	@ 0x24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	58000400 	.word	0x58000400

08009ad4 <HAL_GPIO_ReadPin>:
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	807b      	strh	r3, [r7, #2]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	887b      	ldrh	r3, [r7, #2]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <HAL_GPIO_ReadPin+0x1e>
 8009aec:	2301      	movs	r3, #1
 8009aee:	73fb      	strb	r3, [r7, #15]
 8009af0:	e001      	b.n	8009af6 <HAL_GPIO_ReadPin+0x22>
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_GPIO_WritePin>:
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
 8009b10:	4613      	mov	r3, r2
 8009b12:	707b      	strb	r3, [r7, #1]
 8009b14:	787b      	ldrb	r3, [r7, #1]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_GPIO_WritePin+0x1e>
 8009b1a:	887a      	ldrh	r2, [r7, #2]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	619a      	str	r2, [r3, #24]
 8009b20:	e003      	b.n	8009b2a <HAL_GPIO_WritePin+0x26>
 8009b22:	887b      	ldrh	r3, [r7, #2]
 8009b24:	041a      	lsls	r2, r3, #16
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	619a      	str	r2, [r3, #24]
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_GPIO_TogglePin>:
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	807b      	strh	r3, [r7, #2]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	887a      	ldrh	r2, [r7, #2]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	041a      	lsls	r2, r3, #16
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	43d9      	mvns	r1, r3
 8009b54:	887b      	ldrh	r3, [r7, #2]
 8009b56:	400b      	ands	r3, r1
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	619a      	str	r2, [r3, #24]
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <HAL_I2C_Init>:
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_I2C_Init+0x12>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e0b1      	b.n	8009ce2 <HAL_I2C_Init+0x176>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d12c      	bne.n	8009be4 <HAL_I2C_Init+0x78>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a55      	ldr	r2, [pc, #340]	@ (8009cec <HAL_I2C_Init+0x180>)
 8009b96:	655a      	str	r2, [r3, #84]	@ 0x54
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a55      	ldr	r2, [pc, #340]	@ (8009cf0 <HAL_I2C_Init+0x184>)
 8009b9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a54      	ldr	r2, [pc, #336]	@ (8009cf4 <HAL_I2C_Init+0x188>)
 8009ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a54      	ldr	r2, [pc, #336]	@ (8009cf8 <HAL_I2C_Init+0x18c>)
 8009ba8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a53      	ldr	r2, [pc, #332]	@ (8009cfc <HAL_I2C_Init+0x190>)
 8009bae:	665a      	str	r2, [r3, #100]	@ 0x64
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a53      	ldr	r2, [pc, #332]	@ (8009d00 <HAL_I2C_Init+0x194>)
 8009bb4:	669a      	str	r2, [r3, #104]	@ 0x68
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a52      	ldr	r2, [pc, #328]	@ (8009d04 <HAL_I2C_Init+0x198>)
 8009bba:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a52      	ldr	r2, [pc, #328]	@ (8009d08 <HAL_I2C_Init+0x19c>)
 8009bc0:	671a      	str	r2, [r3, #112]	@ 0x70
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a51      	ldr	r2, [pc, #324]	@ (8009d0c <HAL_I2C_Init+0x1a0>)
 8009bc6:	675a      	str	r2, [r3, #116]	@ 0x74
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a51      	ldr	r2, [pc, #324]	@ (8009d10 <HAL_I2C_Init+0x1a4>)
 8009bcc:	679a      	str	r2, [r3, #120]	@ 0x78
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <HAL_I2C_Init+0x70>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8009d14 <HAL_I2C_Init+0x1a8>)
 8009bda:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2224      	movs	r2, #36	@ 0x24
 8009be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0201 	bic.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009c08:	611a      	str	r2, [r3, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c18:	609a      	str	r2, [r3, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d107      	bne.n	8009c32 <HAL_I2C_Init+0xc6>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c2e:	609a      	str	r2, [r3, #8]
 8009c30:	e006      	b.n	8009c40 <HAL_I2C_Init+0xd4>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689a      	ldr	r2, [r3, #8]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009c3e:	609a      	str	r2, [r3, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d108      	bne.n	8009c5a <HAL_I2C_Init+0xee>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c56:	605a      	str	r2, [r3, #4]
 8009c58:	e007      	b.n	8009c6a <HAL_I2C_Init+0xfe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6859      	ldr	r1, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	4b28      	ldr	r3, [pc, #160]	@ (8009d18 <HAL_I2C_Init+0x1ac>)
 8009c76:	430b      	orrs	r3, r1
 8009c78:	6053      	str	r3, [r2, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691a      	ldr	r2, [r3, #16]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	ea42 0103 	orr.w	r1, r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	021a      	lsls	r2, r3, #8
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	60da      	str	r2, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	69d9      	ldr	r1, [r3, #28]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1a      	ldr	r2, [r3, #32]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	0800a2df 	.word	0x0800a2df
 8009cf0:	0800a2f3 	.word	0x0800a2f3
 8009cf4:	0800a307 	.word	0x0800a307
 8009cf8:	0800a31b 	.word	0x0800a31b
 8009cfc:	0800a34b 	.word	0x0800a34b
 8009d00:	08003e99 	.word	0x08003e99
 8009d04:	0800a35f 	.word	0x0800a35f
 8009d08:	0800a373 	.word	0x0800a373
 8009d0c:	0800a387 	.word	0x0800a387
 8009d10:	0800a32f 	.word	0x0800a32f
 8009d14:	08001265 	.word	0x08001265
 8009d18:	02008000 	.word	0x02008000

08009d1c <HAL_I2C_RegisterCallback>:
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	460b      	mov	r3, r1
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	72fb      	strb	r3, [r7, #11]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d107      	bne.n	8009d44 <HAL_I2C_RegisterCallback+0x28>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8009d40:	2301      	movs	r3, #1
 8009d42:	e07e      	b.n	8009e42 <HAL_I2C_RegisterCallback+0x126>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d151      	bne.n	8009df4 <HAL_I2C_RegisterCallback+0xd8>
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	2b0a      	cmp	r3, #10
 8009d54:	d845      	bhi.n	8009de2 <HAL_I2C_RegisterCallback+0xc6>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <HAL_I2C_RegisterCallback+0x40>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d89 	.word	0x08009d89
 8009d60:	08009d91 	.word	0x08009d91
 8009d64:	08009d99 	.word	0x08009d99
 8009d68:	08009da1 	.word	0x08009da1
 8009d6c:	08009da9 	.word	0x08009da9
 8009d70:	08009db1 	.word	0x08009db1
 8009d74:	08009db9 	.word	0x08009db9
 8009d78:	08009dc1 	.word	0x08009dc1
 8009d7c:	08009dc9 	.word	0x08009dc9
 8009d80:	08009dd1 	.word	0x08009dd1
 8009d84:	08009dd9 	.word	0x08009dd9
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8009d8e:	e057      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	659a      	str	r2, [r3, #88]	@ 0x58
 8009d96:	e053      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d9e:	e04f      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	661a      	str	r2, [r3, #96]	@ 0x60
 8009da6:	e04b      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	665a      	str	r2, [r3, #100]	@ 0x64
 8009dae:	e047      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	669a      	str	r2, [r3, #104]	@ 0x68
 8009db6:	e043      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009dbe:	e03f      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8009dc6:	e03b      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8009dce:	e037      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009dd6:	e033      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009de0:	e02e      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	645a      	str	r2, [r3, #68]	@ 0x44
 8009dee:	2301      	movs	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]
 8009df2:	e025      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d117      	bne.n	8009e30 <HAL_I2C_RegisterCallback+0x114>
 8009e00:	7afb      	ldrb	r3, [r7, #11]
 8009e02:	2b09      	cmp	r3, #9
 8009e04:	d002      	beq.n	8009e0c <HAL_I2C_RegisterCallback+0xf0>
 8009e06:	2b0a      	cmp	r3, #10
 8009e08:	d004      	beq.n	8009e14 <HAL_I2C_RegisterCallback+0xf8>
 8009e0a:	e008      	b.n	8009e1e <HAL_I2C_RegisterCallback+0x102>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009e12:	e015      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009e1c:	e010      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	645a      	str	r2, [r3, #68]	@ 0x44
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	75fb      	strb	r3, [r7, #23]
 8009e2e:	e007      	b.n	8009e40 <HAL_I2C_RegisterCallback+0x124>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	4618      	mov	r0, r3
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop

08009e50 <HAL_I2C_Mem_Write_DMA>:
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	4608      	mov	r0, r1
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	4603      	mov	r3, r0
 8009e60:	817b      	strh	r3, [r7, #10]
 8009e62:	460b      	mov	r3, r1
 8009e64:	813b      	strh	r3, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	80fb      	strh	r3, [r7, #6]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	f040 80c3 	bne.w	8009ffe <HAL_I2C_Mem_Write_DMA+0x1ae>
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_I2C_Mem_Write_DMA+0x34>
 8009e7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <HAL_I2C_Mem_Write_DMA+0x40>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0b7      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e9e:	d101      	bne.n	8009ea4 <HAL_I2C_Mem_Write_DMA+0x54>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e0ad      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_I2C_Mem_Write_DMA+0x62>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e0a6      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2221      	movs	r2, #33	@ 0x21
 8009ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2240      	movs	r2, #64	@ 0x40
 8009ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	645a      	str	r2, [r3, #68]	@ 0x44
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6a3a      	ldr	r2, [r7, #32]
 8009ed4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a4a      	ldr	r2, [pc, #296]	@ (800a008 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8009ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a49      	ldr	r2, [pc, #292]	@ (800a00c <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8009ee6:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ee8:	897a      	ldrh	r2, [r7, #10]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2bff      	cmp	r3, #255	@ 0xff
 8009ef6:	d903      	bls.n	8009f00 <HAL_I2C_Mem_Write_DMA+0xb0>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	22ff      	movs	r2, #255	@ 0xff
 8009efc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009efe:	e004      	b.n	8009f0a <HAL_I2C_Mem_Write_DMA+0xba>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009f0a:	88fb      	ldrh	r3, [r7, #6]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d109      	bne.n	8009f24 <HAL_I2C_Mem_Write_DMA+0xd4>
 8009f10:	893b      	ldrh	r3, [r7, #8]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f20:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f22:	e00b      	b.n	8009f3c <HAL_I2C_Mem_Write_DMA+0xec>
 8009f24:	893b      	ldrh	r3, [r7, #8]
 8009f26:	0a1b      	lsrs	r3, r3, #8
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f32:	893b      	ldrh	r3, [r7, #8]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d020      	beq.n	8009f86 <HAL_I2C_Mem_Write_DMA+0x136>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f48:	4a31      	ldr	r2, [pc, #196]	@ (800a010 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8009f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	4a30      	ldr	r2, [pc, #192]	@ (800a014 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8009f52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f58:	2200      	movs	r2, #0
 8009f5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f60:	2200      	movs	r2, #0
 8009f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009f68:	6a39      	ldr	r1, [r7, #32]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3328      	adds	r3, #40	@ 0x28
 8009f70:	461a      	mov	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f76:	f7fd faaf 	bl	80074d8 <HAL_DMA_Start_IT>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	75fb      	strb	r3, [r7, #23]
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d128      	bne.n	8009fd6 <HAL_I2C_Mem_Write_DMA+0x186>
 8009f84:	e013      	b.n	8009fae <HAL_I2C_Mem_Write_DMA+0x15e>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	645a      	str	r2, [r3, #68]	@ 0x44
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009faa:	2301      	movs	r3, #1
 8009fac:	e028      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	8979      	ldrh	r1, [r7, #10]
 8009fb4:	4b18      	ldr	r3, [pc, #96]	@ (800a018 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f001 ff95 	bl	800beec <I2C_TransferConfig>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fca:	2101      	movs	r1, #1
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f001 ffbf 	bl	800bf50 <I2C_Enable_IRQ>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e014      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fea:	f043 0210 	orr.w	r2, r3, #16
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	645a      	str	r2, [r3, #68]	@ 0x44
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e000      	b.n	800a000 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009ffe:	2302      	movs	r3, #2
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	ffff0000 	.word	0xffff0000
 800a00c:	0800a781 	.word	0x0800a781
 800a010:	0800b933 	.word	0x0800b933
 800a014:	0800b9c9 	.word	0x0800b9c9
 800a018:	80002000 	.word	0x80002000

0800a01c <HAL_I2C_IsDeviceReady>:
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	@ 0x28
 800a020:	af02      	add	r7, sp, #8
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	460b      	mov	r3, r1
 800a02a:	817b      	strh	r3, [r7, #10]
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b20      	cmp	r3, #32
 800a03a:	f040 80d2 	bne.w	800a1e2 <HAL_I2C_IsDeviceReady+0x1c6>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a04c:	d101      	bne.n	800a052 <HAL_I2C_IsDeviceReady+0x36>
 800a04e:	2302      	movs	r3, #2
 800a050:	e0c8      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_I2C_IsDeviceReady+0x44>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e0c1      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2224      	movs	r2, #36	@ 0x24
 800a06c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	645a      	str	r2, [r3, #68]	@ 0x44
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d105      	bne.n	800a08a <HAL_I2C_IsDeviceReady+0x6e>
 800a07e:	897b      	ldrh	r3, [r7, #10]
 800a080:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a084:	4b59      	ldr	r3, [pc, #356]	@ (800a1ec <HAL_I2C_IsDeviceReady+0x1d0>)
 800a086:	4313      	orrs	r3, r2
 800a088:	e004      	b.n	800a094 <HAL_I2C_IsDeviceReady+0x78>
 800a08a:	897b      	ldrh	r3, [r7, #10]
 800a08c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a090:	4b57      	ldr	r3, [pc, #348]	@ (800a1f0 <HAL_I2C_IsDeviceReady+0x1d4>)
 800a092:	4313      	orrs	r3, r2
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	6053      	str	r3, [r2, #4]
 800a09a:	f7fa febd 	bl	8004e18 <HAL_GetTick>
 800a09e:	61b8      	str	r0, [r7, #24]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	f003 0320 	and.w	r3, r3, #32
 800a0aa:	2b20      	cmp	r3, #32
 800a0ac:	bf0c      	ite	eq
 800a0ae:	2301      	moveq	r3, #1
 800a0b0:	2300      	movne	r3, #0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2301      	moveq	r3, #1
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	77bb      	strb	r3, [r7, #30]
 800a0cc:	e034      	b.n	800a138 <HAL_I2C_IsDeviceReady+0x11c>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d4:	d01a      	beq.n	800a10c <HAL_I2C_IsDeviceReady+0xf0>
 800a0d6:	f7fa fe9f 	bl	8004e18 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d302      	bcc.n	800a0ec <HAL_I2C_IsDeviceReady+0xd0>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10f      	bne.n	800a10c <HAL_I2C_IsDeviceReady+0xf0>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f8:	f043 0220 	orr.w	r2, r3, #32
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	645a      	str	r2, [r3, #68]	@ 0x44
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a108:	2301      	movs	r3, #1
 800a10a:	e06b      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b20      	cmp	r3, #32
 800a118:	bf0c      	ite	eq
 800a11a:	2301      	moveq	r3, #1
 800a11c:	2300      	movne	r3, #0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	77fb      	strb	r3, [r7, #31]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	2b10      	cmp	r3, #16
 800a12e:	bf0c      	ite	eq
 800a130:	2301      	moveq	r3, #1
 800a132:	2300      	movne	r3, #0
 800a134:	b2db      	uxtb	r3, r3
 800a136:	77bb      	strb	r3, [r7, #30]
 800a138:	7ffb      	ldrb	r3, [r7, #31]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d102      	bne.n	800a144 <HAL_I2C_IsDeviceReady+0x128>
 800a13e:	7fbb      	ldrb	r3, [r7, #30]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0c4      	beq.n	800a0ce <HAL_I2C_IsDeviceReady+0xb2>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f003 0310 	and.w	r3, r3, #16
 800a14e:	2b10      	cmp	r3, #16
 800a150:	d01a      	beq.n	800a188 <HAL_I2C_IsDeviceReady+0x16c>
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2200      	movs	r2, #0
 800a15a:	2120      	movs	r1, #32
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f001 fd8b 	bl	800bc78 <I2C_WaitOnFlagUntilTimeout>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <HAL_I2C_IsDeviceReady+0x150>
 800a168:	2301      	movs	r3, #1
 800a16a:	e03b      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2220      	movs	r2, #32
 800a172:	61da      	str	r2, [r3, #28]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a184:	2300      	movs	r3, #0
 800a186:	e02d      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2200      	movs	r2, #0
 800a190:	2120      	movs	r1, #32
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f001 fd70 	bl	800bc78 <I2C_WaitOnFlagUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <HAL_I2C_IsDeviceReady+0x186>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e020      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2210      	movs	r2, #16
 800a1a8:	61da      	str	r2, [r3, #28]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	61da      	str	r2, [r3, #28]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	f63f af5a 	bhi.w	800a076 <HAL_I2C_IsDeviceReady+0x5a>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ce:	f043 0220 	orr.w	r2, r3, #32
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	645a      	str	r2, [r3, #68]	@ 0x44
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <HAL_I2C_IsDeviceReady+0x1c8>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	02002000 	.word	0x02002000
 800a1f0:	02002800 	.word	0x02002800

0800a1f4 <HAL_I2C_EV_IRQHandler>:
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60bb      	str	r3, [r7, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <HAL_I2C_EV_IRQHandler+0x2c>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	68f9      	ldr	r1, [r7, #12]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_I2C_ER_IRQHandler>:
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	613b      	str	r3, [r7, #16]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00f      	beq.n	800a26a <HAL_I2C_ER_IRQHandler+0x42>
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00a      	beq.n	800a26a <HAL_I2C_ER_IRQHandler+0x42>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a258:	f043 0201 	orr.w	r2, r3, #1
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	645a      	str	r2, [r3, #68]	@ 0x44
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a268:	61da      	str	r2, [r3, #28]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00f      	beq.n	800a294 <HAL_I2C_ER_IRQHandler+0x6c>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <HAL_I2C_ER_IRQHandler+0x6c>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a282:	f043 0208 	orr.w	r2, r3, #8
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	645a      	str	r2, [r3, #68]	@ 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a292:	61da      	str	r2, [r3, #28]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00f      	beq.n	800a2be <HAL_I2C_ER_IRQHandler+0x96>
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <HAL_I2C_ER_IRQHandler+0x96>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ac:	f043 0202 	orr.w	r2, r3, #2
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	645a      	str	r2, [r3, #68]	@ 0x44
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2bc:	61da      	str	r2, [r3, #28]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 030b 	and.w	r3, r3, #11
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <HAL_I2C_ER_IRQHandler+0xae>
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 f9f1 	bl	800b6b8 <I2C_ITError>
 800a2d6:	bf00      	nop
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_I2C_MasterTxCpltCallback>:
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <HAL_I2C_MasterRxCpltCallback>:
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	bf00      	nop
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <HAL_I2C_SlaveTxCpltCallback>:
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	bf00      	nop
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <HAL_I2C_SlaveRxCpltCallback>:
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_I2C_AddrCallback>:
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
 800a33a:	4613      	mov	r3, r2
 800a33c:	803b      	strh	r3, [r7, #0]
 800a33e:	bf00      	nop
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <HAL_I2C_ListenCpltCallback>:
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <HAL_I2C_MemRxCpltCallback>:
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <HAL_I2C_ErrorCallback>:
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <HAL_I2C_AbortCpltCallback>:
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_I2C_GetState>:
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <I2C_Slave_ISR_IT>:
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b086      	sub	sp, #24
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	613b      	str	r3, [r7, #16]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d101      	bne.n	800a3da <I2C_Slave_ISR_IT+0x24>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e0e2      	b.n	800a5a0 <I2C_Slave_ISR_IT+0x1ea>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d009      	beq.n	800a400 <I2C_Slave_ISR_IT+0x4a>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d004      	beq.n	800a400 <I2C_Slave_ISR_IT+0x4a>
 800a3f6:	6939      	ldr	r1, [r7, #16]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 feaf 	bl	800b15c <I2C_ITSlaveCplt>
 800a3fe:	e0ca      	b.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f003 0310 	and.w	r3, r3, #16
 800a406:	2b00      	cmp	r3, #0
 800a408:	d04b      	beq.n	800a4a2 <I2C_Slave_ISR_IT+0xec>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b00      	cmp	r3, #0
 800a412:	d046      	beq.n	800a4a2 <I2C_Slave_ISR_IT+0xec>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d128      	bne.n	800a470 <I2C_Slave_ISR_IT+0xba>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b28      	cmp	r3, #40	@ 0x28
 800a428:	d108      	bne.n	800a43c <I2C_Slave_ISR_IT+0x86>
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a430:	d104      	bne.n	800a43c <I2C_Slave_ISR_IT+0x86>
 800a432:	6939      	ldr	r1, [r7, #16]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f001 f8e9 	bl	800b60c <I2C_ITListenCplt>
 800a43a:	e031      	b.n	800a4a0 <I2C_Slave_ISR_IT+0xea>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b29      	cmp	r3, #41	@ 0x29
 800a446:	d10e      	bne.n	800a466 <I2C_Slave_ISR_IT+0xb0>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a44e:	d00a      	beq.n	800a466 <I2C_Slave_ISR_IT+0xb0>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2210      	movs	r2, #16
 800a456:	61da      	str	r2, [r3, #28]
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f001 fa46 	bl	800b8ea <I2C_Flush_TXDR>
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 fd51 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800a464:	e01c      	b.n	800a4a0 <I2C_Slave_ISR_IT+0xea>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2210      	movs	r2, #16
 800a46c:	61da      	str	r2, [r3, #28]
 800a46e:	e08f      	b.n	800a590 <I2C_Slave_ISR_IT+0x1da>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2210      	movs	r2, #16
 800a476:	61da      	str	r2, [r3, #28]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47c:	f043 0204 	orr.w	r2, r3, #4
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	645a      	str	r2, [r3, #68]	@ 0x44
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <I2C_Slave_ISR_IT+0xdc>
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a490:	d17e      	bne.n	800a590 <I2C_Slave_ISR_IT+0x1da>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a496:	4619      	mov	r1, r3
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f001 f90d 	bl	800b6b8 <I2C_ITError>
 800a49e:	e077      	b.n	800a590 <I2C_Slave_ISR_IT+0x1da>
 800a4a0:	e076      	b.n	800a590 <I2C_Slave_ISR_IT+0x1da>
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d02f      	beq.n	800a50c <I2C_Slave_ISR_IT+0x156>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d02a      	beq.n	800a50c <I2C_Slave_ISR_IT+0x156>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d018      	beq.n	800a4f2 <I2C_Slave_ISR_IT+0x13c>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ca:	b2d2      	uxtb	r2, r2
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d14b      	bne.n	800a594 <I2C_Slave_ISR_IT+0x1de>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a502:	d047      	beq.n	800a594 <I2C_Slave_ISR_IT+0x1de>
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 fcfe 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800a50a:	e043      	b.n	800a594 <I2C_Slave_ISR_IT+0x1de>
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f003 0308 	and.w	r3, r3, #8
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <I2C_Slave_ISR_IT+0x174>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <I2C_Slave_ISR_IT+0x174>
 800a520:	6939      	ldr	r1, [r7, #16]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 fc2c 	bl	800ad80 <I2C_ITAddrCplt>
 800a528:	e035      	b.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d030      	beq.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d02b      	beq.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d018      	beq.n	800a57a <I2C_Slave_ISR_IT+0x1c4>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	629a      	str	r2, [r3, #40]	@ 0x28
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a578:	e00d      	b.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a580:	d002      	beq.n	800a588 <I2C_Slave_ISR_IT+0x1d2>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fcbc 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800a58e:	e002      	b.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a590:	bf00      	nop
 800a592:	e000      	b.n	800a596 <I2C_Slave_ISR_IT+0x1e0>
 800a594:	bf00      	nop
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <I2C_Master_ISR_DMA>:
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <I2C_Master_ISR_DMA+0x1a>
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e0d9      	b.n	800a776 <I2C_Master_ISR_DMA+0x1ce>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d016      	beq.n	800a602 <I2C_Master_ISR_DMA+0x5a>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d011      	beq.n	800a602 <I2C_Master_ISR_DMA+0x5a>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2210      	movs	r2, #16
 800a5e4:	61da      	str	r2, [r3, #28]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ea:	f043 0204 	orr.w	r2, r3, #4
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	645a      	str	r2, [r3, #68]	@ 0x44
 800a5f2:	2120      	movs	r1, #32
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f001 fcab 	bl	800bf50 <I2C_Enable_IRQ>
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f001 f975 	bl	800b8ea <I2C_Flush_TXDR>
 800a600:	e0b4      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d071      	beq.n	800a6f0 <I2C_Master_ISR_DMA+0x148>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a612:	2b00      	cmp	r3, #0
 800a614:	d06c      	beq.n	800a6f0 <I2C_Master_ISR_DMA+0x148>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d04e      	beq.n	800a6ce <I2C_Master_ISR_DMA+0x126>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	b29b      	uxth	r3, r3
 800a638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a63c:	827b      	strh	r3, [r7, #18]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a642:	b29b      	uxth	r3, r3
 800a644:	2bff      	cmp	r3, #255	@ 0xff
 800a646:	d906      	bls.n	800a656 <I2C_Master_ISR_DMA+0xae>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	22ff      	movs	r2, #255	@ 0xff
 800a64c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a64e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	e010      	b.n	800a678 <I2C_Master_ISR_DMA+0xd0>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a664:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a668:	d003      	beq.n	800a672 <I2C_Master_ISR_DMA+0xca>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	e002      	b.n	800a678 <I2C_Master_ISR_DMA+0xd0>
 800a672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	8a79      	ldrh	r1, [r7, #18]
 800a680:	2300      	movs	r3, #0
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f001 fc30 	bl	800beec <I2C_TransferConfig>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	b29a      	uxth	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b22      	cmp	r3, #34	@ 0x22
 800a6a8:	d108      	bne.n	800a6bc <I2C_Master_ISR_DMA+0x114>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e057      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	e04e      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6dc:	d003      	beq.n	800a6e6 <I2C_Master_ISR_DMA+0x13e>
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 fbd2 	bl	800ae88 <I2C_ITMasterSeqCplt>
 800a6e4:	e042      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a6e6:	2140      	movs	r1, #64	@ 0x40
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 ffe5 	bl	800b6b8 <I2C_ITError>
 800a6ee:	e03d      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d028      	beq.n	800a74c <I2C_Master_ISR_DMA+0x1a4>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a700:	2b00      	cmp	r3, #0
 800a702:	d023      	beq.n	800a74c <I2C_Master_ISR_DMA+0x1a4>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d119      	bne.n	800a742 <I2C_Master_ISR_DMA+0x19a>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a71c:	d025      	beq.n	800a76a <I2C_Master_ISR_DMA+0x1c2>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a722:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a726:	d108      	bne.n	800a73a <I2C_Master_ISR_DMA+0x192>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a736:	605a      	str	r2, [r3, #4]
 800a738:	e017      	b.n	800a76a <I2C_Master_ISR_DMA+0x1c2>
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fba4 	bl	800ae88 <I2C_ITMasterSeqCplt>
 800a740:	e013      	b.n	800a76a <I2C_Master_ISR_DMA+0x1c2>
 800a742:	2140      	movs	r1, #64	@ 0x40
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 ffb7 	bl	800b6b8 <I2C_ITError>
 800a74a:	e00e      	b.n	800a76a <I2C_Master_ISR_DMA+0x1c2>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fc2e 	bl	800afc4 <I2C_ITMasterCplt>
 800a768:	e000      	b.n	800a76c <I2C_Master_ISR_DMA+0x1c4>
 800a76a:	bf00      	nop
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a774:	2300      	movs	r3, #0
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <I2C_Mem_ISR_DMA>:
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	4b8d      	ldr	r3, [pc, #564]	@ (800a9c4 <I2C_Mem_ISR_DMA+0x244>)
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <I2C_Mem_ISR_DMA+0x1e>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e10e      	b.n	800a9bc <I2C_Mem_ISR_DMA+0x23c>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d016      	beq.n	800a7de <I2C_Mem_ISR_DMA+0x5e>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d011      	beq.n	800a7de <I2C_Mem_ISR_DMA+0x5e>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	61da      	str	r2, [r3, #28]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c6:	f043 0204 	orr.w	r2, r3, #4
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	645a      	str	r2, [r3, #68]	@ 0x44
 800a7ce:	2120      	movs	r1, #32
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f001 fbbd 	bl	800bf50 <I2C_Enable_IRQ>
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f001 f887 	bl	800b8ea <I2C_Flush_TXDR>
 800a7dc:	e0e9      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00e      	beq.n	800a806 <I2C_Mem_ISR_DMA+0x86>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <I2C_Mem_ISR_DMA+0x86>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a7fa:	629a      	str	r2, [r3, #40]	@ 0x28
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	651a      	str	r2, [r3, #80]	@ 0x50
 800a804:	e0d5      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d05f      	beq.n	800a8d0 <I2C_Mem_ISR_DMA+0x150>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d05a      	beq.n	800a8d0 <I2C_Mem_ISR_DMA+0x150>
 800a81a:	2101      	movs	r1, #1
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f001 fc1b 	bl	800c058 <I2C_Disable_IRQ>
 800a822:	2110      	movs	r1, #16
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f001 fb93 	bl	800bf50 <I2C_Enable_IRQ>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d048      	beq.n	800a8c6 <I2C_Mem_ISR_DMA+0x146>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a838:	b29b      	uxth	r3, r3
 800a83a:	2bff      	cmp	r3, #255	@ 0xff
 800a83c:	d910      	bls.n	800a860 <I2C_Mem_ISR_DMA+0xe0>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	22ff      	movs	r2, #255	@ 0xff
 800a842:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a848:	b299      	uxth	r1, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	2300      	movs	r3, #0
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f001 fb47 	bl	800beec <I2C_TransferConfig>
 800a85e:	e011      	b.n	800a884 <I2C_Mem_ISR_DMA+0x104>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a864:	b29a      	uxth	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a86e:	b299      	uxth	r1, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a874:	b2da      	uxtb	r2, r3
 800a876:	2300      	movs	r3, #0
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 fb34 	bl	800beec <I2C_TransferConfig>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a888:	b29a      	uxth	r2, r3
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b22      	cmp	r3, #34	@ 0x22
 800a8a0:	d108      	bne.n	800a8b4 <I2C_Mem_ISR_DMA+0x134>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	e07e      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	e075      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a8c6:	2140      	movs	r1, #64	@ 0x40
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fef5 	bl	800b6b8 <I2C_ITError>
 800a8ce:	e070      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d05d      	beq.n	800a996 <I2C_Mem_ISR_DMA+0x216>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d058      	beq.n	800a996 <I2C_Mem_ISR_DMA+0x216>
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f001 fbb6 	bl	800c058 <I2C_Disable_IRQ>
 800a8ec:	2110      	movs	r1, #16
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f001 fb2e 	bl	800bf50 <I2C_Enable_IRQ>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b22      	cmp	r3, #34	@ 0x22
 800a8fe:	d101      	bne.n	800a904 <I2C_Mem_ISR_DMA+0x184>
 800a900:	4b31      	ldr	r3, [pc, #196]	@ (800a9c8 <I2C_Mem_ISR_DMA+0x248>)
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a908:	b29b      	uxth	r3, r3
 800a90a:	2bff      	cmp	r3, #255	@ 0xff
 800a90c:	d910      	bls.n	800a930 <I2C_Mem_ISR_DMA+0x1b0>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	22ff      	movs	r2, #255	@ 0xff
 800a912:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a918:	b299      	uxth	r1, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f001 fadf 	bl	800beec <I2C_TransferConfig>
 800a92e:	e011      	b.n	800a954 <I2C_Mem_ISR_DMA+0x1d4>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a934:	b29a      	uxth	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93e:	b299      	uxth	r1, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a944:	b2da      	uxtb	r2, r3
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 facc 	bl	800beec <I2C_TransferConfig>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	b29a      	uxth	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b22      	cmp	r3, #34	@ 0x22
 800a970:	d108      	bne.n	800a984 <I2C_Mem_ISR_DMA+0x204>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e016      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	e00d      	b.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f003 0320 	and.w	r3, r3, #32
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <I2C_Mem_ISR_DMA+0x232>
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 fb09 	bl	800afc4 <I2C_ITMasterCplt>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	80002000 	.word	0x80002000
 800a9c8:	80002400 	.word	0x80002400

0800a9cc <I2C_Slave_ISR_DMA>:
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d101      	bne.n	800a9f0 <I2C_Slave_ISR_DMA+0x24>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e1c2      	b.n	800ad76 <I2C_Slave_ISR_DMA+0x3aa>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <I2C_Slave_ISR_DMA+0x4a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f003 0320 	and.w	r3, r3, #32
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d004      	beq.n	800aa16 <I2C_Slave_ISR_DMA+0x4a>
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 fba4 	bl	800b15c <I2C_ITSlaveCplt>
 800aa14:	e1aa      	b.n	800ad6c <I2C_Slave_ISR_DMA+0x3a0>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8197 	beq.w	800ad50 <I2C_Slave_ISR_DMA+0x384>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 8191 	beq.w	800ad50 <I2C_Slave_ISR_DMA+0x384>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <I2C_Slave_ISR_DMA+0x78>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 817f 	beq.w	800ad42 <I2C_Slave_ISR_DMA+0x376>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d07b      	beq.n	800ab44 <I2C_Slave_ISR_DMA+0x178>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d076      	beq.n	800ab44 <I2C_Slave_ISR_DMA+0x178>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a74      	ldr	r2, [pc, #464]	@ (800ac30 <I2C_Slave_ISR_DMA+0x264>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d059      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a72      	ldr	r2, [pc, #456]	@ (800ac34 <I2C_Slave_ISR_DMA+0x268>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d053      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a70      	ldr	r2, [pc, #448]	@ (800ac38 <I2C_Slave_ISR_DMA+0x26c>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d04d      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a6e      	ldr	r2, [pc, #440]	@ (800ac3c <I2C_Slave_ISR_DMA+0x270>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d047      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a6c      	ldr	r2, [pc, #432]	@ (800ac40 <I2C_Slave_ISR_DMA+0x274>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d041      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a6a      	ldr	r2, [pc, #424]	@ (800ac44 <I2C_Slave_ISR_DMA+0x278>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d03b      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a68      	ldr	r2, [pc, #416]	@ (800ac48 <I2C_Slave_ISR_DMA+0x27c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d035      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a66      	ldr	r2, [pc, #408]	@ (800ac4c <I2C_Slave_ISR_DMA+0x280>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d02f      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a64      	ldr	r2, [pc, #400]	@ (800ac50 <I2C_Slave_ISR_DMA+0x284>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d029      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a62      	ldr	r2, [pc, #392]	@ (800ac54 <I2C_Slave_ISR_DMA+0x288>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d023      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a60      	ldr	r2, [pc, #384]	@ (800ac58 <I2C_Slave_ISR_DMA+0x28c>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01d      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a5e      	ldr	r2, [pc, #376]	@ (800ac5c <I2C_Slave_ISR_DMA+0x290>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d017      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a5c      	ldr	r2, [pc, #368]	@ (800ac60 <I2C_Slave_ISR_DMA+0x294>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d011      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a5a      	ldr	r2, [pc, #360]	@ (800ac64 <I2C_Slave_ISR_DMA+0x298>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00b      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a58      	ldr	r2, [pc, #352]	@ (800ac68 <I2C_Slave_ISR_DMA+0x29c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d005      	beq.n	800ab16 <I2C_Slave_ISR_DMA+0x14a>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a56      	ldr	r2, [pc, #344]	@ (800ac6c <I2C_Slave_ISR_DMA+0x2a0>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d109      	bne.n	800ab2a <I2C_Slave_ISR_DMA+0x15e>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf0c      	ite	eq
 800ab22:	2301      	moveq	r3, #1
 800ab24:	2300      	movne	r3, #0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	e008      	b.n	800ab3c <I2C_Slave_ISR_DMA+0x170>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bf0c      	ite	eq
 800ab36:	2301      	moveq	r3, #1
 800ab38:	2300      	movne	r3, #0
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <I2C_Slave_ISR_DMA+0x178>
 800ab40:	2301      	movs	r3, #1
 800ab42:	61fb      	str	r3, [r7, #28]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 809e 	beq.w	800ac8a <I2C_Slave_ISR_DMA+0x2be>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8098 	beq.w	800ac8a <I2C_Slave_ISR_DMA+0x2be>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a33      	ldr	r2, [pc, #204]	@ (800ac30 <I2C_Slave_ISR_DMA+0x264>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d059      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a31      	ldr	r2, [pc, #196]	@ (800ac34 <I2C_Slave_ISR_DMA+0x268>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d053      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a2f      	ldr	r2, [pc, #188]	@ (800ac38 <I2C_Slave_ISR_DMA+0x26c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d04d      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a2d      	ldr	r2, [pc, #180]	@ (800ac3c <I2C_Slave_ISR_DMA+0x270>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d047      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2b      	ldr	r2, [pc, #172]	@ (800ac40 <I2C_Slave_ISR_DMA+0x274>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d041      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a29      	ldr	r2, [pc, #164]	@ (800ac44 <I2C_Slave_ISR_DMA+0x278>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d03b      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a27      	ldr	r2, [pc, #156]	@ (800ac48 <I2C_Slave_ISR_DMA+0x27c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d035      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a25      	ldr	r2, [pc, #148]	@ (800ac4c <I2C_Slave_ISR_DMA+0x280>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d02f      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a23      	ldr	r2, [pc, #140]	@ (800ac50 <I2C_Slave_ISR_DMA+0x284>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d029      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a21      	ldr	r2, [pc, #132]	@ (800ac54 <I2C_Slave_ISR_DMA+0x288>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d023      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a1f      	ldr	r2, [pc, #124]	@ (800ac58 <I2C_Slave_ISR_DMA+0x28c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d01d      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac5c <I2C_Slave_ISR_DMA+0x290>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d017      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a1b      	ldr	r2, [pc, #108]	@ (800ac60 <I2C_Slave_ISR_DMA+0x294>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d011      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a19      	ldr	r2, [pc, #100]	@ (800ac64 <I2C_Slave_ISR_DMA+0x298>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00b      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a17      	ldr	r2, [pc, #92]	@ (800ac68 <I2C_Slave_ISR_DMA+0x29c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d005      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x24e>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a15      	ldr	r2, [pc, #84]	@ (800ac6c <I2C_Slave_ISR_DMA+0x2a0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d12a      	bne.n	800ac70 <I2C_Slave_ISR_DMA+0x2a4>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bf0c      	ite	eq
 800ac26:	2301      	moveq	r3, #1
 800ac28:	2300      	movne	r3, #0
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	e029      	b.n	800ac82 <I2C_Slave_ISR_DMA+0x2b6>
 800ac2e:	bf00      	nop
 800ac30:	40020010 	.word	0x40020010
 800ac34:	40020028 	.word	0x40020028
 800ac38:	40020040 	.word	0x40020040
 800ac3c:	40020058 	.word	0x40020058
 800ac40:	40020070 	.word	0x40020070
 800ac44:	40020088 	.word	0x40020088
 800ac48:	400200a0 	.word	0x400200a0
 800ac4c:	400200b8 	.word	0x400200b8
 800ac50:	40020410 	.word	0x40020410
 800ac54:	40020428 	.word	0x40020428
 800ac58:	40020440 	.word	0x40020440
 800ac5c:	40020458 	.word	0x40020458
 800ac60:	40020470 	.word	0x40020470
 800ac64:	40020488 	.word	0x40020488
 800ac68:	400204a0 	.word	0x400204a0
 800ac6c:	400204b8 	.word	0x400204b8
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2301      	moveq	r3, #1
 800ac7e:	2300      	movne	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <I2C_Slave_ISR_DMA+0x2be>
 800ac86:	2301      	movs	r3, #1
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d128      	bne.n	800ace2 <I2C_Slave_ISR_DMA+0x316>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b28      	cmp	r3, #40	@ 0x28
 800ac9a:	d108      	bne.n	800acae <I2C_Slave_ISR_DMA+0x2e2>
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aca2:	d104      	bne.n	800acae <I2C_Slave_ISR_DMA+0x2e2>
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 fcb0 	bl	800b60c <I2C_ITListenCplt>
 800acac:	e048      	b.n	800ad40 <I2C_Slave_ISR_DMA+0x374>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b29      	cmp	r3, #41	@ 0x29
 800acb8:	d10e      	bne.n	800acd8 <I2C_Slave_ISR_DMA+0x30c>
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800acc0:	d00a      	beq.n	800acd8 <I2C_Slave_ISR_DMA+0x30c>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2210      	movs	r2, #16
 800acc8:	61da      	str	r2, [r3, #28]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fe0d 	bl	800b8ea <I2C_Flush_TXDR>
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f918 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800acd6:	e033      	b.n	800ad40 <I2C_Slave_ISR_DMA+0x374>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2210      	movs	r2, #16
 800acde:	61da      	str	r2, [r3, #28]
 800ace0:	e034      	b.n	800ad4c <I2C_Slave_ISR_DMA+0x380>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2210      	movs	r2, #16
 800ace8:	61da      	str	r2, [r3, #28]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acee:	f043 0204 	orr.w	r2, r3, #4
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	645a      	str	r2, [r3, #68]	@ 0x44
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acfc:	75fb      	strb	r3, [r7, #23]
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <I2C_Slave_ISR_DMA+0x340>
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad0a:	d11f      	bne.n	800ad4c <I2C_Slave_ISR_DMA+0x380>
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	2b21      	cmp	r3, #33	@ 0x21
 800ad10:	d002      	beq.n	800ad18 <I2C_Slave_ISR_DMA+0x34c>
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2b29      	cmp	r3, #41	@ 0x29
 800ad16:	d103      	bne.n	800ad20 <I2C_Slave_ISR_DMA+0x354>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2221      	movs	r2, #33	@ 0x21
 800ad1c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad1e:	e008      	b.n	800ad32 <I2C_Slave_ISR_DMA+0x366>
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b22      	cmp	r3, #34	@ 0x22
 800ad24:	d002      	beq.n	800ad2c <I2C_Slave_ISR_DMA+0x360>
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad2a:	d102      	bne.n	800ad32 <I2C_Slave_ISR_DMA+0x366>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2222      	movs	r2, #34	@ 0x22
 800ad30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad36:	4619      	mov	r1, r3
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 fcbd 	bl	800b6b8 <I2C_ITError>
 800ad3e:	e005      	b.n	800ad4c <I2C_Slave_ISR_DMA+0x380>
 800ad40:	e004      	b.n	800ad4c <I2C_Slave_ISR_DMA+0x380>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2210      	movs	r2, #16
 800ad48:	61da      	str	r2, [r3, #28]
 800ad4a:	e00f      	b.n	800ad6c <I2C_Slave_ISR_DMA+0x3a0>
 800ad4c:	bf00      	nop
 800ad4e:	e00d      	b.n	800ad6c <I2C_Slave_ISR_DMA+0x3a0>
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d008      	beq.n	800ad6c <I2C_Slave_ISR_DMA+0x3a0>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <I2C_Slave_ISR_DMA+0x3a0>
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 f80a 	bl	800ad80 <I2C_ITAddrCplt>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad74:	2300      	movs	r3, #0
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop

0800ad80 <I2C_ITAddrCplt>:
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ad96:	2b28      	cmp	r3, #40	@ 0x28
 800ad98:	d16a      	bne.n	800ae70 <I2C_ITAddrCplt+0xf0>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	0c1b      	lsrs	r3, r3, #16
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	73fb      	strb	r3, [r7, #15]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800adb8:	81bb      	strh	r3, [r7, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adc6:	817b      	strh	r3, [r7, #10]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800add4:	813b      	strh	r3, [r7, #8]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	2b02      	cmp	r3, #2
 800addc:	d138      	bne.n	800ae50 <I2C_ITAddrCplt+0xd0>
 800adde:	897b      	ldrh	r3, [r7, #10]
 800ade0:	09db      	lsrs	r3, r3, #7
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	89bb      	ldrh	r3, [r7, #12]
 800ade6:	4053      	eors	r3, r2
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f003 0306 	and.w	r3, r3, #6
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d11c      	bne.n	800ae2c <I2C_ITAddrCplt+0xac>
 800adf2:	897b      	ldrh	r3, [r7, #10]
 800adf4:	81bb      	strh	r3, [r7, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	649a      	str	r2, [r3, #72]	@ 0x48
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d13b      	bne.n	800ae80 <I2C_ITAddrCplt+0x100>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	649a      	str	r2, [r3, #72]	@ 0x48
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2208      	movs	r2, #8
 800ae14:	61da      	str	r2, [r3, #28]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae22:	89ba      	ldrh	r2, [r7, #12]
 800ae24:	7bf9      	ldrb	r1, [r7, #15]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	e029      	b.n	800ae80 <I2C_ITAddrCplt+0x100>
 800ae2c:	893b      	ldrh	r3, [r7, #8]
 800ae2e:	81bb      	strh	r3, [r7, #12]
 800ae30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 f90f 	bl	800c058 <I2C_Disable_IRQ>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae46:	89ba      	ldrh	r2, [r7, #12]
 800ae48:	7bf9      	ldrb	r1, [r7, #15]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
 800ae4e:	e017      	b.n	800ae80 <I2C_ITAddrCplt+0x100>
 800ae50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 f8ff 	bl	800c058 <I2C_Disable_IRQ>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae66:	89ba      	ldrh	r2, [r7, #12]
 800ae68:	7bf9      	ldrb	r1, [r7, #15]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
 800ae6e:	e007      	b.n	800ae80 <I2C_ITAddrCplt+0x100>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2208      	movs	r2, #8
 800ae76:	61da      	str	r2, [r3, #28]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae80:	bf00      	nop
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <I2C_ITMasterSeqCplt>:
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b21      	cmp	r3, #33	@ 0x21
 800aea2:	d116      	bne.n	800aed2 <I2C_ITMasterSeqCplt+0x4a>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2211      	movs	r2, #17
 800aeb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	635a      	str	r2, [r3, #52]	@ 0x34
 800aeb8:	2101      	movs	r1, #1
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 f8cc 	bl	800c058 <I2C_Disable_IRQ>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	4798      	blx	r3
 800aed0:	e015      	b.n	800aefe <I2C_ITMasterSeqCplt+0x76>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2212      	movs	r2, #18
 800aede:	631a      	str	r2, [r3, #48]	@ 0x30
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	635a      	str	r2, [r3, #52]	@ 0x34
 800aee6:	2102      	movs	r1, #2
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 f8b5 	bl	800c058 <I2C_Disable_IRQ>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <I2C_ITSlaveSeqCplt>:
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d008      	beq.n	800af3a <I2C_ITSlaveSeqCplt+0x34>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e00c      	b.n	800af54 <I2C_ITSlaveSeqCplt+0x4e>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d007      	beq.n	800af54 <I2C_ITSlaveSeqCplt+0x4e>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b29      	cmp	r3, #41	@ 0x29
 800af5e:	d113      	bne.n	800af88 <I2C_ITSlaveSeqCplt+0x82>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2228      	movs	r2, #40	@ 0x28
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2221      	movs	r2, #33	@ 0x21
 800af6c:	631a      	str	r2, [r3, #48]	@ 0x30
 800af6e:	2101      	movs	r1, #1
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f871 	bl	800c058 <I2C_Disable_IRQ>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	4798      	blx	r3
 800af86:	e018      	b.n	800afba <I2C_ITSlaveSeqCplt+0xb4>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b2a      	cmp	r3, #42	@ 0x2a
 800af92:	d112      	bne.n	800afba <I2C_ITSlaveSeqCplt+0xb4>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2228      	movs	r2, #40	@ 0x28
 800af98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2222      	movs	r2, #34	@ 0x22
 800afa0:	631a      	str	r2, [r3, #48]	@ 0x30
 800afa2:	2102      	movs	r1, #2
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 f857 	bl	800c058 <I2C_Disable_IRQ>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <I2C_ITMasterCplt>:
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2220      	movs	r2, #32
 800afd8:	61da      	str	r2, [r3, #28]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b21      	cmp	r3, #33	@ 0x21
 800afe4:	d107      	bne.n	800aff6 <I2C_ITMasterCplt+0x32>
 800afe6:	2101      	movs	r1, #1
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 f835 	bl	800c058 <I2C_Disable_IRQ>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2211      	movs	r2, #17
 800aff2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aff4:	e00c      	b.n	800b010 <I2C_ITMasterCplt+0x4c>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b22      	cmp	r3, #34	@ 0x22
 800b000:	d106      	bne.n	800b010 <I2C_ITMasterCplt+0x4c>
 800b002:	2102      	movs	r1, #2
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f827 	bl	800c058 <I2C_Disable_IRQ>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2212      	movs	r2, #18
 800b00e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6859      	ldr	r1, [r3, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	4b4e      	ldr	r3, [pc, #312]	@ (800b154 <I2C_ITMasterCplt+0x190>)
 800b01c:	400b      	ands	r3, r1
 800b01e:	6053      	str	r3, [r2, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	635a      	str	r2, [r3, #52]	@ 0x34
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a4b      	ldr	r2, [pc, #300]	@ (800b158 <I2C_ITMasterCplt+0x194>)
 800b02a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b00      	cmp	r3, #0
 800b034:	d009      	beq.n	800b04a <I2C_ITMasterCplt+0x86>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2210      	movs	r2, #16
 800b03c:	61da      	str	r2, [r3, #28]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b042:	f043 0204 	orr.w	r2, r3, #4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	645a      	str	r2, [r3, #68]	@ 0x44
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b60      	cmp	r3, #96	@ 0x60
 800b054:	d10a      	bne.n	800b06c <I2C_ITMasterCplt+0xa8>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d005      	beq.n	800b06c <I2C_ITMasterCplt+0xa8>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b066:	b2db      	uxtb	r3, r3
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fc3c 	bl	800b8ea <I2C_Flush_TXDR>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b076:	613b      	str	r3, [r7, #16]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b60      	cmp	r3, #96	@ 0x60
 800b082:	d002      	beq.n	800b08a <I2C_ITMasterCplt+0xc6>
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d006      	beq.n	800b098 <I2C_ITMasterCplt+0xd4>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fb11 	bl	800b6b8 <I2C_ITError>
 800b096:	e058      	b.n	800b14a <I2C_ITMasterCplt+0x186>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b21      	cmp	r3, #33	@ 0x21
 800b0a2:	d126      	bne.n	800b0f2 <I2C_ITMasterCplt+0x12e>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b40      	cmp	r3, #64	@ 0x40
 800b0bc:	d10c      	bne.n	800b0d8 <I2C_ITMasterCplt+0x114>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3
 800b0d6:	e038      	b.n	800b14a <I2C_ITMasterCplt+0x186>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	4798      	blx	r3
 800b0f0:	e02b      	b.n	800b14a <I2C_ITMasterCplt+0x186>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b22      	cmp	r3, #34	@ 0x22
 800b0fc:	d125      	bne.n	800b14a <I2C_ITMasterCplt+0x186>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b40      	cmp	r3, #64	@ 0x40
 800b116:	d10c      	bne.n	800b132 <I2C_ITMasterCplt+0x16e>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	4798      	blx	r3
 800b130:	e00b      	b.n	800b14a <I2C_ITMasterCplt+0x186>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	4798      	blx	r3
 800b14a:	bf00      	nop
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	fe00e800 	.word	0xfe00e800
 800b158:	ffff0000 	.word	0xffff0000

0800b15c <I2C_ITSlaveCplt>:
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	613b      	str	r3, [r7, #16]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b17e:	72fb      	strb	r3, [r7, #11]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2220      	movs	r2, #32
 800b186:	61da      	str	r2, [r3, #28]
 800b188:	7afb      	ldrb	r3, [r7, #11]
 800b18a:	2b21      	cmp	r3, #33	@ 0x21
 800b18c:	d002      	beq.n	800b194 <I2C_ITSlaveCplt+0x38>
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	2b29      	cmp	r3, #41	@ 0x29
 800b192:	d108      	bne.n	800b1a6 <I2C_ITSlaveCplt+0x4a>
 800b194:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 ff5d 	bl	800c058 <I2C_Disable_IRQ>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2221      	movs	r2, #33	@ 0x21
 800b1a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1a4:	e019      	b.n	800b1da <I2C_ITSlaveCplt+0x7e>
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	2b22      	cmp	r3, #34	@ 0x22
 800b1aa:	d002      	beq.n	800b1b2 <I2C_ITSlaveCplt+0x56>
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1b0:	d108      	bne.n	800b1c4 <I2C_ITSlaveCplt+0x68>
 800b1b2:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 ff4e 	bl	800c058 <I2C_Disable_IRQ>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2222      	movs	r2, #34	@ 0x22
 800b1c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1c2:	e00a      	b.n	800b1da <I2C_ITSlaveCplt+0x7e>
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	2b28      	cmp	r3, #40	@ 0x28
 800b1c8:	d107      	bne.n	800b1da <I2C_ITSlaveCplt+0x7e>
 800b1ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 ff42 	bl	800c058 <I2C_Disable_IRQ>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1e8:	605a      	str	r2, [r3, #4]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6859      	ldr	r1, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	4b7f      	ldr	r3, [pc, #508]	@ (800b3f4 <I2C_ITSlaveCplt+0x298>)
 800b1f6:	400b      	ands	r3, r1
 800b1f8:	6053      	str	r3, [r2, #4]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb75 	bl	800b8ea <I2C_Flush_TXDR>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b206:	2b00      	cmp	r3, #0
 800b208:	d07a      	beq.n	800b300 <I2C_ITSlaveCplt+0x1a4>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 8111 	beq.w	800b446 <I2C_ITSlaveCplt+0x2ea>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a73      	ldr	r2, [pc, #460]	@ (800b3f8 <I2C_ITSlaveCplt+0x29c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d059      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a71      	ldr	r2, [pc, #452]	@ (800b3fc <I2C_ITSlaveCplt+0x2a0>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d053      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a6f      	ldr	r2, [pc, #444]	@ (800b400 <I2C_ITSlaveCplt+0x2a4>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d04d      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a6d      	ldr	r2, [pc, #436]	@ (800b404 <I2C_ITSlaveCplt+0x2a8>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d047      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a6b      	ldr	r2, [pc, #428]	@ (800b408 <I2C_ITSlaveCplt+0x2ac>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d041      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a69      	ldr	r2, [pc, #420]	@ (800b40c <I2C_ITSlaveCplt+0x2b0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d03b      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a67      	ldr	r2, [pc, #412]	@ (800b410 <I2C_ITSlaveCplt+0x2b4>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d035      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a65      	ldr	r2, [pc, #404]	@ (800b414 <I2C_ITSlaveCplt+0x2b8>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d02f      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a63      	ldr	r2, [pc, #396]	@ (800b418 <I2C_ITSlaveCplt+0x2bc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d029      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a61      	ldr	r2, [pc, #388]	@ (800b41c <I2C_ITSlaveCplt+0x2c0>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d023      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a5f      	ldr	r2, [pc, #380]	@ (800b420 <I2C_ITSlaveCplt+0x2c4>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d01d      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a5d      	ldr	r2, [pc, #372]	@ (800b424 <I2C_ITSlaveCplt+0x2c8>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d017      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a5b      	ldr	r2, [pc, #364]	@ (800b428 <I2C_ITSlaveCplt+0x2cc>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d011      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a59      	ldr	r2, [pc, #356]	@ (800b42c <I2C_ITSlaveCplt+0x2d0>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00b      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a57      	ldr	r2, [pc, #348]	@ (800b430 <I2C_ITSlaveCplt+0x2d4>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d005      	beq.n	800b2e4 <I2C_ITSlaveCplt+0x188>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a55      	ldr	r2, [pc, #340]	@ (800b434 <I2C_ITSlaveCplt+0x2d8>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d105      	bne.n	800b2f0 <I2C_ITSlaveCplt+0x194>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	e004      	b.n	800b2fa <I2C_ITSlaveCplt+0x19e>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800b2fe:	e0a2      	b.n	800b446 <I2C_ITSlaveCplt+0x2ea>
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 809d 	beq.w	800b446 <I2C_ITSlaveCplt+0x2ea>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 8090 	beq.w	800b446 <I2C_ITSlaveCplt+0x2ea>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a32      	ldr	r2, [pc, #200]	@ (800b3f8 <I2C_ITSlaveCplt+0x29c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d059      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a30      	ldr	r2, [pc, #192]	@ (800b3fc <I2C_ITSlaveCplt+0x2a0>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d053      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a2e      	ldr	r2, [pc, #184]	@ (800b400 <I2C_ITSlaveCplt+0x2a4>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d04d      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a2c      	ldr	r2, [pc, #176]	@ (800b404 <I2C_ITSlaveCplt+0x2a8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d047      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a2a      	ldr	r2, [pc, #168]	@ (800b408 <I2C_ITSlaveCplt+0x2ac>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d041      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a28      	ldr	r2, [pc, #160]	@ (800b40c <I2C_ITSlaveCplt+0x2b0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d03b      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a26      	ldr	r2, [pc, #152]	@ (800b410 <I2C_ITSlaveCplt+0x2b4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d035      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a24      	ldr	r2, [pc, #144]	@ (800b414 <I2C_ITSlaveCplt+0x2b8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d02f      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a22      	ldr	r2, [pc, #136]	@ (800b418 <I2C_ITSlaveCplt+0x2bc>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d029      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a20      	ldr	r2, [pc, #128]	@ (800b41c <I2C_ITSlaveCplt+0x2c0>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d023      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b420 <I2C_ITSlaveCplt+0x2c4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d01d      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b424 <I2C_ITSlaveCplt+0x2c8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d017      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b428 <I2C_ITSlaveCplt+0x2cc>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d011      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a18      	ldr	r2, [pc, #96]	@ (800b42c <I2C_ITSlaveCplt+0x2d0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d00b      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a16      	ldr	r2, [pc, #88]	@ (800b430 <I2C_ITSlaveCplt+0x2d4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d005      	beq.n	800b3e6 <I2C_ITSlaveCplt+0x28a>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a14      	ldr	r2, [pc, #80]	@ (800b434 <I2C_ITSlaveCplt+0x2d8>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d128      	bne.n	800b438 <I2C_ITSlaveCplt+0x2dc>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	e027      	b.n	800b442 <I2C_ITSlaveCplt+0x2e6>
 800b3f2:	bf00      	nop
 800b3f4:	fe00e800 	.word	0xfe00e800
 800b3f8:	40020010 	.word	0x40020010
 800b3fc:	40020028 	.word	0x40020028
 800b400:	40020040 	.word	0x40020040
 800b404:	40020058 	.word	0x40020058
 800b408:	40020070 	.word	0x40020070
 800b40c:	40020088 	.word	0x40020088
 800b410:	400200a0 	.word	0x400200a0
 800b414:	400200b8 	.word	0x400200b8
 800b418:	40020410 	.word	0x40020410
 800b41c:	40020428 	.word	0x40020428
 800b420:	40020440 	.word	0x40020440
 800b424:	40020458 	.word	0x40020458
 800b428:	40020470 	.word	0x40020470
 800b42c:	40020488 	.word	0x40020488
 800b430:	400204a0 	.word	0x400204a0
 800b434:	400204b8 	.word	0x400204b8
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	b29b      	uxth	r3, r3
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d020      	beq.n	800b492 <I2C_ITSlaveCplt+0x336>
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f023 0304 	bic.w	r3, r3, #4
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00c      	beq.n	800b492 <I2C_ITSlaveCplt+0x336>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47c:	3b01      	subs	r3, #1
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b496:	b29b      	uxth	r3, r3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <I2C_ITSlaveCplt+0x34c>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4a0:	f043 0204 	orr.w	r2, r3, #4
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	645a      	str	r2, [r3, #68]	@ 0x44
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f003 0310 	and.w	r3, r3, #16
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d049      	beq.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f003 0310 	and.w	r3, r3, #16
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d044      	beq.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d128      	bne.n	800b518 <I2C_ITSlaveCplt+0x3bc>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b28      	cmp	r3, #40	@ 0x28
 800b4d0:	d108      	bne.n	800b4e4 <I2C_ITSlaveCplt+0x388>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4d8:	d104      	bne.n	800b4e4 <I2C_ITSlaveCplt+0x388>
 800b4da:	6979      	ldr	r1, [r7, #20]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f895 	bl	800b60c <I2C_ITListenCplt>
 800b4e2:	e030      	b.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b29      	cmp	r3, #41	@ 0x29
 800b4ee:	d10e      	bne.n	800b50e <I2C_ITSlaveCplt+0x3b2>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b4f6:	d00a      	beq.n	800b50e <I2C_ITSlaveCplt+0x3b2>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	61da      	str	r2, [r3, #28]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f9f2 	bl	800b8ea <I2C_Flush_TXDR>
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fcfd 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800b50c:	e01b      	b.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2210      	movs	r2, #16
 800b514:	61da      	str	r2, [r3, #28]
 800b516:	e016      	b.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2210      	movs	r2, #16
 800b51e:	61da      	str	r2, [r3, #28]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b524:	f043 0204 	orr.w	r2, r3, #4
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	645a      	str	r2, [r3, #68]	@ 0x44
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <I2C_ITSlaveCplt+0x3de>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b538:	d105      	bne.n	800b546 <I2C_ITSlaveCplt+0x3ea>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f8b9 	bl	800b6b8 <I2C_ITError>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	635a      	str	r2, [r3, #52]	@ 0x34
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d010      	beq.n	800b57e <I2C_ITSlaveCplt+0x422>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f8a8 	bl	800b6b8 <I2C_ITError>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b28      	cmp	r3, #40	@ 0x28
 800b572:	d144      	bne.n	800b5fe <I2C_ITSlaveCplt+0x4a2>
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f848 	bl	800b60c <I2C_ITListenCplt>
 800b57c:	e03f      	b.n	800b5fe <I2C_ITSlaveCplt+0x4a2>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b586:	d015      	beq.n	800b5b4 <I2C_ITSlaveCplt+0x458>
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fcbc 	bl	800af06 <I2C_ITSlaveSeqCplt>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1d      	ldr	r2, [pc, #116]	@ (800b608 <I2C_ITSlaveCplt+0x4ac>)
 800b592:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2220      	movs	r2, #32
 800b598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
 800b5b2:	e024      	b.n	800b5fe <I2C_ITSlaveCplt+0x4a2>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b22      	cmp	r3, #34	@ 0x22
 800b5be:	d10f      	bne.n	800b5e0 <I2C_ITSlaveCplt+0x484>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	4798      	blx	r3
 800b5de:	e00e      	b.n	800b5fe <I2C_ITSlaveCplt+0x4a2>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
 800b5fe:	bf00      	nop
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	ffff0000 	.word	0xffff0000

0800b60c <I2C_ITListenCplt>:
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a26      	ldr	r2, [pc, #152]	@ (800b6b4 <I2C_ITListenCplt+0xa8>)
 800b61a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	631a      	str	r2, [r3, #48]	@ 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	635a      	str	r2, [r3, #52]	@ 0x34
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d022      	beq.n	800b688 <I2C_ITListenCplt+0x7c>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64c:	b2d2      	uxtb	r2, r2
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	625a      	str	r2, [r3, #36]	@ 0x24
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d012      	beq.n	800b688 <I2C_ITListenCplt+0x7c>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b666:	3b01      	subs	r3, #1
 800b668:	b29a      	uxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b672:	b29b      	uxth	r3, r3
 800b674:	3b01      	subs	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b680:	f043 0204 	orr.w	r2, r3, #4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	645a      	str	r2, [r3, #68]	@ 0x44
 800b688:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fce3 	bl	800c058 <I2C_Disable_IRQ>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2210      	movs	r2, #16
 800b698:	61da      	str	r2, [r3, #28]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	4798      	blx	r3
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	ffff0000 	.word	0xffff0000

0800b6b8 <I2C_ITError>:
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6c8:	73fb      	strb	r3, [r7, #15]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a6d      	ldr	r2, [pc, #436]	@ (800b88c <I2C_ITError+0x1d4>)
 800b6d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	645a      	str	r2, [r3, #68]	@ 0x44
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	2b28      	cmp	r3, #40	@ 0x28
 800b6ee:	d005      	beq.n	800b6fc <I2C_ITError+0x44>
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b29      	cmp	r3, #41	@ 0x29
 800b6f4:	d002      	beq.n	800b6fc <I2C_ITError+0x44>
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6fa:	d10b      	bne.n	800b714 <I2C_ITError+0x5c>
 800b6fc:	2103      	movs	r1, #3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fcaa 	bl	800c058 <I2C_Disable_IRQ>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2228      	movs	r2, #40	@ 0x28
 800b708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a60      	ldr	r2, [pc, #384]	@ (800b890 <I2C_ITError+0x1d8>)
 800b710:	635a      	str	r2, [r3, #52]	@ 0x34
 800b712:	e030      	b.n	800b776 <I2C_ITError+0xbe>
 800b714:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fc9d 	bl	800c058 <I2C_Disable_IRQ>
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f8e3 	bl	800b8ea <I2C_Flush_TXDR>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b60      	cmp	r3, #96	@ 0x60
 800b72e:	d01f      	beq.n	800b770 <I2C_ITError+0xb8>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2220      	movs	r2, #32
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b20      	cmp	r3, #32
 800b744:	d114      	bne.n	800b770 <I2C_ITError+0xb8>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	f003 0310 	and.w	r3, r3, #16
 800b750:	2b10      	cmp	r3, #16
 800b752:	d109      	bne.n	800b768 <I2C_ITError+0xb0>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2210      	movs	r2, #16
 800b75a:	61da      	str	r2, [r3, #28]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b760:	f043 0204 	orr.w	r2, r3, #4
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	645a      	str	r2, [r3, #68]	@ 0x44
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2220      	movs	r2, #32
 800b76e:	61da      	str	r2, [r3, #28]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	635a      	str	r2, [r3, #52]	@ 0x34
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b77a:	60bb      	str	r3, [r7, #8]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b780:	2b00      	cmp	r3, #0
 800b782:	d039      	beq.n	800b7f8 <I2C_ITError+0x140>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b11      	cmp	r3, #17
 800b788:	d002      	beq.n	800b790 <I2C_ITError+0xd8>
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b21      	cmp	r3, #33	@ 0x21
 800b78e:	d133      	bne.n	800b7f8 <I2C_ITError+0x140>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b79a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b79e:	d107      	bne.n	800b7b0 <I2C_ITError+0xf8>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fd fac3 	bl	8008d40 <HAL_DMA_GetState>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d017      	beq.n	800b7f0 <I2C_ITError+0x138>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c4:	4a33      	ldr	r2, [pc, #204]	@ (800b894 <I2C_ITError+0x1dc>)
 800b7c6:	651a      	str	r2, [r3, #80]	@ 0x50
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fc f8e9 	bl	80079ac <HAL_DMA_Abort_IT>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d04d      	beq.n	800b87c <I2C_ITError+0x1c4>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4798      	blx	r3
 800b7ee:	e045      	b.n	800b87c <I2C_ITError+0x1c4>
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f851 	bl	800b898 <I2C_TreatErrorCallback>
 800b7f6:	e041      	b.n	800b87c <I2C_ITError+0x1c4>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d039      	beq.n	800b874 <I2C_ITError+0x1bc>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b12      	cmp	r3, #18
 800b804:	d002      	beq.n	800b80c <I2C_ITError+0x154>
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2b22      	cmp	r3, #34	@ 0x22
 800b80a:	d133      	bne.n	800b874 <I2C_ITError+0x1bc>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b81a:	d107      	bne.n	800b82c <I2C_ITError+0x174>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b830:	4618      	mov	r0, r3
 800b832:	f7fd fa85 	bl	8008d40 <HAL_DMA_GetState>
 800b836:	4603      	mov	r3, r0
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d017      	beq.n	800b86c <I2C_ITError+0x1b4>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b840:	4a14      	ldr	r2, [pc, #80]	@ (800b894 <I2C_ITError+0x1dc>)
 800b842:	651a      	str	r2, [r3, #80]	@ 0x50
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b850:	4618      	mov	r0, r3
 800b852:	f7fc f8ab 	bl	80079ac <HAL_DMA_Abort_IT>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d011      	beq.n	800b880 <I2C_ITError+0x1c8>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b866:	4610      	mov	r0, r2
 800b868:	4798      	blx	r3
 800b86a:	e009      	b.n	800b880 <I2C_ITError+0x1c8>
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f813 	bl	800b898 <I2C_TreatErrorCallback>
 800b872:	e005      	b.n	800b880 <I2C_ITError+0x1c8>
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f80f 	bl	800b898 <I2C_TreatErrorCallback>
 800b87a:	e002      	b.n	800b882 <I2C_ITError+0x1ca>
 800b87c:	bf00      	nop
 800b87e:	e000      	b.n	800b882 <I2C_ITError+0x1ca>
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	ffff0000 	.word	0xffff0000
 800b890:	0800a3b7 	.word	0x0800a3b7
 800b894:	0800bc3d 	.word	0x0800bc3d

0800b898 <I2C_TreatErrorCallback>:
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b60      	cmp	r3, #96	@ 0x60
 800b8aa:	d10f      	bne.n	800b8cc <I2C_TreatErrorCallback+0x34>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	4798      	blx	r3
 800b8ca:	e00a      	b.n	800b8e2 <I2C_TreatErrorCallback+0x4a>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
 800b8e2:	bf00      	nop
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <I2C_Flush_TXDR>:
 800b8ea:	b480      	push	{r7}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	f003 0302 	and.w	r3, r3, #2
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d103      	bne.n	800b908 <I2C_Flush_TXDR+0x1e>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2200      	movs	r2, #0
 800b906:	629a      	str	r2, [r3, #40]	@ 0x28
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b01      	cmp	r3, #1
 800b914:	d007      	beq.n	800b926 <I2C_Flush_TXDR+0x3c>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	699a      	ldr	r2, [r3, #24]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f042 0201 	orr.w	r2, r2, #1
 800b924:	619a      	str	r2, [r3, #24]
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <I2C_DMAMasterTransmitCplt>:
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b954:	b29b      	uxth	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <I2C_DMAMasterTransmitCplt+0x32>
 800b95a:	2120      	movs	r1, #32
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 faf7 	bl	800bf50 <I2C_Enable_IRQ>
 800b962:	e02d      	b.n	800b9c0 <I2C_DMAMasterTransmitCplt+0x8e>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b96c:	441a      	add	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	625a      	str	r2, [r3, #36]	@ 0x24
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b976:	b29b      	uxth	r3, r3
 800b978:	2bff      	cmp	r3, #255	@ 0xff
 800b97a:	d903      	bls.n	800b984 <I2C_DMAMasterTransmitCplt+0x52>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	22ff      	movs	r2, #255	@ 0xff
 800b980:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b982:	e004      	b.n	800b98e <I2C_DMAMasterTransmitCplt+0x5c>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b996:	4619      	mov	r1, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3328      	adds	r3, #40	@ 0x28
 800b99e:	461a      	mov	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9a4:	f7fb fd98 	bl	80074d8 <HAL_DMA_Start_IT>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d004      	beq.n	800b9b8 <I2C_DMAMasterTransmitCplt+0x86>
 800b9ae:	2110      	movs	r1, #16
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f7ff fe81 	bl	800b6b8 <I2C_ITError>
 800b9b6:	e003      	b.n	800b9c0 <I2C_DMAMasterTransmitCplt+0x8e>
 800b9b8:	2140      	movs	r1, #64	@ 0x40
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 fac8 	bl	800bf50 <I2C_Enable_IRQ>
 800b9c0:	bf00      	nop
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <I2C_DMAError>:
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d8:	60bb      	str	r3, [r7, #8]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d076      	beq.n	800bad0 <I2C_DMAError+0x108>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a71      	ldr	r2, [pc, #452]	@ (800bbb0 <I2C_DMAError+0x1e8>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d059      	beq.n	800baa2 <I2C_DMAError+0xda>
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a6f      	ldr	r2, [pc, #444]	@ (800bbb4 <I2C_DMAError+0x1ec>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d053      	beq.n	800baa2 <I2C_DMAError+0xda>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a6d      	ldr	r2, [pc, #436]	@ (800bbb8 <I2C_DMAError+0x1f0>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d04d      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a6b      	ldr	r2, [pc, #428]	@ (800bbbc <I2C_DMAError+0x1f4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d047      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a69      	ldr	r2, [pc, #420]	@ (800bbc0 <I2C_DMAError+0x1f8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d041      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a67      	ldr	r2, [pc, #412]	@ (800bbc4 <I2C_DMAError+0x1fc>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d03b      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a65      	ldr	r2, [pc, #404]	@ (800bbc8 <I2C_DMAError+0x200>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d035      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a63      	ldr	r2, [pc, #396]	@ (800bbcc <I2C_DMAError+0x204>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d02f      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a61      	ldr	r2, [pc, #388]	@ (800bbd0 <I2C_DMAError+0x208>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d029      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a5f      	ldr	r2, [pc, #380]	@ (800bbd4 <I2C_DMAError+0x20c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d023      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a5d      	ldr	r2, [pc, #372]	@ (800bbd8 <I2C_DMAError+0x210>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d01d      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a5b      	ldr	r2, [pc, #364]	@ (800bbdc <I2C_DMAError+0x214>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d017      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a59      	ldr	r2, [pc, #356]	@ (800bbe0 <I2C_DMAError+0x218>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d011      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a57      	ldr	r2, [pc, #348]	@ (800bbe4 <I2C_DMAError+0x21c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d00b      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a55      	ldr	r2, [pc, #340]	@ (800bbe8 <I2C_DMAError+0x220>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d005      	beq.n	800baa2 <I2C_DMAError+0xda>
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a53      	ldr	r2, [pc, #332]	@ (800bbec <I2C_DMAError+0x224>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d109      	bne.n	800bab6 <I2C_DMAError+0xee>
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bf0c      	ite	eq
 800baae:	2301      	moveq	r3, #1
 800bab0:	2300      	movne	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	e008      	b.n	800bac8 <I2C_DMAError+0x100>
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf0c      	ite	eq
 800bac2:	2301      	moveq	r3, #1
 800bac4:	2300      	movne	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <I2C_DMAError+0x108>
 800bacc:	2301      	movs	r3, #1
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8098 	beq.w	800bc0a <I2C_DMAError+0x242>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a33      	ldr	r2, [pc, #204]	@ (800bbb0 <I2C_DMAError+0x1e8>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d059      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a31      	ldr	r2, [pc, #196]	@ (800bbb4 <I2C_DMAError+0x1ec>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d053      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a2f      	ldr	r2, [pc, #188]	@ (800bbb8 <I2C_DMAError+0x1f0>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d04d      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a2d      	ldr	r2, [pc, #180]	@ (800bbbc <I2C_DMAError+0x1f4>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d047      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a2b      	ldr	r2, [pc, #172]	@ (800bbc0 <I2C_DMAError+0x1f8>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d041      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a29      	ldr	r2, [pc, #164]	@ (800bbc4 <I2C_DMAError+0x1fc>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d03b      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a27      	ldr	r2, [pc, #156]	@ (800bbc8 <I2C_DMAError+0x200>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d035      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a25      	ldr	r2, [pc, #148]	@ (800bbcc <I2C_DMAError+0x204>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d02f      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a23      	ldr	r2, [pc, #140]	@ (800bbd0 <I2C_DMAError+0x208>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d029      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a21      	ldr	r2, [pc, #132]	@ (800bbd4 <I2C_DMAError+0x20c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d023      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a1f      	ldr	r2, [pc, #124]	@ (800bbd8 <I2C_DMAError+0x210>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d01d      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a1d      	ldr	r2, [pc, #116]	@ (800bbdc <I2C_DMAError+0x214>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d017      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe0 <I2C_DMAError+0x218>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d011      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a19      	ldr	r2, [pc, #100]	@ (800bbe4 <I2C_DMAError+0x21c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d00b      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a17      	ldr	r2, [pc, #92]	@ (800bbe8 <I2C_DMAError+0x220>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d005      	beq.n	800bb9a <I2C_DMAError+0x1d2>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a15      	ldr	r2, [pc, #84]	@ (800bbec <I2C_DMAError+0x224>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d12a      	bne.n	800bbf0 <I2C_DMAError+0x228>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bf0c      	ite	eq
 800bba6:	2301      	moveq	r3, #1
 800bba8:	2300      	movne	r3, #0
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	e029      	b.n	800bc02 <I2C_DMAError+0x23a>
 800bbae:	bf00      	nop
 800bbb0:	40020010 	.word	0x40020010
 800bbb4:	40020028 	.word	0x40020028
 800bbb8:	40020040 	.word	0x40020040
 800bbbc:	40020058 	.word	0x40020058
 800bbc0:	40020070 	.word	0x40020070
 800bbc4:	40020088 	.word	0x40020088
 800bbc8:	400200a0 	.word	0x400200a0
 800bbcc:	400200b8 	.word	0x400200b8
 800bbd0:	40020410 	.word	0x40020410
 800bbd4:	40020428 	.word	0x40020428
 800bbd8:	40020440 	.word	0x40020440
 800bbdc:	40020458 	.word	0x40020458
 800bbe0:	40020470 	.word	0x40020470
 800bbe4:	40020488 	.word	0x40020488
 800bbe8:	400204a0 	.word	0x400204a0
 800bbec:	400204b8 	.word	0x400204b8
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bf0c      	ite	eq
 800bbfc:	2301      	moveq	r3, #1
 800bbfe:	2300      	movne	r3, #0
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <I2C_DMAError+0x242>
 800bc06:	2301      	movs	r3, #1
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fd f8a6 	bl	8008d5c <HAL_DMA_GetError>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d00e      	beq.n	800bc34 <I2C_DMAError+0x26c>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <I2C_DMAError+0x26c>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc2a:	605a      	str	r2, [r3, #4]
 800bc2c:	2110      	movs	r1, #16
 800bc2e:	68b8      	ldr	r0, [r7, #8]
 800bc30:	f7ff fd42 	bl	800b6b8 <I2C_ITError>
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <I2C_DMAAbort>:
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <I2C_DMAAbort+0x1e>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc56:	2200      	movs	r2, #0
 800bc58:	651a      	str	r2, [r3, #80]	@ 0x50
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <I2C_DMAAbort+0x2e>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc66:	2200      	movs	r2, #0
 800bc68:	651a      	str	r2, [r3, #80]	@ 0x50
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fe14 	bl	800b898 <I2C_TreatErrorCallback>
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <I2C_WaitOnFlagUntilTimeout>:
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	4613      	mov	r3, r2
 800bc86:	71fb      	strb	r3, [r7, #7]
 800bc88:	e03b      	b.n	800bd02 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800bc8a:	69ba      	ldr	r2, [r7, #24]
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 f84c 	bl	800bd2c <I2C_IsErrorOccurred>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <I2C_WaitOnFlagUntilTimeout+0x26>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e041      	b.n	800bd22 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d02d      	beq.n	800bd02 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800bca6:	f7f9 f8b7 	bl	8004e18 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d302      	bcc.n	800bcbc <I2C_WaitOnFlagUntilTimeout+0x44>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d122      	bne.n	800bd02 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bf0c      	ite	eq
 800bccc:	2301      	moveq	r3, #1
 800bcce:	2300      	movne	r3, #0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d113      	bne.n	800bd02 <I2C_WaitOnFlagUntilTimeout+0x8a>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcde:	f043 0220 	orr.w	r2, r3, #32
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	645a      	str	r2, [r3, #68]	@ 0x44
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e00f      	b.n	800bd22 <I2C_WaitOnFlagUntilTimeout+0xaa>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	699a      	ldr	r2, [r3, #24]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	bf0c      	ite	eq
 800bd12:	2301      	moveq	r3, #1
 800bd14:	2300      	movne	r3, #0
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	461a      	mov	r2, r3
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d0b4      	beq.n	800bc8a <I2C_WaitOnFlagUntilTimeout+0x12>
 800bd20:	2300      	movs	r3, #0
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <I2C_IsErrorOccurred>:
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08a      	sub	sp, #40	@ 0x28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	61bb      	str	r3, [r7, #24]
 800bd46:	2300      	movs	r3, #0
 800bd48:	623b      	str	r3, [r7, #32]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	f003 0310 	and.w	r3, r3, #16
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d068      	beq.n	800be2a <I2C_IsErrorOccurred+0xfe>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2210      	movs	r2, #16
 800bd5e:	61da      	str	r2, [r3, #28]
 800bd60:	e049      	b.n	800bdf6 <I2C_IsErrorOccurred+0xca>
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd68:	d045      	beq.n	800bdf6 <I2C_IsErrorOccurred+0xca>
 800bd6a:	f7f9 f855 	bl	8004e18 <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <I2C_IsErrorOccurred+0x54>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d13a      	bne.n	800bdf6 <I2C_IsErrorOccurred+0xca>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd92:	74fb      	strb	r3, [r7, #19]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bda2:	d121      	bne.n	800bde8 <I2C_IsErrorOccurred+0xbc>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdaa:	d01d      	beq.n	800bde8 <I2C_IsErrorOccurred+0xbc>
 800bdac:	7cfb      	ldrb	r3, [r7, #19]
 800bdae:	2b20      	cmp	r3, #32
 800bdb0:	d01a      	beq.n	800bde8 <I2C_IsErrorOccurred+0xbc>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bdc0:	605a      	str	r2, [r3, #4]
 800bdc2:	f7f9 f829 	bl	8004e18 <HAL_GetTick>
 800bdc6:	61f8      	str	r0, [r7, #28]
 800bdc8:	e00e      	b.n	800bde8 <I2C_IsErrorOccurred+0xbc>
 800bdca:	f7f9 f825 	bl	8004e18 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	2b19      	cmp	r3, #25
 800bdd6:	d907      	bls.n	800bde8 <I2C_IsErrorOccurred+0xbc>
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	f043 0320 	orr.w	r3, r3, #32
 800bdde:	623b      	str	r3, [r7, #32]
 800bde0:	2301      	movs	r3, #1
 800bde2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bde6:	e006      	b.n	800bdf6 <I2C_IsErrorOccurred+0xca>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d1e9      	bne.n	800bdca <I2C_IsErrorOccurred+0x9e>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b20      	cmp	r3, #32
 800be02:	d003      	beq.n	800be0c <I2C_IsErrorOccurred+0xe0>
 800be04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d0aa      	beq.n	800bd62 <I2C_IsErrorOccurred+0x36>
 800be0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be10:	2b00      	cmp	r3, #0
 800be12:	d103      	bne.n	800be1c <I2C_IsErrorOccurred+0xf0>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2220      	movs	r2, #32
 800be1a:	61da      	str	r2, [r3, #28]
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f043 0304 	orr.w	r3, r3, #4
 800be22:	623b      	str	r3, [r7, #32]
 800be24:	2301      	movs	r3, #1
 800be26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	61bb      	str	r3, [r7, #24]
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <I2C_IsErrorOccurred+0x128>
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	623b      	str	r3, [r7, #32]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be4c:	61da      	str	r2, [r3, #28]
 800be4e:	2301      	movs	r3, #1
 800be50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <I2C_IsErrorOccurred+0x14a>
 800be5e:	6a3b      	ldr	r3, [r7, #32]
 800be60:	f043 0308 	orr.w	r3, r3, #8
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be6e:	61da      	str	r2, [r3, #28]
 800be70:	2301      	movs	r3, #1
 800be72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <I2C_IsErrorOccurred+0x16c>
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	f043 0302 	orr.w	r3, r3, #2
 800be86:	623b      	str	r3, [r7, #32]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be90:	61da      	str	r2, [r3, #28]
 800be92:	2301      	movs	r3, #1
 800be94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01c      	beq.n	800beda <I2C_IsErrorOccurred+0x1ae>
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff fd22 	bl	800b8ea <I2C_Flush_TXDR>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6859      	ldr	r1, [r3, #4]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b0d      	ldr	r3, [pc, #52]	@ (800bee8 <I2C_IsErrorOccurred+0x1bc>)
 800beb2:	400b      	ands	r3, r1
 800beb4:	6053      	str	r3, [r2, #4]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beba:	6a3b      	ldr	r3, [r7, #32]
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	645a      	str	r2, [r3, #68]	@ 0x44
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2220      	movs	r2, #32
 800bec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800beda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bede:	4618      	mov	r0, r3
 800bee0:	3728      	adds	r7, #40	@ 0x28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	fe00e800 	.word	0xfe00e800

0800beec <I2C_TransferConfig>:
 800beec:	b480      	push	{r7}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	817b      	strh	r3, [r7, #10]
 800befa:	4613      	mov	r3, r2
 800befc:	727b      	strb	r3, [r7, #9]
 800befe:	897b      	ldrh	r3, [r7, #10]
 800bf00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bf04:	7a7b      	ldrb	r3, [r7, #9]
 800bf06:	041b      	lsls	r3, r3, #16
 800bf08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	431a      	orrs	r2, r3
 800bf12:	6a3b      	ldr	r3, [r7, #32]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	0d5b      	lsrs	r3, r3, #21
 800bf26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bf2a:	4b08      	ldr	r3, [pc, #32]	@ (800bf4c <I2C_TransferConfig+0x60>)
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	43db      	mvns	r3, r3
 800bf30:	ea02 0103 	and.w	r1, r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	605a      	str	r2, [r3, #4]
 800bf3e:	bf00      	nop
 800bf40:	371c      	adds	r7, #28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	03ff63ff 	.word	0x03ff63ff

0800bf50 <I2C_Enable_IRQ>:
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	807b      	strh	r3, [r7, #2]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf64:	4a39      	ldr	r2, [pc, #228]	@ (800c04c <I2C_Enable_IRQ+0xfc>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d032      	beq.n	800bfd0 <I2C_Enable_IRQ+0x80>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf6e:	4a38      	ldr	r2, [pc, #224]	@ (800c050 <I2C_Enable_IRQ+0x100>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d02d      	beq.n	800bfd0 <I2C_Enable_IRQ+0x80>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf78:	4a36      	ldr	r2, [pc, #216]	@ (800c054 <I2C_Enable_IRQ+0x104>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d028      	beq.n	800bfd0 <I2C_Enable_IRQ+0x80>
 800bf7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	da03      	bge.n	800bf8e <I2C_Enable_IRQ+0x3e>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	887b      	ldrh	r3, [r7, #2]
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <I2C_Enable_IRQ+0x50>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	887b      	ldrh	r3, [r7, #2]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <I2C_Enable_IRQ+0x62>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	887b      	ldrh	r3, [r7, #2]
 800bfb4:	2b10      	cmp	r3, #16
 800bfb6:	d103      	bne.n	800bfc0 <I2C_Enable_IRQ+0x70>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	887b      	ldrh	r3, [r7, #2]
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d133      	bne.n	800c02e <I2C_Enable_IRQ+0xde>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f043 0320 	orr.w	r3, r3, #32
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	e02e      	b.n	800c02e <I2C_Enable_IRQ+0xde>
 800bfd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	da03      	bge.n	800bfe0 <I2C_Enable_IRQ+0x90>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	887b      	ldrh	r3, [r7, #2]
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <I2C_Enable_IRQ+0xa2>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	887b      	ldrh	r3, [r7, #2]
 800bff4:	f003 0302 	and.w	r3, r3, #2
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <I2C_Enable_IRQ+0xb4>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	887b      	ldrh	r3, [r7, #2]
 800c006:	2b10      	cmp	r3, #16
 800c008:	d103      	bne.n	800c012 <I2C_Enable_IRQ+0xc2>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	887b      	ldrh	r3, [r7, #2]
 800c014:	2b20      	cmp	r3, #32
 800c016:	d103      	bne.n	800c020 <I2C_Enable_IRQ+0xd0>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	887b      	ldrh	r3, [r7, #2]
 800c022:	2b40      	cmp	r3, #64	@ 0x40
 800c024:	d103      	bne.n	800c02e <I2C_Enable_IRQ+0xde>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6819      	ldr	r1, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	430a      	orrs	r2, r1
 800c03c:	601a      	str	r2, [r3, #0]
 800c03e:	bf00      	nop
 800c040:	3714      	adds	r7, #20
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	0800a5a9 	.word	0x0800a5a9
 800c050:	0800a9cd 	.word	0x0800a9cd
 800c054:	0800a781 	.word	0x0800a781

0800c058 <I2C_Disable_IRQ>:
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	807b      	strh	r3, [r7, #2]
 800c064:	2300      	movs	r3, #0
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	887b      	ldrh	r3, [r7, #2]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00f      	beq.n	800c092 <I2C_Disable_IRQ+0x3a>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c080:	b2db      	uxtb	r3, r3
 800c082:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c086:	2b28      	cmp	r3, #40	@ 0x28
 800c088:	d003      	beq.n	800c092 <I2C_Disable_IRQ+0x3a>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	887b      	ldrh	r3, [r7, #2]
 800c094:	f003 0302 	and.w	r3, r3, #2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00f      	beq.n	800c0bc <I2C_Disable_IRQ+0x64>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c0b0:	2b28      	cmp	r3, #40	@ 0x28
 800c0b2:	d003      	beq.n	800c0bc <I2C_Disable_IRQ+0x64>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	da03      	bge.n	800c0cc <I2C_Disable_IRQ+0x74>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	887b      	ldrh	r3, [r7, #2]
 800c0ce:	2b10      	cmp	r3, #16
 800c0d0:	d103      	bne.n	800c0da <I2C_Disable_IRQ+0x82>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	2b20      	cmp	r3, #32
 800c0de:	d103      	bne.n	800c0e8 <I2C_Disable_IRQ+0x90>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f043 0320 	orr.w	r3, r3, #32
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	887b      	ldrh	r3, [r7, #2]
 800c0ea:	2b40      	cmp	r3, #64	@ 0x40
 800c0ec:	d103      	bne.n	800c0f6 <I2C_Disable_IRQ+0x9e>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6819      	ldr	r1, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	43da      	mvns	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	400a      	ands	r2, r1
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	bf00      	nop
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_I2CEx_ConfigAnalogFilter>:
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b20      	cmp	r3, #32
 800c128:	d138      	bne.n	800c19c <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c130:	2b01      	cmp	r3, #1
 800c132:	d101      	bne.n	800c138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c134:	2302      	movs	r3, #2
 800c136:	e032      	b.n	800c19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2224      	movs	r2, #36	@ 0x24
 800c144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f022 0201 	bic.w	r2, r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0201 	orr.w	r2, r2, #1
 800c186:	601a      	str	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2220      	movs	r2, #32
 800c18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c198:	2300      	movs	r3, #0
 800c19a:	e000      	b.n	800c19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c19c:	2302      	movs	r3, #2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <HAL_I2CEx_ConfigDigitalFilter>:
 800c1aa:	b480      	push	{r7}
 800c1ac:	b085      	sub	sp, #20
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b20      	cmp	r3, #32
 800c1be:	d139      	bne.n	800c234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d101      	bne.n	800c1ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e033      	b.n	800c236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2224      	movs	r2, #36	@ 0x24
 800c1da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f022 0201 	bic.w	r2, r2, #1
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	021b      	lsls	r3, r3, #8
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f042 0201 	orr.w	r2, r2, #1
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2220      	movs	r2, #32
 800c224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c230:	2300      	movs	r3, #0
 800c232:	e000      	b.n	800c236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c234:	2302      	movs	r3, #2
 800c236:	4618      	mov	r0, r3
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <HAL_MDMA_Init>:
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	f7f8 fde5 	bl	8004e18 <HAL_GetTick>
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <HAL_MDMA_Init+0x18>
 800c256:	2301      	movs	r3, #1
 800c258:	e03b      	b.n	800c2d2 <HAL_MDMA_Init+0x90>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2202      	movs	r2, #2
 800c266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68da      	ldr	r2, [r3, #12]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f022 0201 	bic.w	r2, r2, #1
 800c278:	60da      	str	r2, [r3, #12]
 800c27a:	e00f      	b.n	800c29c <HAL_MDMA_Init+0x5a>
 800c27c:	f7f8 fdcc 	bl	8004e18 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b05      	cmp	r3, #5
 800c288:	d908      	bls.n	800c29c <HAL_MDMA_Init+0x5a>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2240      	movs	r2, #64	@ 0x40
 800c28e:	669a      	str	r2, [r3, #104]	@ 0x68
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2203      	movs	r2, #3
 800c294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c298:	2301      	movs	r3, #1
 800c29a:	e01a      	b.n	800c2d2 <HAL_MDMA_Init+0x90>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1e8      	bne.n	800c27c <HAL_MDMA_Init+0x3a>
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f9bc 	bl	800c628 <MDMA_Init>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	661a      	str	r2, [r3, #96]	@ 0x60
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	665a      	str	r2, [r3, #100]	@ 0x64
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	669a      	str	r2, [r3, #104]	@ 0x68
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_MDMA_ConfigPostRequestMask>:
 800c2da:	b480      	push	{r7}
 800c2dc:	b087      	sub	sp, #28
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	75fb      	strb	r3, [r7, #23]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <HAL_MDMA_ConfigPostRequestMask+0x1a>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e03e      	b.n	800c372 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d101      	bne.n	800c302 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800c2fe:	2302      	movs	r3, #2
 800c300:	e037      	b.n	800c372 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b01      	cmp	r3, #1
 800c314:	d126      	bne.n	800c364 <HAL_MDMA_ConfigPostRequestMask+0x8a>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d11c      	bne.n	800c35e <HAL_MDMA_ConfigPostRequestMask+0x84>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	635a      	str	r2, [r3, #52]	@ 0x34
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <HAL_MDMA_ConfigPostRequestMask+0x72>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	691a      	ldr	r2, [r3, #16]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c348:	611a      	str	r2, [r3, #16]
 800c34a:	e00d      	b.n	800c368 <HAL_MDMA_ConfigPostRequestMask+0x8e>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	691a      	ldr	r2, [r3, #16]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c35a:	611a      	str	r2, [r3, #16]
 800c35c:	e004      	b.n	800c368 <HAL_MDMA_ConfigPostRequestMask+0x8e>
 800c35e:	2301      	movs	r3, #1
 800c360:	75fb      	strb	r3, [r7, #23]
 800c362:	e001      	b.n	800c368 <HAL_MDMA_ConfigPostRequestMask+0x8e>
 800c364:	2301      	movs	r3, #1
 800c366:	75fb      	strb	r3, [r7, #23]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	4618      	mov	r0, r3
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
	...

0800c380 <HAL_MDMA_IRQHandler>:
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	2300      	movs	r3, #0
 800c38a:	60bb      	str	r3, [r7, #8]
 800c38c:	4b91      	ldr	r3, [pc, #580]	@ (800c5d4 <HAL_MDMA_IRQHandler+0x254>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a91      	ldr	r2, [pc, #580]	@ (800c5d8 <HAL_MDMA_IRQHandler+0x258>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	0a9b      	lsrs	r3, r3, #10
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4b8e      	ldr	r3, [pc, #568]	@ (800c5dc <HAL_MDMA_IRQHandler+0x25c>)
 800c3a2:	4413      	add	r3, r2
 800c3a4:	099b      	lsrs	r3, r3, #6
 800c3a6:	f003 031f 	and.w	r3, r3, #31
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b0:	613b      	str	r3, [r7, #16]
 800c3b2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 812d 	beq.w	800c61c <HAL_MDMA_IRQHandler+0x29c>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d054      	beq.n	800c47a <HAL_MDMA_IRQHandler+0xfa>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d04d      	beq.n	800c47a <HAL_MDMA_IRQHandler+0xfa>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68da      	ldr	r2, [r3, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 0202 	bic.w	r2, r2, #2
 800c3ec:	60da      	str	r2, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d106      	bne.n	800c40e <HAL_MDMA_IRQHandler+0x8e>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c404:	f043 0201 	orr.w	r2, r3, #1
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	669a      	str	r2, [r3, #104]	@ 0x68
 800c40c:	e005      	b.n	800c41a <HAL_MDMA_IRQHandler+0x9a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c412:	f043 0202 	orr.w	r2, r3, #2
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	669a      	str	r2, [r3, #104]	@ 0x68
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <HAL_MDMA_IRQHandler+0xb0>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c428:	f043 0204 	orr.w	r2, r3, #4
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	669a      	str	r2, [r3, #104]	@ 0x68
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c436:	2b00      	cmp	r3, #0
 800c438:	d005      	beq.n	800c446 <HAL_MDMA_IRQHandler+0xc6>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c43e:	f043 0208 	orr.w	r2, r3, #8
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	669a      	str	r2, [r3, #104]	@ 0x68
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <HAL_MDMA_IRQHandler+0xdc>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c454:	f043 0210 	orr.w	r2, r3, #16
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	669a      	str	r2, [r3, #104]	@ 0x68
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <HAL_MDMA_IRQHandler+0xf2>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c46a:	f043 0220 	orr.w	r2, r3, #32
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	669a      	str	r2, [r3, #104]	@ 0x68
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2201      	movs	r2, #1
 800c478:	605a      	str	r2, [r3, #4]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0310 	and.w	r3, r3, #16
 800c484:	2b00      	cmp	r3, #0
 800c486:	d012      	beq.n	800c4ae <HAL_MDMA_IRQHandler+0x12e>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	f003 0320 	and.w	r3, r3, #32
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00b      	beq.n	800c4ae <HAL_MDMA_IRQHandler+0x12e>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2210      	movs	r2, #16
 800c49c:	605a      	str	r2, [r3, #4]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_MDMA_IRQHandler+0x12e>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	4798      	blx	r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d012      	beq.n	800c4e2 <HAL_MDMA_IRQHandler+0x162>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	f003 0310 	and.w	r3, r3, #16
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <HAL_MDMA_IRQHandler+0x162>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2208      	movs	r2, #8
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <HAL_MDMA_IRQHandler+0x162>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d012      	beq.n	800c516 <HAL_MDMA_IRQHandler+0x196>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	f003 0308 	and.w	r3, r3, #8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <HAL_MDMA_IRQHandler+0x196>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2204      	movs	r2, #4
 800c504:	605a      	str	r2, [r3, #4]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <HAL_MDMA_IRQHandler+0x196>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	4798      	blx	r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0302 	and.w	r3, r3, #2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d039      	beq.n	800c598 <HAL_MDMA_IRQHandler+0x218>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	f003 0304 	and.w	r3, r3, #4
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d032      	beq.n	800c598 <HAL_MDMA_IRQHandler+0x218>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	d110      	bne.n	800c570 <HAL_MDMA_IRQHandler+0x1f0>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c562:	2b00      	cmp	r3, #0
 800c564:	d05c      	beq.n	800c620 <HAL_MDMA_IRQHandler+0x2a0>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	4798      	blx	r3
 800c56e:	e057      	b.n	800c620 <HAL_MDMA_IRQHandler+0x2a0>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2202      	movs	r2, #2
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <HAL_MDMA_IRQHandler+0x218>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d040      	beq.n	800c622 <HAL_MDMA_IRQHandler+0x2a2>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 0201 	bic.w	r2, r2, #1
 800c5b6:	60da      	str	r2, [r3, #12]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	60bb      	str	r3, [r7, #8]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d30d      	bcc.n	800c5e0 <HAL_MDMA_IRQHandler+0x260>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f003 0301 	and.w	r3, r3, #1
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1f2      	bne.n	800c5b8 <HAL_MDMA_IRQHandler+0x238>
 800c5d2:	e006      	b.n	800c5e2 <HAL_MDMA_IRQHandler+0x262>
 800c5d4:	24000228 	.word	0x24000228
 800c5d8:	1b4e81b5 	.word	0x1b4e81b5
 800c5dc:	adffffc0 	.word	0xadffffc0
 800c5e0:	bf00      	nop
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <HAL_MDMA_IRQHandler+0x282>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2203      	movs	r2, #3
 800c5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c600:	e003      	b.n	800c60a <HAL_MDMA_IRQHandler+0x28a>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d007      	beq.n	800c622 <HAL_MDMA_IRQHandler+0x2a2>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	4798      	blx	r3
 800c61a:	e002      	b.n	800c622 <HAL_MDMA_IRQHandler+0x2a2>
 800c61c:	bf00      	nop
 800c61e:	e000      	b.n	800c622 <HAL_MDMA_IRQHandler+0x2a2>
 800c620:	bf00      	nop
 800c622:	3718      	adds	r7, #24
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <MDMA_Init>:
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68d9      	ldr	r1, [r3, #12]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	691a      	ldr	r2, [r3, #16]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	60da      	str	r2, [r3, #12]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	695a      	ldr	r2, [r3, #20]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	431a      	orrs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	431a      	orrs	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65a:	431a      	orrs	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c66c:	3b01      	subs	r3, #1
 800c66e:	049b      	lsls	r3, r3, #18
 800c670:	ea42 0103 	orr.w	r1, r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	611a      	str	r2, [r3, #16]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c688:	d107      	bne.n	800c69a <MDMA_Init+0x72>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	691a      	ldr	r2, [r3, #16]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c698:	611a      	str	r2, [r3, #16]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	615a      	str	r2, [r3, #20]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	da11      	bge.n	800c6ce <MDMA_Init+0xa6>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	695a      	ldr	r2, [r3, #20]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c6b8:	615a      	str	r2, [r3, #20]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6be:	425b      	negs	r3, r3
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	b292      	uxth	r2, r2
 800c6ca:	621a      	str	r2, [r3, #32]
 800c6cc:	e006      	b.n	800c6dc <MDMA_Init+0xb4>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	b292      	uxth	r2, r2
 800c6da:	621a      	str	r2, [r3, #32]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da15      	bge.n	800c710 <MDMA_Init+0xe8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	695a      	ldr	r2, [r3, #20]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c6f2:	615a      	str	r2, [r3, #20]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f8:	425b      	negs	r3, r3
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6a19      	ldr	r1, [r3, #32]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	041a      	lsls	r2, r3, #16
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	621a      	str	r2, [r3, #32]
 800c70e:	e009      	b.n	800c724 <MDMA_Init+0xfc>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6a19      	ldr	r1, [r3, #32]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71a:	041a      	lsls	r2, r3, #16
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	621a      	str	r2, [r3, #32]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c72c:	d006      	beq.n	800c73c <MDMA_Init+0x114>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	b2d2      	uxtb	r2, r2
 800c738:	629a      	str	r2, [r3, #40]	@ 0x28
 800c73a:	e003      	b.n	800c744 <MDMA_Init+0x11c>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2200      	movs	r2, #0
 800c742:	629a      	str	r2, [r3, #40]	@ 0x28
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2200      	movs	r2, #0
 800c74a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c74c:	bf00      	nop
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_PWR_EnableBkUpAccess>:
 800c758:	b480      	push	{r7}
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	4b05      	ldr	r3, [pc, #20]	@ (800c774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a04      	ldr	r2, [pc, #16]	@ (800c774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	bf00      	nop
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	58024800 	.word	0x58024800

0800c778 <HAL_PWREx_ConfigSupply>:
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	4b19      	ldr	r3, [pc, #100]	@ (800c7e8 <HAL_PWREx_ConfigSupply+0x70>)
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b04      	cmp	r3, #4
 800c78a:	d00a      	beq.n	800c7a2 <HAL_PWREx_ConfigSupply+0x2a>
 800c78c:	4b16      	ldr	r3, [pc, #88]	@ (800c7e8 <HAL_PWREx_ConfigSupply+0x70>)
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d001      	beq.n	800c79e <HAL_PWREx_ConfigSupply+0x26>
 800c79a:	2301      	movs	r3, #1
 800c79c:	e01f      	b.n	800c7de <HAL_PWREx_ConfigSupply+0x66>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e01d      	b.n	800c7de <HAL_PWREx_ConfigSupply+0x66>
 800c7a2:	4b11      	ldr	r3, [pc, #68]	@ (800c7e8 <HAL_PWREx_ConfigSupply+0x70>)
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f023 0207 	bic.w	r2, r3, #7
 800c7aa:	490f      	ldr	r1, [pc, #60]	@ (800c7e8 <HAL_PWREx_ConfigSupply+0x70>)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60cb      	str	r3, [r1, #12]
 800c7b2:	f7f8 fb31 	bl	8004e18 <HAL_GetTick>
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	e009      	b.n	800c7ce <HAL_PWREx_ConfigSupply+0x56>
 800c7ba:	f7f8 fb2d 	bl	8004e18 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7c8:	d901      	bls.n	800c7ce <HAL_PWREx_ConfigSupply+0x56>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e007      	b.n	800c7de <HAL_PWREx_ConfigSupply+0x66>
 800c7ce:	4b06      	ldr	r3, [pc, #24]	@ (800c7e8 <HAL_PWREx_ConfigSupply+0x70>)
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7da:	d1ee      	bne.n	800c7ba <HAL_PWREx_ConfigSupply+0x42>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	58024800 	.word	0x58024800

0800c7ec <HAL_RCC_OscConfig>:
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08c      	sub	sp, #48	@ 0x30
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <HAL_RCC_OscConfig+0x14>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	f000 bc48 	b.w	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8088 	beq.w	800c91e <HAL_RCC_OscConfig+0x132>
 800c80e:	4b99      	ldr	r3, [pc, #612]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c818:	4b96      	ldr	r3, [pc, #600]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c81c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c820:	2b10      	cmp	r3, #16
 800c822:	d007      	beq.n	800c834 <HAL_RCC_OscConfig+0x48>
 800c824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c826:	2b18      	cmp	r3, #24
 800c828:	d111      	bne.n	800c84e <HAL_RCC_OscConfig+0x62>
 800c82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b02      	cmp	r3, #2
 800c832:	d10c      	bne.n	800c84e <HAL_RCC_OscConfig+0x62>
 800c834:	4b8f      	ldr	r3, [pc, #572]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d06d      	beq.n	800c91c <HAL_RCC_OscConfig+0x130>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d169      	bne.n	800c91c <HAL_RCC_OscConfig+0x130>
 800c848:	2301      	movs	r3, #1
 800c84a:	f000 bc21 	b.w	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c856:	d106      	bne.n	800c866 <HAL_RCC_OscConfig+0x7a>
 800c858:	4b86      	ldr	r3, [pc, #536]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a85      	ldr	r2, [pc, #532]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c85e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	e02e      	b.n	800c8c4 <HAL_RCC_OscConfig+0xd8>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10c      	bne.n	800c888 <HAL_RCC_OscConfig+0x9c>
 800c86e:	4b81      	ldr	r3, [pc, #516]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a80      	ldr	r2, [pc, #512]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	4b7e      	ldr	r3, [pc, #504]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a7d      	ldr	r2, [pc, #500]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	e01d      	b.n	800c8c4 <HAL_RCC_OscConfig+0xd8>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c890:	d10c      	bne.n	800c8ac <HAL_RCC_OscConfig+0xc0>
 800c892:	4b78      	ldr	r3, [pc, #480]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a77      	ldr	r2, [pc, #476]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	4b75      	ldr	r3, [pc, #468]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a74      	ldr	r2, [pc, #464]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	e00b      	b.n	800c8c4 <HAL_RCC_OscConfig+0xd8>
 800c8ac:	4b71      	ldr	r3, [pc, #452]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a70      	ldr	r2, [pc, #448]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	4b6e      	ldr	r3, [pc, #440]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a6d      	ldr	r2, [pc, #436]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d013      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x108>
 800c8cc:	f7f8 faa4 	bl	8004e18 <HAL_GetTick>
 800c8d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8d2:	e008      	b.n	800c8e6 <HAL_RCC_OscConfig+0xfa>
 800c8d4:	f7f8 faa0 	bl	8004e18 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b64      	cmp	r3, #100	@ 0x64
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_OscConfig+0xfa>
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e3d4      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c8e6:	4b63      	ldr	r3, [pc, #396]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0f0      	beq.n	800c8d4 <HAL_RCC_OscConfig+0xe8>
 800c8f2:	e014      	b.n	800c91e <HAL_RCC_OscConfig+0x132>
 800c8f4:	f7f8 fa90 	bl	8004e18 <HAL_GetTick>
 800c8f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8fa:	e008      	b.n	800c90e <HAL_RCC_OscConfig+0x122>
 800c8fc:	f7f8 fa8c 	bl	8004e18 <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	2b64      	cmp	r3, #100	@ 0x64
 800c908:	d901      	bls.n	800c90e <HAL_RCC_OscConfig+0x122>
 800c90a:	2303      	movs	r3, #3
 800c90c:	e3c0      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c90e:	4b59      	ldr	r3, [pc, #356]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1f0      	bne.n	800c8fc <HAL_RCC_OscConfig+0x110>
 800c91a:	e000      	b.n	800c91e <HAL_RCC_OscConfig+0x132>
 800c91c:	bf00      	nop
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 80ca 	beq.w	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800c92c:	4b51      	ldr	r3, [pc, #324]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c934:	623b      	str	r3, [r7, #32]
 800c936:	4b4f      	ldr	r3, [pc, #316]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93a:	61fb      	str	r3, [r7, #28]
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <HAL_RCC_OscConfig+0x166>
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	2b18      	cmp	r3, #24
 800c946:	d156      	bne.n	800c9f6 <HAL_RCC_OscConfig+0x20a>
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d151      	bne.n	800c9f6 <HAL_RCC_OscConfig+0x20a>
 800c952:	4b48      	ldr	r3, [pc, #288]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 0304 	and.w	r3, r3, #4
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d005      	beq.n	800c96a <HAL_RCC_OscConfig+0x17e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d101      	bne.n	800c96a <HAL_RCC_OscConfig+0x17e>
 800c966:	2301      	movs	r3, #1
 800c968:	e392      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c96a:	4b42      	ldr	r3, [pc, #264]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f023 0219 	bic.w	r2, r3, #25
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	493f      	ldr	r1, [pc, #252]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c978:	4313      	orrs	r3, r2
 800c97a:	600b      	str	r3, [r1, #0]
 800c97c:	f7f8 fa4c 	bl	8004e18 <HAL_GetTick>
 800c980:	6278      	str	r0, [r7, #36]	@ 0x24
 800c982:	e008      	b.n	800c996 <HAL_RCC_OscConfig+0x1aa>
 800c984:	f7f8 fa48 	bl	8004e18 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0x1aa>
 800c992:	2303      	movs	r3, #3
 800c994:	e37c      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800c996:	4b37      	ldr	r3, [pc, #220]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0f0      	beq.n	800c984 <HAL_RCC_OscConfig+0x198>
 800c9a2:	f7f8 fa69 	bl	8004e78 <HAL_GetREVID>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d817      	bhi.n	800c9e0 <HAL_RCC_OscConfig+0x1f4>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	2b40      	cmp	r3, #64	@ 0x40
 800c9b6:	d108      	bne.n	800c9ca <HAL_RCC_OscConfig+0x1de>
 800c9b8:	4b2e      	ldr	r3, [pc, #184]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c9c0:	4a2c      	ldr	r2, [pc, #176]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9c6:	6053      	str	r3, [r2, #4]
 800c9c8:	e07a      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800c9ca:	4b2a      	ldr	r3, [pc, #168]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	031b      	lsls	r3, r3, #12
 800c9d8:	4926      	ldr	r1, [pc, #152]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	604b      	str	r3, [r1, #4]
 800c9de:	e06f      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800c9e0:	4b24      	ldr	r3, [pc, #144]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	061b      	lsls	r3, r3, #24
 800c9ee:	4921      	ldr	r1, [pc, #132]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	604b      	str	r3, [r1, #4]
 800c9f4:	e064      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d047      	beq.n	800ca8e <HAL_RCC_OscConfig+0x2a2>
 800c9fe:	4b1d      	ldr	r3, [pc, #116]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f023 0219 	bic.w	r2, r3, #25
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	491a      	ldr	r1, [pc, #104]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	600b      	str	r3, [r1, #0]
 800ca10:	f7f8 fa02 	bl	8004e18 <HAL_GetTick>
 800ca14:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca16:	e008      	b.n	800ca2a <HAL_RCC_OscConfig+0x23e>
 800ca18:	f7f8 f9fe 	bl	8004e18 <HAL_GetTick>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d901      	bls.n	800ca2a <HAL_RCC_OscConfig+0x23e>
 800ca26:	2303      	movs	r3, #3
 800ca28:	e332      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800ca2a:	4b12      	ldr	r3, [pc, #72]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0304 	and.w	r3, r3, #4
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0f0      	beq.n	800ca18 <HAL_RCC_OscConfig+0x22c>
 800ca36:	f7f8 fa1f 	bl	8004e78 <HAL_GetREVID>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d819      	bhi.n	800ca78 <HAL_RCC_OscConfig+0x28c>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b40      	cmp	r3, #64	@ 0x40
 800ca4a:	d108      	bne.n	800ca5e <HAL_RCC_OscConfig+0x272>
 800ca4c:	4b09      	ldr	r3, [pc, #36]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ca54:	4a07      	ldr	r2, [pc, #28]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca5a:	6053      	str	r3, [r2, #4]
 800ca5c:	e030      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800ca5e:	4b05      	ldr	r3, [pc, #20]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	031b      	lsls	r3, r3, #12
 800ca6c:	4901      	ldr	r1, [pc, #4]	@ (800ca74 <HAL_RCC_OscConfig+0x288>)
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	604b      	str	r3, [r1, #4]
 800ca72:	e025      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800ca74:	58024400 	.word	0x58024400
 800ca78:	4b9a      	ldr	r3, [pc, #616]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	061b      	lsls	r3, r3, #24
 800ca86:	4997      	ldr	r1, [pc, #604]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	604b      	str	r3, [r1, #4]
 800ca8c:	e018      	b.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800ca8e:	4b95      	ldr	r3, [pc, #596]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a94      	ldr	r2, [pc, #592]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ca94:	f023 0301 	bic.w	r3, r3, #1
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	f7f8 f9bd 	bl	8004e18 <HAL_GetTick>
 800ca9e:	6278      	str	r0, [r7, #36]	@ 0x24
 800caa0:	e008      	b.n	800cab4 <HAL_RCC_OscConfig+0x2c8>
 800caa2:	f7f8 f9b9 	bl	8004e18 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d901      	bls.n	800cab4 <HAL_RCC_OscConfig+0x2c8>
 800cab0:	2303      	movs	r3, #3
 800cab2:	e2ed      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cab4:	4b8b      	ldr	r3, [pc, #556]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1f0      	bne.n	800caa2 <HAL_RCC_OscConfig+0x2b6>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 80a9 	beq.w	800cc20 <HAL_RCC_OscConfig+0x434>
 800cace:	4b85      	ldr	r3, [pc, #532]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cad6:	61bb      	str	r3, [r7, #24]
 800cad8:	4b82      	ldr	r3, [pc, #520]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b08      	cmp	r3, #8
 800cae2:	d007      	beq.n	800caf4 <HAL_RCC_OscConfig+0x308>
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b18      	cmp	r3, #24
 800cae8:	d13a      	bne.n	800cb60 <HAL_RCC_OscConfig+0x374>
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f003 0303 	and.w	r3, r3, #3
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d135      	bne.n	800cb60 <HAL_RCC_OscConfig+0x374>
 800caf4:	4b7b      	ldr	r3, [pc, #492]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <HAL_RCC_OscConfig+0x320>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	2b80      	cmp	r3, #128	@ 0x80
 800cb06:	d001      	beq.n	800cb0c <HAL_RCC_OscConfig+0x320>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e2c1      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cb0c:	f7f8 f9b4 	bl	8004e78 <HAL_GetREVID>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d817      	bhi.n	800cb4a <HAL_RCC_OscConfig+0x35e>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1b      	ldr	r3, [r3, #32]
 800cb1e:	2b20      	cmp	r3, #32
 800cb20:	d108      	bne.n	800cb34 <HAL_RCC_OscConfig+0x348>
 800cb22:	4b70      	ldr	r3, [pc, #448]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cb2a:	4a6e      	ldr	r2, [pc, #440]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb30:	6053      	str	r3, [r2, #4]
 800cb32:	e075      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cb34:	4b6b      	ldr	r3, [pc, #428]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	069b      	lsls	r3, r3, #26
 800cb42:	4968      	ldr	r1, [pc, #416]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	604b      	str	r3, [r1, #4]
 800cb48:	e06a      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cb4a:	4b66      	ldr	r3, [pc, #408]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	061b      	lsls	r3, r3, #24
 800cb58:	4962      	ldr	r1, [pc, #392]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	60cb      	str	r3, [r1, #12]
 800cb5e:	e05f      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	69db      	ldr	r3, [r3, #28]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d042      	beq.n	800cbee <HAL_RCC_OscConfig+0x402>
 800cb68:	4b5e      	ldr	r3, [pc, #376]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a5d      	ldr	r2, [pc, #372]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	f7f8 f950 	bl	8004e18 <HAL_GetTick>
 800cb78:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb7a:	e008      	b.n	800cb8e <HAL_RCC_OscConfig+0x3a2>
 800cb7c:	f7f8 f94c 	bl	8004e18 <HAL_GetTick>
 800cb80:	4602      	mov	r2, r0
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d901      	bls.n	800cb8e <HAL_RCC_OscConfig+0x3a2>
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	e280      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cb8e:	4b55      	ldr	r3, [pc, #340]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0f0      	beq.n	800cb7c <HAL_RCC_OscConfig+0x390>
 800cb9a:	f7f8 f96d 	bl	8004e78 <HAL_GetREVID>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d817      	bhi.n	800cbd8 <HAL_RCC_OscConfig+0x3ec>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	2b20      	cmp	r3, #32
 800cbae:	d108      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x3d6>
 800cbb0:	4b4c      	ldr	r3, [pc, #304]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cbb8:	4a4a      	ldr	r2, [pc, #296]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cbbe:	6053      	str	r3, [r2, #4]
 800cbc0:	e02e      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cbc2:	4b48      	ldr	r3, [pc, #288]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	069b      	lsls	r3, r3, #26
 800cbd0:	4944      	ldr	r1, [pc, #272]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	604b      	str	r3, [r1, #4]
 800cbd6:	e023      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cbd8:	4b42      	ldr	r3, [pc, #264]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	061b      	lsls	r3, r3, #24
 800cbe6:	493f      	ldr	r1, [pc, #252]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	60cb      	str	r3, [r1, #12]
 800cbec:	e018      	b.n	800cc20 <HAL_RCC_OscConfig+0x434>
 800cbee:	4b3d      	ldr	r3, [pc, #244]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a3c      	ldr	r2, [pc, #240]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cbf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	f7f8 f90d 	bl	8004e18 <HAL_GetTick>
 800cbfe:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc00:	e008      	b.n	800cc14 <HAL_RCC_OscConfig+0x428>
 800cc02:	f7f8 f909 	bl	8004e18 <HAL_GetTick>
 800cc06:	4602      	mov	r2, r0
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d901      	bls.n	800cc14 <HAL_RCC_OscConfig+0x428>
 800cc10:	2303      	movs	r3, #3
 800cc12:	e23d      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cc14:	4b33      	ldr	r3, [pc, #204]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1f0      	bne.n	800cc02 <HAL_RCC_OscConfig+0x416>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 0308 	and.w	r3, r3, #8
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d036      	beq.n	800cc9a <HAL_RCC_OscConfig+0x4ae>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d019      	beq.n	800cc68 <HAL_RCC_OscConfig+0x47c>
 800cc34:	4b2b      	ldr	r3, [pc, #172]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc38:	4a2a      	ldr	r2, [pc, #168]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc3a:	f043 0301 	orr.w	r3, r3, #1
 800cc3e:	6753      	str	r3, [r2, #116]	@ 0x74
 800cc40:	f7f8 f8ea 	bl	8004e18 <HAL_GetTick>
 800cc44:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc46:	e008      	b.n	800cc5a <HAL_RCC_OscConfig+0x46e>
 800cc48:	f7f8 f8e6 	bl	8004e18 <HAL_GetTick>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d901      	bls.n	800cc5a <HAL_RCC_OscConfig+0x46e>
 800cc56:	2303      	movs	r3, #3
 800cc58:	e21a      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cc5a:	4b22      	ldr	r3, [pc, #136]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0f0      	beq.n	800cc48 <HAL_RCC_OscConfig+0x45c>
 800cc66:	e018      	b.n	800cc9a <HAL_RCC_OscConfig+0x4ae>
 800cc68:	4b1e      	ldr	r3, [pc, #120]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc6e:	f023 0301 	bic.w	r3, r3, #1
 800cc72:	6753      	str	r3, [r2, #116]	@ 0x74
 800cc74:	f7f8 f8d0 	bl	8004e18 <HAL_GetTick>
 800cc78:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc7a:	e008      	b.n	800cc8e <HAL_RCC_OscConfig+0x4a2>
 800cc7c:	f7f8 f8cc 	bl	8004e18 <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d901      	bls.n	800cc8e <HAL_RCC_OscConfig+0x4a2>
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e200      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cc8e:	4b15      	ldr	r3, [pc, #84]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800cc90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1f0      	bne.n	800cc7c <HAL_RCC_OscConfig+0x490>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 0320 	and.w	r3, r3, #32
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d039      	beq.n	800cd1a <HAL_RCC_OscConfig+0x52e>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d01c      	beq.n	800cce8 <HAL_RCC_OscConfig+0x4fc>
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a0c      	ldr	r2, [pc, #48]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ccb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	f7f8 f8ad 	bl	8004e18 <HAL_GetTick>
 800ccbe:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccc0:	e008      	b.n	800ccd4 <HAL_RCC_OscConfig+0x4e8>
 800ccc2:	f7f8 f8a9 	bl	8004e18 <HAL_GetTick>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d901      	bls.n	800ccd4 <HAL_RCC_OscConfig+0x4e8>
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e1dd      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800ccd4:	4b03      	ldr	r3, [pc, #12]	@ (800cce4 <HAL_RCC_OscConfig+0x4f8>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d0f0      	beq.n	800ccc2 <HAL_RCC_OscConfig+0x4d6>
 800cce0:	e01b      	b.n	800cd1a <HAL_RCC_OscConfig+0x52e>
 800cce2:	bf00      	nop
 800cce4:	58024400 	.word	0x58024400
 800cce8:	4b9b      	ldr	r3, [pc, #620]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a9a      	ldr	r2, [pc, #616]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ccee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	f7f8 f890 	bl	8004e18 <HAL_GetTick>
 800ccf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccfa:	e008      	b.n	800cd0e <HAL_RCC_OscConfig+0x522>
 800ccfc:	f7f8 f88c 	bl	8004e18 <HAL_GetTick>
 800cd00:	4602      	mov	r2, r0
 800cd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d901      	bls.n	800cd0e <HAL_RCC_OscConfig+0x522>
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e1c0      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cd0e:	4b92      	ldr	r3, [pc, #584]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1f0      	bne.n	800ccfc <HAL_RCC_OscConfig+0x510>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0304 	and.w	r3, r3, #4
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 8081 	beq.w	800ce2a <HAL_RCC_OscConfig+0x63e>
 800cd28:	4b8c      	ldr	r3, [pc, #560]	@ (800cf5c <HAL_RCC_OscConfig+0x770>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a8b      	ldr	r2, [pc, #556]	@ (800cf5c <HAL_RCC_OscConfig+0x770>)
 800cd2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	f7f8 f870 	bl	8004e18 <HAL_GetTick>
 800cd38:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd3a:	e008      	b.n	800cd4e <HAL_RCC_OscConfig+0x562>
 800cd3c:	f7f8 f86c 	bl	8004e18 <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	2b64      	cmp	r3, #100	@ 0x64
 800cd48:	d901      	bls.n	800cd4e <HAL_RCC_OscConfig+0x562>
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e1a0      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cd4e:	4b83      	ldr	r3, [pc, #524]	@ (800cf5c <HAL_RCC_OscConfig+0x770>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0f0      	beq.n	800cd3c <HAL_RCC_OscConfig+0x550>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d106      	bne.n	800cd70 <HAL_RCC_OscConfig+0x584>
 800cd62:	4b7d      	ldr	r3, [pc, #500]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd66:	4a7c      	ldr	r2, [pc, #496]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd68:	f043 0301 	orr.w	r3, r3, #1
 800cd6c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd6e:	e02d      	b.n	800cdcc <HAL_RCC_OscConfig+0x5e0>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10c      	bne.n	800cd92 <HAL_RCC_OscConfig+0x5a6>
 800cd78:	4b77      	ldr	r3, [pc, #476]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd7c:	4a76      	ldr	r2, [pc, #472]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd7e:	f023 0301 	bic.w	r3, r3, #1
 800cd82:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd84:	4b74      	ldr	r3, [pc, #464]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd88:	4a73      	ldr	r2, [pc, #460]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd8a:	f023 0304 	bic.w	r3, r3, #4
 800cd8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd90:	e01c      	b.n	800cdcc <HAL_RCC_OscConfig+0x5e0>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	2b05      	cmp	r3, #5
 800cd98:	d10c      	bne.n	800cdb4 <HAL_RCC_OscConfig+0x5c8>
 800cd9a:	4b6f      	ldr	r3, [pc, #444]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cd9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd9e:	4a6e      	ldr	r2, [pc, #440]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cda0:	f043 0304 	orr.w	r3, r3, #4
 800cda4:	6713      	str	r3, [r2, #112]	@ 0x70
 800cda6:	4b6c      	ldr	r3, [pc, #432]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdaa:	4a6b      	ldr	r2, [pc, #428]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdac:	f043 0301 	orr.w	r3, r3, #1
 800cdb0:	6713      	str	r3, [r2, #112]	@ 0x70
 800cdb2:	e00b      	b.n	800cdcc <HAL_RCC_OscConfig+0x5e0>
 800cdb4:	4b68      	ldr	r3, [pc, #416]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdb8:	4a67      	ldr	r2, [pc, #412]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdba:	f023 0301 	bic.w	r3, r3, #1
 800cdbe:	6713      	str	r3, [r2, #112]	@ 0x70
 800cdc0:	4b65      	ldr	r3, [pc, #404]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdc4:	4a64      	ldr	r2, [pc, #400]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdc6:	f023 0304 	bic.w	r3, r3, #4
 800cdca:	6713      	str	r3, [r2, #112]	@ 0x70
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d015      	beq.n	800ce00 <HAL_RCC_OscConfig+0x614>
 800cdd4:	f7f8 f820 	bl	8004e18 <HAL_GetTick>
 800cdd8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cdda:	e00a      	b.n	800cdf2 <HAL_RCC_OscConfig+0x606>
 800cddc:	f7f8 f81c 	bl	8004e18 <HAL_GetTick>
 800cde0:	4602      	mov	r2, r0
 800cde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCC_OscConfig+0x606>
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e14e      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cdf2:	4b59      	ldr	r3, [pc, #356]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cdf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0ee      	beq.n	800cddc <HAL_RCC_OscConfig+0x5f0>
 800cdfe:	e014      	b.n	800ce2a <HAL_RCC_OscConfig+0x63e>
 800ce00:	f7f8 f80a 	bl	8004e18 <HAL_GetTick>
 800ce04:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce06:	e00a      	b.n	800ce1e <HAL_RCC_OscConfig+0x632>
 800ce08:	f7f8 f806 	bl	8004e18 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d901      	bls.n	800ce1e <HAL_RCC_OscConfig+0x632>
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e138      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800ce1e:	4b4e      	ldr	r3, [pc, #312]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1ee      	bne.n	800ce08 <HAL_RCC_OscConfig+0x61c>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 812d 	beq.w	800d08e <HAL_RCC_OscConfig+0x8a2>
 800ce34:	4b48      	ldr	r3, [pc, #288]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce3c:	2b18      	cmp	r3, #24
 800ce3e:	f000 80bd 	beq.w	800cfbc <HAL_RCC_OscConfig+0x7d0>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	f040 809e 	bne.w	800cf88 <HAL_RCC_OscConfig+0x79c>
 800ce4c:	4b42      	ldr	r3, [pc, #264]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a41      	ldr	r2, [pc, #260]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	f7f7 ffde 	bl	8004e18 <HAL_GetTick>
 800ce5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce5e:	e008      	b.n	800ce72 <HAL_RCC_OscConfig+0x686>
 800ce60:	f7f7 ffda 	bl	8004e18 <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d901      	bls.n	800ce72 <HAL_RCC_OscConfig+0x686>
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e10e      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800ce72:	4b39      	ldr	r3, [pc, #228]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f0      	bne.n	800ce60 <HAL_RCC_OscConfig+0x674>
 800ce7e:	4b36      	ldr	r3, [pc, #216]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce82:	4b37      	ldr	r3, [pc, #220]	@ (800cf60 <HAL_RCC_OscConfig+0x774>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce8e:	0112      	lsls	r2, r2, #4
 800ce90:	430a      	orrs	r2, r1
 800ce92:	4931      	ldr	r1, [pc, #196]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	628b      	str	r3, [r1, #40]	@ 0x28
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cea6:	3b01      	subs	r3, #1
 800cea8:	025b      	lsls	r3, r3, #9
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	431a      	orrs	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	041b      	lsls	r3, r3, #16
 800ceb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ceba:	431a      	orrs	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec0:	3b01      	subs	r3, #1
 800cec2:	061b      	lsls	r3, r3, #24
 800cec4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cec8:	4923      	ldr	r1, [pc, #140]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ceca:	4313      	orrs	r3, r2
 800cecc:	630b      	str	r3, [r1, #48]	@ 0x30
 800cece:	4b22      	ldr	r3, [pc, #136]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ced0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced2:	4a21      	ldr	r2, [pc, #132]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ced4:	f023 0301 	bic.w	r3, r3, #1
 800ced8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ceda:	4b1f      	ldr	r3, [pc, #124]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cedc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cede:	4b21      	ldr	r3, [pc, #132]	@ (800cf64 <HAL_RCC_OscConfig+0x778>)
 800cee0:	4013      	ands	r3, r2
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cee6:	00d2      	lsls	r2, r2, #3
 800cee8:	491b      	ldr	r1, [pc, #108]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800ceea:	4313      	orrs	r3, r2
 800ceec:	634b      	str	r3, [r1, #52]	@ 0x34
 800ceee:	4b1a      	ldr	r3, [pc, #104]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef2:	f023 020c 	bic.w	r2, r3, #12
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cefa:	4917      	ldr	r1, [pc, #92]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cefc:	4313      	orrs	r3, r2
 800cefe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800cf00:	4b15      	ldr	r3, [pc, #84]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf04:	f023 0202 	bic.w	r2, r3, #2
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf0c:	4912      	ldr	r1, [pc, #72]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800cf12:	4b11      	ldr	r3, [pc, #68]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf16:	4a10      	ldr	r2, [pc, #64]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf22:	4a0d      	ldr	r2, [pc, #52]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf2a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2e:	4a0a      	ldr	r2, [pc, #40]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cf34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf36:	4b08      	ldr	r3, [pc, #32]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3a:	4a07      	ldr	r2, [pc, #28]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf3c:	f043 0301 	orr.w	r3, r3, #1
 800cf40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf42:	4b05      	ldr	r3, [pc, #20]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a04      	ldr	r2, [pc, #16]	@ (800cf58 <HAL_RCC_OscConfig+0x76c>)
 800cf48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf4c:	6013      	str	r3, [r2, #0]
 800cf4e:	f7f7 ff63 	bl	8004e18 <HAL_GetTick>
 800cf52:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf54:	e011      	b.n	800cf7a <HAL_RCC_OscConfig+0x78e>
 800cf56:	bf00      	nop
 800cf58:	58024400 	.word	0x58024400
 800cf5c:	58024800 	.word	0x58024800
 800cf60:	fffffc0c 	.word	0xfffffc0c
 800cf64:	ffff0007 	.word	0xffff0007
 800cf68:	f7f7 ff56 	bl	8004e18 <HAL_GetTick>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d901      	bls.n	800cf7a <HAL_RCC_OscConfig+0x78e>
 800cf76:	2303      	movs	r3, #3
 800cf78:	e08a      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cf7a:	4b47      	ldr	r3, [pc, #284]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0f0      	beq.n	800cf68 <HAL_RCC_OscConfig+0x77c>
 800cf86:	e082      	b.n	800d08e <HAL_RCC_OscConfig+0x8a2>
 800cf88:	4b43      	ldr	r3, [pc, #268]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a42      	ldr	r2, [pc, #264]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cf8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	f7f7 ff40 	bl	8004e18 <HAL_GetTick>
 800cf98:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf9a:	e008      	b.n	800cfae <HAL_RCC_OscConfig+0x7c2>
 800cf9c:	f7f7 ff3c 	bl	8004e18 <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d901      	bls.n	800cfae <HAL_RCC_OscConfig+0x7c2>
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e070      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800cfae:	4b3a      	ldr	r3, [pc, #232]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <HAL_RCC_OscConfig+0x7b0>
 800cfba:	e068      	b.n	800d08e <HAL_RCC_OscConfig+0x8a2>
 800cfbc:	4b36      	ldr	r3, [pc, #216]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfc0:	613b      	str	r3, [r7, #16]
 800cfc2:	4b35      	ldr	r3, [pc, #212]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800cfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d031      	beq.n	800d034 <HAL_RCC_OscConfig+0x848>
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f003 0203 	and.w	r2, r3, #3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d12a      	bne.n	800d034 <HAL_RCC_OscConfig+0x848>
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	091b      	lsrs	r3, r3, #4
 800cfe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d122      	bne.n	800d034 <HAL_RCC_OscConfig+0x848>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff8:	3b01      	subs	r3, #1
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d11a      	bne.n	800d034 <HAL_RCC_OscConfig+0x848>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	0a5b      	lsrs	r3, r3, #9
 800d002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d00a:	3b01      	subs	r3, #1
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d111      	bne.n	800d034 <HAL_RCC_OscConfig+0x848>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	0c1b      	lsrs	r3, r3, #16
 800d014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01c:	3b01      	subs	r3, #1
 800d01e:	429a      	cmp	r2, r3
 800d020:	d108      	bne.n	800d034 <HAL_RCC_OscConfig+0x848>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	0e1b      	lsrs	r3, r3, #24
 800d026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02e:	3b01      	subs	r3, #1
 800d030:	429a      	cmp	r2, r3
 800d032:	d001      	beq.n	800d038 <HAL_RCC_OscConfig+0x84c>
 800d034:	2301      	movs	r3, #1
 800d036:	e02b      	b.n	800d090 <HAL_RCC_OscConfig+0x8a4>
 800d038:	4b17      	ldr	r3, [pc, #92]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03c:	08db      	lsrs	r3, r3, #3
 800d03e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d042:	613b      	str	r3, [r7, #16]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d01f      	beq.n	800d08e <HAL_RCC_OscConfig+0x8a2>
 800d04e:	4b12      	ldr	r3, [pc, #72]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d052:	4a11      	ldr	r2, [pc, #68]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d054:	f023 0301 	bic.w	r3, r3, #1
 800d058:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d05a:	f7f7 fedd 	bl	8004e18 <HAL_GetTick>
 800d05e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d060:	bf00      	nop
 800d062:	f7f7 fed9 	bl	8004e18 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d0f9      	beq.n	800d062 <HAL_RCC_OscConfig+0x876>
 800d06e:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d072:	4b0a      	ldr	r3, [pc, #40]	@ (800d09c <HAL_RCC_OscConfig+0x8b0>)
 800d074:	4013      	ands	r3, r2
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d07a:	00d2      	lsls	r2, r2, #3
 800d07c:	4906      	ldr	r1, [pc, #24]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	634b      	str	r3, [r1, #52]	@ 0x34
 800d082:	4b05      	ldr	r3, [pc, #20]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d086:	4a04      	ldr	r2, [pc, #16]	@ (800d098 <HAL_RCC_OscConfig+0x8ac>)
 800d088:	f043 0301 	orr.w	r3, r3, #1
 800d08c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d08e:	2300      	movs	r3, #0
 800d090:	4618      	mov	r0, r3
 800d092:	3730      	adds	r7, #48	@ 0x30
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	58024400 	.word	0x58024400
 800d09c:	ffff0007 	.word	0xffff0007

0800d0a0 <HAL_RCC_ClockConfig>:
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <HAL_RCC_ClockConfig+0x14>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e19c      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d0b4:	4b8a      	ldr	r3, [pc, #552]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 030f 	and.w	r3, r3, #15
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d910      	bls.n	800d0e4 <HAL_RCC_ClockConfig+0x44>
 800d0c2:	4b87      	ldr	r3, [pc, #540]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f023 020f 	bic.w	r2, r3, #15
 800d0ca:	4985      	ldr	r1, [pc, #532]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	600b      	str	r3, [r1, #0]
 800d0d2:	4b83      	ldr	r3, [pc, #524]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 030f 	and.w	r3, r3, #15
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d001      	beq.n	800d0e4 <HAL_RCC_ClockConfig+0x44>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e184      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 0304 	and.w	r3, r3, #4
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d010      	beq.n	800d112 <HAL_RCC_ClockConfig+0x72>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	691a      	ldr	r2, [r3, #16]
 800d0f4:	4b7b      	ldr	r3, [pc, #492]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d908      	bls.n	800d112 <HAL_RCC_ClockConfig+0x72>
 800d100:	4b78      	ldr	r3, [pc, #480]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	4975      	ldr	r1, [pc, #468]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	618b      	str	r3, [r1, #24]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f003 0308 	and.w	r3, r3, #8
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d010      	beq.n	800d140 <HAL_RCC_ClockConfig+0xa0>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	695a      	ldr	r2, [r3, #20]
 800d122:	4b70      	ldr	r3, [pc, #448]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d908      	bls.n	800d140 <HAL_RCC_ClockConfig+0xa0>
 800d12e:	4b6d      	ldr	r3, [pc, #436]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d130:	69db      	ldr	r3, [r3, #28]
 800d132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	496a      	ldr	r1, [pc, #424]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d13c:	4313      	orrs	r3, r2
 800d13e:	61cb      	str	r3, [r1, #28]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0310 	and.w	r3, r3, #16
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d010      	beq.n	800d16e <HAL_RCC_ClockConfig+0xce>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	4b64      	ldr	r3, [pc, #400]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d158:	429a      	cmp	r2, r3
 800d15a:	d908      	bls.n	800d16e <HAL_RCC_ClockConfig+0xce>
 800d15c:	4b61      	ldr	r3, [pc, #388]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	495e      	ldr	r1, [pc, #376]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	61cb      	str	r3, [r1, #28]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d010      	beq.n	800d19c <HAL_RCC_ClockConfig+0xfc>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	69da      	ldr	r2, [r3, #28]
 800d17e:	4b59      	ldr	r3, [pc, #356]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d186:	429a      	cmp	r2, r3
 800d188:	d908      	bls.n	800d19c <HAL_RCC_ClockConfig+0xfc>
 800d18a:	4b56      	ldr	r3, [pc, #344]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	69db      	ldr	r3, [r3, #28]
 800d196:	4953      	ldr	r1, [pc, #332]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	620b      	str	r3, [r1, #32]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0302 	and.w	r3, r3, #2
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d010      	beq.n	800d1ca <HAL_RCC_ClockConfig+0x12a>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	4b4d      	ldr	r3, [pc, #308]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	f003 030f 	and.w	r3, r3, #15
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d908      	bls.n	800d1ca <HAL_RCC_ClockConfig+0x12a>
 800d1b8:	4b4a      	ldr	r3, [pc, #296]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	f023 020f 	bic.w	r2, r3, #15
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	4947      	ldr	r1, [pc, #284]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	618b      	str	r3, [r1, #24]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d055      	beq.n	800d282 <HAL_RCC_ClockConfig+0x1e2>
 800d1d6:	4b43      	ldr	r3, [pc, #268]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	4940      	ldr	r1, [pc, #256]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	618b      	str	r3, [r1, #24]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d107      	bne.n	800d200 <HAL_RCC_ClockConfig+0x160>
 800d1f0:	4b3c      	ldr	r3, [pc, #240]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d121      	bne.n	800d240 <HAL_RCC_ClockConfig+0x1a0>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e0f6      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	2b03      	cmp	r3, #3
 800d206:	d107      	bne.n	800d218 <HAL_RCC_ClockConfig+0x178>
 800d208:	4b36      	ldr	r3, [pc, #216]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d115      	bne.n	800d240 <HAL_RCC_ClockConfig+0x1a0>
 800d214:	2301      	movs	r3, #1
 800d216:	e0ea      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d107      	bne.n	800d230 <HAL_RCC_ClockConfig+0x190>
 800d220:	4b30      	ldr	r3, [pc, #192]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <HAL_RCC_ClockConfig+0x1a0>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e0de      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d230:	4b2c      	ldr	r3, [pc, #176]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <HAL_RCC_ClockConfig+0x1a0>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e0d6      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d240:	4b28      	ldr	r3, [pc, #160]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	f023 0207 	bic.w	r2, r3, #7
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4925      	ldr	r1, [pc, #148]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d24e:	4313      	orrs	r3, r2
 800d250:	610b      	str	r3, [r1, #16]
 800d252:	f7f7 fde1 	bl	8004e18 <HAL_GetTick>
 800d256:	6178      	str	r0, [r7, #20]
 800d258:	e00a      	b.n	800d270 <HAL_RCC_ClockConfig+0x1d0>
 800d25a:	f7f7 fddd 	bl	8004e18 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d268:	4293      	cmp	r3, r2
 800d26a:	d901      	bls.n	800d270 <HAL_RCC_ClockConfig+0x1d0>
 800d26c:	2303      	movs	r3, #3
 800d26e:	e0be      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d270:	4b1c      	ldr	r3, [pc, #112]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	429a      	cmp	r2, r3
 800d280:	d1eb      	bne.n	800d25a <HAL_RCC_ClockConfig+0x1ba>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0302 	and.w	r3, r3, #2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d010      	beq.n	800d2b0 <HAL_RCC_ClockConfig+0x210>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	4b14      	ldr	r3, [pc, #80]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	f003 030f 	and.w	r3, r3, #15
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d208      	bcs.n	800d2b0 <HAL_RCC_ClockConfig+0x210>
 800d29e:	4b11      	ldr	r3, [pc, #68]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	f023 020f 	bic.w	r2, r3, #15
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	490e      	ldr	r1, [pc, #56]	@ (800d2e4 <HAL_RCC_ClockConfig+0x244>)
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	618b      	str	r3, [r1, #24]
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 030f 	and.w	r3, r3, #15
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d214      	bcs.n	800d2e8 <HAL_RCC_ClockConfig+0x248>
 800d2be:	4b08      	ldr	r3, [pc, #32]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f023 020f 	bic.w	r2, r3, #15
 800d2c6:	4906      	ldr	r1, [pc, #24]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	600b      	str	r3, [r1, #0]
 800d2ce:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <HAL_RCC_ClockConfig+0x240>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 030f 	and.w	r3, r3, #15
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d005      	beq.n	800d2e8 <HAL_RCC_ClockConfig+0x248>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e086      	b.n	800d3ee <HAL_RCC_ClockConfig+0x34e>
 800d2e0:	52002000 	.word	0x52002000
 800d2e4:	58024400 	.word	0x58024400
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d010      	beq.n	800d316 <HAL_RCC_ClockConfig+0x276>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	691a      	ldr	r2, [r3, #16]
 800d2f8:	4b3f      	ldr	r3, [pc, #252]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d300:	429a      	cmp	r2, r3
 800d302:	d208      	bcs.n	800d316 <HAL_RCC_ClockConfig+0x276>
 800d304:	4b3c      	ldr	r3, [pc, #240]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	4939      	ldr	r1, [pc, #228]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d312:	4313      	orrs	r3, r2
 800d314:	618b      	str	r3, [r1, #24]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 0308 	and.w	r3, r3, #8
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d010      	beq.n	800d344 <HAL_RCC_ClockConfig+0x2a4>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	695a      	ldr	r2, [r3, #20]
 800d326:	4b34      	ldr	r3, [pc, #208]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d32e:	429a      	cmp	r2, r3
 800d330:	d208      	bcs.n	800d344 <HAL_RCC_ClockConfig+0x2a4>
 800d332:	4b31      	ldr	r3, [pc, #196]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d334:	69db      	ldr	r3, [r3, #28]
 800d336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	492e      	ldr	r1, [pc, #184]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d340:	4313      	orrs	r3, r2
 800d342:	61cb      	str	r3, [r1, #28]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0310 	and.w	r3, r3, #16
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d010      	beq.n	800d372 <HAL_RCC_ClockConfig+0x2d2>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	699a      	ldr	r2, [r3, #24]
 800d354:	4b28      	ldr	r3, [pc, #160]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d356:	69db      	ldr	r3, [r3, #28]
 800d358:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d208      	bcs.n	800d372 <HAL_RCC_ClockConfig+0x2d2>
 800d360:	4b25      	ldr	r3, [pc, #148]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	4922      	ldr	r1, [pc, #136]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d36e:	4313      	orrs	r3, r2
 800d370:	61cb      	str	r3, [r1, #28]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0320 	and.w	r3, r3, #32
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d010      	beq.n	800d3a0 <HAL_RCC_ClockConfig+0x300>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	69da      	ldr	r2, [r3, #28]
 800d382:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d208      	bcs.n	800d3a0 <HAL_RCC_ClockConfig+0x300>
 800d38e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	4917      	ldr	r1, [pc, #92]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d39c:	4313      	orrs	r3, r2
 800d39e:	620b      	str	r3, [r1, #32]
 800d3a0:	f000 f834 	bl	800d40c <HAL_RCC_GetSysClockFreq>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	4b14      	ldr	r3, [pc, #80]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	0a1b      	lsrs	r3, r3, #8
 800d3ac:	f003 030f 	and.w	r3, r3, #15
 800d3b0:	4912      	ldr	r1, [pc, #72]	@ (800d3fc <HAL_RCC_ClockConfig+0x35c>)
 800d3b2:	5ccb      	ldrb	r3, [r1, r3]
 800d3b4:	f003 031f 	and.w	r3, r3, #31
 800d3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d3bc:	613b      	str	r3, [r7, #16]
 800d3be:	4b0e      	ldr	r3, [pc, #56]	@ (800d3f8 <HAL_RCC_ClockConfig+0x358>)
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	f003 030f 	and.w	r3, r3, #15
 800d3c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d3fc <HAL_RCC_ClockConfig+0x35c>)
 800d3c8:	5cd3      	ldrb	r3, [r2, r3]
 800d3ca:	f003 031f 	and.w	r3, r3, #31
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d400 <HAL_RCC_ClockConfig+0x360>)
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d404 <HAL_RCC_ClockConfig+0x364>)
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	4b0a      	ldr	r3, [pc, #40]	@ (800d408 <HAL_RCC_ClockConfig+0x368>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f7 fcce 	bl	8004d84 <HAL_InitTick>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	58024400 	.word	0x58024400
 800d3fc:	0801b280 	.word	0x0801b280
 800d400:	2400022c 	.word	0x2400022c
 800d404:	24000228 	.word	0x24000228
 800d408:	24000230 	.word	0x24000230

0800d40c <HAL_RCC_GetSysClockFreq>:
 800d40c:	b480      	push	{r7}
 800d40e:	b089      	sub	sp, #36	@ 0x24
 800d410:	af00      	add	r7, sp, #0
 800d412:	4bb3      	ldr	r3, [pc, #716]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d41a:	2b18      	cmp	r3, #24
 800d41c:	f200 8155 	bhi.w	800d6ca <HAL_RCC_GetSysClockFreq+0x2be>
 800d420:	a201      	add	r2, pc, #4	@ (adr r2, 800d428 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d426:	bf00      	nop
 800d428:	0800d48d 	.word	0x0800d48d
 800d42c:	0800d6cb 	.word	0x0800d6cb
 800d430:	0800d6cb 	.word	0x0800d6cb
 800d434:	0800d6cb 	.word	0x0800d6cb
 800d438:	0800d6cb 	.word	0x0800d6cb
 800d43c:	0800d6cb 	.word	0x0800d6cb
 800d440:	0800d6cb 	.word	0x0800d6cb
 800d444:	0800d6cb 	.word	0x0800d6cb
 800d448:	0800d4b3 	.word	0x0800d4b3
 800d44c:	0800d6cb 	.word	0x0800d6cb
 800d450:	0800d6cb 	.word	0x0800d6cb
 800d454:	0800d6cb 	.word	0x0800d6cb
 800d458:	0800d6cb 	.word	0x0800d6cb
 800d45c:	0800d6cb 	.word	0x0800d6cb
 800d460:	0800d6cb 	.word	0x0800d6cb
 800d464:	0800d6cb 	.word	0x0800d6cb
 800d468:	0800d4b9 	.word	0x0800d4b9
 800d46c:	0800d6cb 	.word	0x0800d6cb
 800d470:	0800d6cb 	.word	0x0800d6cb
 800d474:	0800d6cb 	.word	0x0800d6cb
 800d478:	0800d6cb 	.word	0x0800d6cb
 800d47c:	0800d6cb 	.word	0x0800d6cb
 800d480:	0800d6cb 	.word	0x0800d6cb
 800d484:	0800d6cb 	.word	0x0800d6cb
 800d488:	0800d4bf 	.word	0x0800d4bf
 800d48c:	4b94      	ldr	r3, [pc, #592]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b00      	cmp	r3, #0
 800d496:	d009      	beq.n	800d4ac <HAL_RCC_GetSysClockFreq+0xa0>
 800d498:	4b91      	ldr	r3, [pc, #580]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	08db      	lsrs	r3, r3, #3
 800d49e:	f003 0303 	and.w	r3, r3, #3
 800d4a2:	4a90      	ldr	r2, [pc, #576]	@ (800d6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a8:	61bb      	str	r3, [r7, #24]
 800d4aa:	e111      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d4ac:	4b8d      	ldr	r3, [pc, #564]	@ (800d6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4ae:	61bb      	str	r3, [r7, #24]
 800d4b0:	e10e      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d4b2:	4b8d      	ldr	r3, [pc, #564]	@ (800d6e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	e10b      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d4b8:	4b8c      	ldr	r3, [pc, #560]	@ (800d6ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d4ba:	61bb      	str	r3, [r7, #24]
 800d4bc:	e108      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d4be:	4b88      	ldr	r3, [pc, #544]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c2:	f003 0303 	and.w	r3, r3, #3
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	4b85      	ldr	r3, [pc, #532]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4cc:	091b      	lsrs	r3, r3, #4
 800d4ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4d2:	613b      	str	r3, [r7, #16]
 800d4d4:	4b82      	ldr	r3, [pc, #520]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	60fb      	str	r3, [r7, #12]
 800d4de:	4b80      	ldr	r3, [pc, #512]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e2:	08db      	lsrs	r3, r3, #3
 800d4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	fb02 f303 	mul.w	r3, r2, r3
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f6:	edc7 7a02 	vstr	s15, [r7, #8]
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 80e1 	beq.w	800d6c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	2b02      	cmp	r3, #2
 800d506:	f000 8083 	beq.w	800d610 <HAL_RCC_GetSysClockFreq+0x204>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	f200 80a1 	bhi.w	800d654 <HAL_RCC_GetSysClockFreq+0x248>
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <HAL_RCC_GetSysClockFreq+0x114>
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d056      	beq.n	800d5cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800d51e:	e099      	b.n	800d654 <HAL_RCC_GetSysClockFreq+0x248>
 800d520:	4b6f      	ldr	r3, [pc, #444]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f003 0320 	and.w	r3, r3, #32
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d02d      	beq.n	800d588 <HAL_RCC_GetSysClockFreq+0x17c>
 800d52c:	4b6c      	ldr	r3, [pc, #432]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	08db      	lsrs	r3, r3, #3
 800d532:	f003 0303 	and.w	r3, r3, #3
 800d536:	4a6b      	ldr	r2, [pc, #428]	@ (800d6e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d538:	fa22 f303 	lsr.w	r3, r2, r3
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	ee07 3a90 	vmov	s15, r3
 800d544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	ee07 3a90 	vmov	s15, r3
 800d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d556:	4b62      	ldr	r3, [pc, #392]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d566:	ed97 6a02 	vldr	s12, [r7, #8]
 800d56a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d582:	edc7 7a07 	vstr	s15, [r7, #28]
 800d586:	e087      	b.n	800d698 <HAL_RCC_GetSysClockFreq+0x28c>
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	ee07 3a90 	vmov	s15, r3
 800d58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d592:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d6f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d59a:	4b51      	ldr	r3, [pc, #324]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c6:	edc7 7a07 	vstr	s15, [r7, #28]
 800d5ca:	e065      	b.n	800d698 <HAL_RCC_GetSysClockFreq+0x28c>
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	ee07 3a90 	vmov	s15, r3
 800d5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d6f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5de:	4b40      	ldr	r3, [pc, #256]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d60a:	edc7 7a07 	vstr	s15, [r7, #28]
 800d60e:	e043      	b.n	800d698 <HAL_RCC_GetSysClockFreq+0x28c>
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d6fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800d61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d622:	4b2f      	ldr	r3, [pc, #188]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d62a:	ee07 3a90 	vmov	s15, r3
 800d62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d632:	ed97 6a02 	vldr	s12, [r7, #8]
 800d636:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64e:	edc7 7a07 	vstr	s15, [r7, #28]
 800d652:	e021      	b.n	800d698 <HAL_RCC_GetSysClockFreq+0x28c>
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	ee07 3a90 	vmov	s15, r3
 800d65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d6f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d666:	4b1e      	ldr	r3, [pc, #120]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d676:	ed97 6a02 	vldr	s12, [r7, #8]
 800d67a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d6f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d692:	edc7 7a07 	vstr	s15, [r7, #28]
 800d696:	bf00      	nop
 800d698:	4b11      	ldr	r3, [pc, #68]	@ (800d6e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d69c:	0a5b      	lsrs	r3, r3, #9
 800d69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	603b      	str	r3, [r7, #0]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6bc:	ee17 3a90 	vmov	r3, s15
 800d6c0:	61bb      	str	r3, [r7, #24]
 800d6c2:	e005      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	61bb      	str	r3, [r7, #24]
 800d6c8:	e002      	b.n	800d6d0 <HAL_RCC_GetSysClockFreq+0x2c4>
 800d6ca:	4b07      	ldr	r3, [pc, #28]	@ (800d6e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d6cc:	61bb      	str	r3, [r7, #24]
 800d6ce:	bf00      	nop
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3724      	adds	r7, #36	@ 0x24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	58024400 	.word	0x58024400
 800d6e4:	03d09000 	.word	0x03d09000
 800d6e8:	003d0900 	.word	0x003d0900
 800d6ec:	017d7840 	.word	0x017d7840
 800d6f0:	46000000 	.word	0x46000000
 800d6f4:	4c742400 	.word	0x4c742400
 800d6f8:	4a742400 	.word	0x4a742400
 800d6fc:	4bbebc20 	.word	0x4bbebc20

0800d700 <HAL_RCC_GetHCLKFreq>:
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	f7ff fe81 	bl	800d40c <HAL_RCC_GetSysClockFreq>
 800d70a:	4602      	mov	r2, r0
 800d70c:	4b10      	ldr	r3, [pc, #64]	@ (800d750 <HAL_RCC_GetHCLKFreq+0x50>)
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	0a1b      	lsrs	r3, r3, #8
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	490f      	ldr	r1, [pc, #60]	@ (800d754 <HAL_RCC_GetHCLKFreq+0x54>)
 800d718:	5ccb      	ldrb	r3, [r1, r3]
 800d71a:	f003 031f 	and.w	r3, r3, #31
 800d71e:	fa22 f303 	lsr.w	r3, r2, r3
 800d722:	607b      	str	r3, [r7, #4]
 800d724:	4b0a      	ldr	r3, [pc, #40]	@ (800d750 <HAL_RCC_GetHCLKFreq+0x50>)
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	4a09      	ldr	r2, [pc, #36]	@ (800d754 <HAL_RCC_GetHCLKFreq+0x54>)
 800d72e:	5cd3      	ldrb	r3, [r2, r3]
 800d730:	f003 031f 	and.w	r3, r3, #31
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	fa22 f303 	lsr.w	r3, r2, r3
 800d73a:	4a07      	ldr	r2, [pc, #28]	@ (800d758 <HAL_RCC_GetHCLKFreq+0x58>)
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	4a07      	ldr	r2, [pc, #28]	@ (800d75c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6013      	str	r3, [r2, #0]
 800d744:	4b04      	ldr	r3, [pc, #16]	@ (800d758 <HAL_RCC_GetHCLKFreq+0x58>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	58024400 	.word	0x58024400
 800d754:	0801b280 	.word	0x0801b280
 800d758:	2400022c 	.word	0x2400022c
 800d75c:	24000228 	.word	0x24000228

0800d760 <HAL_RCC_GetPCLK1Freq>:
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
 800d764:	f7ff ffcc 	bl	800d700 <HAL_RCC_GetHCLKFreq>
 800d768:	4602      	mov	r2, r0
 800d76a:	4b06      	ldr	r3, [pc, #24]	@ (800d784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d76c:	69db      	ldr	r3, [r3, #28]
 800d76e:	091b      	lsrs	r3, r3, #4
 800d770:	f003 0307 	and.w	r3, r3, #7
 800d774:	4904      	ldr	r1, [pc, #16]	@ (800d788 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d776:	5ccb      	ldrb	r3, [r1, r3]
 800d778:	f003 031f 	and.w	r3, r3, #31
 800d77c:	fa22 f303 	lsr.w	r3, r2, r3
 800d780:	4618      	mov	r0, r3
 800d782:	bd80      	pop	{r7, pc}
 800d784:	58024400 	.word	0x58024400
 800d788:	0801b280 	.word	0x0801b280

0800d78c <HAL_RCCEx_PeriphCLKConfig>:
 800d78c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d790:	b0ca      	sub	sp, #296	@ 0x128
 800d792:	af00      	add	r7, sp, #0
 800d794:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800d798:	2300      	movs	r3, #0
 800d79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d7b0:	2500      	movs	r5, #0
 800d7b2:	ea54 0305 	orrs.w	r3, r4, r5
 800d7b6:	d049      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d7c2:	d02f      	beq.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d7c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d7c8:	d828      	bhi.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d7ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7ce:	d01a      	beq.n	800d806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d7d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7d4:	d822      	bhi.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d7da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7de:	d007      	beq.n	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d7e0:	e01c      	b.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d7e2:	4bb8      	ldr	r3, [pc, #736]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e6:	4ab7      	ldr	r2, [pc, #732]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d7ee:	e01a      	b.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800d7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	2102      	movs	r1, #2
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f002 fb61 	bl	800fec0 <RCCEx_PLL2_Config>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d804:	e00f      	b.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800d806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d80a:	3328      	adds	r3, #40	@ 0x28
 800d80c:	2102      	movs	r1, #2
 800d80e:	4618      	mov	r0, r3
 800d810:	f002 fc08 	bl	8010024 <RCCEx_PLL3_Config>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d81a:	e004      	b.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800d81c:	2301      	movs	r3, #1
 800d81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d822:	e000      	b.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800d824:	bf00      	nop
 800d826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10a      	bne.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800d82e:	4ba5      	ldr	r3, [pc, #660]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d832:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d83a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d83c:	4aa1      	ldr	r2, [pc, #644]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d83e:	430b      	orrs	r3, r1
 800d840:	6513      	str	r3, [r2, #80]	@ 0x50
 800d842:	e003      	b.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d858:	f04f 0900 	mov.w	r9, #0
 800d85c:	ea58 0309 	orrs.w	r3, r8, r9
 800d860:	d047      	beq.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800d862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d868:	2b04      	cmp	r3, #4
 800d86a:	d82a      	bhi.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d86c:	a201      	add	r2, pc, #4	@ (adr r2, 800d874 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d872:	bf00      	nop
 800d874:	0800d889 	.word	0x0800d889
 800d878:	0800d897 	.word	0x0800d897
 800d87c:	0800d8ad 	.word	0x0800d8ad
 800d880:	0800d8cb 	.word	0x0800d8cb
 800d884:	0800d8cb 	.word	0x0800d8cb
 800d888:	4b8e      	ldr	r3, [pc, #568]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88c:	4a8d      	ldr	r2, [pc, #564]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d88e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d894:	e01a      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800d896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d89a:	3308      	adds	r3, #8
 800d89c:	2100      	movs	r1, #0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f002 fb0e 	bl	800fec0 <RCCEx_PLL2_Config>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d8aa:	e00f      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800d8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b0:	3328      	adds	r3, #40	@ 0x28
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 fbb5 	bl	8010024 <RCCEx_PLL3_Config>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d8c0:	e004      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d8c8:	e000      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800d8ca:	bf00      	nop
 800d8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800d8d4:	4b7b      	ldr	r3, [pc, #492]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8d8:	f023 0107 	bic.w	r1, r3, #7
 800d8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8e2:	4a78      	ldr	r2, [pc, #480]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8e8:	e003      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800d8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d8fe:	f04f 0b00 	mov.w	fp, #0
 800d902:	ea5a 030b 	orrs.w	r3, sl, fp
 800d906:	d04c      	beq.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800d908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d90c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d90e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d912:	d030      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d918:	d829      	bhi.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d91a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d91c:	d02d      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d91e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d920:	d825      	bhi.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d922:	2b80      	cmp	r3, #128	@ 0x80
 800d924:	d018      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d926:	2b80      	cmp	r3, #128	@ 0x80
 800d928:	d821      	bhi.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d002      	beq.n	800d934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d92e:	2b40      	cmp	r3, #64	@ 0x40
 800d930:	d007      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d932:	e01c      	b.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d934:	4b63      	ldr	r3, [pc, #396]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d938:	4a62      	ldr	r2, [pc, #392]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d93a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d93e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d940:	e01c      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800d942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d946:	3308      	adds	r3, #8
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f002 fab8 	bl	800fec0 <RCCEx_PLL2_Config>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d956:	e011      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800d958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d95c:	3328      	adds	r3, #40	@ 0x28
 800d95e:	2100      	movs	r1, #0
 800d960:	4618      	mov	r0, r3
 800d962:	f002 fb5f 	bl	8010024 <RCCEx_PLL3_Config>
 800d966:	4603      	mov	r3, r0
 800d968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d96c:	e006      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800d96e:	2301      	movs	r3, #1
 800d970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800d974:	e002      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800d976:	bf00      	nop
 800d978:	e000      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800d97a:	bf00      	nop
 800d97c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10a      	bne.n	800d99a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800d984:	4b4f      	ldr	r3, [pc, #316]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d988:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d992:	4a4c      	ldr	r2, [pc, #304]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d994:	430b      	orrs	r3, r1
 800d996:	6513      	str	r3, [r2, #80]	@ 0x50
 800d998:	e003      	b.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800d99a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d99e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d9ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d9b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	d053      	beq.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d9ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9ce:	d035      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d9d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9d4:	d82e      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d9d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d9da:	d031      	beq.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d9dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d9e0:	d828      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d9e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9e6:	d01a      	beq.n	800da1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d9e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9ec:	d822      	bhi.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d9f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9f6:	d007      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d9f8:	e01c      	b.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d9fa:	4b32      	ldr	r3, [pc, #200]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fe:	4a31      	ldr	r2, [pc, #196]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800da06:	e01c      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800da08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da0c:	3308      	adds	r3, #8
 800da0e:	2100      	movs	r1, #0
 800da10:	4618      	mov	r0, r3
 800da12:	f002 fa55 	bl	800fec0 <RCCEx_PLL2_Config>
 800da16:	4603      	mov	r3, r0
 800da18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800da1c:	e011      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da22:	3328      	adds	r3, #40	@ 0x28
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f002 fafc 	bl	8010024 <RCCEx_PLL3_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800da32:	e006      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800da34:	2301      	movs	r3, #1
 800da36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800da3a:	e002      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800da3c:	bf00      	nop
 800da3e:	e000      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800da40:	bf00      	nop
 800da42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800da4a:	4b1e      	ldr	r3, [pc, #120]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800da52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da5a:	4a1a      	ldr	r2, [pc, #104]	@ (800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da5c:	430b      	orrs	r3, r1
 800da5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800da60:	e003      	b.n	800da6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800da62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800da6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800da76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800da7a:	2300      	movs	r3, #0
 800da7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800da80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800da84:	460b      	mov	r3, r1
 800da86:	4313      	orrs	r3, r2
 800da88:	d056      	beq.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800da92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da96:	d038      	beq.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800da98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da9c:	d831      	bhi.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800daa2:	d034      	beq.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800daa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800daa8:	d82b      	bhi.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800daaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daae:	d01d      	beq.n	800daec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dab0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dab4:	d825      	bhi.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d006      	beq.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800daba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dabe:	d00a      	beq.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dac0:	e01f      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dac2:	bf00      	nop
 800dac4:	58024400 	.word	0x58024400
 800dac8:	4ba2      	ldr	r3, [pc, #648]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dacc:	4aa1      	ldr	r2, [pc, #644]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dad4:	e01c      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800dad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dada:	3308      	adds	r3, #8
 800dadc:	2100      	movs	r1, #0
 800dade:	4618      	mov	r0, r3
 800dae0:	f002 f9ee 	bl	800fec0 <RCCEx_PLL2_Config>
 800dae4:	4603      	mov	r3, r0
 800dae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800daea:	e011      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf0:	3328      	adds	r3, #40	@ 0x28
 800daf2:	2100      	movs	r1, #0
 800daf4:	4618      	mov	r0, r3
 800daf6:	f002 fa95 	bl	8010024 <RCCEx_PLL3_Config>
 800dafa:	4603      	mov	r3, r0
 800dafc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800db00:	e006      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800db02:	2301      	movs	r3, #1
 800db04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800db08:	e002      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800db0a:	bf00      	nop
 800db0c:	e000      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800db0e:	bf00      	nop
 800db10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10b      	bne.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800db18:	4b8e      	ldr	r3, [pc, #568]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800db20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800db28:	4a8a      	ldr	r2, [pc, #552]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db2a:	430b      	orrs	r3, r1
 800db2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800db2e:	e003      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800db30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800db38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800db44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800db48:	2300      	movs	r3, #0
 800db4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800db4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800db52:	460b      	mov	r3, r1
 800db54:	4313      	orrs	r3, r2
 800db56:	d03a      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800db58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db5e:	2b30      	cmp	r3, #48	@ 0x30
 800db60:	d01f      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800db62:	2b30      	cmp	r3, #48	@ 0x30
 800db64:	d819      	bhi.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800db66:	2b20      	cmp	r3, #32
 800db68:	d00c      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800db6a:	2b20      	cmp	r3, #32
 800db6c:	d815      	bhi.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d019      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800db72:	2b10      	cmp	r3, #16
 800db74:	d111      	bne.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800db76:	4b77      	ldr	r3, [pc, #476]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	4a76      	ldr	r2, [pc, #472]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db82:	e011      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800db84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db88:	3308      	adds	r3, #8
 800db8a:	2102      	movs	r1, #2
 800db8c:	4618      	mov	r0, r3
 800db8e:	f002 f997 	bl	800fec0 <RCCEx_PLL2_Config>
 800db92:	4603      	mov	r3, r0
 800db94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800db98:	e006      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dba0:	e002      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800dba6:	bf00      	nop
 800dba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800dbb0:	4b68      	ldr	r3, [pc, #416]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbbe:	4a65      	ldr	r2, [pc, #404]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbc0:	430b      	orrs	r3, r1
 800dbc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dbc4:	e003      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800dbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800dbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dbda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dbe4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4313      	orrs	r3, r2
 800dbec:	d051      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800dbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbf8:	d035      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dbfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dbfe:	d82e      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dc00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dc04:	d031      	beq.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dc06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dc0a:	d828      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dc0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc10:	d01a      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dc12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc16:	d822      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dc1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc20:	d007      	beq.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dc22:	e01c      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dc24:	4b4b      	ldr	r3, [pc, #300]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc28:	4a4a      	ldr	r2, [pc, #296]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dc30:	e01c      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc36:	3308      	adds	r3, #8
 800dc38:	2100      	movs	r1, #0
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f002 f940 	bl	800fec0 <RCCEx_PLL2_Config>
 800dc40:	4603      	mov	r3, r0
 800dc42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dc46:	e011      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc4c:	3328      	adds	r3, #40	@ 0x28
 800dc4e:	2100      	movs	r1, #0
 800dc50:	4618      	mov	r0, r3
 800dc52:	f002 f9e7 	bl	8010024 <RCCEx_PLL3_Config>
 800dc56:	4603      	mov	r3, r0
 800dc58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dc5c:	e006      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dc64:	e002      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc66:	bf00      	nop
 800dc68:	e000      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc6a:	bf00      	nop
 800dc6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10a      	bne.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800dc74:	4b37      	ldr	r3, [pc, #220]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc82:	4a34      	ldr	r2, [pc, #208]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc84:	430b      	orrs	r3, r1
 800dc86:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc88:	e003      	b.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800dc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800dc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dc9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dca2:	2300      	movs	r3, #0
 800dca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dca8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dcac:	460b      	mov	r3, r1
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	d056      	beq.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dcbc:	d033      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dcbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dcc2:	d82c      	bhi.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dcc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dcc8:	d02f      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dcca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dcce:	d826      	bhi.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dcd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dcd4:	d02b      	beq.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800dcd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dcda:	d820      	bhi.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dcdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dce0:	d012      	beq.n	800dd08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dce6:	d81a      	bhi.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d022      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800dcec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcf0:	d115      	bne.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f002 f8e0 	bl	800fec0 <RCCEx_PLL2_Config>
 800dd00:	4603      	mov	r3, r0
 800dd02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dd06:	e015      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd0c:	3328      	adds	r3, #40	@ 0x28
 800dd0e:	2101      	movs	r1, #1
 800dd10:	4618      	mov	r0, r3
 800dd12:	f002 f987 	bl	8010024 <RCCEx_PLL3_Config>
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dd1c:	e00a      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800dd24:	e006      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd26:	bf00      	nop
 800dd28:	e004      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd2a:	bf00      	nop
 800dd2c:	e002      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd2e:	bf00      	nop
 800dd30:	e000      	b.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800dd32:	bf00      	nop
 800dd34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10d      	bne.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800dd3c:	4b05      	ldr	r3, [pc, #20]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd4a:	4a02      	ldr	r2, [pc, #8]	@ (800dd54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd4c:	430b      	orrs	r3, r1
 800dd4e:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd50:	e006      	b.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dd52:	bf00      	nop
 800dd54:	58024400 	.word	0x58024400
 800dd58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800dd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dd6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dd70:	2300      	movs	r3, #0
 800dd72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dd76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	d055      	beq.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800dd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dd88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd8c:	d033      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dd8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd92:	d82c      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd98:	d02f      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dd9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd9e:	d826      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dda0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dda4:	d02b      	beq.n	800ddfe <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dda6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ddaa:	d820      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ddac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddb0:	d012      	beq.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ddb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddb6:	d81a      	bhi.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d022      	beq.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ddbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddc0:	d115      	bne.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ddc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	2101      	movs	r1, #1
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f002 f878 	bl	800fec0 <RCCEx_PLL2_Config>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800ddd6:	e015      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ddd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dddc:	3328      	adds	r3, #40	@ 0x28
 800ddde:	2101      	movs	r1, #1
 800dde0:	4618      	mov	r0, r3
 800dde2:	f002 f91f 	bl	8010024 <RCCEx_PLL3_Config>
 800dde6:	4603      	mov	r3, r0
 800dde8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800ddec:	e00a      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800ddf4:	e006      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ddf6:	bf00      	nop
 800ddf8:	e004      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ddfa:	bf00      	nop
 800ddfc:	e002      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800de02:	bf00      	nop
 800de04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10b      	bne.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800de0c:	4ba3      	ldr	r3, [pc, #652]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800de14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800de1c:	4a9f      	ldr	r2, [pc, #636]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de1e:	430b      	orrs	r3, r1
 800de20:	6593      	str	r3, [r2, #88]	@ 0x58
 800de22:	e003      	b.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800de24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800de2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800de38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de3c:	2300      	movs	r3, #0
 800de3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800de46:	460b      	mov	r3, r1
 800de48:	4313      	orrs	r3, r2
 800de4a:	d037      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x730>
 800de4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de56:	d00e      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800de58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de5c:	d816      	bhi.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d018      	beq.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800de62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de66:	d111      	bne.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800de68:	4b8c      	ldr	r3, [pc, #560]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6c:	4a8b      	ldr	r2, [pc, #556]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de74:	e00f      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800de76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de7a:	3308      	adds	r3, #8
 800de7c:	2101      	movs	r1, #1
 800de7e:	4618      	mov	r0, r3
 800de80:	f002 f81e 	bl	800fec0 <RCCEx_PLL2_Config>
 800de84:	4603      	mov	r3, r0
 800de86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800de8a:	e004      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800de8c:	2301      	movs	r3, #1
 800de8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800de92:	e000      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800de94:	bf00      	nop
 800de96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10a      	bne.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800de9e:	4b7f      	ldr	r3, [pc, #508]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dea2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deac:	4a7b      	ldr	r2, [pc, #492]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800deae:	430b      	orrs	r3, r1
 800deb0:	6513      	str	r3, [r2, #80]	@ 0x50
 800deb2:	e003      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x730>
 800deb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800debc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800dec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800decc:	2300      	movs	r3, #0
 800dece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ded2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4313      	orrs	r3, r2
 800deda:	d039      	beq.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800dedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d81c      	bhi.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dee6:	a201      	add	r2, pc, #4	@ (adr r2, 800deec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deec:	0800df29 	.word	0x0800df29
 800def0:	0800defd 	.word	0x0800defd
 800def4:	0800df0b 	.word	0x0800df0b
 800def8:	0800df29 	.word	0x0800df29
 800defc:	4b67      	ldr	r3, [pc, #412]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800defe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df00:	4a66      	ldr	r2, [pc, #408]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df08:	e00f      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800df0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df0e:	3308      	adds	r3, #8
 800df10:	2102      	movs	r1, #2
 800df12:	4618      	mov	r0, r3
 800df14:	f001 ffd4 	bl	800fec0 <RCCEx_PLL2_Config>
 800df18:	4603      	mov	r3, r0
 800df1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800df1e:	e004      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800df20:	2301      	movs	r3, #1
 800df22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800df26:	e000      	b.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800df28:	bf00      	nop
 800df2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10a      	bne.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800df32:	4b5a      	ldr	r3, [pc, #360]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df36:	f023 0103 	bic.w	r1, r3, #3
 800df3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df40:	4a56      	ldr	r2, [pc, #344]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df42:	430b      	orrs	r3, r1
 800df44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800df46:	e003      	b.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800df48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800df50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800df5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800df60:	2300      	movs	r3, #0
 800df62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800df66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800df6a:	460b      	mov	r3, r1
 800df6c:	4313      	orrs	r3, r2
 800df6e:	f000 809f 	beq.w	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800df72:	4b4b      	ldr	r3, [pc, #300]	@ (800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a4a      	ldr	r2, [pc, #296]	@ (800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	f7f6 ff4b 	bl	8004e18 <HAL_GetTick>
 800df82:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
 800df86:	e00b      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800df88:	f7f6 ff46 	bl	8004e18 <HAL_GetTick>
 800df8c:	4602      	mov	r2, r0
 800df8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	2b64      	cmp	r3, #100	@ 0x64
 800df96:	d903      	bls.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800df98:	2303      	movs	r3, #3
 800df9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800df9e:	e005      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x820>
 800dfa0:	4b3f      	ldr	r3, [pc, #252]	@ (800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d0ed      	beq.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 800dfac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d179      	bne.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800dfb4:	4b39      	ldr	r3, [pc, #228]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dfc0:	4053      	eors	r3, r2
 800dfc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d015      	beq.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800dfca:	4b34      	ldr	r3, [pc, #208]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dfd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800dfd6:	4b31      	ldr	r3, [pc, #196]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfda:	4a30      	ldr	r2, [pc, #192]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dfe0:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfe2:	4b2e      	ldr	r3, [pc, #184]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfe6:	4a2d      	ldr	r2, [pc, #180]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dfec:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfee:	4a2b      	ldr	r2, [pc, #172]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dff4:	6713      	str	r3, [r2, #112]	@ 0x70
 800dff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e002:	d118      	bne.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800e004:	f7f6 ff08 	bl	8004e18 <HAL_GetTick>
 800e008:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
 800e00c:	e00d      	b.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800e00e:	f7f6 ff03 	bl	8004e18 <HAL_GetTick>
 800e012:	4602      	mov	r2, r0
 800e014:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e018:	1ad2      	subs	r2, r2, r3
 800e01a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e01e:	429a      	cmp	r2, r3
 800e020:	d903      	bls.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800e022:	2303      	movs	r3, #3
 800e024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e028:	e005      	b.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800e02a:	4b1c      	ldr	r3, [pc, #112]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e02c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e02e:	f003 0302 	and.w	r3, r3, #2
 800e032:	2b00      	cmp	r3, #0
 800e034:	d0eb      	beq.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x882>
 800e036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d129      	bne.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800e03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e04a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e04e:	d10e      	bne.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e050:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e05c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e060:	091a      	lsrs	r2, r3, #4
 800e062:	4b10      	ldr	r3, [pc, #64]	@ (800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e064:	4013      	ands	r3, r2
 800e066:	4a0d      	ldr	r2, [pc, #52]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e068:	430b      	orrs	r3, r1
 800e06a:	6113      	str	r3, [r2, #16]
 800e06c:	e005      	b.n	800e07a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e06e:	4b0b      	ldr	r3, [pc, #44]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	4a0a      	ldr	r2, [pc, #40]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e074:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e078:	6113      	str	r3, [r2, #16]
 800e07a:	4b08      	ldr	r3, [pc, #32]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e07c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e08a:	4a04      	ldr	r2, [pc, #16]	@ (800e09c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e08c:	430b      	orrs	r3, r1
 800e08e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e090:	e00e      	b.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e09a:	e009      	b.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e09c:	58024400 	.word	0x58024400
 800e0a0:	58024800 	.word	0x58024800
 800e0a4:	00ffffcf 	.word	0x00ffffcf
 800e0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f002 0301 	and.w	r3, r2, #1
 800e0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e0c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	f000 8089 	beq.w	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800e0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0d8:	2b28      	cmp	r3, #40	@ 0x28
 800e0da:	d86b      	bhi.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e0e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e2:	bf00      	nop
 800e0e4:	0800e1bd 	.word	0x0800e1bd
 800e0e8:	0800e1b5 	.word	0x0800e1b5
 800e0ec:	0800e1b5 	.word	0x0800e1b5
 800e0f0:	0800e1b5 	.word	0x0800e1b5
 800e0f4:	0800e1b5 	.word	0x0800e1b5
 800e0f8:	0800e1b5 	.word	0x0800e1b5
 800e0fc:	0800e1b5 	.word	0x0800e1b5
 800e100:	0800e1b5 	.word	0x0800e1b5
 800e104:	0800e189 	.word	0x0800e189
 800e108:	0800e1b5 	.word	0x0800e1b5
 800e10c:	0800e1b5 	.word	0x0800e1b5
 800e110:	0800e1b5 	.word	0x0800e1b5
 800e114:	0800e1b5 	.word	0x0800e1b5
 800e118:	0800e1b5 	.word	0x0800e1b5
 800e11c:	0800e1b5 	.word	0x0800e1b5
 800e120:	0800e1b5 	.word	0x0800e1b5
 800e124:	0800e19f 	.word	0x0800e19f
 800e128:	0800e1b5 	.word	0x0800e1b5
 800e12c:	0800e1b5 	.word	0x0800e1b5
 800e130:	0800e1b5 	.word	0x0800e1b5
 800e134:	0800e1b5 	.word	0x0800e1b5
 800e138:	0800e1b5 	.word	0x0800e1b5
 800e13c:	0800e1b5 	.word	0x0800e1b5
 800e140:	0800e1b5 	.word	0x0800e1b5
 800e144:	0800e1bd 	.word	0x0800e1bd
 800e148:	0800e1b5 	.word	0x0800e1b5
 800e14c:	0800e1b5 	.word	0x0800e1b5
 800e150:	0800e1b5 	.word	0x0800e1b5
 800e154:	0800e1b5 	.word	0x0800e1b5
 800e158:	0800e1b5 	.word	0x0800e1b5
 800e15c:	0800e1b5 	.word	0x0800e1b5
 800e160:	0800e1b5 	.word	0x0800e1b5
 800e164:	0800e1bd 	.word	0x0800e1bd
 800e168:	0800e1b5 	.word	0x0800e1b5
 800e16c:	0800e1b5 	.word	0x0800e1b5
 800e170:	0800e1b5 	.word	0x0800e1b5
 800e174:	0800e1b5 	.word	0x0800e1b5
 800e178:	0800e1b5 	.word	0x0800e1b5
 800e17c:	0800e1b5 	.word	0x0800e1b5
 800e180:	0800e1b5 	.word	0x0800e1b5
 800e184:	0800e1bd 	.word	0x0800e1bd
 800e188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18c:	3308      	adds	r3, #8
 800e18e:	2101      	movs	r1, #1
 800e190:	4618      	mov	r0, r3
 800e192:	f001 fe95 	bl	800fec0 <RCCEx_PLL2_Config>
 800e196:	4603      	mov	r3, r0
 800e198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e19c:	e00f      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800e19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a2:	3328      	adds	r3, #40	@ 0x28
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f001 ff3c 	bl	8010024 <RCCEx_PLL3_Config>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e1b2:	e004      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e1ba:	e000      	b.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800e1bc:	bf00      	nop
 800e1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10a      	bne.n	800e1dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800e1c6:	4bbf      	ldr	r3, [pc, #764]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1d4:	4abb      	ldr	r2, [pc, #748]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1d6:	430b      	orrs	r3, r1
 800e1d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e1da:	e003      	b.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800e1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f002 0302 	and.w	r3, r2, #2
 800e1f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e1fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e1fe:	460b      	mov	r3, r1
 800e200:	4313      	orrs	r3, r2
 800e202:	d041      	beq.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800e204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e20a:	2b05      	cmp	r3, #5
 800e20c:	d824      	bhi.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e20e:	a201      	add	r2, pc, #4	@ (adr r2, 800e214 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e261 	.word	0x0800e261
 800e218:	0800e22d 	.word	0x0800e22d
 800e21c:	0800e243 	.word	0x0800e243
 800e220:	0800e261 	.word	0x0800e261
 800e224:	0800e261 	.word	0x0800e261
 800e228:	0800e261 	.word	0x0800e261
 800e22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e230:	3308      	adds	r3, #8
 800e232:	2101      	movs	r1, #1
 800e234:	4618      	mov	r0, r3
 800e236:	f001 fe43 	bl	800fec0 <RCCEx_PLL2_Config>
 800e23a:	4603      	mov	r3, r0
 800e23c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e240:	e00f      	b.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800e242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e246:	3328      	adds	r3, #40	@ 0x28
 800e248:	2101      	movs	r1, #1
 800e24a:	4618      	mov	r0, r3
 800e24c:	f001 feea 	bl	8010024 <RCCEx_PLL3_Config>
 800e250:	4603      	mov	r3, r0
 800e252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e256:	e004      	b.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800e258:	2301      	movs	r3, #1
 800e25a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e25e:	e000      	b.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800e260:	bf00      	nop
 800e262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 800e26a:	4b96      	ldr	r3, [pc, #600]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e26e:	f023 0107 	bic.w	r1, r3, #7
 800e272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e278:	4a92      	ldr	r2, [pc, #584]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e27a:	430b      	orrs	r3, r1
 800e27c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e27e:	e003      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800e280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	f002 0304 	and.w	r3, r2, #4
 800e294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e298:	2300      	movs	r3, #0
 800e29a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e29e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	d044      	beq.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e2b0:	2b05      	cmp	r3, #5
 800e2b2:	d825      	bhi.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800e2bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ba:	bf00      	nop
 800e2bc:	0800e309 	.word	0x0800e309
 800e2c0:	0800e2d5 	.word	0x0800e2d5
 800e2c4:	0800e2eb 	.word	0x0800e2eb
 800e2c8:	0800e309 	.word	0x0800e309
 800e2cc:	0800e309 	.word	0x0800e309
 800e2d0:	0800e309 	.word	0x0800e309
 800e2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2d8:	3308      	adds	r3, #8
 800e2da:	2101      	movs	r1, #1
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f001 fdef 	bl	800fec0 <RCCEx_PLL2_Config>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e2e8:	e00f      	b.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 800e2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ee:	3328      	adds	r3, #40	@ 0x28
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f001 fe96 	bl	8010024 <RCCEx_PLL3_Config>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e2fe:	e004      	b.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 800e300:	2301      	movs	r3, #1
 800e302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e306:	e000      	b.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 800e308:	bf00      	nop
 800e30a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10b      	bne.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
 800e312:	4b6c      	ldr	r3, [pc, #432]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e316:	f023 0107 	bic.w	r1, r3, #7
 800e31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e322:	4a68      	ldr	r2, [pc, #416]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e324:	430b      	orrs	r3, r1
 800e326:	6593      	str	r3, [r2, #88]	@ 0x58
 800e328:	e003      	b.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800e32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e32e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f002 0320 	and.w	r3, r2, #32
 800e33e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e342:	2300      	movs	r3, #0
 800e344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e34c:	460b      	mov	r3, r1
 800e34e:	4313      	orrs	r3, r2
 800e350:	d055      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800e352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e35e:	d033      	beq.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e364:	d82c      	bhi.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e36a:	d02f      	beq.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e36c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e370:	d826      	bhi.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e372:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e376:	d02b      	beq.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e378:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e37c:	d820      	bhi.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e37e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e382:	d012      	beq.n	800e3aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e388:	d81a      	bhi.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d022      	beq.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e38e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e392:	d115      	bne.n	800e3c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e398:	3308      	adds	r3, #8
 800e39a:	2100      	movs	r1, #0
 800e39c:	4618      	mov	r0, r3
 800e39e:	f001 fd8f 	bl	800fec0 <RCCEx_PLL2_Config>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e3a8:	e015      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3ae:	3328      	adds	r3, #40	@ 0x28
 800e3b0:	2102      	movs	r1, #2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f001 fe36 	bl	8010024 <RCCEx_PLL3_Config>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e3be:	e00a      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e3c6:	e006      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3c8:	bf00      	nop
 800e3ca:	e004      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3cc:	bf00      	nop
 800e3ce:	e002      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3d0:	bf00      	nop
 800e3d2:	e000      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800e3d4:	bf00      	nop
 800e3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10b      	bne.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 800e3de:	4b39      	ldr	r3, [pc, #228]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3ee:	4a35      	ldr	r2, [pc, #212]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3f0:	430b      	orrs	r3, r1
 800e3f2:	6553      	str	r3, [r2, #84]	@ 0x54
 800e3f4:	e003      	b.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800e3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e40a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e40e:	2300      	movs	r3, #0
 800e410:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e414:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e418:	460b      	mov	r3, r1
 800e41a:	4313      	orrs	r3, r2
 800e41c:	d058      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e426:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e42a:	d033      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e42c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e430:	d82c      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e436:	d02f      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e43c:	d826      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e43e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e442:	d02b      	beq.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e448:	d820      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e44a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e44e:	d012      	beq.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e454:	d81a      	bhi.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e456:	2b00      	cmp	r3, #0
 800e458:	d022      	beq.n	800e4a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e45a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e45e:	d115      	bne.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e464:	3308      	adds	r3, #8
 800e466:	2100      	movs	r1, #0
 800e468:	4618      	mov	r0, r3
 800e46a:	f001 fd29 	bl	800fec0 <RCCEx_PLL2_Config>
 800e46e:	4603      	mov	r3, r0
 800e470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e474:	e015      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e47a:	3328      	adds	r3, #40	@ 0x28
 800e47c:	2102      	movs	r1, #2
 800e47e:	4618      	mov	r0, r3
 800e480:	f001 fdd0 	bl	8010024 <RCCEx_PLL3_Config>
 800e484:	4603      	mov	r3, r0
 800e486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e48a:	e00a      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e48c:	2301      	movs	r3, #1
 800e48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e492:	e006      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e494:	bf00      	nop
 800e496:	e004      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e498:	bf00      	nop
 800e49a:	e002      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e49c:	bf00      	nop
 800e49e:	e000      	b.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e4a0:	bf00      	nop
 800e4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10e      	bne.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800e4aa:	4b06      	ldr	r3, [pc, #24]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4ba:	4a02      	ldr	r2, [pc, #8]	@ (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4bc:	430b      	orrs	r3, r1
 800e4be:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4c0:	e006      	b.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e4c2:	bf00      	nop
 800e4c4:	58024400 	.word	0x58024400
 800e4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e4dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e4e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	d055      	beq.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0xe10>
 800e4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e4fc:	d033      	beq.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e4fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e502:	d82c      	bhi.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e508:	d02f      	beq.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e50a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e50e:	d826      	bhi.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e510:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e514:	d02b      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e516:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e51a:	d820      	bhi.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e51c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e520:	d012      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e526:	d81a      	bhi.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d022      	beq.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e52c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e530:	d115      	bne.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e536:	3308      	adds	r3, #8
 800e538:	2100      	movs	r1, #0
 800e53a:	4618      	mov	r0, r3
 800e53c:	f001 fcc0 	bl	800fec0 <RCCEx_PLL2_Config>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e546:	e015      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e54c:	3328      	adds	r3, #40	@ 0x28
 800e54e:	2102      	movs	r1, #2
 800e550:	4618      	mov	r0, r3
 800e552:	f001 fd67 	bl	8010024 <RCCEx_PLL3_Config>
 800e556:	4603      	mov	r3, r0
 800e558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e55c:	e00a      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e55e:	2301      	movs	r3, #1
 800e560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e564:	e006      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e566:	bf00      	nop
 800e568:	e004      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e56a:	bf00      	nop
 800e56c:	e002      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e56e:	bf00      	nop
 800e570:	e000      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800e572:	bf00      	nop
 800e574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10b      	bne.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800e57c:	4ba1      	ldr	r3, [pc, #644]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e57e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e580:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e58c:	4a9d      	ldr	r2, [pc, #628]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e58e:	430b      	orrs	r3, r1
 800e590:	6593      	str	r3, [r2, #88]	@ 0x58
 800e592:	e003      	b.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0xe10>
 800e594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	f002 0308 	and.w	r3, r2, #8
 800e5a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e5b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	d01e      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
 800e5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5c8:	d10c      	bne.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800e5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ce:	3328      	adds	r3, #40	@ 0x28
 800e5d0:	2102      	movs	r1, #2
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f001 fd26 	bl	8010024 <RCCEx_PLL3_Config>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e5e4:	4b87      	ldr	r3, [pc, #540]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5f4:	4a83      	ldr	r2, [pc, #524]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5f6:	430b      	orrs	r3, r1
 800e5f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	f002 0310 	and.w	r3, r2, #16
 800e606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e60a:	2300      	movs	r3, #0
 800e60c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e610:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e614:	460b      	mov	r3, r1
 800e616:	4313      	orrs	r3, r2
 800e618:	d01e      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0xecc>
 800e61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e61e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e626:	d10c      	bne.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 800e628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e62c:	3328      	adds	r3, #40	@ 0x28
 800e62e:	2102      	movs	r1, #2
 800e630:	4618      	mov	r0, r3
 800e632:	f001 fcf7 	bl	8010024 <RCCEx_PLL3_Config>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 800e63c:	2301      	movs	r3, #1
 800e63e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e642:	4b70      	ldr	r3, [pc, #448]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e646:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e64e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e652:	4a6c      	ldr	r2, [pc, #432]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e654:	430b      	orrs	r3, r1
 800e656:	6593      	str	r3, [r2, #88]	@ 0x58
 800e658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e668:	2300      	movs	r3, #0
 800e66a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e66e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e672:	460b      	mov	r3, r1
 800e674:	4313      	orrs	r3, r2
 800e676:	d03e      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
 800e678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e67c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e684:	d022      	beq.n	800e6cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e68a:	d81b      	bhi.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d003      	beq.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e694:	d00b      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e696:	e015      	b.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e69c:	3308      	adds	r3, #8
 800e69e:	2100      	movs	r1, #0
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f001 fc0d 	bl	800fec0 <RCCEx_PLL2_Config>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e6ac:	e00f      	b.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
 800e6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b2:	3328      	adds	r3, #40	@ 0x28
 800e6b4:	2102      	movs	r1, #2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f001 fcb4 	bl	8010024 <RCCEx_PLL3_Config>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e6c2:	e004      	b.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e6ca:	e000      	b.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
 800e6cc:	bf00      	nop
 800e6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10b      	bne.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
 800e6d6:	4b4b      	ldr	r3, [pc, #300]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e6e6:	4a47      	ldr	r2, [pc, #284]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6e8:	430b      	orrs	r3, r1
 800e6ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800e6ec:	e003      	b.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
 800e6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e702:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e704:	2300      	movs	r3, #0
 800e706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e708:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e70c:	460b      	mov	r3, r1
 800e70e:	4313      	orrs	r3, r2
 800e710:	d03b      	beq.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800e712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e71a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e71e:	d01f      	beq.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e720:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e724:	d818      	bhi.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e72a:	d003      	beq.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e72c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e730:	d007      	beq.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e732:	e011      	b.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e734:	4b33      	ldr	r3, [pc, #204]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e738:	4a32      	ldr	r2, [pc, #200]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e73a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e73e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e740:	e00f      	b.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
 800e742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e746:	3328      	adds	r3, #40	@ 0x28
 800e748:	2101      	movs	r1, #1
 800e74a:	4618      	mov	r0, r3
 800e74c:	f001 fc6a 	bl	8010024 <RCCEx_PLL3_Config>
 800e750:	4603      	mov	r3, r0
 800e752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e756:	e004      	b.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
 800e758:	2301      	movs	r3, #1
 800e75a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e75e:	e000      	b.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
 800e760:	bf00      	nop
 800e762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10b      	bne.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xff6>
 800e76a:	4b26      	ldr	r3, [pc, #152]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e76e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e77a:	4a22      	ldr	r2, [pc, #136]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e77c:	430b      	orrs	r3, r1
 800e77e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e780:	e003      	b.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800e782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e796:	673b      	str	r3, [r7, #112]	@ 0x70
 800e798:	2300      	movs	r3, #0
 800e79a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e79c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	d034      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d003      	beq.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e7b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7b4:	d007      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e7b6:	e011      	b.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
 800e7b8:	4b12      	ldr	r3, [pc, #72]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7bc:	4a11      	ldr	r2, [pc, #68]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e7c4:	e00e      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
 800e7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	2102      	movs	r1, #2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 fb76 	bl	800fec0 <RCCEx_PLL2_Config>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e7da:	e003      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e7e2:	bf00      	nop
 800e7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10d      	bne.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e7ec:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7fa:	4a02      	ldr	r2, [pc, #8]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7fc:	430b      	orrs	r3, r1
 800e7fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e800:	e006      	b.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e802:	bf00      	nop
 800e804:	58024400 	.word	0x58024400
 800e808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e80c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e81c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e81e:	2300      	movs	r3, #0
 800e820:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e822:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e826:	460b      	mov	r3, r1
 800e828:	4313      	orrs	r3, r2
 800e82a:	d00c      	beq.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 800e82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e830:	3328      	adds	r3, #40	@ 0x28
 800e832:	2102      	movs	r1, #2
 800e834:	4618      	mov	r0, r3
 800e836:	f001 fbf5 	bl	8010024 <RCCEx_PLL3_Config>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 800e840:	2301      	movs	r3, #1
 800e842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e852:	663b      	str	r3, [r7, #96]	@ 0x60
 800e854:	2300      	movs	r3, #0
 800e856:	667b      	str	r3, [r7, #100]	@ 0x64
 800e858:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e85c:	460b      	mov	r3, r1
 800e85e:	4313      	orrs	r3, r2
 800e860:	d038      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800e862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e86a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e86e:	d018      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e874:	d811      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e87a:	d014      	beq.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e87c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e880:	d80b      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e882:	2b00      	cmp	r3, #0
 800e884:	d011      	beq.n	800e8aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e88a:	d106      	bne.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e88c:	4bc3      	ldr	r3, [pc, #780]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e890:	4ac2      	ldr	r2, [pc, #776]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e898:	e008      	b.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
 800e89a:	2301      	movs	r3, #1
 800e89c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800e8a0:	e004      	b.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
 800e8a2:	bf00      	nop
 800e8a4:	e002      	b.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
 800e8a6:	bf00      	nop
 800e8a8:	e000      	b.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
 800e8aa:	bf00      	nop
 800e8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10b      	bne.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
 800e8b4:	4bb9      	ldr	r3, [pc, #740]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8c4:	4ab5      	ldr	r2, [pc, #724]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8c6:	430b      	orrs	r3, r1
 800e8c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8ca:	e003      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800e8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e8e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	d009      	beq.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x1178>
 800e8f0:	4baa      	ldr	r3, [pc, #680]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8fe:	4aa7      	ldr	r2, [pc, #668]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e900:	430b      	orrs	r3, r1
 800e902:	6513      	str	r3, [r2, #80]	@ 0x50
 800e904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e910:	653b      	str	r3, [r7, #80]	@ 0x50
 800e912:	2300      	movs	r3, #0
 800e914:	657b      	str	r3, [r7, #84]	@ 0x54
 800e916:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e91a:	460b      	mov	r3, r1
 800e91c:	4313      	orrs	r3, r2
 800e91e:	d00a      	beq.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
 800e920:	4b9e      	ldr	r3, [pc, #632]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e92c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e930:	4a9a      	ldr	r2, [pc, #616]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e932:	430b      	orrs	r3, r1
 800e934:	6113      	str	r3, [r2, #16]
 800e936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e942:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e944:	2300      	movs	r3, #0
 800e946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e948:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e94c:	460b      	mov	r3, r1
 800e94e:	4313      	orrs	r3, r2
 800e950:	d009      	beq.n	800e966 <HAL_RCCEx_PeriphCLKConfig+0x11da>
 800e952:	4b92      	ldr	r3, [pc, #584]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e956:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e95e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e960:	4a8e      	ldr	r2, [pc, #568]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e962:	430b      	orrs	r3, r1
 800e964:	6513      	str	r3, [r2, #80]	@ 0x50
 800e966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e972:	643b      	str	r3, [r7, #64]	@ 0x40
 800e974:	2300      	movs	r3, #0
 800e976:	647b      	str	r3, [r7, #68]	@ 0x44
 800e978:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e97c:	460b      	mov	r3, r1
 800e97e:	4313      	orrs	r3, r2
 800e980:	d00e      	beq.n	800e9a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 800e982:	4b86      	ldr	r3, [pc, #536]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	4a85      	ldr	r2, [pc, #532]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e988:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e98c:	6113      	str	r3, [r2, #16]
 800e98e:	4b83      	ldr	r3, [pc, #524]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e990:	6919      	ldr	r1, [r3, #16]
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e996:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e99a:	4a80      	ldr	r2, [pc, #512]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e99c:	430b      	orrs	r3, r1
 800e99e:	6113      	str	r3, [r2, #16]
 800e9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	d009      	beq.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
 800e9bc:	4b77      	ldr	r3, [pc, #476]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9ca:	4a74      	ldr	r2, [pc, #464]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9cc:	430b      	orrs	r3, r1
 800e9ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e9dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9de:	2300      	movs	r3, #0
 800e9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	d00a      	beq.n	800ea02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
 800e9ec:	4b6b      	ldr	r3, [pc, #428]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9fc:	4a67      	ldr	r2, [pc, #412]	@ (800eb9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9fe:	430b      	orrs	r3, r1
 800ea00:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ea18:	460b      	mov	r3, r1
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	d011      	beq.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
 800ea1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea22:	3308      	adds	r3, #8
 800ea24:	2100      	movs	r1, #0
 800ea26:	4618      	mov	r0, r3
 800ea28:	f001 fa4a 	bl	800fec0 <RCCEx_PLL2_Config>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800ea32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d003      	beq.n	800ea42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
 800ea3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ea42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	6239      	str	r1, [r7, #32]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	d011      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
 800ea5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea62:	3308      	adds	r3, #8
 800ea64:	2101      	movs	r1, #1
 800ea66:	4618      	mov	r0, r3
 800ea68:	f001 fa2a 	bl	800fec0 <RCCEx_PLL2_Config>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800ea72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d003      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
 800ea7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ea82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	61b9      	str	r1, [r7, #24]
 800ea8e:	f003 0304 	and.w	r3, r3, #4
 800ea92:	61fb      	str	r3, [r7, #28]
 800ea94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	d011      	beq.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
 800ea9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	2102      	movs	r1, #2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 fa0a 	bl	800fec0 <RCCEx_PLL2_Config>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800eab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
 800eaba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eabe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800eac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	2100      	movs	r1, #0
 800eacc:	6139      	str	r1, [r7, #16]
 800eace:	f003 0308 	and.w	r3, r3, #8
 800ead2:	617b      	str	r3, [r7, #20]
 800ead4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ead8:	460b      	mov	r3, r1
 800eada:	4313      	orrs	r3, r2
 800eadc:	d011      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
 800eade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae2:	3328      	adds	r3, #40	@ 0x28
 800eae4:	2100      	movs	r1, #0
 800eae6:	4618      	mov	r0, r3
 800eae8:	f001 fa9c 	bl	8010024 <RCCEx_PLL3_Config>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800eaf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
 800eafa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eafe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800eb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	f003 0310 	and.w	r3, r3, #16
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	d011      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb22:	3328      	adds	r3, #40	@ 0x28
 800eb24:	2101      	movs	r1, #1
 800eb26:	4618      	mov	r0, r3
 800eb28:	f001 fa7c 	bl	8010024 <RCCEx_PLL3_Config>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800eb32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d003      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
 800eb3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800eb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	6039      	str	r1, [r7, #0]
 800eb4e:	f003 0320 	and.w	r3, r3, #32
 800eb52:	607b      	str	r3, [r7, #4]
 800eb54:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	d011      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
 800eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb62:	3328      	adds	r3, #40	@ 0x28
 800eb64:	2102      	movs	r1, #2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 fa5c 	bl	8010024 <RCCEx_PLL3_Config>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800eb72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
 800eb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800eb82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	e000      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4618      	mov	r0, r3
 800eb92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800eb96:	46bd      	mov	sp, r7
 800eb98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb9c:	58024400 	.word	0x58024400

0800eba0 <HAL_RCCEx_GetPeriphCLKFreq>:
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b090      	sub	sp, #64	@ 0x40
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	e9c7 0100 	strd	r0, r1, [r7]
 800ebaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ebb2:	430b      	orrs	r3, r1
 800ebb4:	f040 8094 	bne.w	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800ebb8:	4b9e      	ldr	r3, [pc, #632]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebbc:	f003 0307 	and.w	r3, r3, #7
 800ebc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	2b04      	cmp	r3, #4
 800ebc6:	f200 8087 	bhi.w	800ecd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ebca:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ebcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd0:	0800ebe5 	.word	0x0800ebe5
 800ebd4:	0800ec0d 	.word	0x0800ec0d
 800ebd8:	0800ec35 	.word	0x0800ec35
 800ebdc:	0800ecd1 	.word	0x0800ecd1
 800ebe0:	0800ec5d 	.word	0x0800ec5d
 800ebe4:	4b93      	ldr	r3, [pc, #588]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ebf0:	d108      	bne.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800ebf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f001 f810 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800ebfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec00:	f000 bd45 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec04:	2300      	movs	r3, #0
 800ec06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec08:	f000 bd41 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec0c:	4b89      	ldr	r3, [pc, #548]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec18:	d108      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800ec1a:	f107 0318 	add.w	r3, r7, #24
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 fd54 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec28:	f000 bd31 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec30:	f000 bd2d 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec34:	4b7f      	ldr	r3, [pc, #508]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec40:	d108      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800ec42:	f107 030c 	add.w	r3, r7, #12
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 fe94 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec50:	f000 bd1d 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec54:	2300      	movs	r3, #0
 800ec56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec58:	f000 bd19 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec5c:	4b75      	ldr	r3, [pc, #468]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec66:	4b73      	ldr	r3, [pc, #460]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f003 0304 	and.w	r3, r3, #4
 800ec6e:	2b04      	cmp	r3, #4
 800ec70:	d10c      	bne.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ec72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d109      	bne.n	800ec8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ec78:	4b6e      	ldr	r3, [pc, #440]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	08db      	lsrs	r3, r3, #3
 800ec7e:	f003 0303 	and.w	r3, r3, #3
 800ec82:	4a6d      	ldr	r2, [pc, #436]	@ (800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ec84:	fa22 f303 	lsr.w	r3, r2, r3
 800ec88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec8a:	e01f      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ec8c:	4b69      	ldr	r3, [pc, #420]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec98:	d106      	bne.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ec9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eca0:	d102      	bne.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800eca2:	4b66      	ldr	r3, [pc, #408]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eca6:	e011      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800eca8:	4b62      	ldr	r3, [pc, #392]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ecb4:	d106      	bne.n	800ecc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ecb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ecbc:	d102      	bne.n	800ecc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ecbe:	4b60      	ldr	r3, [pc, #384]	@ (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ecc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecc2:	e003      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecc8:	f000 bce1 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eccc:	f000 bcdf 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ecd0:	4b5c      	ldr	r3, [pc, #368]	@ (800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ecd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecd4:	f000 bcdb 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecdc:	f000 bcd7 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ece0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ece4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ece8:	430b      	orrs	r3, r1
 800ecea:	f040 80ad 	bne.w	800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 800ecee:	4b51      	ldr	r3, [pc, #324]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecf2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ecf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecfe:	d056      	beq.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ed00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed06:	f200 8090 	bhi.w	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0c:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed0e:	f000 8088 	beq.w	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ed12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed14:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed16:	f200 8088 	bhi.w	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	2b80      	cmp	r3, #128	@ 0x80
 800ed1e:	d032      	beq.n	800ed86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ed20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed22:	2b80      	cmp	r3, #128	@ 0x80
 800ed24:	f200 8081 	bhi.w	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ed28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed30:	2b40      	cmp	r3, #64	@ 0x40
 800ed32:	d014      	beq.n	800ed5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ed34:	e079      	b.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ed36:	4b3f      	ldr	r3, [pc, #252]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed42:	d108      	bne.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800ed44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f000 ff67 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800ed4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed52:	f000 bc9c 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed56:	2300      	movs	r3, #0
 800ed58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed5a:	f000 bc98 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed5e:	4b35      	ldr	r3, [pc, #212]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed6a:	d108      	bne.n	800ed7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800ed6c:	f107 0318 	add.w	r3, r7, #24
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 fcab 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed7a:	f000 bc88 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed82:	f000 bc84 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed86:	4b2b      	ldr	r3, [pc, #172]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed92:	d108      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800ed94:	f107 030c 	add.w	r3, r7, #12
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 fdeb 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda2:	f000 bc74 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eda6:	2300      	movs	r3, #0
 800eda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edaa:	f000 bc70 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800edae:	4b21      	ldr	r3, [pc, #132]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800edb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800edb8:	4b1e      	ldr	r3, [pc, #120]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	d10c      	bne.n	800edde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800edc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d109      	bne.n	800edde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800edca:	4b1a      	ldr	r3, [pc, #104]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	08db      	lsrs	r3, r3, #3
 800edd0:	f003 0303 	and.w	r3, r3, #3
 800edd4:	4a18      	ldr	r2, [pc, #96]	@ (800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800edd6:	fa22 f303 	lsr.w	r3, r2, r3
 800edda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eddc:	e01f      	b.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800edde:	4b15      	ldr	r3, [pc, #84]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ede6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edea:	d106      	bne.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800edec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800edf2:	d102      	bne.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800edf4:	4b11      	ldr	r3, [pc, #68]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800edf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edf8:	e011      	b.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800edfa:	4b0e      	ldr	r3, [pc, #56]	@ (800ee34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee06:	d106      	bne.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ee08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee0e:	d102      	bne.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ee10:	4b0b      	ldr	r3, [pc, #44]	@ (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ee12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee14:	e003      	b.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800ee16:	2300      	movs	r3, #0
 800ee18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee1a:	f000 bc38 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee1e:	f000 bc36 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee22:	4b08      	ldr	r3, [pc, #32]	@ (800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ee24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee26:	f000 bc32 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee2e:	f000 bc2e 	b.w	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee32:	bf00      	nop
 800ee34:	58024400 	.word	0x58024400
 800ee38:	03d09000 	.word	0x03d09000
 800ee3c:	003d0900 	.word	0x003d0900
 800ee40:	017d7840 	.word	0x017d7840
 800ee44:	00bb8000 	.word	0x00bb8000
 800ee48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee4c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ee50:	430b      	orrs	r3, r1
 800ee52:	f040 809c 	bne.w	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800ee56:	4b9e      	ldr	r3, [pc, #632]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee5a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ee5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee66:	d054      	beq.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ee68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee6e:	f200 808b 	bhi.w	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee78:	f000 8083 	beq.w	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee82:	f200 8081 	bhi.w	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee8c:	d02f      	beq.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee94:	d878      	bhi.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d004      	beq.n	800eea6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eea2:	d012      	beq.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800eea4:	e070      	b.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800eea6:	4b8a      	ldr	r3, [pc, #552]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eeae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eeb2:	d107      	bne.n	800eec4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800eeb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 feaf 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800eebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eec2:	e3e4      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eec4:	2300      	movs	r3, #0
 800eec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eec8:	e3e1      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eeca:	4b81      	ldr	r3, [pc, #516]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eed6:	d107      	bne.n	800eee8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800eed8:	f107 0318 	add.w	r3, r7, #24
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fbf5 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eee6:	e3d2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eee8:	2300      	movs	r3, #0
 800eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eeec:	e3cf      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eeee:	4b78      	ldr	r3, [pc, #480]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eefa:	d107      	bne.n	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800eefc:	f107 030c 	add.w	r3, r7, #12
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 fd37 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef0a:	e3c0      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef10:	e3bd      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef12:	4b6f      	ldr	r3, [pc, #444]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ef1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef1c:	4b6c      	ldr	r3, [pc, #432]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d10c      	bne.n	800ef42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ef28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d109      	bne.n	800ef42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ef2e:	4b68      	ldr	r3, [pc, #416]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	08db      	lsrs	r3, r3, #3
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	4a66      	ldr	r2, [pc, #408]	@ (800f0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ef3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef40:	e01e      	b.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800ef42:	4b63      	ldr	r3, [pc, #396]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef4e:	d106      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ef50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef56:	d102      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ef58:	4b5f      	ldr	r3, [pc, #380]	@ (800f0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ef5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef5c:	e010      	b.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800ef5e:	4b5c      	ldr	r3, [pc, #368]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef6a:	d106      	bne.n	800ef7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ef6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef72:	d102      	bne.n	800ef7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ef74:	4b59      	ldr	r3, [pc, #356]	@ (800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ef76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef78:	e002      	b.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef7e:	e386      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef80:	e385      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef82:	4b57      	ldr	r3, [pc, #348]	@ (800f0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ef84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef86:	e382      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef8c:	e37f      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef92:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ef96:	430b      	orrs	r3, r1
 800ef98:	f040 80a7 	bne.w	800f0ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800ef9c:	4b4c      	ldr	r3, [pc, #304]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efa0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800efa4:	633b      	str	r3, [r7, #48]	@ 0x30
 800efa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efac:	d055      	beq.n	800f05a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800efae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efb4:	f200 8096 	bhi.w	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800efb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efbe:	f000 8084 	beq.w	800f0ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800efc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efc8:	f200 808c 	bhi.w	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800efcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efd2:	d030      	beq.n	800f036 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800efd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efda:	f200 8083 	bhi.w	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800efde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d004      	beq.n	800efee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800efe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efea:	d012      	beq.n	800f012 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800efec:	e07a      	b.n	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800efee:	4b38      	ldr	r3, [pc, #224]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eff6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800effa:	d107      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 800effc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f000:	4618      	mov	r0, r3
 800f002:	f000 fe0b 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800f006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f00a:	e340      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f00c:	2300      	movs	r3, #0
 800f00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f010:	e33d      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f012:	4b2f      	ldr	r3, [pc, #188]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f01a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f01e:	d107      	bne.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800f020:	f107 0318 	add.w	r3, r7, #24
 800f024:	4618      	mov	r0, r3
 800f026:	f000 fb51 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f02e:	e32e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f030:	2300      	movs	r3, #0
 800f032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f034:	e32b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f036:	4b26      	ldr	r3, [pc, #152]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f03e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f042:	d107      	bne.n	800f054 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800f044:	f107 030c 	add.w	r3, r7, #12
 800f048:	4618      	mov	r0, r3
 800f04a:	f000 fc93 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f052:	e31c      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f054:	2300      	movs	r3, #0
 800f056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f058:	e319      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f05a:	4b1d      	ldr	r3, [pc, #116]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f05c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f05e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f062:	637b      	str	r3, [r7, #52]	@ 0x34
 800f064:	4b1a      	ldr	r3, [pc, #104]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f003 0304 	and.w	r3, r3, #4
 800f06c:	2b04      	cmp	r3, #4
 800f06e:	d10c      	bne.n	800f08a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f072:	2b00      	cmp	r3, #0
 800f074:	d109      	bne.n	800f08a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f076:	4b16      	ldr	r3, [pc, #88]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	08db      	lsrs	r3, r3, #3
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	4a14      	ldr	r2, [pc, #80]	@ (800f0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f082:	fa22 f303 	lsr.w	r3, r2, r3
 800f086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f088:	e01e      	b.n	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800f08a:	4b11      	ldr	r3, [pc, #68]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f096:	d106      	bne.n	800f0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f09a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f09e:	d102      	bne.n	800f0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0a4:	e010      	b.n	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800f0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f0b2:	d106      	bne.n	800f0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0ba:	d102      	bne.n	800f0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f0bc:	4b07      	ldr	r3, [pc, #28]	@ (800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c0:	e002      	b.n	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c6:	e2e2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0c8:	e2e1      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0ca:	4b05      	ldr	r3, [pc, #20]	@ (800f0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0ce:	e2de      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0d0:	58024400 	.word	0x58024400
 800f0d4:	03d09000 	.word	0x03d09000
 800f0d8:	003d0900 	.word	0x003d0900
 800f0dc:	017d7840 	.word	0x017d7840
 800f0e0:	00bb8000 	.word	0x00bb8000
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0e8:	e2d1      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0ee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f0f2:	430b      	orrs	r3, r1
 800f0f4:	f040 809c 	bne.w	800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800f0f8:	4b93      	ldr	r3, [pc, #588]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f100:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f108:	d054      	beq.n	800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f110:	f200 808b 	bhi.w	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f11a:	f000 8083 	beq.w	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f124:	f200 8081 	bhi.w	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f12e:	d02f      	beq.n	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f136:	d878      	bhi.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d004      	beq.n	800f148 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f144:	d012      	beq.n	800f16c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f146:	e070      	b.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f148:	4b7f      	ldr	r3, [pc, #508]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f154:	d107      	bne.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
 800f156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fd5e 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f164:	e293      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f166:	2300      	movs	r3, #0
 800f168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f16a:	e290      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f16c:	4b76      	ldr	r3, [pc, #472]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f178:	d107      	bne.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800f17a:	f107 0318 	add.w	r3, r7, #24
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 faa4 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f188:	e281      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f18a:	2300      	movs	r3, #0
 800f18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f18e:	e27e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f190:	4b6d      	ldr	r3, [pc, #436]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f19c:	d107      	bne.n	800f1ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 800f19e:	f107 030c 	add.w	r3, r7, #12
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fbe6 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1ac:	e26f      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1b2:	e26c      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1b4:	4b64      	ldr	r3, [pc, #400]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1be:	4b62      	ldr	r3, [pc, #392]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f003 0304 	and.w	r3, r3, #4
 800f1c6:	2b04      	cmp	r3, #4
 800f1c8:	d10c      	bne.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d109      	bne.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f1d0:	4b5d      	ldr	r3, [pc, #372]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	08db      	lsrs	r3, r3, #3
 800f1d6:	f003 0303 	and.w	r3, r3, #3
 800f1da:	4a5c      	ldr	r2, [pc, #368]	@ (800f34c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1e2:	e01e      	b.n	800f222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800f1e4:	4b58      	ldr	r3, [pc, #352]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1f0:	d106      	bne.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1f8:	d102      	bne.n	800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f1fa:	4b55      	ldr	r3, [pc, #340]	@ (800f350 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1fe:	e010      	b.n	800f222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800f200:	4b51      	ldr	r3, [pc, #324]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f20c:	d106      	bne.n	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f214:	d102      	bne.n	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f216:	4b4f      	ldr	r3, [pc, #316]	@ (800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f21a:	e002      	b.n	800f222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800f21c:	2300      	movs	r3, #0
 800f21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f220:	e235      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f222:	e234      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f224:	4b4c      	ldr	r3, [pc, #304]	@ (800f358 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f228:	e231      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f22a:	2300      	movs	r3, #0
 800f22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f22e:	e22e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f234:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f238:	430b      	orrs	r3, r1
 800f23a:	f040 808f 	bne.w	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800f23e:	4b42      	ldr	r3, [pc, #264]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f242:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f246:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f24e:	d06b      	beq.n	800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f256:	d874      	bhi.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f25e:	d056      	beq.n	800f30e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f266:	d86c      	bhi.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f26e:	d03b      	beq.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f272:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f276:	d864      	bhi.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f27e:	d021      	beq.n	800f2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f286:	d85c      	bhi.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d004      	beq.n	800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f294:	d004      	beq.n	800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f296:	e054      	b.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f298:	f7fe fa62 	bl	800d760 <HAL_RCC_GetPCLK1Freq>
 800f29c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f29e:	e1f6      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2a0:	4b29      	ldr	r3, [pc, #164]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f2ac:	d107      	bne.n	800f2be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 800f2ae:	f107 0318 	add.w	r3, r7, #24
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fa0a 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2bc:	e1e7      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2c2:	e1e4      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2c4:	4b20      	ldr	r3, [pc, #128]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2d0:	d107      	bne.n	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800f2d2:	f107 030c 	add.w	r3, r7, #12
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 fb4c 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2e0:	e1d5      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2e6:	e1d2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2e8:	4b17      	ldr	r3, [pc, #92]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f003 0304 	and.w	r3, r3, #4
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	d109      	bne.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800f2f4:	4b14      	ldr	r3, [pc, #80]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	08db      	lsrs	r3, r3, #3
 800f2fa:	f003 0303 	and.w	r3, r3, #3
 800f2fe:	4a13      	ldr	r2, [pc, #76]	@ (800f34c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f300:	fa22 f303 	lsr.w	r3, r2, r3
 800f304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f306:	e1c2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f308:	2300      	movs	r3, #0
 800f30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f30c:	e1bf      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f30e:	4b0e      	ldr	r3, [pc, #56]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f31a:	d102      	bne.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f31c:	4b0c      	ldr	r3, [pc, #48]	@ (800f350 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f320:	e1b5      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f322:	2300      	movs	r3, #0
 800f324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f326:	e1b2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f328:	4b07      	ldr	r3, [pc, #28]	@ (800f348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f334:	d102      	bne.n	800f33c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
 800f336:	4b07      	ldr	r3, [pc, #28]	@ (800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f33a:	e1a8      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f33c:	2300      	movs	r3, #0
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f340:	e1a5      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f342:	2300      	movs	r3, #0
 800f344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f346:	e1a2      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f348:	58024400 	.word	0x58024400
 800f34c:	03d09000 	.word	0x03d09000
 800f350:	003d0900 	.word	0x003d0900
 800f354:	017d7840 	.word	0x017d7840
 800f358:	00bb8000 	.word	0x00bb8000
 800f35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f360:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f364:	430b      	orrs	r3, r1
 800f366:	d173      	bne.n	800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800f368:	4b9c      	ldr	r3, [pc, #624]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f36a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f36c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f370:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f378:	d02f      	beq.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f380:	d863      	bhi.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f384:	2b00      	cmp	r3, #0
 800f386:	d004      	beq.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f38e:	d012      	beq.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f390:	e05b      	b.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f392:	4b92      	ldr	r3, [pc, #584]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f39a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f39e:	d107      	bne.n	800f3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800f3a0:	f107 0318 	add.w	r3, r7, #24
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 f991 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3ae:	e16e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b4:	e16b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f3b6:	4b89      	ldr	r3, [pc, #548]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f3be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3c2:	d107      	bne.n	800f3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800f3c4:	f107 030c 	add.w	r3, r7, #12
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 fad3 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3d2:	e15c      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3d8:	e159      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f3da:	4b80      	ldr	r3, [pc, #512]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3e4:	4b7d      	ldr	r3, [pc, #500]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 0304 	and.w	r3, r3, #4
 800f3ec:	2b04      	cmp	r3, #4
 800f3ee:	d10c      	bne.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d109      	bne.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f3f6:	4b79      	ldr	r3, [pc, #484]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	08db      	lsrs	r3, r3, #3
 800f3fc:	f003 0303 	and.w	r3, r3, #3
 800f400:	4a77      	ldr	r2, [pc, #476]	@ (800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f402:	fa22 f303 	lsr.w	r3, r2, r3
 800f406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f408:	e01e      	b.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f40a:	4b74      	ldr	r3, [pc, #464]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f416:	d106      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f41a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f41e:	d102      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f420:	4b70      	ldr	r3, [pc, #448]	@ (800f5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f424:	e010      	b.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f426:	4b6d      	ldr	r3, [pc, #436]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f42e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f432:	d106      	bne.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f43a:	d102      	bne.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f43c:	4b6a      	ldr	r3, [pc, #424]	@ (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f440:	e002      	b.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 800f442:	2300      	movs	r3, #0
 800f444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f446:	e122      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f448:	e121      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f44a:	2300      	movs	r3, #0
 800f44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f44e:	e11e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f454:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f458:	430b      	orrs	r3, r1
 800f45a:	d133      	bne.n	800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
 800f45c:	4b5f      	ldr	r3, [pc, #380]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f45e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f464:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d004      	beq.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f472:	d012      	beq.n	800f49a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f474:	e023      	b.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f476:	4b59      	ldr	r3, [pc, #356]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f47e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f482:	d107      	bne.n	800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800f484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fbc7 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800f48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f492:	e0fc      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f494:	2300      	movs	r3, #0
 800f496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f498:	e0f9      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f49a:	4b50      	ldr	r3, [pc, #320]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4a6:	d107      	bne.n	800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800f4a8:	f107 0318 	add.w	r3, r7, #24
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f000 f90d 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4b6:	e0ea      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4bc:	e0e7      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4c2:	e0e4      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4c8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f4cc:	430b      	orrs	r3, r1
 800f4ce:	f040 808d 	bne.w	800f5ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800f4d2:	4b42      	ldr	r3, [pc, #264]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f4da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4e2:	d06b      	beq.n	800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ea:	d874      	bhi.n	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4f2:	d056      	beq.n	800f5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4fa:	d86c      	bhi.n	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f502:	d03b      	beq.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f50a:	d864      	bhi.n	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f512:	d021      	beq.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f51a:	d85c      	bhi.n	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d004      	beq.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f528:	d004      	beq.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f52a:	e054      	b.n	800f5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f52c:	f000 f8b8 	bl	800f6a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f530:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f532:	e0ac      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f534:	4b29      	ldr	r3, [pc, #164]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f53c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f540:	d107      	bne.n	800f552 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800f542:	f107 0318 	add.w	r3, r7, #24
 800f546:	4618      	mov	r0, r3
 800f548:	f000 f8c0 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f550:	e09d      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f552:	2300      	movs	r3, #0
 800f554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f556:	e09a      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f558:	4b20      	ldr	r3, [pc, #128]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f564:	d107      	bne.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800f566:	f107 030c 	add.w	r3, r7, #12
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 fa02 	bl	800f974 <HAL_RCCEx_GetPLL3ClockFreq>
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f574:	e08b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f576:	2300      	movs	r3, #0
 800f578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f57a:	e088      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f57c:	4b17      	ldr	r3, [pc, #92]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f003 0304 	and.w	r3, r3, #4
 800f584:	2b04      	cmp	r3, #4
 800f586:	d109      	bne.n	800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
 800f588:	4b14      	ldr	r3, [pc, #80]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	08db      	lsrs	r3, r3, #3
 800f58e:	f003 0303 	and.w	r3, r3, #3
 800f592:	4a13      	ldr	r2, [pc, #76]	@ (800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f594:	fa22 f303 	lsr.w	r3, r2, r3
 800f598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f59a:	e078      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f59c:	2300      	movs	r3, #0
 800f59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5a0:	e075      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5ae:	d102      	bne.n	800f5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800f5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5b4:	e06b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5ba:	e068      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5bc:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5c8:	d102      	bne.n	800f5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800f5ca:	4b07      	ldr	r3, [pc, #28]	@ (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5ce:	e05e      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5d4:	e05b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f5da:	e058      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5dc:	58024400 	.word	0x58024400
 800f5e0:	03d09000 	.word	0x03d09000
 800f5e4:	003d0900 	.word	0x003d0900
 800f5e8:	017d7840 	.word	0x017d7840
 800f5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f5f4:	430b      	orrs	r3, r1
 800f5f6:	d148      	bne.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800f5f8:	4b27      	ldr	r3, [pc, #156]	@ (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f600:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f608:	d02a      	beq.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f610:	d838      	bhi.n	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f614:	2b00      	cmp	r3, #0
 800f616:	d004      	beq.n	800f622 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f61e:	d00d      	beq.n	800f63c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f620:	e030      	b.n	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f622:	4b1d      	ldr	r3, [pc, #116]	@ (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f62a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f62e:	d102      	bne.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f630:	4b1a      	ldr	r3, [pc, #104]	@ (800f69c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f634:	e02b      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f636:	2300      	movs	r3, #0
 800f638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f63a:	e028      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f63c:	4b16      	ldr	r3, [pc, #88]	@ (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f648:	d107      	bne.n	800f65a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
 800f64a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 fae4 	bl	800fc1c <HAL_RCCEx_GetPLL1ClockFreq>
 800f654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f658:	e019      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f65a:	2300      	movs	r3, #0
 800f65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f65e:	e016      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f660:	4b0d      	ldr	r3, [pc, #52]	@ (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f66c:	d107      	bne.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
 800f66e:	f107 0318 	add.w	r3, r7, #24
 800f672:	4618      	mov	r0, r3
 800f674:	f000 f82a 	bl	800f6cc <HAL_RCCEx_GetPLL2ClockFreq>
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f67c:	e007      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f67e:	2300      	movs	r3, #0
 800f680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f682:	e004      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f684:	2300      	movs	r3, #0
 800f686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f688:	e001      	b.n	800f68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f68a:	2300      	movs	r3, #0
 800f68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f690:	4618      	mov	r0, r3
 800f692:	3740      	adds	r7, #64	@ 0x40
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	58024400 	.word	0x58024400
 800f69c:	017d7840 	.word	0x017d7840

0800f6a0 <HAL_RCCEx_GetD3PCLK1Freq>:
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	f7fe f82c 	bl	800d700 <HAL_RCC_GetHCLKFreq>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	4b06      	ldr	r3, [pc, #24]	@ (800f6c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	091b      	lsrs	r3, r3, #4
 800f6b0:	f003 0307 	and.w	r3, r3, #7
 800f6b4:	4904      	ldr	r1, [pc, #16]	@ (800f6c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f6b6:	5ccb      	ldrb	r3, [r1, r3]
 800f6b8:	f003 031f 	and.w	r3, r3, #31
 800f6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	58024400 	.word	0x58024400
 800f6c8:	0801b280 	.word	0x0801b280

0800f6cc <HAL_RCCEx_GetPLL2ClockFreq>:
 800f6cc:	b480      	push	{r7}
 800f6ce:	b089      	sub	sp, #36	@ 0x24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	4ba1      	ldr	r3, [pc, #644]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6d8:	f003 0303 	and.w	r3, r3, #3
 800f6dc:	61bb      	str	r3, [r7, #24]
 800f6de:	4b9f      	ldr	r3, [pc, #636]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6e2:	0b1b      	lsrs	r3, r3, #12
 800f6e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f6e8:	617b      	str	r3, [r7, #20]
 800f6ea:	4b9c      	ldr	r3, [pc, #624]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ee:	091b      	lsrs	r3, r3, #4
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	613b      	str	r3, [r7, #16]
 800f6f6:	4b99      	ldr	r3, [pc, #612]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6fa:	08db      	lsrs	r3, r3, #3
 800f6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	fb02 f303 	mul.w	r3, r2, r3
 800f706:	ee07 3a90 	vmov	s15, r3
 800f70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f70e:	edc7 7a03 	vstr	s15, [r7, #12]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	f000 8111 	beq.w	800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	f000 8083 	beq.w	800f828 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	2b02      	cmp	r3, #2
 800f726:	f200 80a1 	bhi.w	800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d056      	beq.n	800f7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f736:	e099      	b.n	800f86c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f738:	4b88      	ldr	r3, [pc, #544]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f003 0320 	and.w	r3, r3, #32
 800f740:	2b00      	cmp	r3, #0
 800f742:	d02d      	beq.n	800f7a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 800f744:	4b85      	ldr	r3, [pc, #532]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	08db      	lsrs	r3, r3, #3
 800f74a:	f003 0303 	and.w	r3, r3, #3
 800f74e:	4a84      	ldr	r2, [pc, #528]	@ (800f960 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f750:	fa22 f303 	lsr.w	r3, r2, r3
 800f754:	60bb      	str	r3, [r7, #8]
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	ee07 3a90 	vmov	s15, r3
 800f75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	ee07 3a90 	vmov	s15, r3
 800f766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f76e:	4b7b      	ldr	r3, [pc, #492]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f776:	ee07 3a90 	vmov	s15, r3
 800f77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f782:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f78e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f79a:	edc7 7a07 	vstr	s15, [r7, #28]
 800f79e:	e087      	b.n	800f8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	ee07 3a90 	vmov	s15, r3
 800f7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f968 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7b2:	4b6a      	ldr	r3, [pc, #424]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7de:	edc7 7a07 	vstr	s15, [r7, #28]
 800f7e2:	e065      	b.n	800f8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	ee07 3a90 	vmov	s15, r3
 800f7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f96c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7f6:	4b59      	ldr	r3, [pc, #356]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7fe:	ee07 3a90 	vmov	s15, r3
 800f802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f806:	ed97 6a03 	vldr	s12, [r7, #12]
 800f80a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f822:	edc7 7a07 	vstr	s15, [r7, #28]
 800f826:	e043      	b.n	800f8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	ee07 3a90 	vmov	s15, r3
 800f82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f832:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f83a:	4b48      	ldr	r3, [pc, #288]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f842:	ee07 3a90 	vmov	s15, r3
 800f846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f84e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f85a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f866:	edc7 7a07 	vstr	s15, [r7, #28]
 800f86a:	e021      	b.n	800f8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	ee07 3a90 	vmov	s15, r3
 800f872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f876:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f96c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f87e:	4b37      	ldr	r3, [pc, #220]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f886:	ee07 3a90 	vmov	s15, r3
 800f88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f892:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f89e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8aa:	edc7 7a07 	vstr	s15, [r7, #28]
 800f8ae:	bf00      	nop
 800f8b0:	4b2a      	ldr	r3, [pc, #168]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8b4:	0a5b      	lsrs	r3, r3, #9
 800f8b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8ba:	ee07 3a90 	vmov	s15, r3
 800f8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8d6:	ee17 2a90 	vmov	r2, s15
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	4b1f      	ldr	r3, [pc, #124]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e2:	0c1b      	lsrs	r3, r3, #16
 800f8e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8e8:	ee07 3a90 	vmov	s15, r3
 800f8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f904:	ee17 2a90 	vmov	r2, s15
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	605a      	str	r2, [r3, #4]
 800f90c:	4b13      	ldr	r3, [pc, #76]	@ (800f95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f910:	0e1b      	lsrs	r3, r3, #24
 800f912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f916:	ee07 3a90 	vmov	s15, r3
 800f91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f91e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f926:	edd7 6a07 	vldr	s13, [r7, #28]
 800f92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f932:	ee17 2a90 	vmov	r2, s15
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	609a      	str	r2, [r3, #8]
 800f93a:	e008      	b.n	800f94e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	605a      	str	r2, [r3, #4]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	609a      	str	r2, [r3, #8]
 800f94e:	bf00      	nop
 800f950:	3724      	adds	r7, #36	@ 0x24
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	58024400 	.word	0x58024400
 800f960:	03d09000 	.word	0x03d09000
 800f964:	46000000 	.word	0x46000000
 800f968:	4c742400 	.word	0x4c742400
 800f96c:	4a742400 	.word	0x4a742400
 800f970:	4bbebc20 	.word	0x4bbebc20

0800f974 <HAL_RCCEx_GetPLL3ClockFreq>:
 800f974:	b480      	push	{r7}
 800f976:	b089      	sub	sp, #36	@ 0x24
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	4ba1      	ldr	r3, [pc, #644]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f980:	f003 0303 	and.w	r3, r3, #3
 800f984:	61bb      	str	r3, [r7, #24]
 800f986:	4b9f      	ldr	r3, [pc, #636]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98a:	0d1b      	lsrs	r3, r3, #20
 800f98c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f990:	617b      	str	r3, [r7, #20]
 800f992:	4b9c      	ldr	r3, [pc, #624]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f996:	0a1b      	lsrs	r3, r3, #8
 800f998:	f003 0301 	and.w	r3, r3, #1
 800f99c:	613b      	str	r3, [r7, #16]
 800f99e:	4b99      	ldr	r3, [pc, #612]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9a2:	08db      	lsrs	r3, r3, #3
 800f9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	fb02 f303 	mul.w	r3, r2, r3
 800f9ae:	ee07 3a90 	vmov	s15, r3
 800f9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9b6:	edc7 7a03 	vstr	s15, [r7, #12]
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8111 	beq.w	800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	f000 8083 	beq.w	800fad0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	f200 80a1 	bhi.w	800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d003      	beq.n	800f9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d056      	beq.n	800fa8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f9de:	e099      	b.n	800fb14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f9e0:	4b88      	ldr	r3, [pc, #544]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f003 0320 	and.w	r3, r3, #32
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d02d      	beq.n	800fa48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 800f9ec:	4b85      	ldr	r3, [pc, #532]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	08db      	lsrs	r3, r3, #3
 800f9f2:	f003 0303 	and.w	r3, r3, #3
 800f9f6:	4a84      	ldr	r2, [pc, #528]	@ (800fc08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9fc:	60bb      	str	r3, [r7, #8]
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	ee07 3a90 	vmov	s15, r3
 800fa04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	ee07 3a90 	vmov	s15, r3
 800fa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa16:	4b7b      	ldr	r3, [pc, #492]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa1e:	ee07 3a90 	vmov	s15, r3
 800fa22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa26:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fc0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa42:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa46:	e087      	b.n	800fb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	ee07 3a90 	vmov	s15, r3
 800fa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fc10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa5a:	4b6a      	ldr	r3, [pc, #424]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa62:	ee07 3a90 	vmov	s15, r3
 800fa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fc0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa86:	edc7 7a07 	vstr	s15, [r7, #28]
 800fa8a:	e065      	b.n	800fb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	ee07 3a90 	vmov	s15, r3
 800fa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fc14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa9e:	4b59      	ldr	r3, [pc, #356]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faa6:	ee07 3a90 	vmov	s15, r3
 800faaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faae:	ed97 6a03 	vldr	s12, [r7, #12]
 800fab2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fc0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fabe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faca:	edc7 7a07 	vstr	s15, [r7, #28]
 800face:	e043      	b.n	800fb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	ee07 3a90 	vmov	s15, r3
 800fad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fada:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fc18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fae2:	4b48      	ldr	r3, [pc, #288]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faea:	ee07 3a90 	vmov	s15, r3
 800faee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800faf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fc0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb0e:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb12:	e021      	b.n	800fb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	ee07 3a90 	vmov	s15, r3
 800fb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fc14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb26:	4b37      	ldr	r3, [pc, #220]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb2e:	ee07 3a90 	vmov	s15, r3
 800fb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fc0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb52:	edc7 7a07 	vstr	s15, [r7, #28]
 800fb56:	bf00      	nop
 800fb58:	4b2a      	ldr	r3, [pc, #168]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb5c:	0a5b      	lsrs	r3, r3, #9
 800fb5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb62:	ee07 3a90 	vmov	s15, r3
 800fb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb72:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb7e:	ee17 2a90 	vmov	r2, s15
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	4b1f      	ldr	r3, [pc, #124]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb8a:	0c1b      	lsrs	r3, r3, #16
 800fb8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb90:	ee07 3a90 	vmov	s15, r3
 800fb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbac:	ee17 2a90 	vmov	r2, s15
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	605a      	str	r2, [r3, #4]
 800fbb4:	4b13      	ldr	r3, [pc, #76]	@ (800fc04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbb8:	0e1b      	lsrs	r3, r3, #24
 800fbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbbe:	ee07 3a90 	vmov	s15, r3
 800fbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbce:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbda:	ee17 2a90 	vmov	r2, s15
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	609a      	str	r2, [r3, #8]
 800fbe2:	e008      	b.n	800fbf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	605a      	str	r2, [r3, #4]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	609a      	str	r2, [r3, #8]
 800fbf6:	bf00      	nop
 800fbf8:	3724      	adds	r7, #36	@ 0x24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	58024400 	.word	0x58024400
 800fc08:	03d09000 	.word	0x03d09000
 800fc0c:	46000000 	.word	0x46000000
 800fc10:	4c742400 	.word	0x4c742400
 800fc14:	4a742400 	.word	0x4a742400
 800fc18:	4bbebc20 	.word	0x4bbebc20

0800fc1c <HAL_RCCEx_GetPLL1ClockFreq>:
 800fc1c:	b480      	push	{r7}
 800fc1e:	b089      	sub	sp, #36	@ 0x24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4ba0      	ldr	r3, [pc, #640]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc28:	f003 0303 	and.w	r3, r3, #3
 800fc2c:	61bb      	str	r3, [r7, #24]
 800fc2e:	4b9e      	ldr	r3, [pc, #632]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc32:	091b      	lsrs	r3, r3, #4
 800fc34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc38:	617b      	str	r3, [r7, #20]
 800fc3a:	4b9b      	ldr	r3, [pc, #620]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	613b      	str	r3, [r7, #16]
 800fc44:	4b98      	ldr	r3, [pc, #608]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc48:	08db      	lsrs	r3, r3, #3
 800fc4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	fb02 f303 	mul.w	r3, r2, r3
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc5c:	edc7 7a03 	vstr	s15, [r7, #12]
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 8111 	beq.w	800fe8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	2b02      	cmp	r3, #2
 800fc6c:	f000 8083 	beq.w	800fd76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	f200 80a1 	bhi.w	800fdba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d003      	beq.n	800fc86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d056      	beq.n	800fd32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fc84:	e099      	b.n	800fdba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc86:	4b88      	ldr	r3, [pc, #544]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f003 0320 	and.w	r3, r3, #32
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d02d      	beq.n	800fcee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 800fc92:	4b85      	ldr	r3, [pc, #532]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	08db      	lsrs	r3, r3, #3
 800fc98:	f003 0303 	and.w	r3, r3, #3
 800fc9c:	4a83      	ldr	r2, [pc, #524]	@ (800feac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800fca2:	60bb      	str	r3, [r7, #8]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	ee07 3a90 	vmov	s15, r3
 800fcaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	ee07 3a90 	vmov	s15, r3
 800fcb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcbc:	4b7a      	ldr	r3, [pc, #488]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcc4:	ee07 3a90 	vmov	s15, r3
 800fcc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fccc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcd0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800feb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fce8:	edc7 7a07 	vstr	s15, [r7, #28]
 800fcec:	e087      	b.n	800fdfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	ee07 3a90 	vmov	s15, r3
 800fcf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcf8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800feb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fcfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd00:	4b69      	ldr	r3, [pc, #420]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd08:	ee07 3a90 	vmov	s15, r3
 800fd0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd10:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd14:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800feb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd2c:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd30:	e065      	b.n	800fdfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	ee07 3a90 	vmov	s15, r3
 800fd38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd3c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800feb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fd40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd44:	4b58      	ldr	r3, [pc, #352]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd4c:	ee07 3a90 	vmov	s15, r3
 800fd50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd54:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd58:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800feb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd70:	edc7 7a07 	vstr	s15, [r7, #28]
 800fd74:	e043      	b.n	800fdfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	ee07 3a90 	vmov	s15, r3
 800fd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd80:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800febc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fd84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd88:	4b47      	ldr	r3, [pc, #284]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd90:	ee07 3a90 	vmov	s15, r3
 800fd94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd98:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd9c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800feb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fda0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fda4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fda8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdb4:	edc7 7a07 	vstr	s15, [r7, #28]
 800fdb8:	e021      	b.n	800fdfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	ee07 3a90 	vmov	s15, r3
 800fdc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdc4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800feb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdcc:	4b36      	ldr	r3, [pc, #216]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdd4:	ee07 3a90 	vmov	s15, r3
 800fdd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fddc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fde0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800feb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fde4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fde8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf8:	edc7 7a07 	vstr	s15, [r7, #28]
 800fdfc:	bf00      	nop
 800fdfe:	4b2a      	ldr	r3, [pc, #168]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe02:	0a5b      	lsrs	r3, r3, #9
 800fe04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe08:	ee07 3a90 	vmov	s15, r3
 800fe0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe18:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe24:	ee17 2a90 	vmov	r2, s15
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	601a      	str	r2, [r3, #0]
 800fe2c:	4b1e      	ldr	r3, [pc, #120]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe30:	0c1b      	lsrs	r3, r3, #16
 800fe32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe36:	ee07 3a90 	vmov	s15, r3
 800fe3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe46:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe52:	ee17 2a90 	vmov	r2, s15
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	4b13      	ldr	r3, [pc, #76]	@ (800fea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5e:	0e1b      	lsrs	r3, r3, #24
 800fe60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe64:	ee07 3a90 	vmov	s15, r3
 800fe68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe74:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe80:	ee17 2a90 	vmov	r2, s15
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	609a      	str	r2, [r3, #8]
 800fe88:	e008      	b.n	800fe9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	601a      	str	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	605a      	str	r2, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	609a      	str	r2, [r3, #8]
 800fe9c:	bf00      	nop
 800fe9e:	3724      	adds	r7, #36	@ 0x24
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	58024400 	.word	0x58024400
 800feac:	03d09000 	.word	0x03d09000
 800feb0:	46000000 	.word	0x46000000
 800feb4:	4c742400 	.word	0x4c742400
 800feb8:	4a742400 	.word	0x4a742400
 800febc:	4bbebc20 	.word	0x4bbebc20

0800fec0 <RCCEx_PLL2_Config>:
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
 800feca:	2300      	movs	r3, #0
 800fecc:	73fb      	strb	r3, [r7, #15]
 800fece:	4b53      	ldr	r3, [pc, #332]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800fed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fed2:	f003 0303 	and.w	r3, r3, #3
 800fed6:	2b03      	cmp	r3, #3
 800fed8:	d101      	bne.n	800fede <RCCEx_PLL2_Config+0x1e>
 800feda:	2301      	movs	r3, #1
 800fedc:	e099      	b.n	8010012 <RCCEx_PLL2_Config+0x152>
 800fede:	4b4f      	ldr	r3, [pc, #316]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4a4e      	ldr	r2, [pc, #312]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800fee4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fee8:	6013      	str	r3, [r2, #0]
 800feea:	f7f4 ff95 	bl	8004e18 <HAL_GetTick>
 800feee:	60b8      	str	r0, [r7, #8]
 800fef0:	e008      	b.n	800ff04 <RCCEx_PLL2_Config+0x44>
 800fef2:	f7f4 ff91 	bl	8004e18 <HAL_GetTick>
 800fef6:	4602      	mov	r2, r0
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d901      	bls.n	800ff04 <RCCEx_PLL2_Config+0x44>
 800ff00:	2303      	movs	r3, #3
 800ff02:	e086      	b.n	8010012 <RCCEx_PLL2_Config+0x152>
 800ff04:	4b45      	ldr	r3, [pc, #276]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1f0      	bne.n	800fef2 <RCCEx_PLL2_Config+0x32>
 800ff10:	4b42      	ldr	r3, [pc, #264]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	031b      	lsls	r3, r3, #12
 800ff1e:	493f      	ldr	r1, [pc, #252]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff20:	4313      	orrs	r3, r2
 800ff22:	628b      	str	r3, [r1, #40]	@ 0x28
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	3b01      	subs	r3, #1
 800ff34:	025b      	lsls	r3, r3, #9
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	041b      	lsls	r3, r3, #16
 800ff42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ff46:	431a      	orrs	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	061b      	lsls	r3, r3, #24
 800ff50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ff54:	4931      	ldr	r1, [pc, #196]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff56:	4313      	orrs	r3, r2
 800ff58:	638b      	str	r3, [r1, #56]	@ 0x38
 800ff5a:	4b30      	ldr	r3, [pc, #192]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	695b      	ldr	r3, [r3, #20]
 800ff66:	492d      	ldr	r1, [pc, #180]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ff6c:	4b2b      	ldr	r3, [pc, #172]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff70:	f023 0220 	bic.w	r2, r3, #32
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	4928      	ldr	r1, [pc, #160]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ff7e:	4b27      	ldr	r3, [pc, #156]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff82:	4a26      	ldr	r2, [pc, #152]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff84:	f023 0310 	bic.w	r3, r3, #16
 800ff88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff8a:	4b24      	ldr	r3, [pc, #144]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff8e:	4b24      	ldr	r3, [pc, #144]	@ (8010020 <RCCEx_PLL2_Config+0x160>)
 800ff90:	4013      	ands	r3, r2
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	69d2      	ldr	r2, [r2, #28]
 800ff96:	00d2      	lsls	r2, r2, #3
 800ff98:	4920      	ldr	r1, [pc, #128]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	63cb      	str	r3, [r1, #60]	@ 0x3c
 800ff9e:	4b1f      	ldr	r3, [pc, #124]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa2:	4a1e      	ldr	r2, [pc, #120]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffa4:	f043 0310 	orr.w	r3, r3, #16
 800ffa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d106      	bne.n	800ffbe <RCCEx_PLL2_Config+0xfe>
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb4:	4a19      	ldr	r2, [pc, #100]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ffba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffbc:	e00f      	b.n	800ffde <RCCEx_PLL2_Config+0x11e>
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d106      	bne.n	800ffd2 <RCCEx_PLL2_Config+0x112>
 800ffc4:	4b15      	ldr	r3, [pc, #84]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc8:	4a14      	ldr	r2, [pc, #80]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffd0:	e005      	b.n	800ffde <RCCEx_PLL2_Config+0x11e>
 800ffd2:	4b12      	ldr	r3, [pc, #72]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd6:	4a11      	ldr	r2, [pc, #68]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ffdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffde:	4b0f      	ldr	r3, [pc, #60]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a0e      	ldr	r2, [pc, #56]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 800ffe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ffe8:	6013      	str	r3, [r2, #0]
 800ffea:	f7f4 ff15 	bl	8004e18 <HAL_GetTick>
 800ffee:	60b8      	str	r0, [r7, #8]
 800fff0:	e008      	b.n	8010004 <RCCEx_PLL2_Config+0x144>
 800fff2:	f7f4 ff11 	bl	8004e18 <HAL_GetTick>
 800fff6:	4602      	mov	r2, r0
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d901      	bls.n	8010004 <RCCEx_PLL2_Config+0x144>
 8010000:	2303      	movs	r3, #3
 8010002:	e006      	b.n	8010012 <RCCEx_PLL2_Config+0x152>
 8010004:	4b05      	ldr	r3, [pc, #20]	@ (801001c <RCCEx_PLL2_Config+0x15c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801000c:	2b00      	cmp	r3, #0
 801000e:	d0f0      	beq.n	800fff2 <RCCEx_PLL2_Config+0x132>
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	58024400 	.word	0x58024400
 8010020:	ffff0007 	.word	0xffff0007

08010024 <RCCEx_PLL3_Config>:
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]
 8010032:	4b53      	ldr	r3, [pc, #332]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010036:	f003 0303 	and.w	r3, r3, #3
 801003a:	2b03      	cmp	r3, #3
 801003c:	d101      	bne.n	8010042 <RCCEx_PLL3_Config+0x1e>
 801003e:	2301      	movs	r3, #1
 8010040:	e099      	b.n	8010176 <RCCEx_PLL3_Config+0x152>
 8010042:	4b4f      	ldr	r3, [pc, #316]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a4e      	ldr	r2, [pc, #312]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801004c:	6013      	str	r3, [r2, #0]
 801004e:	f7f4 fee3 	bl	8004e18 <HAL_GetTick>
 8010052:	60b8      	str	r0, [r7, #8]
 8010054:	e008      	b.n	8010068 <RCCEx_PLL3_Config+0x44>
 8010056:	f7f4 fedf 	bl	8004e18 <HAL_GetTick>
 801005a:	4602      	mov	r2, r0
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	2b02      	cmp	r3, #2
 8010062:	d901      	bls.n	8010068 <RCCEx_PLL3_Config+0x44>
 8010064:	2303      	movs	r3, #3
 8010066:	e086      	b.n	8010176 <RCCEx_PLL3_Config+0x152>
 8010068:	4b45      	ldr	r3, [pc, #276]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1f0      	bne.n	8010056 <RCCEx_PLL3_Config+0x32>
 8010074:	4b42      	ldr	r3, [pc, #264]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010078:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	051b      	lsls	r3, r3, #20
 8010082:	493f      	ldr	r1, [pc, #252]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010084:	4313      	orrs	r3, r2
 8010086:	628b      	str	r3, [r1, #40]	@ 0x28
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	3b01      	subs	r3, #1
 801008e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	3b01      	subs	r3, #1
 8010098:	025b      	lsls	r3, r3, #9
 801009a:	b29b      	uxth	r3, r3
 801009c:	431a      	orrs	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	3b01      	subs	r3, #1
 80100a4:	041b      	lsls	r3, r3, #16
 80100a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80100aa:	431a      	orrs	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	3b01      	subs	r3, #1
 80100b2:	061b      	lsls	r3, r3, #24
 80100b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80100b8:	4931      	ldr	r1, [pc, #196]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100ba:	4313      	orrs	r3, r2
 80100bc:	640b      	str	r3, [r1, #64]	@ 0x40
 80100be:	4b30      	ldr	r3, [pc, #192]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	695b      	ldr	r3, [r3, #20]
 80100ca:	492d      	ldr	r1, [pc, #180]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100cc:	4313      	orrs	r3, r2
 80100ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80100d0:	4b2b      	ldr	r3, [pc, #172]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	699b      	ldr	r3, [r3, #24]
 80100dc:	4928      	ldr	r1, [pc, #160]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100de:	4313      	orrs	r3, r2
 80100e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80100e2:	4b27      	ldr	r3, [pc, #156]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100e6:	4a26      	ldr	r2, [pc, #152]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100ee:	4b24      	ldr	r3, [pc, #144]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100f2:	4b24      	ldr	r3, [pc, #144]	@ (8010184 <RCCEx_PLL3_Config+0x160>)
 80100f4:	4013      	ands	r3, r2
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	69d2      	ldr	r2, [r2, #28]
 80100fa:	00d2      	lsls	r2, r2, #3
 80100fc:	4920      	ldr	r1, [pc, #128]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 80100fe:	4313      	orrs	r3, r2
 8010100:	644b      	str	r3, [r1, #68]	@ 0x44
 8010102:	4b1f      	ldr	r3, [pc, #124]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010106:	4a1e      	ldr	r2, [pc, #120]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801010c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <RCCEx_PLL3_Config+0xfe>
 8010114:	4b1a      	ldr	r3, [pc, #104]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010118:	4a19      	ldr	r2, [pc, #100]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801011a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801011e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010120:	e00f      	b.n	8010142 <RCCEx_PLL3_Config+0x11e>
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	2b01      	cmp	r3, #1
 8010126:	d106      	bne.n	8010136 <RCCEx_PLL3_Config+0x112>
 8010128:	4b15      	ldr	r3, [pc, #84]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801012a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801012c:	4a14      	ldr	r2, [pc, #80]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801012e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010134:	e005      	b.n	8010142 <RCCEx_PLL3_Config+0x11e>
 8010136:	4b12      	ldr	r3, [pc, #72]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801013a:	4a11      	ldr	r2, [pc, #68]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801013c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010140:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010142:	4b0f      	ldr	r3, [pc, #60]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a0e      	ldr	r2, [pc, #56]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 8010148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801014c:	6013      	str	r3, [r2, #0]
 801014e:	f7f4 fe63 	bl	8004e18 <HAL_GetTick>
 8010152:	60b8      	str	r0, [r7, #8]
 8010154:	e008      	b.n	8010168 <RCCEx_PLL3_Config+0x144>
 8010156:	f7f4 fe5f 	bl	8004e18 <HAL_GetTick>
 801015a:	4602      	mov	r2, r0
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	2b02      	cmp	r3, #2
 8010162:	d901      	bls.n	8010168 <RCCEx_PLL3_Config+0x144>
 8010164:	2303      	movs	r3, #3
 8010166:	e006      	b.n	8010176 <RCCEx_PLL3_Config+0x152>
 8010168:	4b05      	ldr	r3, [pc, #20]	@ (8010180 <RCCEx_PLL3_Config+0x15c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0f0      	beq.n	8010156 <RCCEx_PLL3_Config+0x132>
 8010174:	7bfb      	ldrb	r3, [r7, #15]
 8010176:	4618      	mov	r0, r3
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	58024400 	.word	0x58024400
 8010184:	ffff0007 	.word	0xffff0007

08010188 <HAL_RTC_Init>:
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	2301      	movs	r3, #1
 8010192:	73fb      	strb	r3, [r7, #15]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d071      	beq.n	801027e <HAL_RTC_Init+0xf6>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d106      	bne.n	80101b4 <HAL_RTC_Init+0x2c>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2020 	strb.w	r2, [r3, #32]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7f3 f9b4 	bl	800351c <HAL_RTC_MspInit>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2202      	movs	r2, #2
 80101b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	f003 0310 	and.w	r3, r3, #16
 80101c6:	2b10      	cmp	r3, #16
 80101c8:	d050      	beq.n	801026c <HAL_RTC_Init+0xe4>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	22ca      	movs	r2, #202	@ 0xca
 80101d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2253      	movs	r2, #83	@ 0x53
 80101d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 fa4a 	bl	8010674 <RTC_EnterInitMode>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d124      	bne.n	8010234 <HAL_RTC_Init+0xac>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	6899      	ldr	r1, [r3, #8]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	4b24      	ldr	r3, [pc, #144]	@ (8010288 <HAL_RTC_Init+0x100>)
 80101f6:	400b      	ands	r3, r1
 80101f8:	6093      	str	r3, [r2, #8]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	6899      	ldr	r1, [r3, #8]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	431a      	orrs	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	699b      	ldr	r3, [r3, #24]
 801020e:	431a      	orrs	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	430a      	orrs	r2, r1
 8010216:	609a      	str	r2, [r3, #8]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	0419      	lsls	r1, r3, #16
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68da      	ldr	r2, [r3, #12]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	430a      	orrs	r2, r1
 8010228:	611a      	str	r2, [r3, #16]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 fa56 	bl	80106dc <RTC_ExitInitMode>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
 8010234:	7bfb      	ldrb	r3, [r7, #15]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d113      	bne.n	8010262 <HAL_RTC_Init+0xda>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f022 0203 	bic.w	r2, r2, #3
 8010248:	64da      	str	r2, [r3, #76]	@ 0x4c
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	69da      	ldr	r2, [r3, #28]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	695b      	ldr	r3, [r3, #20]
 8010258:	431a      	orrs	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	430a      	orrs	r2, r1
 8010260:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	22ff      	movs	r2, #255	@ 0xff
 8010268:	625a      	str	r2, [r3, #36]	@ 0x24
 801026a:	e001      	b.n	8010270 <HAL_RTC_Init+0xe8>
 801026c:	2300      	movs	r3, #0
 801026e:	73fb      	strb	r3, [r7, #15]
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d103      	bne.n	801027e <HAL_RTC_Init+0xf6>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 801027e:	7bfb      	ldrb	r3, [r7, #15]
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	ff8fffbf 	.word	0xff8fffbf

0801028c <HAL_RTC_SetTime>:
 801028c:	b590      	push	{r4, r7, lr}
 801028e:	b087      	sub	sp, #28
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d101      	bne.n	80102a6 <HAL_RTC_SetTime+0x1a>
 80102a2:	2302      	movs	r3, #2
 80102a4:	e089      	b.n	80103ba <HAL_RTC_SetTime+0x12e>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 2020 	strb.w	r2, [r3, #32]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2202      	movs	r2, #2
 80102b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	22ca      	movs	r2, #202	@ 0xca
 80102bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2253      	movs	r2, #83	@ 0x53
 80102c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f000 f9d4 	bl	8010674 <RTC_EnterInitMode>
 80102cc:	4603      	mov	r3, r0
 80102ce:	74fb      	strb	r3, [r7, #19]
 80102d0:	7cfb      	ldrb	r3, [r7, #19]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d161      	bne.n	801039a <HAL_RTC_SetTime+0x10e>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d126      	bne.n	801032a <HAL_RTC_SetTime+0x9e>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d102      	bne.n	80102f0 <HAL_RTC_SetTime+0x64>
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2200      	movs	r2, #0
 80102ee:	70da      	strb	r2, [r3, #3]
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 fa2f 	bl	8010758 <RTC_ByteToBcd2>
 80102fa:	4603      	mov	r3, r0
 80102fc:	041c      	lsls	r4, r3, #16
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	785b      	ldrb	r3, [r3, #1]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fa28 	bl	8010758 <RTC_ByteToBcd2>
 8010308:	4603      	mov	r3, r0
 801030a:	021b      	lsls	r3, r3, #8
 801030c:	431c      	orrs	r4, r3
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	789b      	ldrb	r3, [r3, #2]
 8010312:	4618      	mov	r0, r3
 8010314:	f000 fa20 	bl	8010758 <RTC_ByteToBcd2>
 8010318:	4603      	mov	r3, r0
 801031a:	ea44 0203 	orr.w	r2, r4, r3
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	78db      	ldrb	r3, [r3, #3]
 8010322:	059b      	lsls	r3, r3, #22
 8010324:	4313      	orrs	r3, r2
 8010326:	617b      	str	r3, [r7, #20]
 8010328:	e018      	b.n	801035c <HAL_RTC_SetTime+0xd0>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010334:	2b00      	cmp	r3, #0
 8010336:	d102      	bne.n	801033e <HAL_RTC_SetTime+0xb2>
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2200      	movs	r2, #0
 801033c:	70da      	strb	r2, [r3, #3]
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	041a      	lsls	r2, r3, #16
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	785b      	ldrb	r3, [r3, #1]
 8010348:	021b      	lsls	r3, r3, #8
 801034a:	4313      	orrs	r3, r2
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	7892      	ldrb	r2, [r2, #2]
 8010350:	431a      	orrs	r2, r3
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	78db      	ldrb	r3, [r3, #3]
 8010356:	059b      	lsls	r3, r3, #22
 8010358:	4313      	orrs	r3, r2
 801035a:	617b      	str	r3, [r7, #20]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	6979      	ldr	r1, [r7, #20]
 8010362:	4b18      	ldr	r3, [pc, #96]	@ (80103c4 <HAL_RTC_SetTime+0x138>)
 8010364:	400b      	ands	r3, r1
 8010366:	6013      	str	r3, [r2, #0]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	689a      	ldr	r2, [r3, #8]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010376:	609a      	str	r2, [r3, #8]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	6899      	ldr	r1, [r3, #8]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	68da      	ldr	r2, [r3, #12]
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	431a      	orrs	r2, r3
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	430a      	orrs	r2, r1
 801038e:	609a      	str	r2, [r3, #8]
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f000 f9a3 	bl	80106dc <RTC_ExitInitMode>
 8010396:	4603      	mov	r3, r0
 8010398:	74fb      	strb	r3, [r7, #19]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	22ff      	movs	r2, #255	@ 0xff
 80103a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80103a2:	7cfb      	ldrb	r3, [r7, #19]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <HAL_RTC_SetTime+0x124>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2200      	movs	r2, #0
 80103b4:	f883 2020 	strb.w	r2, [r3, #32]
 80103b8:	7cfb      	ldrb	r3, [r7, #19]
 80103ba:	4618      	mov	r0, r3
 80103bc:	371c      	adds	r7, #28
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd90      	pop	{r4, r7, pc}
 80103c2:	bf00      	nop
 80103c4:	007f7f7f 	.word	0x007f7f7f

080103c8 <HAL_RTC_GetTime>:
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	605a      	str	r2, [r3, #4]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	609a      	str	r2, [r3, #8]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	4b22      	ldr	r3, [pc, #136]	@ (801047c <HAL_RTC_GetTime+0xb4>)
 80103f4:	4013      	ands	r3, r2
 80103f6:	617b      	str	r3, [r7, #20]
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	0c1b      	lsrs	r3, r3, #16
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010402:	b2da      	uxtb	r2, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	701a      	strb	r2, [r3, #0]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	0a1b      	lsrs	r3, r3, #8
 801040c:	b2db      	uxtb	r3, r3
 801040e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010412:	b2da      	uxtb	r2, r3
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	705a      	strb	r2, [r3, #1]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010420:	b2da      	uxtb	r2, r3
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	709a      	strb	r2, [r3, #2]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	0d9b      	lsrs	r3, r3, #22
 801042a:	b2db      	uxtb	r3, r3
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	b2da      	uxtb	r2, r3
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	70da      	strb	r2, [r3, #3]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d11a      	bne.n	8010472 <HAL_RTC_GetTime+0xaa>
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	f000 f9a9 	bl	8010798 <RTC_Bcd2ToByte>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	785b      	ldrb	r3, [r3, #1]
 8010452:	4618      	mov	r0, r3
 8010454:	f000 f9a0 	bl	8010798 <RTC_Bcd2ToByte>
 8010458:	4603      	mov	r3, r0
 801045a:	461a      	mov	r2, r3
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	705a      	strb	r2, [r3, #1]
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	789b      	ldrb	r3, [r3, #2]
 8010464:	4618      	mov	r0, r3
 8010466:	f000 f997 	bl	8010798 <RTC_Bcd2ToByte>
 801046a:	4603      	mov	r3, r0
 801046c:	461a      	mov	r2, r3
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	709a      	strb	r2, [r3, #2]
 8010472:	2300      	movs	r3, #0
 8010474:	4618      	mov	r0, r3
 8010476:	3718      	adds	r7, #24
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	007f7f7f 	.word	0x007f7f7f

08010480 <HAL_RTC_SetDate>:
 8010480:	b590      	push	{r4, r7, lr}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d101      	bne.n	801049a <HAL_RTC_SetDate+0x1a>
 8010496:	2302      	movs	r3, #2
 8010498:	e073      	b.n	8010582 <HAL_RTC_SetDate+0x102>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 2020 	strb.w	r2, [r3, #32]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2202      	movs	r2, #2
 80104a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d10e      	bne.n	80104ce <HAL_RTC_SetDate+0x4e>
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	785b      	ldrb	r3, [r3, #1]
 80104b4:	f003 0310 	and.w	r3, r3, #16
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d008      	beq.n	80104ce <HAL_RTC_SetDate+0x4e>
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	785b      	ldrb	r3, [r3, #1]
 80104c0:	f023 0310 	bic.w	r3, r3, #16
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	330a      	adds	r3, #10
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	705a      	strb	r2, [r3, #1]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d11c      	bne.n	801050e <HAL_RTC_SetDate+0x8e>
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	78db      	ldrb	r3, [r3, #3]
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 f93d 	bl	8010758 <RTC_ByteToBcd2>
 80104de:	4603      	mov	r3, r0
 80104e0:	041c      	lsls	r4, r3, #16
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	785b      	ldrb	r3, [r3, #1]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 f936 	bl	8010758 <RTC_ByteToBcd2>
 80104ec:	4603      	mov	r3, r0
 80104ee:	021b      	lsls	r3, r3, #8
 80104f0:	431c      	orrs	r4, r3
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	789b      	ldrb	r3, [r3, #2]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f000 f92e 	bl	8010758 <RTC_ByteToBcd2>
 80104fc:	4603      	mov	r3, r0
 80104fe:	ea44 0203 	orr.w	r2, r4, r3
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	035b      	lsls	r3, r3, #13
 8010508:	4313      	orrs	r3, r2
 801050a:	617b      	str	r3, [r7, #20]
 801050c:	e00e      	b.n	801052c <HAL_RTC_SetDate+0xac>
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	78db      	ldrb	r3, [r3, #3]
 8010512:	041a      	lsls	r2, r3, #16
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	021b      	lsls	r3, r3, #8
 801051a:	4313      	orrs	r3, r2
 801051c:	68ba      	ldr	r2, [r7, #8]
 801051e:	7892      	ldrb	r2, [r2, #2]
 8010520:	431a      	orrs	r2, r3
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	035b      	lsls	r3, r3, #13
 8010528:	4313      	orrs	r3, r2
 801052a:	617b      	str	r3, [r7, #20]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	22ca      	movs	r2, #202	@ 0xca
 8010532:	625a      	str	r2, [r3, #36]	@ 0x24
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2253      	movs	r2, #83	@ 0x53
 801053a:	625a      	str	r2, [r3, #36]	@ 0x24
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 f899 	bl	8010674 <RTC_EnterInitMode>
 8010542:	4603      	mov	r3, r0
 8010544:	74fb      	strb	r3, [r7, #19]
 8010546:	7cfb      	ldrb	r3, [r7, #19]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10a      	bne.n	8010562 <HAL_RTC_SetDate+0xe2>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	6979      	ldr	r1, [r7, #20]
 8010552:	4b0e      	ldr	r3, [pc, #56]	@ (801058c <HAL_RTC_SetDate+0x10c>)
 8010554:	400b      	ands	r3, r1
 8010556:	6053      	str	r3, [r2, #4]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f000 f8bf 	bl	80106dc <RTC_ExitInitMode>
 801055e:	4603      	mov	r3, r0
 8010560:	74fb      	strb	r3, [r7, #19]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	22ff      	movs	r2, #255	@ 0xff
 8010568:	625a      	str	r2, [r3, #36]	@ 0x24
 801056a:	7cfb      	ldrb	r3, [r7, #19]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d103      	bne.n	8010578 <HAL_RTC_SetDate+0xf8>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2200      	movs	r2, #0
 801057c:	f883 2020 	strb.w	r2, [r3, #32]
 8010580:	7cfb      	ldrb	r3, [r7, #19]
 8010582:	4618      	mov	r0, r3
 8010584:	371c      	adds	r7, #28
 8010586:	46bd      	mov	sp, r7
 8010588:	bd90      	pop	{r4, r7, pc}
 801058a:	bf00      	nop
 801058c:	00ffff3f 	.word	0x00ffff3f

08010590 <HAL_RTC_GetDate>:
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	607a      	str	r2, [r7, #4]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	4b21      	ldr	r3, [pc, #132]	@ (8010628 <HAL_RTC_GetDate+0x98>)
 80105a4:	4013      	ands	r3, r2
 80105a6:	617b      	str	r3, [r7, #20]
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	0c1b      	lsrs	r3, r3, #16
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	70da      	strb	r2, [r3, #3]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	0a1b      	lsrs	r3, r3, #8
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	f003 031f 	and.w	r3, r3, #31
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	705a      	strb	r2, [r3, #1]
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	709a      	strb	r2, [r3, #2]
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	0b5b      	lsrs	r3, r3, #13
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	f003 0307 	and.w	r3, r3, #7
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	701a      	strb	r2, [r3, #0]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d11a      	bne.n	801061c <HAL_RTC_GetDate+0x8c>
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	78db      	ldrb	r3, [r3, #3]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 f8d4 	bl	8010798 <RTC_Bcd2ToByte>
 80105f0:	4603      	mov	r3, r0
 80105f2:	461a      	mov	r2, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	70da      	strb	r2, [r3, #3]
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	785b      	ldrb	r3, [r3, #1]
 80105fc:	4618      	mov	r0, r3
 80105fe:	f000 f8cb 	bl	8010798 <RTC_Bcd2ToByte>
 8010602:	4603      	mov	r3, r0
 8010604:	461a      	mov	r2, r3
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	705a      	strb	r2, [r3, #1]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	789b      	ldrb	r3, [r3, #2]
 801060e:	4618      	mov	r0, r3
 8010610:	f000 f8c2 	bl	8010798 <RTC_Bcd2ToByte>
 8010614:	4603      	mov	r3, r0
 8010616:	461a      	mov	r2, r3
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	709a      	strb	r2, [r3, #2]
 801061c:	2300      	movs	r3, #0
 801061e:	4618      	mov	r0, r3
 8010620:	3718      	adds	r7, #24
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	00ffff3f 	.word	0x00ffff3f

0801062c <HAL_RTC_WaitForSynchro>:
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a0d      	ldr	r2, [pc, #52]	@ (8010670 <HAL_RTC_WaitForSynchro+0x44>)
 801063a:	60da      	str	r2, [r3, #12]
 801063c:	f7f4 fbec 	bl	8004e18 <HAL_GetTick>
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	e009      	b.n	8010658 <HAL_RTC_WaitForSynchro+0x2c>
 8010644:	f7f4 fbe8 	bl	8004e18 <HAL_GetTick>
 8010648:	4602      	mov	r2, r0
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010652:	d901      	bls.n	8010658 <HAL_RTC_WaitForSynchro+0x2c>
 8010654:	2303      	movs	r3, #3
 8010656:	e007      	b.n	8010668 <HAL_RTC_WaitForSynchro+0x3c>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	f003 0320 	and.w	r3, r3, #32
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0ee      	beq.n	8010644 <HAL_RTC_WaitForSynchro+0x18>
 8010666:	2300      	movs	r3, #0
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	0003ff5f 	.word	0x0003ff5f

08010674 <RTC_EnterInitMode>:
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	2300      	movs	r3, #0
 801067e:	73fb      	strb	r3, [r7, #15]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801068a:	2b00      	cmp	r3, #0
 801068c:	d120      	bne.n	80106d0 <RTC_EnterInitMode+0x5c>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f04f 32ff 	mov.w	r2, #4294967295
 8010696:	60da      	str	r2, [r3, #12]
 8010698:	f7f4 fbbe 	bl	8004e18 <HAL_GetTick>
 801069c:	60b8      	str	r0, [r7, #8]
 801069e:	e00d      	b.n	80106bc <RTC_EnterInitMode+0x48>
 80106a0:	f7f4 fbba 	bl	8004e18 <HAL_GetTick>
 80106a4:	4602      	mov	r2, r0
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80106ae:	d905      	bls.n	80106bc <RTC_EnterInitMode+0x48>
 80106b0:	2303      	movs	r3, #3
 80106b2:	73fb      	strb	r3, [r7, #15]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2203      	movs	r2, #3
 80106b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d102      	bne.n	80106d0 <RTC_EnterInitMode+0x5c>
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	2b03      	cmp	r3, #3
 80106ce:	d1e7      	bne.n	80106a0 <RTC_EnterInitMode+0x2c>
 80106d0:	7bfb      	ldrb	r3, [r7, #15]
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
	...

080106dc <RTC_ExitInitMode>:
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	2300      	movs	r3, #0
 80106e6:	73fb      	strb	r3, [r7, #15]
 80106e8:	4b1a      	ldr	r3, [pc, #104]	@ (8010754 <RTC_ExitInitMode+0x78>)
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	4a19      	ldr	r2, [pc, #100]	@ (8010754 <RTC_ExitInitMode+0x78>)
 80106ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106f2:	60d3      	str	r3, [r2, #12]
 80106f4:	4b17      	ldr	r3, [pc, #92]	@ (8010754 <RTC_ExitInitMode+0x78>)
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	f003 0320 	and.w	r3, r3, #32
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10c      	bne.n	801071a <RTC_ExitInitMode+0x3e>
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff ff93 	bl	801062c <HAL_RTC_WaitForSynchro>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d01e      	beq.n	801074a <RTC_ExitInitMode+0x6e>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2203      	movs	r2, #3
 8010710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8010714:	2303      	movs	r3, #3
 8010716:	73fb      	strb	r3, [r7, #15]
 8010718:	e017      	b.n	801074a <RTC_ExitInitMode+0x6e>
 801071a:	4b0e      	ldr	r3, [pc, #56]	@ (8010754 <RTC_ExitInitMode+0x78>)
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	4a0d      	ldr	r2, [pc, #52]	@ (8010754 <RTC_ExitInitMode+0x78>)
 8010720:	f023 0320 	bic.w	r3, r3, #32
 8010724:	6093      	str	r3, [r2, #8]
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f7ff ff80 	bl	801062c <HAL_RTC_WaitForSynchro>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d005      	beq.n	801073e <RTC_ExitInitMode+0x62>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2203      	movs	r2, #3
 8010736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 801073a:	2303      	movs	r3, #3
 801073c:	73fb      	strb	r3, [r7, #15]
 801073e:	4b05      	ldr	r3, [pc, #20]	@ (8010754 <RTC_ExitInitMode+0x78>)
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	4a04      	ldr	r2, [pc, #16]	@ (8010754 <RTC_ExitInitMode+0x78>)
 8010744:	f043 0320 	orr.w	r3, r3, #32
 8010748:	6093      	str	r3, [r2, #8]
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	58004000 	.word	0x58004000

08010758 <RTC_ByteToBcd2>:
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
 8010762:	2300      	movs	r3, #0
 8010764:	60fb      	str	r3, [r7, #12]
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	72fb      	strb	r3, [r7, #11]
 801076a:	e005      	b.n	8010778 <RTC_ByteToBcd2+0x20>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	3301      	adds	r3, #1
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	7afb      	ldrb	r3, [r7, #11]
 8010774:	3b0a      	subs	r3, #10
 8010776:	72fb      	strb	r3, [r7, #11]
 8010778:	7afb      	ldrb	r3, [r7, #11]
 801077a:	2b09      	cmp	r3, #9
 801077c:	d8f6      	bhi.n	801076c <RTC_ByteToBcd2+0x14>
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	b2db      	uxtb	r3, r3
 8010782:	011b      	lsls	r3, r3, #4
 8010784:	b2da      	uxtb	r2, r3
 8010786:	7afb      	ldrb	r3, [r7, #11]
 8010788:	4313      	orrs	r3, r2
 801078a:	b2db      	uxtb	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <RTC_Bcd2ToByte>:
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
 80107a2:	79fb      	ldrb	r3, [r7, #7]
 80107a4:	091b      	lsrs	r3, r3, #4
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	461a      	mov	r2, r3
 80107aa:	0092      	lsls	r2, r2, #2
 80107ac:	4413      	add	r3, r2
 80107ae:	005b      	lsls	r3, r3, #1
 80107b0:	73fb      	strb	r3, [r7, #15]
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	f003 030f 	and.w	r3, r3, #15
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	4413      	add	r3, r2
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <HAL_SD_Init>:
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b08a      	sub	sp, #40	@ 0x28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <HAL_SD_Init+0x12>
 80107da:	2301      	movs	r3, #1
 80107dc:	e09f      	b.n	801091e <HAL_SD_Init+0x152>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d12f      	bne.n	801084a <HAL_SD_Init+0x7e>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	761a      	strb	r2, [r3, #24]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a4d      	ldr	r2, [pc, #308]	@ (8010928 <HAL_SD_Init+0x15c>)
 80107f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a4c      	ldr	r2, [pc, #304]	@ (801092c <HAL_SD_Init+0x160>)
 80107fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4a4b      	ldr	r2, [pc, #300]	@ (8010930 <HAL_SD_Init+0x164>)
 8010802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4a4a      	ldr	r2, [pc, #296]	@ (8010934 <HAL_SD_Init+0x168>)
 801080a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4a49      	ldr	r2, [pc, #292]	@ (8010938 <HAL_SD_Init+0x16c>)
 8010812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4a48      	ldr	r2, [pc, #288]	@ (801093c <HAL_SD_Init+0x170>)
 801081a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4a47      	ldr	r2, [pc, #284]	@ (8010940 <HAL_SD_Init+0x174>)
 8010822:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4a46      	ldr	r2, [pc, #280]	@ (8010944 <HAL_SD_Init+0x178>)
 801082a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <HAL_SD_Init+0x74>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a43      	ldr	r2, [pc, #268]	@ (8010948 <HAL_SD_Init+0x17c>)
 801083c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	4798      	blx	r3
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2204      	movs	r2, #4
 801084e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f87a 	bl	801094c <HAL_SD_InitCard>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <HAL_SD_Init+0x96>
 801085e:	2301      	movs	r3, #1
 8010860:	e05d      	b.n	801091e <HAL_SD_Init+0x152>
 8010862:	f107 0308 	add.w	r3, r7, #8
 8010866:	4619      	mov	r1, r3
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 fdd7 	bl	801141c <HAL_SD_GetCardStatus>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d001      	beq.n	8010878 <HAL_SD_Init+0xac>
 8010874:	2301      	movs	r3, #1
 8010876:	e052      	b.n	801091e <HAL_SD_Init+0x152>
 8010878:	7e3b      	ldrb	r3, [r7, #24]
 801087a:	b2db      	uxtb	r3, r3
 801087c:	627b      	str	r3, [r7, #36]	@ 0x24
 801087e:	7e7b      	ldrb	r3, [r7, #25]
 8010880:	b2db      	uxtb	r3, r3
 8010882:	623b      	str	r3, [r7, #32]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010888:	2b01      	cmp	r3, #1
 801088a:	d10a      	bne.n	80108a2 <HAL_SD_Init+0xd6>
 801088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801088e:	2b00      	cmp	r3, #0
 8010890:	d102      	bne.n	8010898 <HAL_SD_Init+0xcc>
 8010892:	6a3b      	ldr	r3, [r7, #32]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <HAL_SD_Init+0xd6>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801089e:	659a      	str	r2, [r3, #88]	@ 0x58
 80108a0:	e00b      	b.n	80108ba <HAL_SD_Init+0xee>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d104      	bne.n	80108b4 <HAL_SD_Init+0xe8>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80108b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80108b2:	e002      	b.n	80108ba <HAL_SD_Init+0xee>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fe95 	bl	80115f0 <HAL_SD_ConfigWideBusOperation>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <HAL_SD_Init+0x104>
 80108cc:	2301      	movs	r3, #1
 80108ce:	e026      	b.n	801091e <HAL_SD_Init+0x152>
 80108d0:	f7f4 faa2 	bl	8004e18 <HAL_GetTick>
 80108d4:	61f8      	str	r0, [r7, #28]
 80108d6:	e011      	b.n	80108fc <HAL_SD_Init+0x130>
 80108d8:	f7f4 fa9e 	bl	8004e18 <HAL_GetTick>
 80108dc:	4602      	mov	r2, r0
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e6:	d109      	bne.n	80108fc <HAL_SD_Init+0x130>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80108ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2201      	movs	r2, #1
 80108f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80108f8:	2303      	movs	r3, #3
 80108fa:	e010      	b.n	801091e <HAL_SD_Init+0x152>
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 ff89 	bl	8011814 <HAL_SD_GetCardState>
 8010902:	4603      	mov	r3, r0
 8010904:	2b04      	cmp	r3, #4
 8010906:	d1e7      	bne.n	80108d8 <HAL_SD_Init+0x10c>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	635a      	str	r2, [r3, #52]	@ 0x34
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2200      	movs	r2, #0
 8010912:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2201      	movs	r2, #1
 8010918:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801091c:	2300      	movs	r3, #0
 801091e:	4618      	mov	r0, r3
 8010920:	3728      	adds	r7, #40	@ 0x28
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	08014e91 	.word	0x08014e91
 801092c:	08014ea5 	.word	0x08014ea5
 8010930:	080110c1 	.word	0x080110c1
 8010934:	08014e7d 	.word	0x08014e7d
 8010938:	080120e9 	.word	0x080120e9
 801093c:	080120fd 	.word	0x080120fd
 8010940:	08012111 	.word	0x08012111
 8010944:	08012125 	.word	0x08012125
 8010948:	08003609 	.word	0x08003609

0801094c <HAL_SD_InitCard>:
 801094c:	b590      	push	{r4, r7, lr}
 801094e:	b08d      	sub	sp, #52	@ 0x34
 8010950:	af02      	add	r7, sp, #8
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	2300      	movs	r3, #0
 8010956:	60fb      	str	r3, [r7, #12]
 8010958:	2300      	movs	r3, #0
 801095a:	613b      	str	r3, [r7, #16]
 801095c:	2300      	movs	r3, #0
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	2300      	movs	r3, #0
 8010962:	61bb      	str	r3, [r7, #24]
 8010964:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8010968:	f04f 0100 	mov.w	r1, #0
 801096c:	f7fe f918 	bl	800eba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8010970:	6278      	str	r0, [r7, #36]	@ 0x24
 8010972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010974:	2b00      	cmp	r3, #0
 8010976:	d109      	bne.n	801098c <HAL_SD_InitCard+0x40>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8010986:	635a      	str	r2, [r3, #52]	@ 0x34
 8010988:	2301      	movs	r3, #1
 801098a:	e070      	b.n	8010a6e <HAL_SD_InitCard+0x122>
 801098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098e:	0a1b      	lsrs	r3, r3, #8
 8010990:	4a39      	ldr	r2, [pc, #228]	@ (8010a78 <HAL_SD_InitCard+0x12c>)
 8010992:	fba2 2303 	umull	r2, r3, r2, r3
 8010996:	091b      	lsrs	r3, r3, #4
 8010998:	61fb      	str	r3, [r7, #28]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681c      	ldr	r4, [r3, #0]
 801099e:	466a      	mov	r2, sp
 80109a0:	f107 0318 	add.w	r3, r7, #24
 80109a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80109ac:	f107 030c 	add.w	r3, r7, #12
 80109b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109b2:	4620      	mov	r0, r4
 80109b4:	f003 fc06 	bl	80141c4 <SDMMC_Init>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4618      	mov	r0, r3
 80109be:	f003 fc49 	bl	8014254 <SDMMC_PowerState_ON>
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d005      	beq.n	80109d4 <HAL_SD_InitCard+0x88>
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80109d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d007      	beq.n	80109ea <HAL_SD_InitCard+0x9e>
 80109da:	4a28      	ldr	r2, [pc, #160]	@ (8010a7c <HAL_SD_InitCard+0x130>)
 80109dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109de:	fbb2 f3f3 	udiv	r3, r2, r3
 80109e2:	3301      	adds	r3, #1
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f4 fa23 	bl	8004e30 <HAL_Delay>
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f001 f800 	bl	80119f0 <SD_PowerON>
 80109f0:	6238      	str	r0, [r7, #32]
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00b      	beq.n	8010a10 <HAL_SD_InitCard+0xc4>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2201      	movs	r2, #1
 80109fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	431a      	orrs	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e02e      	b.n	8010a6e <HAL_SD_InitCard+0x122>
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 ff1f 	bl	8011854 <SD_InitCard>
 8010a16:	6238      	str	r0, [r7, #32]
 8010a18:	6a3b      	ldr	r3, [r7, #32]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00b      	beq.n	8010a36 <HAL_SD_InitCard+0xea>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a2a:	6a3b      	ldr	r3, [r7, #32]
 8010a2c:	431a      	orrs	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a32:	2301      	movs	r3, #1
 8010a34:	e01b      	b.n	8010a6e <HAL_SD_InitCard+0x122>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f003 fc9e 	bl	8014380 <SDMMC_CmdBlockLength>
 8010a44:	6238      	str	r0, [r7, #32]
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00f      	beq.n	8010a6c <HAL_SD_InitCard+0x120>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a0b      	ldr	r2, [pc, #44]	@ (8010a80 <HAL_SD_InitCard+0x134>)
 8010a52:	639a      	str	r2, [r3, #56]	@ 0x38
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e000      	b.n	8010a6e <HAL_SD_InitCard+0x122>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	4618      	mov	r0, r3
 8010a70:	372c      	adds	r7, #44	@ 0x2c
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd90      	pop	{r4, r7, pc}
 8010a76:	bf00      	nop
 8010a78:	014f8b59 	.word	0x014f8b59
 8010a7c:	00012110 	.word	0x00012110
 8010a80:	1fe00fff 	.word	0x1fe00fff

08010a84 <HAL_SD_ReadBlocks_DMA>:
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b08c      	sub	sp, #48	@ 0x30
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d107      	bne.n	8010aac <HAL_SD_ReadBlocks_DMA+0x28>
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010aa0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e08d      	b.n	8010bc8 <HAL_SD_ReadBlocks_DMA+0x144>
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	f040 8086 	bne.w	8010bc6 <HAL_SD_ReadBlocks_DMA+0x142>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	635a      	str	r2, [r3, #52]	@ 0x34
 8010ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	441a      	add	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d907      	bls.n	8010ade <HAL_SD_ReadBlocks_DMA+0x5a>
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ad2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8010ada:	2301      	movs	r3, #1
 8010adc:	e074      	b.n	8010bc8 <HAL_SD_ReadBlocks_DMA+0x144>
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2203      	movs	r2, #3
 8010ae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2200      	movs	r2, #0
 8010aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	625a      	str	r2, [r3, #36]	@ 0x24
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	025a      	lsls	r2, r3, #9
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d002      	beq.n	8010b0a <HAL_SD_ReadBlocks_DMA+0x86>
 8010b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b06:	025b      	lsls	r3, r3, #9
 8010b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0e:	613b      	str	r3, [r7, #16]
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	025b      	lsls	r3, r3, #9
 8010b14:	617b      	str	r3, [r7, #20]
 8010b16:	2390      	movs	r3, #144	@ 0x90
 8010b18:	61bb      	str	r3, [r7, #24]
 8010b1a:	2302      	movs	r3, #2
 8010b1c:	61fb      	str	r3, [r7, #28]
 8010b1e:	2300      	movs	r3, #0
 8010b20:	623b      	str	r3, [r7, #32]
 8010b22:	2300      	movs	r3, #0
 8010b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f107 0210 	add.w	r2, r7, #16
 8010b2e:	4611      	mov	r1, r2
 8010b30:	4618      	mov	r0, r3
 8010b32:	f003 fbf9 	bl	8014328 <SDMMC_ConfigData>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	68da      	ldr	r2, [r3, #12]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010b44:	60da      	str	r2, [r3, #12]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2201      	movs	r2, #1
 8010b54:	651a      	str	r2, [r3, #80]	@ 0x50
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d90a      	bls.n	8010b72 <HAL_SD_ReadBlocks_DMA+0xee>
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2282      	movs	r2, #130	@ 0x82
 8010b60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f003 fc4f 	bl	801440c <SDMMC_CmdReadMultiBlock>
 8010b6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010b70:	e009      	b.n	8010b86 <HAL_SD_ReadBlocks_DMA+0x102>
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2281      	movs	r2, #129	@ 0x81
 8010b76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f003 fc21 	bl	80143c6 <SDMMC_CmdReadSingleBlock>
 8010b84:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d012      	beq.n	8010bb2 <HAL_SD_ReadBlocks_DMA+0x12e>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a0f      	ldr	r2, [pc, #60]	@ (8010bd0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8010b92:	639a      	str	r2, [r3, #56]	@ 0x38
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9a:	431a      	orrs	r2, r3
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2200      	movs	r2, #0
 8010bac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e00a      	b.n	8010bc8 <HAL_SD_ReadBlocks_DMA+0x144>
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8010bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e000      	b.n	8010bc8 <HAL_SD_ReadBlocks_DMA+0x144>
 8010bc6:	2302      	movs	r3, #2
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3730      	adds	r7, #48	@ 0x30
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	1fe00fff 	.word	0x1fe00fff

08010bd4 <HAL_SD_WriteBlocks_DMA>:
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08c      	sub	sp, #48	@ 0x30
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d107      	bne.n	8010bfc <HAL_SD_WriteBlocks_DMA+0x28>
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	635a      	str	r2, [r3, #52]	@ 0x34
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e08d      	b.n	8010d18 <HAL_SD_WriteBlocks_DMA+0x144>
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	f040 8086 	bne.w	8010d16 <HAL_SD_WriteBlocks_DMA+0x142>
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	441a      	add	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d907      	bls.n	8010c2e <HAL_SD_WriteBlocks_DMA+0x5a>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c22:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e074      	b.n	8010d18 <HAL_SD_WriteBlocks_DMA+0x144>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2203      	movs	r2, #3
 8010c32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	61da      	str	r2, [r3, #28]
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	025a      	lsls	r2, r3, #9
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	621a      	str	r2, [r3, #32]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d002      	beq.n	8010c5a <HAL_SD_WriteBlocks_DMA+0x86>
 8010c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c56:	025b      	lsls	r3, r3, #9
 8010c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010c5e:	613b      	str	r3, [r7, #16]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	025b      	lsls	r3, r3, #9
 8010c64:	617b      	str	r3, [r7, #20]
 8010c66:	2390      	movs	r3, #144	@ 0x90
 8010c68:	61bb      	str	r3, [r7, #24]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	61fb      	str	r3, [r7, #28]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	623b      	str	r3, [r7, #32]
 8010c72:	2300      	movs	r3, #0
 8010c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f107 0210 	add.w	r2, r7, #16
 8010c7e:	4611      	mov	r1, r2
 8010c80:	4618      	mov	r0, r3
 8010c82:	f003 fb51 	bl	8014328 <SDMMC_ConfigData>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68da      	ldr	r2, [r3, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c94:	60da      	str	r2, [r3, #12]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	651a      	str	r2, [r3, #80]	@ 0x50
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d90a      	bls.n	8010cc2 <HAL_SD_WriteBlocks_DMA+0xee>
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	22a0      	movs	r2, #160	@ 0xa0
 8010cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f003 fbed 	bl	8014498 <SDMMC_CmdWriteMultiBlock>
 8010cbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010cc0:	e009      	b.n	8010cd6 <HAL_SD_WriteBlocks_DMA+0x102>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2290      	movs	r2, #144	@ 0x90
 8010cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f003 fbbf 	bl	8014452 <SDMMC_CmdWriteSingleBlock>
 8010cd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d012      	beq.n	8010d02 <HAL_SD_WriteBlocks_DMA+0x12e>
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8010d20 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8010ce2:	639a      	str	r2, [r3, #56]	@ 0x38
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cea:	431a      	orrs	r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	635a      	str	r2, [r3, #52]	@ 0x34
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e00a      	b.n	8010d18 <HAL_SD_WriteBlocks_DMA+0x144>
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8010d10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010d12:	2300      	movs	r3, #0
 8010d14:	e000      	b.n	8010d18 <HAL_SD_WriteBlocks_DMA+0x144>
 8010d16:	2302      	movs	r3, #2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3730      	adds	r7, #48	@ 0x30
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	1fe00fff 	.word	0x1fe00fff

08010d24 <HAL_SD_IRQHandler>:
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d30:	60fb      	str	r3, [r7, #12]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d008      	beq.n	8010d52 <HAL_SD_IRQHandler+0x2e>
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f003 0308 	and.w	r3, r3, #8
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d003      	beq.n	8010d52 <HAL_SD_IRQHandler+0x2e>
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f001 f93c 	bl	8011fc8 <SD_Read_IT>
 8010d50:	e1b0      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 80b6 	beq.w	8010ece <HAL_SD_IRQHandler+0x1aa>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	4b5e      	ldr	r3, [pc, #376]	@ (8010ef0 <HAL_SD_IRQHandler+0x1cc>)
 8010d78:	400b      	ands	r3, r1
 8010d7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8010d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68da      	ldr	r2, [r3, #12]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010d9a:	60da      	str	r2, [r3, #12]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f003 0308 	and.w	r3, r3, #8
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d03d      	beq.n	8010e22 <HAL_SD_IRQHandler+0xfe>
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f003 0302 	and.w	r3, r3, #2
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d104      	bne.n	8010dba <HAL_SD_IRQHandler+0x96>
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f003 0320 	and.w	r3, r3, #32
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d013      	beq.n	8010de2 <HAL_SD_IRQHandler+0xbe>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f003 fb8e 	bl	80144e0 <SDMMC_CmdStopTransfer>
 8010dc4:	60b8      	str	r0, [r7, #8]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00a      	beq.n	8010de2 <HAL_SD_IRQHandler+0xbe>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	431a      	orrs	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	4798      	blx	r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a43      	ldr	r2, [pc, #268]	@ (8010ef4 <HAL_SD_IRQHandler+0x1d0>)
 8010de8:	639a      	str	r2, [r3, #56]	@ 0x38
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2200      	movs	r2, #0
 8010df6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d104      	bne.n	8010e0c <HAL_SD_IRQHandler+0xe8>
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f003 0302 	and.w	r3, r3, #2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d005      	beq.n	8010e18 <HAL_SD_IRQHandler+0xf4>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	4798      	blx	r3
 8010e16:	e14d      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	4798      	blx	r3
 8010e20:	e148      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 8143 	beq.w	80110b4 <HAL_SD_IRQHandler+0x390>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2200      	movs	r2, #0
 8010e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2200      	movs	r2, #0
 8010e44:	651a      	str	r2, [r3, #80]	@ 0x50
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f003 0302 	and.w	r3, r3, #2
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d104      	bne.n	8010e5a <HAL_SD_IRQHandler+0x136>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f003 0320 	and.w	r3, r3, #32
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d013      	beq.n	8010e82 <HAL_SD_IRQHandler+0x15e>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f003 fb3e 	bl	80144e0 <SDMMC_CmdStopTransfer>
 8010e64:	60b8      	str	r0, [r7, #8]
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00a      	beq.n	8010e82 <HAL_SD_IRQHandler+0x15e>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	431a      	orrs	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	635a      	str	r2, [r3, #52]	@ 0x34
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	4798      	blx	r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2201      	movs	r2, #1
 8010e86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f003 0310 	and.w	r3, r3, #16
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d104      	bne.n	8010ea4 <HAL_SD_IRQHandler+0x180>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f003 0320 	and.w	r3, r3, #32
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <HAL_SD_IRQHandler+0x188>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	4798      	blx	r3
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d105      	bne.n	8010ec2 <HAL_SD_IRQHandler+0x19e>
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f003 0302 	and.w	r3, r3, #2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 80f9 	beq.w	80110b4 <HAL_SD_IRQHandler+0x390>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	4798      	blx	r3
 8010ecc:	e0f2      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00d      	beq.n	8010ef8 <HAL_SD_IRQHandler+0x1d4>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f003 0308 	and.w	r3, r3, #8
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d008      	beq.n	8010ef8 <HAL_SD_IRQHandler+0x1d4>
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f001 f8b4 	bl	8012054 <SD_Write_IT>
 8010eec:	e0e2      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8010eee:	bf00      	nop
 8010ef0:	ffff3ec5 	.word	0xffff3ec5
 8010ef4:	18000f3a 	.word	0x18000f3a
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010efe:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 80a1 	beq.w	801104a <HAL_SD_IRQHandler+0x326>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f0e:	f003 0302 	and.w	r3, r3, #2
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d005      	beq.n	8010f22 <HAL_SD_IRQHandler+0x1fe>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f1a:	f043 0202 	orr.w	r2, r3, #2
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f28:	f003 0308 	and.w	r3, r3, #8
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d005      	beq.n	8010f3c <HAL_SD_IRQHandler+0x218>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f34:	f043 0208 	orr.w	r2, r3, #8
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f42:	f003 0320 	and.w	r3, r3, #32
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d005      	beq.n	8010f56 <HAL_SD_IRQHandler+0x232>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f4e:	f043 0220 	orr.w	r2, r3, #32
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	635a      	str	r2, [r3, #52]	@ 0x34
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f5c:	f003 0310 	and.w	r3, r3, #16
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d005      	beq.n	8010f70 <HAL_SD_IRQHandler+0x24c>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f68:	f043 0210 	orr.w	r2, r3, #16
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a51      	ldr	r2, [pc, #324]	@ (80110bc <HAL_SD_IRQHandler+0x398>)
 8010f76:	639a      	str	r2, [r3, #56]	@ 0x38
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	68da      	ldr	r2, [r3, #12]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010f96:	60da      	str	r2, [r3, #12]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	68da      	ldr	r2, [r3, #12]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010fb6:	60da      	str	r2, [r3, #12]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f003 fa8f 	bl	80144e0 <SDMMC_CmdStopTransfer>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fc8:	431a      	orrs	r2, r3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68da      	ldr	r2, [r3, #12]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010fdc:	60da      	str	r2, [r3, #12]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f003 0308 	and.w	r3, r3, #8
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00c      	beq.n	801100c <HAL_SD_IRQHandler+0x2e8>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	4798      	blx	r3
 801100a:	e053      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011012:	2b00      	cmp	r3, #0
 8011014:	d04e      	beq.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801101a:	2b00      	cmp	r3, #0
 801101c:	d04a      	beq.n	80110b4 <HAL_SD_IRQHandler+0x390>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801102c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2200      	movs	r2, #0
 8011034:	651a      	str	r2, [r3, #80]	@ 0x50
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2201      	movs	r2, #1
 801103a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	4798      	blx	r3
 8011048:	e034      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d02d      	beq.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011060:	639a      	str	r2, [r3, #56]	@ 0x38
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011068:	f003 0304 	and.w	r3, r3, #4
 801106c:	2b00      	cmp	r3, #0
 801106e:	d110      	bne.n	8011092 <HAL_SD_IRQHandler+0x36e>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f003 0320 	and.w	r3, r3, #32
 8011076:	2b00      	cmp	r3, #0
 8011078:	d005      	beq.n	8011086 <HAL_SD_IRQHandler+0x362>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	4798      	blx	r3
 8011084:	e016      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	4798      	blx	r3
 8011090:	e010      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f003 0320 	and.w	r3, r3, #32
 8011098:	2b00      	cmp	r3, #0
 801109a:	d005      	beq.n	80110a8 <HAL_SD_IRQHandler+0x384>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	4798      	blx	r3
 80110a6:	e005      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	4798      	blx	r3
 80110b2:	e7ff      	b.n	80110b4 <HAL_SD_IRQHandler+0x390>
 80110b4:	bf00      	nop
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	18000f3a 	.word	0x18000f3a

080110c0 <HAL_SD_ErrorCallback>:
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <HAL_SD_GetCardCSD>:
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110e2:	0f9b      	lsrs	r3, r3, #30
 80110e4:	b2da      	uxtb	r2, r3
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	701a      	strb	r2, [r3, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110ee:	0e9b      	lsrs	r3, r3, #26
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	f003 030f 	and.w	r3, r3, #15
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	705a      	strb	r2, [r3, #1]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011100:	0e1b      	lsrs	r3, r3, #24
 8011102:	b2db      	uxtb	r3, r3
 8011104:	f003 0303 	and.w	r3, r3, #3
 8011108:	b2da      	uxtb	r2, r3
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	709a      	strb	r2, [r3, #2]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011112:	0c1b      	lsrs	r3, r3, #16
 8011114:	b2da      	uxtb	r2, r3
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	70da      	strb	r2, [r3, #3]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801111e:	0a1b      	lsrs	r3, r3, #8
 8011120:	b2da      	uxtb	r2, r3
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	711a      	strb	r2, [r3, #4]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801112a:	b2da      	uxtb	r2, r3
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	715a      	strb	r2, [r3, #5]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011134:	0d1b      	lsrs	r3, r3, #20
 8011136:	b29a      	uxth	r2, r3
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	80da      	strh	r2, [r3, #6]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011140:	0c1b      	lsrs	r3, r3, #16
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 030f 	and.w	r3, r3, #15
 8011148:	b2da      	uxtb	r2, r3
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	721a      	strb	r2, [r3, #8]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011152:	0bdb      	lsrs	r3, r3, #15
 8011154:	b2db      	uxtb	r3, r3
 8011156:	f003 0301 	and.w	r3, r3, #1
 801115a:	b2da      	uxtb	r2, r3
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	725a      	strb	r2, [r3, #9]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011164:	0b9b      	lsrs	r3, r3, #14
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0301 	and.w	r3, r3, #1
 801116c:	b2da      	uxtb	r2, r3
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	729a      	strb	r2, [r3, #10]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011176:	0b5b      	lsrs	r3, r3, #13
 8011178:	b2db      	uxtb	r3, r3
 801117a:	f003 0301 	and.w	r3, r3, #1
 801117e:	b2da      	uxtb	r2, r3
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	72da      	strb	r2, [r3, #11]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011188:	0b1b      	lsrs	r3, r3, #12
 801118a:	b2db      	uxtb	r3, r3
 801118c:	f003 0301 	and.w	r3, r3, #1
 8011190:	b2da      	uxtb	r2, r3
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	731a      	strb	r2, [r3, #12]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	2200      	movs	r2, #0
 801119a:	735a      	strb	r2, [r3, #13]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d163      	bne.n	801126c <HAL_SD_GetCardCSD+0x198>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80111a8:	009a      	lsls	r2, r3, #2
 80111aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80111ae:	4013      	ands	r3, r2
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80111b4:	0f92      	lsrs	r2, r2, #30
 80111b6:	431a      	orrs	r2, r3
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	611a      	str	r2, [r3, #16]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111c0:	0edb      	lsrs	r3, r3, #27
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	f003 0307 	and.w	r3, r3, #7
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	751a      	strb	r2, [r3, #20]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111d2:	0e1b      	lsrs	r3, r3, #24
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f003 0307 	and.w	r3, r3, #7
 80111da:	b2da      	uxtb	r2, r3
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	755a      	strb	r2, [r3, #21]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111e4:	0d5b      	lsrs	r3, r3, #21
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	f003 0307 	and.w	r3, r3, #7
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	759a      	strb	r2, [r3, #22]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111f6:	0c9b      	lsrs	r3, r3, #18
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	f003 0307 	and.w	r3, r3, #7
 80111fe:	b2da      	uxtb	r2, r3
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	75da      	strb	r2, [r3, #23]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011208:	0bdb      	lsrs	r3, r3, #15
 801120a:	b2db      	uxtb	r3, r3
 801120c:	f003 0307 	and.w	r3, r3, #7
 8011210:	b2da      	uxtb	r2, r3
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	761a      	strb	r2, [r3, #24]
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	691b      	ldr	r3, [r3, #16]
 801121a:	1c5a      	adds	r2, r3, #1
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	649a      	str	r2, [r3, #72]	@ 0x48
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	7e1b      	ldrb	r3, [r3, #24]
 8011224:	b2db      	uxtb	r3, r3
 8011226:	f003 0307 	and.w	r3, r3, #7
 801122a:	3302      	adds	r3, #2
 801122c:	2201      	movs	r2, #1
 801122e:	fa02 f303 	lsl.w	r3, r2, r3
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011236:	fb03 f202 	mul.w	r2, r3, r2
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	649a      	str	r2, [r3, #72]	@ 0x48
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	7a1b      	ldrb	r3, [r3, #8]
 8011242:	b2db      	uxtb	r3, r3
 8011244:	f003 030f 	and.w	r3, r3, #15
 8011248:	2201      	movs	r2, #1
 801124a:	409a      	lsls	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8011258:	0a52      	lsrs	r2, r2, #9
 801125a:	fb03 f202 	mul.w	r2, r3, r2
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	651a      	str	r2, [r3, #80]	@ 0x50
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011268:	655a      	str	r2, [r3, #84]	@ 0x54
 801126a:	e031      	b.n	80112d0 <HAL_SD_GetCardCSD+0x1fc>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011270:	2b01      	cmp	r3, #1
 8011272:	d11d      	bne.n	80112b0 <HAL_SD_GetCardCSD+0x1dc>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011278:	041b      	lsls	r3, r3, #16
 801127a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011282:	0c1b      	lsrs	r3, r3, #16
 8011284:	431a      	orrs	r2, r3
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	611a      	str	r2, [r3, #16]
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	3301      	adds	r3, #1
 8011290:	029a      	lsls	r2, r3, #10
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	649a      	str	r2, [r3, #72]	@ 0x48
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	651a      	str	r2, [r3, #80]	@ 0x50
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80112ae:	e00f      	b.n	80112d0 <HAL_SD_GetCardCSD+0x1fc>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4a58      	ldr	r2, [pc, #352]	@ (8011418 <HAL_SD_GetCardCSD+0x344>)
 80112b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80112cc:	2301      	movs	r3, #1
 80112ce:	e09d      	b.n	801140c <HAL_SD_GetCardCSD+0x338>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112d4:	0b9b      	lsrs	r3, r3, #14
 80112d6:	b2db      	uxtb	r3, r3
 80112d8:	f003 0301 	and.w	r3, r3, #1
 80112dc:	b2da      	uxtb	r2, r3
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	765a      	strb	r2, [r3, #25]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112e6:	09db      	lsrs	r3, r3, #7
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112ee:	b2da      	uxtb	r2, r3
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	769a      	strb	r2, [r3, #26]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	76da      	strb	r2, [r3, #27]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011308:	0fdb      	lsrs	r3, r3, #31
 801130a:	b2da      	uxtb	r2, r3
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	771a      	strb	r2, [r3, #28]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011314:	0f5b      	lsrs	r3, r3, #29
 8011316:	b2db      	uxtb	r3, r3
 8011318:	f003 0303 	and.w	r3, r3, #3
 801131c:	b2da      	uxtb	r2, r3
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	775a      	strb	r2, [r3, #29]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011326:	0e9b      	lsrs	r3, r3, #26
 8011328:	b2db      	uxtb	r3, r3
 801132a:	f003 0307 	and.w	r3, r3, #7
 801132e:	b2da      	uxtb	r2, r3
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	779a      	strb	r2, [r3, #30]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011338:	0d9b      	lsrs	r3, r3, #22
 801133a:	b2db      	uxtb	r3, r3
 801133c:	f003 030f 	and.w	r3, r3, #15
 8011340:	b2da      	uxtb	r2, r3
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	77da      	strb	r2, [r3, #31]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801134a:	0d5b      	lsrs	r3, r3, #21
 801134c:	b2db      	uxtb	r3, r3
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	b2da      	uxtb	r2, r3
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	f883 2020 	strb.w	r2, [r3, #32]
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2200      	movs	r2, #0
 801135e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011366:	0c1b      	lsrs	r3, r3, #16
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0301 	and.w	r3, r3, #1
 801136e:	b2da      	uxtb	r2, r3
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801137a:	0bdb      	lsrs	r3, r3, #15
 801137c:	b2db      	uxtb	r3, r3
 801137e:	f003 0301 	and.w	r3, r3, #1
 8011382:	b2da      	uxtb	r2, r3
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801138e:	0b9b      	lsrs	r3, r3, #14
 8011390:	b2db      	uxtb	r3, r3
 8011392:	f003 0301 	and.w	r3, r3, #1
 8011396:	b2da      	uxtb	r2, r3
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113a2:	0b5b      	lsrs	r3, r3, #13
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113b6:	0b1b      	lsrs	r3, r3, #12
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0301 	and.w	r3, r3, #1
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113ca:	0a9b      	lsrs	r3, r3, #10
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	f003 0303 	and.w	r3, r3, #3
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113de:	0a1b      	lsrs	r3, r3, #8
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	f003 0303 	and.w	r3, r3, #3
 80113e6:	b2da      	uxtb	r2, r3
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80113f2:	085b      	lsrs	r3, r3, #1
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2201      	movs	r2, #1
 8011406:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 801140a:	2300      	movs	r3, #0
 801140c:	4618      	mov	r0, r3
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	1fe00fff 	.word	0x1fe00fff

0801141c <HAL_SD_GetCardStatus>:
 801141c:	b580      	push	{r7, lr}
 801141e:	b094      	sub	sp, #80	@ 0x50
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
 8011426:	2300      	movs	r3, #0
 8011428:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011432:	b2db      	uxtb	r3, r3
 8011434:	2b03      	cmp	r3, #3
 8011436:	d101      	bne.n	801143c <HAL_SD_GetCardStatus+0x20>
 8011438:	2301      	movs	r3, #1
 801143a:	e0a7      	b.n	801158c <HAL_SD_GetCardStatus+0x170>
 801143c:	f107 0308 	add.w	r3, r7, #8
 8011440:	4619      	mov	r1, r3
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fb62 	bl	8011b0c <SD_SendSDStatus>
 8011448:	64b8      	str	r0, [r7, #72]	@ 0x48
 801144a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801144c:	2b00      	cmp	r3, #0
 801144e:	d011      	beq.n	8011474 <HAL_SD_GetCardStatus+0x58>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a4f      	ldr	r2, [pc, #316]	@ (8011594 <HAL_SD_GetCardStatus+0x178>)
 8011456:	639a      	str	r2, [r3, #56]	@ 0x38
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801145c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801145e:	431a      	orrs	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	635a      	str	r2, [r3, #52]	@ 0x34
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2201      	movs	r2, #1
 8011468:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801146c:	2301      	movs	r3, #1
 801146e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011472:	e070      	b.n	8011556 <HAL_SD_GetCardStatus+0x13a>
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	099b      	lsrs	r3, r3, #6
 8011478:	b2db      	uxtb	r3, r3
 801147a:	f003 0303 	and.w	r3, r3, #3
 801147e:	b2da      	uxtb	r2, r3
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	701a      	strb	r2, [r3, #0]
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	095b      	lsrs	r3, r3, #5
 8011488:	b2db      	uxtb	r3, r3
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	b2da      	uxtb	r2, r3
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	705a      	strb	r2, [r3, #1]
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	0a1b      	lsrs	r3, r3, #8
 8011498:	b29b      	uxth	r3, r3
 801149a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801149e:	b29a      	uxth	r2, r3
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	0e1b      	lsrs	r3, r3, #24
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	4313      	orrs	r3, r2
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	805a      	strh	r2, [r3, #2]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	061a      	lsls	r2, r3, #24
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	021b      	lsls	r3, r3, #8
 80114b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80114ba:	431a      	orrs	r2, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	0a1b      	lsrs	r3, r3, #8
 80114c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80114c4:	431a      	orrs	r2, r3
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	0e1b      	lsrs	r3, r3, #24
 80114ca:	431a      	orrs	r2, r3
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	605a      	str	r2, [r3, #4]
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	721a      	strb	r2, [r3, #8]
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	0a1b      	lsrs	r3, r3, #8
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	725a      	strb	r2, [r3, #9]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	0d1b      	lsrs	r3, r3, #20
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	f003 030f 	and.w	r3, r3, #15
 80114ec:	b2da      	uxtb	r2, r3
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	729a      	strb	r2, [r3, #10]
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	0c1b      	lsrs	r3, r3, #16
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	b29b      	uxth	r3, r3
 8011502:	b2db      	uxtb	r3, r3
 8011504:	b29b      	uxth	r3, r3
 8011506:	4313      	orrs	r3, r2
 8011508:	b29a      	uxth	r2, r3
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	819a      	strh	r2, [r3, #12]
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	0a9b      	lsrs	r3, r3, #10
 8011512:	b2db      	uxtb	r3, r3
 8011514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011518:	b2da      	uxtb	r2, r3
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	739a      	strb	r2, [r3, #14]
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	0a1b      	lsrs	r3, r3, #8
 8011522:	b2db      	uxtb	r3, r3
 8011524:	f003 0303 	and.w	r3, r3, #3
 8011528:	b2da      	uxtb	r2, r3
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	73da      	strb	r2, [r3, #15]
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	091b      	lsrs	r3, r3, #4
 8011532:	b2db      	uxtb	r3, r3
 8011534:	f003 030f 	and.w	r3, r3, #15
 8011538:	b2da      	uxtb	r2, r3
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	741a      	strb	r2, [r3, #16]
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	b2db      	uxtb	r3, r3
 8011542:	f003 030f 	and.w	r3, r3, #15
 8011546:	b2da      	uxtb	r2, r3
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	745a      	strb	r2, [r3, #17]
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	0e1b      	lsrs	r3, r3, #24
 8011550:	b2da      	uxtb	r2, r3
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	749a      	strb	r2, [r3, #18]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801155e:	4618      	mov	r0, r3
 8011560:	f002 ff0e 	bl	8014380 <SDMMC_CmdBlockLength>
 8011564:	64b8      	str	r0, [r7, #72]	@ 0x48
 8011566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00d      	beq.n	8011588 <HAL_SD_GetCardStatus+0x16c>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4a08      	ldr	r2, [pc, #32]	@ (8011594 <HAL_SD_GetCardStatus+0x178>)
 8011572:	639a      	str	r2, [r3, #56]	@ 0x38
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011578:	635a      	str	r2, [r3, #52]	@ 0x34
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2201      	movs	r2, #1
 801157e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011582:	2301      	movs	r3, #1
 8011584:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011588:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801158c:	4618      	mov	r0, r3
 801158e:	3750      	adds	r7, #80	@ 0x50
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	1fe00fff 	.word	0x1fe00fff

08011598 <HAL_SD_GetCardInfo>:
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	605a      	str	r2, [r3, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	609a      	str	r2, [r3, #8]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	60da      	str	r2, [r3, #12]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	611a      	str	r2, [r3, #16]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	615a      	str	r2, [r3, #20]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	619a      	str	r2, [r3, #24]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	61da      	str	r2, [r3, #28]
 80115e2:	2300      	movs	r3, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <HAL_SD_ConfigWideBusOperation>:
 80115f0:	b590      	push	{r4, r7, lr}
 80115f2:	b08d      	sub	sp, #52	@ 0x34
 80115f4:	af02      	add	r7, sp, #8
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
 80115fa:	2300      	movs	r3, #0
 80115fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2203      	movs	r2, #3
 8011604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801160c:	2b03      	cmp	r3, #3
 801160e:	d02e      	beq.n	801166e <HAL_SD_ConfigWideBusOperation+0x7e>
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011616:	d106      	bne.n	8011626 <HAL_SD_ConfigWideBusOperation+0x36>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801161c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	635a      	str	r2, [r3, #52]	@ 0x34
 8011624:	e029      	b.n	801167a <HAL_SD_ConfigWideBusOperation+0x8a>
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801162c:	d10a      	bne.n	8011644 <HAL_SD_ConfigWideBusOperation+0x54>
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 fb64 	bl	8011cfc <SD_WideBus_Enable>
 8011634:	6238      	str	r0, [r7, #32]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801163a:	6a3b      	ldr	r3, [r7, #32]
 801163c:	431a      	orrs	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	635a      	str	r2, [r3, #52]	@ 0x34
 8011642:	e01a      	b.n	801167a <HAL_SD_ConfigWideBusOperation+0x8a>
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d10a      	bne.n	8011660 <HAL_SD_ConfigWideBusOperation+0x70>
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fba1 	bl	8011d92 <SD_WideBus_Disable>
 8011650:	6238      	str	r0, [r7, #32]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	431a      	orrs	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	635a      	str	r2, [r3, #52]	@ 0x34
 801165e:	e00c      	b.n	801167a <HAL_SD_ConfigWideBusOperation+0x8a>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011664:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	635a      	str	r2, [r3, #52]	@ 0x34
 801166c:	e005      	b.n	801167a <HAL_SD_ConfigWideBusOperation+0x8a>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011672:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	635a      	str	r2, [r3, #52]	@ 0x34
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801167e:	2b00      	cmp	r3, #0
 8011680:	d007      	beq.n	8011692 <HAL_SD_ConfigWideBusOperation+0xa2>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4a5f      	ldr	r2, [pc, #380]	@ (8011804 <HAL_SD_ConfigWideBusOperation+0x214>)
 8011688:	639a      	str	r2, [r3, #56]	@ 0x38
 801168a:	2301      	movs	r3, #1
 801168c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011690:	e096      	b.n	80117c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
 8011692:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8011696:	f04f 0100 	mov.w	r1, #0
 801169a:	f7fd fa81 	bl	800eba0 <HAL_RCCEx_GetPeriphCLKFreq>
 801169e:	61f8      	str	r0, [r7, #28]
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 8083 	beq.w	80117ae <HAL_SD_ConfigWideBusOperation+0x1be>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	60bb      	str	r3, [r7, #8]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	691b      	ldr	r3, [r3, #16]
 80116bc:	617b      	str	r3, [r7, #20]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	695a      	ldr	r2, [r3, #20]
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	4950      	ldr	r1, [pc, #320]	@ (8011808 <HAL_SD_ConfigWideBusOperation+0x218>)
 80116c6:	fba1 1303 	umull	r1, r3, r1, r3
 80116ca:	0e1b      	lsrs	r3, r3, #24
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d303      	bcc.n	80116d8 <HAL_SD_ConfigWideBusOperation+0xe8>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	695b      	ldr	r3, [r3, #20]
 80116d4:	61bb      	str	r3, [r7, #24]
 80116d6:	e05a      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116e0:	d103      	bne.n	80116ea <HAL_SD_ConfigWideBusOperation+0xfa>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	61bb      	str	r3, [r7, #24]
 80116e8:	e051      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80116f2:	d126      	bne.n	8011742 <HAL_SD_ConfigWideBusOperation+0x152>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	695b      	ldr	r3, [r3, #20]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d10e      	bne.n	801171a <HAL_SD_ConfigWideBusOperation+0x12a>
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	4a43      	ldr	r2, [pc, #268]	@ (801180c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d906      	bls.n	8011712 <HAL_SD_ConfigWideBusOperation+0x122>
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	4a40      	ldr	r2, [pc, #256]	@ (8011808 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011708:	fba2 2303 	umull	r2, r3, r2, r3
 801170c:	0e5b      	lsrs	r3, r3, #25
 801170e:	61bb      	str	r3, [r7, #24]
 8011710:	e03d      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	61bb      	str	r3, [r7, #24]
 8011718:	e039      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	695b      	ldr	r3, [r3, #20]
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	69fa      	ldr	r2, [r7, #28]
 8011722:	fbb2 f3f3 	udiv	r3, r2, r3
 8011726:	4a39      	ldr	r2, [pc, #228]	@ (801180c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d906      	bls.n	801173a <HAL_SD_ConfigWideBusOperation+0x14a>
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	4a36      	ldr	r2, [pc, #216]	@ (8011808 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011730:	fba2 2303 	umull	r2, r3, r2, r3
 8011734:	0e5b      	lsrs	r3, r3, #25
 8011736:	61bb      	str	r3, [r7, #24]
 8011738:	e029      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	61bb      	str	r3, [r7, #24]
 8011740:	e025      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	695b      	ldr	r3, [r3, #20]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10e      	bne.n	8011768 <HAL_SD_ConfigWideBusOperation+0x178>
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	4a30      	ldr	r2, [pc, #192]	@ (8011810 <HAL_SD_ConfigWideBusOperation+0x220>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d906      	bls.n	8011760 <HAL_SD_ConfigWideBusOperation+0x170>
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	4a2c      	ldr	r2, [pc, #176]	@ (8011808 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011756:	fba2 2303 	umull	r2, r3, r2, r3
 801175a:	0e1b      	lsrs	r3, r3, #24
 801175c:	61bb      	str	r3, [r7, #24]
 801175e:	e016      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	695b      	ldr	r3, [r3, #20]
 8011764:	61bb      	str	r3, [r7, #24]
 8011766:	e012      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	695b      	ldr	r3, [r3, #20]
 801176c:	005b      	lsls	r3, r3, #1
 801176e:	69fa      	ldr	r2, [r7, #28]
 8011770:	fbb2 f3f3 	udiv	r3, r2, r3
 8011774:	4a26      	ldr	r2, [pc, #152]	@ (8011810 <HAL_SD_ConfigWideBusOperation+0x220>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d906      	bls.n	8011788 <HAL_SD_ConfigWideBusOperation+0x198>
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	4a22      	ldr	r2, [pc, #136]	@ (8011808 <HAL_SD_ConfigWideBusOperation+0x218>)
 801177e:	fba2 2303 	umull	r2, r3, r2, r3
 8011782:	0e1b      	lsrs	r3, r3, #24
 8011784:	61bb      	str	r3, [r7, #24]
 8011786:	e002      	b.n	801178e <HAL_SD_ConfigWideBusOperation+0x19e>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	61bb      	str	r3, [r7, #24]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681c      	ldr	r4, [r3, #0]
 8011792:	466a      	mov	r2, sp
 8011794:	f107 0314 	add.w	r3, r7, #20
 8011798:	e893 0003 	ldmia.w	r3, {r0, r1}
 801179c:	e882 0003 	stmia.w	r2, {r0, r1}
 80117a0:	f107 0308 	add.w	r3, r7, #8
 80117a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80117a6:	4620      	mov	r0, r4
 80117a8:	f002 fd0c 	bl	80141c4 <SDMMC_Init>
 80117ac:	e008      	b.n	80117c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80117ba:	2301      	movs	r3, #1
 80117bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80117c8:	4618      	mov	r0, r3
 80117ca:	f002 fdd9 	bl	8014380 <SDMMC_CmdBlockLength>
 80117ce:	6238      	str	r0, [r7, #32]
 80117d0:	6a3b      	ldr	r3, [r7, #32]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00c      	beq.n	80117f0 <HAL_SD_ConfigWideBusOperation+0x200>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4a0a      	ldr	r2, [pc, #40]	@ (8011804 <HAL_SD_ConfigWideBusOperation+0x214>)
 80117dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	431a      	orrs	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80117ea:	2301      	movs	r3, #1
 80117ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2201      	movs	r2, #1
 80117f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80117f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117fc:	4618      	mov	r0, r3
 80117fe:	372c      	adds	r7, #44	@ 0x2c
 8011800:	46bd      	mov	sp, r7
 8011802:	bd90      	pop	{r4, r7, pc}
 8011804:	1fe00fff 	.word	0x1fe00fff
 8011808:	55e63b89 	.word	0x55e63b89
 801180c:	02faf080 	.word	0x02faf080
 8011810:	017d7840 	.word	0x017d7840

08011814 <HAL_SD_GetCardState>:
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	2300      	movs	r3, #0
 801181e:	60fb      	str	r3, [r7, #12]
 8011820:	f107 030c 	add.w	r3, r7, #12
 8011824:	4619      	mov	r1, r3
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 fa40 	bl	8011cac <SD_SendStatus>
 801182c:	6178      	str	r0, [r7, #20]
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d005      	beq.n	8011840 <HAL_SD_GetCardState+0x2c>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	431a      	orrs	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	635a      	str	r2, [r3, #52]	@ 0x34
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	0a5b      	lsrs	r3, r3, #9
 8011844:	f003 030f 	and.w	r3, r3, #15
 8011848:	613b      	str	r3, [r7, #16]
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	4618      	mov	r0, r3
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <SD_InitCard>:
 8011854:	b580      	push	{r7, lr}
 8011856:	b090      	sub	sp, #64	@ 0x40
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	2300      	movs	r3, #0
 801185e:	817b      	strh	r3, [r7, #10]
 8011860:	f7f3 fada 	bl	8004e18 <HAL_GetTick>
 8011864:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4618      	mov	r0, r3
 801186c:	f002 fd03 	bl	8014276 <SDMMC_GetPowerState>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d102      	bne.n	801187c <SD_InitCard+0x28>
 8011876:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801187a:	e0b5      	b.n	80119e8 <SD_InitCard+0x194>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011880:	2b03      	cmp	r3, #3
 8011882:	d02e      	beq.n	80118e2 <SD_InitCard+0x8e>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4618      	mov	r0, r3
 801188a:	f002 ff4e 	bl	801472a <SDMMC_CmdSendCID>
 801188e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011892:	2b00      	cmp	r3, #0
 8011894:	d001      	beq.n	801189a <SD_InitCard+0x46>
 8011896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011898:	e0a6      	b.n	80119e8 <SD_InitCard+0x194>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2100      	movs	r1, #0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f002 fd2e 	bl	8014302 <SDMMC_GetResponse>
 80118a6:	4602      	mov	r2, r0
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2104      	movs	r1, #4
 80118b2:	4618      	mov	r0, r3
 80118b4:	f002 fd25 	bl	8014302 <SDMMC_GetResponse>
 80118b8:	4602      	mov	r2, r0
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2108      	movs	r1, #8
 80118c4:	4618      	mov	r0, r3
 80118c6:	f002 fd1c 	bl	8014302 <SDMMC_GetResponse>
 80118ca:	4602      	mov	r2, r0
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	675a      	str	r2, [r3, #116]	@ 0x74
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	210c      	movs	r1, #12
 80118d6:	4618      	mov	r0, r3
 80118d8:	f002 fd13 	bl	8014302 <SDMMC_GetResponse>
 80118dc:	4602      	mov	r2, r0
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	679a      	str	r2, [r3, #120]	@ 0x78
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118e6:	2b03      	cmp	r3, #3
 80118e8:	d01d      	beq.n	8011926 <SD_InitCard+0xd2>
 80118ea:	e019      	b.n	8011920 <SD_InitCard+0xcc>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f107 020a 	add.w	r2, r7, #10
 80118f4:	4611      	mov	r1, r2
 80118f6:	4618      	mov	r0, r3
 80118f8:	f002 ff56 	bl	80147a8 <SDMMC_CmdSetRelAdd>
 80118fc:	63b8      	str	r0, [r7, #56]	@ 0x38
 80118fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011900:	2b00      	cmp	r3, #0
 8011902:	d001      	beq.n	8011908 <SD_InitCard+0xb4>
 8011904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011906:	e06f      	b.n	80119e8 <SD_InitCard+0x194>
 8011908:	f7f3 fa86 	bl	8004e18 <HAL_GetTick>
 801190c:	4602      	mov	r2, r0
 801190e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	f241 3287 	movw	r2, #4999	@ 0x1387
 8011916:	4293      	cmp	r3, r2
 8011918:	d902      	bls.n	8011920 <SD_InitCard+0xcc>
 801191a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801191e:	e063      	b.n	80119e8 <SD_InitCard+0x194>
 8011920:	897b      	ldrh	r3, [r7, #10]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d0e2      	beq.n	80118ec <SD_InitCard+0x98>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801192a:	2b03      	cmp	r3, #3
 801192c:	d036      	beq.n	801199c <SD_InitCard+0x148>
 801192e:	897b      	ldrh	r3, [r7, #10]
 8011930:	461a      	mov	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	645a      	str	r2, [r3, #68]	@ 0x44
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801193e:	041b      	lsls	r3, r3, #16
 8011940:	4619      	mov	r1, r3
 8011942:	4610      	mov	r0, r2
 8011944:	f002 ff10 	bl	8014768 <SDMMC_CmdSendCSD>
 8011948:	63b8      	str	r0, [r7, #56]	@ 0x38
 801194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <SD_InitCard+0x100>
 8011950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011952:	e049      	b.n	80119e8 <SD_InitCard+0x194>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2100      	movs	r1, #0
 801195a:	4618      	mov	r0, r3
 801195c:	f002 fcd1 	bl	8014302 <SDMMC_GetResponse>
 8011960:	4602      	mov	r2, r0
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2104      	movs	r1, #4
 801196c:	4618      	mov	r0, r3
 801196e:	f002 fcc8 	bl	8014302 <SDMMC_GetResponse>
 8011972:	4602      	mov	r2, r0
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	661a      	str	r2, [r3, #96]	@ 0x60
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2108      	movs	r1, #8
 801197e:	4618      	mov	r0, r3
 8011980:	f002 fcbf 	bl	8014302 <SDMMC_GetResponse>
 8011984:	4602      	mov	r2, r0
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	665a      	str	r2, [r3, #100]	@ 0x64
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	210c      	movs	r1, #12
 8011990:	4618      	mov	r0, r3
 8011992:	f002 fcb6 	bl	8014302 <SDMMC_GetResponse>
 8011996:	4602      	mov	r2, r0
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	669a      	str	r2, [r3, #104]	@ 0x68
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2104      	movs	r1, #4
 80119a2:	4618      	mov	r0, r3
 80119a4:	f002 fcad 	bl	8014302 <SDMMC_GetResponse>
 80119a8:	4603      	mov	r3, r0
 80119aa:	0d1a      	lsrs	r2, r3, #20
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80119b0:	f107 030c 	add.w	r3, r7, #12
 80119b4:	4619      	mov	r1, r3
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff fb8c 	bl	80110d4 <HAL_SD_GetCardCSD>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <SD_InitCard+0x174>
 80119c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80119c6:	e00f      	b.n	80119e8 <SD_InitCard+0x194>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119d0:	041b      	lsls	r3, r3, #16
 80119d2:	4619      	mov	r1, r3
 80119d4:	4610      	mov	r0, r2
 80119d6:	f002 fdbf 	bl	8014558 <SDMMC_CmdSelDesel>
 80119da:	63b8      	str	r0, [r7, #56]	@ 0x38
 80119dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <SD_InitCard+0x192>
 80119e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e4:	e000      	b.n	80119e8 <SD_InitCard+0x194>
 80119e6:	2300      	movs	r3, #0
 80119e8:	4618      	mov	r0, r3
 80119ea:	3740      	adds	r7, #64	@ 0x40
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <SD_PowerON>:
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	2300      	movs	r3, #0
 80119fa:	60bb      	str	r3, [r7, #8]
 80119fc:	2300      	movs	r3, #0
 80119fe:	617b      	str	r3, [r7, #20]
 8011a00:	2300      	movs	r3, #0
 8011a02:	613b      	str	r3, [r7, #16]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f002 fdc8 	bl	801459e <SDMMC_CmdGoIdleState>
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d001      	beq.n	8011a1a <SD_PowerON+0x2a>
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	e072      	b.n	8011b00 <SD_PowerON+0x110>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f002 fddb 	bl	80145da <SDMMC_CmdOperCond>
 8011a24:	60f8      	str	r0, [r7, #12]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a2c:	d10d      	bne.n	8011a4a <SD_PowerON+0x5a>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f002 fdb0 	bl	801459e <SDMMC_CmdGoIdleState>
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d004      	beq.n	8011a50 <SD_PowerON+0x60>
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	e05a      	b.n	8011b00 <SD_PowerON+0x110>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d137      	bne.n	8011ac8 <SD_PowerON+0xd8>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f002 fddb 	bl	801461a <SDMMC_CmdAppCommand>
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d02d      	beq.n	8011ac8 <SD_PowerON+0xd8>
 8011a6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011a70:	e046      	b.n	8011b00 <SD_PowerON+0x110>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2100      	movs	r1, #0
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f002 fdce 	bl	801461a <SDMMC_CmdAppCommand>
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <SD_PowerON+0x9a>
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	e03a      	b.n	8011b00 <SD_PowerON+0x110>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	491e      	ldr	r1, [pc, #120]	@ (8011b08 <SD_PowerON+0x118>)
 8011a90:	4618      	mov	r0, r3
 8011a92:	f002 fde5 	bl	8014660 <SDMMC_CmdAppOperCommand>
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d002      	beq.n	8011aa4 <SD_PowerON+0xb4>
 8011a9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011aa2:	e02d      	b.n	8011b00 <SD_PowerON+0x110>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f002 fc29 	bl	8014302 <SDMMC_GetResponse>
 8011ab0:	6178      	str	r0, [r7, #20]
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	0fdb      	lsrs	r3, r3, #31
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d101      	bne.n	8011abe <SD_PowerON+0xce>
 8011aba:	2301      	movs	r3, #1
 8011abc:	e000      	b.n	8011ac0 <SD_PowerON+0xd0>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	613b      	str	r3, [r7, #16]
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	60bb      	str	r3, [r7, #8]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d802      	bhi.n	8011ad8 <SD_PowerON+0xe8>
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d0cc      	beq.n	8011a72 <SD_PowerON+0x82>
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d902      	bls.n	8011ae8 <SD_PowerON+0xf8>
 8011ae2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011ae6:	e00b      	b.n	8011b00 <SD_PowerON+0x110>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <SD_PowerON+0x10e>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8011afe:	2300      	movs	r3, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	3718      	adds	r7, #24
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	c1100000 	.word	0xc1100000

08011b0c <SD_SendSDStatus>:
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b08c      	sub	sp, #48	@ 0x30
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
 8011b16:	f7f3 f97f 	bl	8004e18 <HAL_GetTick>
 8011b1a:	6278      	str	r0, [r7, #36]	@ 0x24
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2100      	movs	r1, #0
 8011b26:	4618      	mov	r0, r3
 8011b28:	f002 fbeb 	bl	8014302 <SDMMC_GetResponse>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011b36:	d102      	bne.n	8011b3e <SD_SendSDStatus+0x32>
 8011b38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011b3c:	e0b0      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2140      	movs	r1, #64	@ 0x40
 8011b44:	4618      	mov	r0, r3
 8011b46:	f002 fc1b 	bl	8014380 <SDMMC_CmdBlockLength>
 8011b4a:	6238      	str	r0, [r7, #32]
 8011b4c:	6a3b      	ldr	r3, [r7, #32]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d005      	beq.n	8011b5e <SD_SendSDStatus+0x52>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8011b5a:	6a3b      	ldr	r3, [r7, #32]
 8011b5c:	e0a0      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b66:	041b      	lsls	r3, r3, #16
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	f002 fd55 	bl	801461a <SDMMC_CmdAppCommand>
 8011b70:	6238      	str	r0, [r7, #32]
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d005      	beq.n	8011b84 <SD_SendSDStatus+0x78>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	e08d      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011b84:	f04f 33ff 	mov.w	r3, #4294967295
 8011b88:	60bb      	str	r3, [r7, #8]
 8011b8a:	2340      	movs	r3, #64	@ 0x40
 8011b8c:	60fb      	str	r3, [r7, #12]
 8011b8e:	2360      	movs	r3, #96	@ 0x60
 8011b90:	613b      	str	r3, [r7, #16]
 8011b92:	2302      	movs	r3, #2
 8011b94:	617b      	str	r3, [r7, #20]
 8011b96:	2300      	movs	r3, #0
 8011b98:	61bb      	str	r3, [r7, #24]
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	61fb      	str	r3, [r7, #28]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f107 0208 	add.w	r2, r7, #8
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f002 fbbd 	bl	8014328 <SDMMC_ConfigData>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f002 fe3d 	bl	8014832 <SDMMC_CmdStatusRegister>
 8011bb8:	6238      	str	r0, [r7, #32]
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d02b      	beq.n	8011c18 <SD_SendSDStatus+0x10c>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	e069      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d013      	beq.n	8011c02 <SD_SendSDStatus+0xf6>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bde:	e00d      	b.n	8011bfc <SD_SendSDStatus+0xf0>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f002 fb17 	bl	8014218 <SDMMC_ReadFIFO>
 8011bea:	4602      	mov	r2, r0
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf2:	3304      	adds	r3, #4
 8011bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bfe:	2b07      	cmp	r3, #7
 8011c00:	d9ee      	bls.n	8011be0 <SD_SendSDStatus+0xd4>
 8011c02:	f7f3 f909 	bl	8004e18 <HAL_GetTick>
 8011c06:	4602      	mov	r2, r0
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c10:	d102      	bne.n	8011c18 <SD_SendSDStatus+0x10c>
 8011c12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011c16:	e043      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c1e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d0d2      	beq.n	8011bcc <SD_SendSDStatus+0xc0>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c2c:	f003 0308 	and.w	r3, r3, #8
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <SD_SendSDStatus+0x12c>
 8011c34:	2308      	movs	r3, #8
 8011c36:	e033      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c3e:	f003 0302 	and.w	r3, r3, #2
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d001      	beq.n	8011c4a <SD_SendSDStatus+0x13e>
 8011c46:	2302      	movs	r3, #2
 8011c48:	e02a      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c50:	f003 0320 	and.w	r3, r3, #32
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d017      	beq.n	8011c88 <SD_SendSDStatus+0x17c>
 8011c58:	2320      	movs	r3, #32
 8011c5a:	e021      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f002 fad9 	bl	8014218 <SDMMC_ReadFIFO>
 8011c66:	4602      	mov	r2, r0
 8011c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c6a:	601a      	str	r2, [r3, #0]
 8011c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c6e:	3304      	adds	r3, #4
 8011c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c72:	f7f3 f8d1 	bl	8004e18 <HAL_GetTick>
 8011c76:	4602      	mov	r2, r0
 8011c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c80:	d102      	bne.n	8011c88 <SD_SendSDStatus+0x17c>
 8011c82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011c86:	e00b      	b.n	8011ca0 <SD_SendSDStatus+0x194>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1e2      	bne.n	8011c5c <SD_SendSDStatus+0x150>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a03      	ldr	r2, [pc, #12]	@ (8011ca8 <SD_SendSDStatus+0x19c>)
 8011c9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3730      	adds	r7, #48	@ 0x30
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	18000f3a 	.word	0x18000f3a

08011cac <SD_SendStatus>:
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d102      	bne.n	8011cc2 <SD_SendStatus+0x16>
 8011cbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011cc0:	e018      	b.n	8011cf4 <SD_SendStatus+0x48>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cca:	041b      	lsls	r3, r3, #16
 8011ccc:	4619      	mov	r1, r3
 8011cce:	4610      	mov	r0, r2
 8011cd0:	f002 fd8c 	bl	80147ec <SDMMC_CmdSendStatus>
 8011cd4:	60f8      	str	r0, [r7, #12]
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d001      	beq.n	8011ce0 <SD_SendStatus+0x34>
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	e009      	b.n	8011cf4 <SD_SendStatus+0x48>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f002 fb0b 	bl	8014302 <SDMMC_GetResponse>
 8011cec:	4602      	mov	r2, r0
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <SD_WideBus_Enable>:
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	2300      	movs	r3, #0
 8011d06:	60fb      	str	r3, [r7, #12]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	613b      	str	r3, [r7, #16]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2100      	movs	r1, #0
 8011d12:	4618      	mov	r0, r3
 8011d14:	f002 faf5 	bl	8014302 <SDMMC_GetResponse>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d22:	d102      	bne.n	8011d2a <SD_WideBus_Enable+0x2e>
 8011d24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011d28:	e02f      	b.n	8011d8a <SD_WideBus_Enable+0x8e>
 8011d2a:	f107 030c 	add.w	r3, r7, #12
 8011d2e:	4619      	mov	r1, r3
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 f879 	bl	8011e28 <SD_FindSCR>
 8011d36:	6178      	str	r0, [r7, #20]
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d001      	beq.n	8011d42 <SD_WideBus_Enable+0x46>
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	e023      	b.n	8011d8a <SD_WideBus_Enable+0x8e>
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d01c      	beq.n	8011d86 <SD_WideBus_Enable+0x8a>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d54:	041b      	lsls	r3, r3, #16
 8011d56:	4619      	mov	r1, r3
 8011d58:	4610      	mov	r0, r2
 8011d5a:	f002 fc5e 	bl	801461a <SDMMC_CmdAppCommand>
 8011d5e:	6178      	str	r0, [r7, #20]
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d001      	beq.n	8011d6a <SD_WideBus_Enable+0x6e>
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	e00f      	b.n	8011d8a <SD_WideBus_Enable+0x8e>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	2102      	movs	r1, #2
 8011d70:	4618      	mov	r0, r3
 8011d72:	f002 fc95 	bl	80146a0 <SDMMC_CmdBusWidth>
 8011d76:	6178      	str	r0, [r7, #20]
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d001      	beq.n	8011d82 <SD_WideBus_Enable+0x86>
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	e003      	b.n	8011d8a <SD_WideBus_Enable+0x8e>
 8011d82:	2300      	movs	r3, #0
 8011d84:	e001      	b.n	8011d8a <SD_WideBus_Enable+0x8e>
 8011d86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <SD_WideBus_Disable>:
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b086      	sub	sp, #24
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	60fb      	str	r3, [r7, #12]
 8011d9e:	2300      	movs	r3, #0
 8011da0:	613b      	str	r3, [r7, #16]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2100      	movs	r1, #0
 8011da8:	4618      	mov	r0, r3
 8011daa:	f002 faaa 	bl	8014302 <SDMMC_GetResponse>
 8011dae:	4603      	mov	r3, r0
 8011db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011db8:	d102      	bne.n	8011dc0 <SD_WideBus_Disable+0x2e>
 8011dba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011dbe:	e02f      	b.n	8011e20 <SD_WideBus_Disable+0x8e>
 8011dc0:	f107 030c 	add.w	r3, r7, #12
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 f82e 	bl	8011e28 <SD_FindSCR>
 8011dcc:	6178      	str	r0, [r7, #20]
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <SD_WideBus_Disable+0x46>
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	e023      	b.n	8011e20 <SD_WideBus_Disable+0x8e>
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d01c      	beq.n	8011e1c <SD_WideBus_Disable+0x8a>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dea:	041b      	lsls	r3, r3, #16
 8011dec:	4619      	mov	r1, r3
 8011dee:	4610      	mov	r0, r2
 8011df0:	f002 fc13 	bl	801461a <SDMMC_CmdAppCommand>
 8011df4:	6178      	str	r0, [r7, #20]
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <SD_WideBus_Disable+0x6e>
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	e00f      	b.n	8011e20 <SD_WideBus_Disable+0x8e>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2100      	movs	r1, #0
 8011e06:	4618      	mov	r0, r3
 8011e08:	f002 fc4a 	bl	80146a0 <SDMMC_CmdBusWidth>
 8011e0c:	6178      	str	r0, [r7, #20]
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d001      	beq.n	8011e18 <SD_WideBus_Disable+0x86>
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	e003      	b.n	8011e20 <SD_WideBus_Disable+0x8e>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e001      	b.n	8011e20 <SD_WideBus_Disable+0x8e>
 8011e1c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011e20:	4618      	mov	r0, r3
 8011e22:	3718      	adds	r7, #24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <SD_FindSCR>:
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b08e      	sub	sp, #56	@ 0x38
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
 8011e32:	f7f2 fff1 	bl	8004e18 <HAL_GetTick>
 8011e36:	6338      	str	r0, [r7, #48]	@ 0x30
 8011e38:	2300      	movs	r3, #0
 8011e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	60bb      	str	r3, [r7, #8]
 8011e40:	2300      	movs	r3, #0
 8011e42:	60fb      	str	r3, [r7, #12]
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2108      	movs	r1, #8
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f002 fa96 	bl	8014380 <SDMMC_CmdBlockLength>
 8011e54:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d001      	beq.n	8011e60 <SD_FindSCR+0x38>
 8011e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5e:	e0ad      	b.n	8011fbc <SD_FindSCR+0x194>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e68:	041b      	lsls	r3, r3, #16
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	f002 fbd4 	bl	801461a <SDMMC_CmdAppCommand>
 8011e72:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <SD_FindSCR+0x56>
 8011e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7c:	e09e      	b.n	8011fbc <SD_FindSCR+0x194>
 8011e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e82:	613b      	str	r3, [r7, #16]
 8011e84:	2308      	movs	r3, #8
 8011e86:	617b      	str	r3, [r7, #20]
 8011e88:	2330      	movs	r3, #48	@ 0x30
 8011e8a:	61bb      	str	r3, [r7, #24]
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	61fb      	str	r3, [r7, #28]
 8011e90:	2300      	movs	r3, #0
 8011e92:	623b      	str	r3, [r7, #32]
 8011e94:	2301      	movs	r3, #1
 8011e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f107 0210 	add.w	r2, r7, #16
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f002 fa40 	bl	8014328 <SDMMC_ConfigData>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f002 fc1a 	bl	80146e6 <SDMMC_CmdSendSCR>
 8011eb2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d027      	beq.n	8011f0a <SD_FindSCR+0xe2>
 8011eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebc:	e07e      	b.n	8011fbc <SD_FindSCR+0x194>
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d113      	bne.n	8011ef4 <SD_FindSCR+0xcc>
 8011ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d110      	bne.n	8011ef4 <SD_FindSCR+0xcc>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f002 f99e 	bl	8014218 <SDMMC_ReadFIFO>
 8011edc:	4603      	mov	r3, r0
 8011ede:	60bb      	str	r3, [r7, #8]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f002 f997 	bl	8014218 <SDMMC_ReadFIFO>
 8011eea:	4603      	mov	r3, r0
 8011eec:	60fb      	str	r3, [r7, #12]
 8011eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ef4:	f7f2 ff90 	bl	8004e18 <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f02:	d102      	bne.n	8011f0a <SD_FindSCR+0xe2>
 8011f04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011f08:	e058      	b.n	8011fbc <SD_FindSCR+0x194>
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f10:	f240 532a 	movw	r3, #1322	@ 0x52a
 8011f14:	4013      	ands	r3, r2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0d1      	beq.n	8011ebe <SD_FindSCR+0x96>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f20:	f003 0308 	and.w	r3, r3, #8
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d005      	beq.n	8011f34 <SD_FindSCR+0x10c>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2208      	movs	r2, #8
 8011f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f30:	2308      	movs	r3, #8
 8011f32:	e043      	b.n	8011fbc <SD_FindSCR+0x194>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f3a:	f003 0302 	and.w	r3, r3, #2
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d005      	beq.n	8011f4e <SD_FindSCR+0x126>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2202      	movs	r2, #2
 8011f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f4a:	2302      	movs	r3, #2
 8011f4c:	e036      	b.n	8011fbc <SD_FindSCR+0x194>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f54:	f003 0320 	and.w	r3, r3, #32
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d005      	beq.n	8011f68 <SD_FindSCR+0x140>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2220      	movs	r2, #32
 8011f62:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f64:	2320      	movs	r3, #32
 8011f66:	e029      	b.n	8011fbc <SD_FindSCR+0x194>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a15      	ldr	r2, [pc, #84]	@ (8011fc4 <SD_FindSCR+0x19c>)
 8011f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	061a      	lsls	r2, r3, #24
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	021b      	lsls	r3, r3, #8
 8011f78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f7c:	431a      	orrs	r2, r3
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	0a1b      	lsrs	r3, r3, #8
 8011f82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011f86:	431a      	orrs	r2, r3
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	0e1b      	lsrs	r3, r3, #24
 8011f8c:	431a      	orrs	r2, r3
 8011f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f94:	3304      	adds	r3, #4
 8011f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	061a      	lsls	r2, r3, #24
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	021b      	lsls	r3, r3, #8
 8011fa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011fa4:	431a      	orrs	r2, r3
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	0a1b      	lsrs	r3, r3, #8
 8011faa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011fae:	431a      	orrs	r2, r3
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	0e1b      	lsrs	r3, r3, #24
 8011fb4:	431a      	orrs	r2, r3
 8011fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	2300      	movs	r3, #0
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3738      	adds	r7, #56	@ 0x38
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	18000f3a 	.word	0x18000f3a

08011fc8 <SD_Read_IT>:
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd4:	613b      	str	r3, [r7, #16]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fda:	2b1f      	cmp	r3, #31
 8011fdc:	d936      	bls.n	801204c <SD_Read_IT+0x84>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	617b      	str	r3, [r7, #20]
 8011fe2:	e027      	b.n	8012034 <SD_Read_IT+0x6c>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f002 f915 	bl	8014218 <SDMMC_ReadFIFO>
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	701a      	strb	r2, [r3, #0]
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	613b      	str	r3, [r7, #16]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	0a1b      	lsrs	r3, r3, #8
 8012002:	b2da      	uxtb	r2, r3
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	701a      	strb	r2, [r3, #0]
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	3301      	adds	r3, #1
 801200c:	613b      	str	r3, [r7, #16]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	0c1b      	lsrs	r3, r3, #16
 8012012:	b2da      	uxtb	r2, r3
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	3301      	adds	r3, #1
 801201c:	613b      	str	r3, [r7, #16]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	0e1b      	lsrs	r3, r3, #24
 8012022:	b2da      	uxtb	r2, r3
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	701a      	strb	r2, [r3, #0]
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	3301      	adds	r3, #1
 801202c:	613b      	str	r3, [r7, #16]
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	3301      	adds	r3, #1
 8012032:	617b      	str	r3, [r7, #20]
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	2b07      	cmp	r3, #7
 8012038:	d9d4      	bls.n	8011fe4 <SD_Read_IT+0x1c>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	693a      	ldr	r2, [r7, #16]
 801203e:	625a      	str	r2, [r3, #36]	@ 0x24
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012044:	f1a3 0220 	sub.w	r2, r3, #32
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	629a      	str	r2, [r3, #40]	@ 0x28
 801204c:	bf00      	nop
 801204e:	3718      	adds	r7, #24
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <SD_Write_IT>:
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	69db      	ldr	r3, [r3, #28]
 8012060:	613b      	str	r3, [r7, #16]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6a1b      	ldr	r3, [r3, #32]
 8012066:	2b1f      	cmp	r3, #31
 8012068:	d93a      	bls.n	80120e0 <SD_Write_IT+0x8c>
 801206a:	2300      	movs	r3, #0
 801206c:	617b      	str	r3, [r7, #20]
 801206e:	e02b      	b.n	80120c8 <SD_Write_IT+0x74>
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	60fb      	str	r3, [r7, #12]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	3301      	adds	r3, #1
 801207a:	613b      	str	r3, [r7, #16]
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	021a      	lsls	r2, r3, #8
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	4313      	orrs	r3, r2
 8012086:	60fb      	str	r3, [r7, #12]
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	3301      	adds	r3, #1
 801208c:	613b      	str	r3, [r7, #16]
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	041a      	lsls	r2, r3, #16
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	4313      	orrs	r3, r2
 8012098:	60fb      	str	r3, [r7, #12]
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	3301      	adds	r3, #1
 801209e:	613b      	str	r3, [r7, #16]
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	061a      	lsls	r2, r3, #24
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	4313      	orrs	r3, r2
 80120aa:	60fb      	str	r3, [r7, #12]
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	3301      	adds	r3, #1
 80120b0:	613b      	str	r3, [r7, #16]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f107 020c 	add.w	r2, r7, #12
 80120ba:	4611      	mov	r1, r2
 80120bc:	4618      	mov	r0, r3
 80120be:	f002 f8b8 	bl	8014232 <SDMMC_WriteFIFO>
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	3301      	adds	r3, #1
 80120c6:	617b      	str	r3, [r7, #20]
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b07      	cmp	r3, #7
 80120cc:	d9d0      	bls.n	8012070 <SD_Write_IT+0x1c>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	693a      	ldr	r2, [r7, #16]
 80120d2:	61da      	str	r2, [r3, #28]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6a1b      	ldr	r3, [r3, #32]
 80120d8:	f1a3 0220 	sub.w	r2, r3, #32
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	621a      	str	r2, [r3, #32]
 80120e0:	bf00      	nop
 80120e2:	3718      	adds	r7, #24
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	bf00      	nop
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	bf00      	nop
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	bf00      	nop
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <HAL_SDRAM_Init>:
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <HAL_SDRAM_Init+0x14>
 8012148:	2301      	movs	r3, #1
 801214a:	e03c      	b.n	80121c6 <HAL_SDRAM_Init+0x8e>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012152:	b2db      	uxtb	r3, r3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d117      	bne.n	8012188 <HAL_SDRAM_Init+0x50>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012164:	2b00      	cmp	r3, #0
 8012166:	d102      	bne.n	801216e <HAL_SDRAM_Init+0x36>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	4a19      	ldr	r2, [pc, #100]	@ (80121d0 <HAL_SDRAM_Init+0x98>)
 801216c:	635a      	str	r2, [r3, #52]	@ 0x34
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4a18      	ldr	r2, [pc, #96]	@ (80121d4 <HAL_SDRAM_Init+0x9c>)
 8012172:	63da      	str	r2, [r3, #60]	@ 0x3c
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	4a18      	ldr	r2, [pc, #96]	@ (80121d8 <HAL_SDRAM_Init+0xa0>)
 8012178:	641a      	str	r2, [r3, #64]	@ 0x40
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4a17      	ldr	r2, [pc, #92]	@ (80121dc <HAL_SDRAM_Init+0xa4>)
 801217e:	645a      	str	r2, [r3, #68]	@ 0x44
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	4798      	blx	r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2202      	movs	r2, #2
 801218c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	3304      	adds	r3, #4
 8012198:	4619      	mov	r1, r3
 801219a:	4610      	mov	r0, r2
 801219c:	f001 ff10 	bl	8013fc0 <FMC_SDRAM_Init>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6818      	ldr	r0, [r3, #0]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	461a      	mov	r2, r3
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	f001 ff64 	bl	8014078 <FMC_SDRAM_Timing_Init>
 80121b0:	4b0b      	ldr	r3, [pc, #44]	@ (80121e0 <HAL_SDRAM_Init+0xa8>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4a0a      	ldr	r2, [pc, #40]	@ (80121e0 <HAL_SDRAM_Init+0xa8>)
 80121b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80121ba:	6013      	str	r3, [r2, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2201      	movs	r2, #1
 80121c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80121c4:	2300      	movs	r3, #0
 80121c6:	4618      	mov	r0, r3
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	08000ca9 	.word	0x08000ca9
 80121d4:	080121e5 	.word	0x080121e5
 80121d8:	080121f9 	.word	0x080121f9
 80121dc:	0801220d 	.word	0x0801220d
 80121e0:	52004000 	.word	0x52004000

080121e4 <HAL_SDRAM_RefreshErrorCallback>:
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	bf00      	nop
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <HAL_SDRAM_DMA_XferCpltCallback>:
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <HAL_SDRAM_DMA_XferErrorCallback>:
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <HAL_SDRAM_SendCommand>:
 8012220:	b580      	push	{r7, lr}
 8012222:	b086      	sub	sp, #24
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012232:	75fb      	strb	r3, [r7, #23]
 8012234:	7dfb      	ldrb	r3, [r7, #23]
 8012236:	2b02      	cmp	r3, #2
 8012238:	d101      	bne.n	801223e <HAL_SDRAM_SendCommand+0x1e>
 801223a:	2302      	movs	r3, #2
 801223c:	e021      	b.n	8012282 <HAL_SDRAM_SendCommand+0x62>
 801223e:	7dfb      	ldrb	r3, [r7, #23]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d002      	beq.n	801224a <HAL_SDRAM_SendCommand+0x2a>
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	2b05      	cmp	r3, #5
 8012248:	d118      	bne.n	801227c <HAL_SDRAM_SendCommand+0x5c>
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2202      	movs	r2, #2
 801224e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	68b9      	ldr	r1, [r7, #8]
 801225a:	4618      	mov	r0, r3
 801225c:	f001 ff76 	bl	801414c <FMC_SDRAM_SendCommand>
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b02      	cmp	r3, #2
 8012266:	d104      	bne.n	8012272 <HAL_SDRAM_SendCommand+0x52>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2205      	movs	r2, #5
 801226c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8012270:	e006      	b.n	8012280 <HAL_SDRAM_SendCommand+0x60>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2201      	movs	r2, #1
 8012276:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 801227a:	e001      	b.n	8012280 <HAL_SDRAM_SendCommand+0x60>
 801227c:	2301      	movs	r3, #1
 801227e:	e000      	b.n	8012282 <HAL_SDRAM_SendCommand+0x62>
 8012280:	2300      	movs	r3, #0
 8012282:	4618      	mov	r0, r3
 8012284:	3718      	adds	r7, #24
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <HAL_SDRAM_ProgramRefreshRate>:
 801228a:	b580      	push	{r7, lr}
 801228c:	b082      	sub	sp, #8
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	6039      	str	r1, [r7, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801229a:	b2db      	uxtb	r3, r3
 801229c:	2b02      	cmp	r3, #2
 801229e:	d101      	bne.n	80122a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
 80122a0:	2302      	movs	r3, #2
 80122a2:	e016      	b.n	80122d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d10f      	bne.n	80122d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2202      	movs	r2, #2
 80122b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	4618      	mov	r0, r3
 80122c0:	f001 ff68 	bl	8014194 <FMC_SDRAM_ProgramRefreshRate>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2201      	movs	r2, #1
 80122c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80122cc:	2300      	movs	r3, #0
 80122ce:	e000      	b.n	80122d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
 80122d0:	2301      	movs	r3, #1
 80122d2:	4618      	mov	r0, r3
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
	...

080122dc <HAL_TIM_Base_Init>:
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d101      	bne.n	80122ee <HAL_TIM_Base_Init+0x12>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e054      	b.n	8012398 <HAL_TIM_Base_Init+0xbc>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d111      	bne.n	801231e <HAL_TIM_Base_Init+0x42>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f001 fcca 	bl	8013c9c <TIM_ResetCallback>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801230c:	2b00      	cmp	r3, #0
 801230e:	d102      	bne.n	8012316 <HAL_TIM_Base_Init+0x3a>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	4a23      	ldr	r2, [pc, #140]	@ (80123a0 <HAL_TIM_Base_Init+0xc4>)
 8012314:	64da      	str	r2, [r3, #76]	@ 0x4c
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	4798      	blx	r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2202      	movs	r2, #2
 8012322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	3304      	adds	r3, #4
 801232e:	4619      	mov	r1, r3
 8012330:	4610      	mov	r0, r2
 8012332:	f000 ff89 	bl	8013248 <TIM_Base_SetConfig>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2201      	movs	r2, #1
 801233a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2201      	movs	r2, #1
 8012342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2201      	movs	r2, #1
 801234a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2201      	movs	r2, #1
 8012352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2201      	movs	r2, #1
 801235a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2201      	movs	r2, #1
 8012362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2201      	movs	r2, #1
 801236a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2201      	movs	r2, #1
 8012372:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2201      	movs	r2, #1
 801237a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2201      	movs	r2, #1
 8012382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2201      	movs	r2, #1
 801238a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2201      	movs	r2, #1
 8012392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012396:	2300      	movs	r3, #0
 8012398:	4618      	mov	r0, r3
 801239a:	3708      	adds	r7, #8
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	08004975 	.word	0x08004975

080123a4 <HAL_TIM_Base_Start>:
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d001      	beq.n	80123bc <HAL_TIM_Base_Start+0x18>
 80123b8:	2301      	movs	r3, #1
 80123ba:	e04c      	b.n	8012456 <HAL_TIM_Base_Start+0xb2>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2202      	movs	r2, #2
 80123c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4a26      	ldr	r2, [pc, #152]	@ (8012464 <HAL_TIM_Base_Start+0xc0>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d022      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123d6:	d01d      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4a22      	ldr	r2, [pc, #136]	@ (8012468 <HAL_TIM_Base_Start+0xc4>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d018      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4a21      	ldr	r2, [pc, #132]	@ (801246c <HAL_TIM_Base_Start+0xc8>)
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d013      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4a1f      	ldr	r2, [pc, #124]	@ (8012470 <HAL_TIM_Base_Start+0xcc>)
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d00e      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4a1e      	ldr	r2, [pc, #120]	@ (8012474 <HAL_TIM_Base_Start+0xd0>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d009      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a1c      	ldr	r2, [pc, #112]	@ (8012478 <HAL_TIM_Base_Start+0xd4>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d004      	beq.n	8012414 <HAL_TIM_Base_Start+0x70>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a1b      	ldr	r2, [pc, #108]	@ (801247c <HAL_TIM_Base_Start+0xd8>)
 8012410:	4293      	cmp	r3, r2
 8012412:	d115      	bne.n	8012440 <HAL_TIM_Base_Start+0x9c>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	689a      	ldr	r2, [r3, #8]
 801241a:	4b19      	ldr	r3, [pc, #100]	@ (8012480 <HAL_TIM_Base_Start+0xdc>)
 801241c:	4013      	ands	r3, r2
 801241e:	60fb      	str	r3, [r7, #12]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2b06      	cmp	r3, #6
 8012424:	d015      	beq.n	8012452 <HAL_TIM_Base_Start+0xae>
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801242c:	d011      	beq.n	8012452 <HAL_TIM_Base_Start+0xae>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f042 0201 	orr.w	r2, r2, #1
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	e008      	b.n	8012452 <HAL_TIM_Base_Start+0xae>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f042 0201 	orr.w	r2, r2, #1
 801244e:	601a      	str	r2, [r3, #0]
 8012450:	e000      	b.n	8012454 <HAL_TIM_Base_Start+0xb0>
 8012452:	bf00      	nop
 8012454:	2300      	movs	r3, #0
 8012456:	4618      	mov	r0, r3
 8012458:	3714      	adds	r7, #20
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	40010000 	.word	0x40010000
 8012468:	40000400 	.word	0x40000400
 801246c:	40000800 	.word	0x40000800
 8012470:	40000c00 	.word	0x40000c00
 8012474:	40010400 	.word	0x40010400
 8012478:	40001800 	.word	0x40001800
 801247c:	40014000 	.word	0x40014000
 8012480:	00010007 	.word	0x00010007

08012484 <HAL_TIM_Base_Stop>:
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	6a1a      	ldr	r2, [r3, #32]
 8012492:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012496:	4013      	ands	r3, r2
 8012498:	2b00      	cmp	r3, #0
 801249a:	d10f      	bne.n	80124bc <HAL_TIM_Base_Stop+0x38>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6a1a      	ldr	r2, [r3, #32]
 80124a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80124a6:	4013      	ands	r3, r2
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d107      	bne.n	80124bc <HAL_TIM_Base_Stop+0x38>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f022 0201 	bic.w	r2, r2, #1
 80124ba:	601a      	str	r2, [r3, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2201      	movs	r2, #1
 80124c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80124c4:	2300      	movs	r3, #0
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
	...

080124d4 <HAL_TIM_Base_Start_IT>:
 80124d4:	b480      	push	{r7}
 80124d6:	b085      	sub	sp, #20
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d001      	beq.n	80124ec <HAL_TIM_Base_Start_IT+0x18>
 80124e8:	2301      	movs	r3, #1
 80124ea:	e054      	b.n	8012596 <HAL_TIM_Base_Start_IT+0xc2>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2202      	movs	r2, #2
 80124f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	68da      	ldr	r2, [r3, #12]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f042 0201 	orr.w	r2, r2, #1
 8012502:	60da      	str	r2, [r3, #12]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4a26      	ldr	r2, [pc, #152]	@ (80125a4 <HAL_TIM_Base_Start_IT+0xd0>)
 801250a:	4293      	cmp	r3, r2
 801250c:	d022      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012516:	d01d      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4a22      	ldr	r2, [pc, #136]	@ (80125a8 <HAL_TIM_Base_Start_IT+0xd4>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d018      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a21      	ldr	r2, [pc, #132]	@ (80125ac <HAL_TIM_Base_Start_IT+0xd8>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d013      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4a1f      	ldr	r2, [pc, #124]	@ (80125b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8012532:	4293      	cmp	r3, r2
 8012534:	d00e      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a1e      	ldr	r2, [pc, #120]	@ (80125b4 <HAL_TIM_Base_Start_IT+0xe0>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d009      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	4a1c      	ldr	r2, [pc, #112]	@ (80125b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8012546:	4293      	cmp	r3, r2
 8012548:	d004      	beq.n	8012554 <HAL_TIM_Base_Start_IT+0x80>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	4a1b      	ldr	r2, [pc, #108]	@ (80125bc <HAL_TIM_Base_Start_IT+0xe8>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d115      	bne.n	8012580 <HAL_TIM_Base_Start_IT+0xac>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	689a      	ldr	r2, [r3, #8]
 801255a:	4b19      	ldr	r3, [pc, #100]	@ (80125c0 <HAL_TIM_Base_Start_IT+0xec>)
 801255c:	4013      	ands	r3, r2
 801255e:	60fb      	str	r3, [r7, #12]
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2b06      	cmp	r3, #6
 8012564:	d015      	beq.n	8012592 <HAL_TIM_Base_Start_IT+0xbe>
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801256c:	d011      	beq.n	8012592 <HAL_TIM_Base_Start_IT+0xbe>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f042 0201 	orr.w	r2, r2, #1
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	e008      	b.n	8012592 <HAL_TIM_Base_Start_IT+0xbe>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f042 0201 	orr.w	r2, r2, #1
 801258e:	601a      	str	r2, [r3, #0]
 8012590:	e000      	b.n	8012594 <HAL_TIM_Base_Start_IT+0xc0>
 8012592:	bf00      	nop
 8012594:	2300      	movs	r3, #0
 8012596:	4618      	mov	r0, r3
 8012598:	3714      	adds	r7, #20
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	40010000 	.word	0x40010000
 80125a8:	40000400 	.word	0x40000400
 80125ac:	40000800 	.word	0x40000800
 80125b0:	40000c00 	.word	0x40000c00
 80125b4:	40010400 	.word	0x40010400
 80125b8:	40001800 	.word	0x40001800
 80125bc:	40014000 	.word	0x40014000
 80125c0:	00010007 	.word	0x00010007

080125c4 <HAL_TIM_PWM_Init>:
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <HAL_TIM_PWM_Init+0x12>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e054      	b.n	8012680 <HAL_TIM_PWM_Init+0xbc>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d111      	bne.n	8012606 <HAL_TIM_PWM_Init+0x42>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f001 fb56 	bl	8013c9c <TIM_ResetCallback>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <HAL_TIM_PWM_Init+0x3a>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a23      	ldr	r2, [pc, #140]	@ (8012688 <HAL_TIM_PWM_Init+0xc4>)
 80125fc:	665a      	str	r2, [r3, #100]	@ 0x64
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	4798      	blx	r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2202      	movs	r2, #2
 801260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3304      	adds	r3, #4
 8012616:	4619      	mov	r1, r3
 8012618:	4610      	mov	r0, r2
 801261a:	f000 fe15 	bl	8013248 <TIM_Base_SetConfig>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2201      	movs	r2, #1
 8012622:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2201      	movs	r2, #1
 801262a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2201      	movs	r2, #1
 8012632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2201      	movs	r2, #1
 801263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2201      	movs	r2, #1
 8012642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2201      	movs	r2, #1
 801264a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2201      	movs	r2, #1
 8012652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2201      	movs	r2, #1
 801265a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2201      	movs	r2, #1
 8012662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2201      	movs	r2, #1
 801266a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2201      	movs	r2, #1
 8012672:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2201      	movs	r2, #1
 801267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801267e:	2300      	movs	r3, #0
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	0801268d 	.word	0x0801268d

0801268c <HAL_TIM_PWM_MspInit>:
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	bf00      	nop
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <HAL_TIM_PWM_Start>:
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d109      	bne.n	80126c4 <HAL_TIM_PWM_Start+0x24>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	bf14      	ite	ne
 80126bc:	2301      	movne	r3, #1
 80126be:	2300      	moveq	r3, #0
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	e03c      	b.n	801273e <HAL_TIM_PWM_Start+0x9e>
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	2b04      	cmp	r3, #4
 80126c8:	d109      	bne.n	80126de <HAL_TIM_PWM_Start+0x3e>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	bf14      	ite	ne
 80126d6:	2301      	movne	r3, #1
 80126d8:	2300      	moveq	r3, #0
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	e02f      	b.n	801273e <HAL_TIM_PWM_Start+0x9e>
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	2b08      	cmp	r3, #8
 80126e2:	d109      	bne.n	80126f8 <HAL_TIM_PWM_Start+0x58>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	bf14      	ite	ne
 80126f0:	2301      	movne	r3, #1
 80126f2:	2300      	moveq	r3, #0
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	e022      	b.n	801273e <HAL_TIM_PWM_Start+0x9e>
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	2b0c      	cmp	r3, #12
 80126fc:	d109      	bne.n	8012712 <HAL_TIM_PWM_Start+0x72>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b01      	cmp	r3, #1
 8012708:	bf14      	ite	ne
 801270a:	2301      	movne	r3, #1
 801270c:	2300      	moveq	r3, #0
 801270e:	b2db      	uxtb	r3, r3
 8012710:	e015      	b.n	801273e <HAL_TIM_PWM_Start+0x9e>
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	2b10      	cmp	r3, #16
 8012716:	d109      	bne.n	801272c <HAL_TIM_PWM_Start+0x8c>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b01      	cmp	r3, #1
 8012722:	bf14      	ite	ne
 8012724:	2301      	movne	r3, #1
 8012726:	2300      	moveq	r3, #0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	e008      	b.n	801273e <HAL_TIM_PWM_Start+0x9e>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012732:	b2db      	uxtb	r3, r3
 8012734:	2b01      	cmp	r3, #1
 8012736:	bf14      	ite	ne
 8012738:	2301      	movne	r3, #1
 801273a:	2300      	moveq	r3, #0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <HAL_TIM_PWM_Start+0xa6>
 8012742:	2301      	movs	r3, #1
 8012744:	e0a1      	b.n	801288a <HAL_TIM_PWM_Start+0x1ea>
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d104      	bne.n	8012756 <HAL_TIM_PWM_Start+0xb6>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2202      	movs	r2, #2
 8012750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012754:	e023      	b.n	801279e <HAL_TIM_PWM_Start+0xfe>
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	2b04      	cmp	r3, #4
 801275a:	d104      	bne.n	8012766 <HAL_TIM_PWM_Start+0xc6>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2202      	movs	r2, #2
 8012760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012764:	e01b      	b.n	801279e <HAL_TIM_PWM_Start+0xfe>
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	2b08      	cmp	r3, #8
 801276a:	d104      	bne.n	8012776 <HAL_TIM_PWM_Start+0xd6>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2202      	movs	r2, #2
 8012770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012774:	e013      	b.n	801279e <HAL_TIM_PWM_Start+0xfe>
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	2b0c      	cmp	r3, #12
 801277a:	d104      	bne.n	8012786 <HAL_TIM_PWM_Start+0xe6>
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2202      	movs	r2, #2
 8012780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012784:	e00b      	b.n	801279e <HAL_TIM_PWM_Start+0xfe>
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	2b10      	cmp	r3, #16
 801278a:	d104      	bne.n	8012796 <HAL_TIM_PWM_Start+0xf6>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2202      	movs	r2, #2
 8012790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012794:	e003      	b.n	801279e <HAL_TIM_PWM_Start+0xfe>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2202      	movs	r2, #2
 801279a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2201      	movs	r2, #1
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f001 fa52 	bl	8013c50 <TIM_CCxChannelCmd>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4a38      	ldr	r2, [pc, #224]	@ (8012894 <HAL_TIM_PWM_Start+0x1f4>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d013      	beq.n	80127de <HAL_TIM_PWM_Start+0x13e>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4a37      	ldr	r2, [pc, #220]	@ (8012898 <HAL_TIM_PWM_Start+0x1f8>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d00e      	beq.n	80127de <HAL_TIM_PWM_Start+0x13e>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4a35      	ldr	r2, [pc, #212]	@ (801289c <HAL_TIM_PWM_Start+0x1fc>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d009      	beq.n	80127de <HAL_TIM_PWM_Start+0x13e>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4a34      	ldr	r2, [pc, #208]	@ (80128a0 <HAL_TIM_PWM_Start+0x200>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d004      	beq.n	80127de <HAL_TIM_PWM_Start+0x13e>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a32      	ldr	r2, [pc, #200]	@ (80128a4 <HAL_TIM_PWM_Start+0x204>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d101      	bne.n	80127e2 <HAL_TIM_PWM_Start+0x142>
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <HAL_TIM_PWM_Start+0x144>
 80127e2:	2300      	movs	r3, #0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d007      	beq.n	80127f8 <HAL_TIM_PWM_Start+0x158>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80127f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a25      	ldr	r2, [pc, #148]	@ (8012894 <HAL_TIM_PWM_Start+0x1f4>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d022      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801280a:	d01d      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a25      	ldr	r2, [pc, #148]	@ (80128a8 <HAL_TIM_PWM_Start+0x208>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d018      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a24      	ldr	r2, [pc, #144]	@ (80128ac <HAL_TIM_PWM_Start+0x20c>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d013      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a22      	ldr	r2, [pc, #136]	@ (80128b0 <HAL_TIM_PWM_Start+0x210>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d00e      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a1a      	ldr	r2, [pc, #104]	@ (8012898 <HAL_TIM_PWM_Start+0x1f8>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d009      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a1e      	ldr	r2, [pc, #120]	@ (80128b4 <HAL_TIM_PWM_Start+0x214>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d004      	beq.n	8012848 <HAL_TIM_PWM_Start+0x1a8>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4a16      	ldr	r2, [pc, #88]	@ (801289c <HAL_TIM_PWM_Start+0x1fc>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d115      	bne.n	8012874 <HAL_TIM_PWM_Start+0x1d4>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	689a      	ldr	r2, [r3, #8]
 801284e:	4b1a      	ldr	r3, [pc, #104]	@ (80128b8 <HAL_TIM_PWM_Start+0x218>)
 8012850:	4013      	ands	r3, r2
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b06      	cmp	r3, #6
 8012858:	d015      	beq.n	8012886 <HAL_TIM_PWM_Start+0x1e6>
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012860:	d011      	beq.n	8012886 <HAL_TIM_PWM_Start+0x1e6>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f042 0201 	orr.w	r2, r2, #1
 8012870:	601a      	str	r2, [r3, #0]
 8012872:	e008      	b.n	8012886 <HAL_TIM_PWM_Start+0x1e6>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f042 0201 	orr.w	r2, r2, #1
 8012882:	601a      	str	r2, [r3, #0]
 8012884:	e000      	b.n	8012888 <HAL_TIM_PWM_Start+0x1e8>
 8012886:	bf00      	nop
 8012888:	2300      	movs	r3, #0
 801288a:	4618      	mov	r0, r3
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	40010000 	.word	0x40010000
 8012898:	40010400 	.word	0x40010400
 801289c:	40014000 	.word	0x40014000
 80128a0:	40014400 	.word	0x40014400
 80128a4:	40014800 	.word	0x40014800
 80128a8:	40000400 	.word	0x40000400
 80128ac:	40000800 	.word	0x40000800
 80128b0:	40000c00 	.word	0x40000c00
 80128b4:	40001800 	.word	0x40001800
 80128b8:	00010007 	.word	0x00010007

080128bc <HAL_TIM_PWM_Stop>:
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2200      	movs	r2, #0
 80128cc:	6839      	ldr	r1, [r7, #0]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f001 f9be 	bl	8013c50 <TIM_CCxChannelCmd>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a3e      	ldr	r2, [pc, #248]	@ (80129d4 <HAL_TIM_PWM_Stop+0x118>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d013      	beq.n	8012906 <HAL_TIM_PWM_Stop+0x4a>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a3d      	ldr	r2, [pc, #244]	@ (80129d8 <HAL_TIM_PWM_Stop+0x11c>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d00e      	beq.n	8012906 <HAL_TIM_PWM_Stop+0x4a>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a3b      	ldr	r2, [pc, #236]	@ (80129dc <HAL_TIM_PWM_Stop+0x120>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d009      	beq.n	8012906 <HAL_TIM_PWM_Stop+0x4a>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a3a      	ldr	r2, [pc, #232]	@ (80129e0 <HAL_TIM_PWM_Stop+0x124>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d004      	beq.n	8012906 <HAL_TIM_PWM_Stop+0x4a>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a38      	ldr	r2, [pc, #224]	@ (80129e4 <HAL_TIM_PWM_Stop+0x128>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d101      	bne.n	801290a <HAL_TIM_PWM_Stop+0x4e>
 8012906:	2301      	movs	r3, #1
 8012908:	e000      	b.n	801290c <HAL_TIM_PWM_Stop+0x50>
 801290a:	2300      	movs	r3, #0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d017      	beq.n	8012940 <HAL_TIM_PWM_Stop+0x84>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	6a1a      	ldr	r2, [r3, #32]
 8012916:	f241 1311 	movw	r3, #4369	@ 0x1111
 801291a:	4013      	ands	r3, r2
 801291c:	2b00      	cmp	r3, #0
 801291e:	d10f      	bne.n	8012940 <HAL_TIM_PWM_Stop+0x84>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	6a1a      	ldr	r2, [r3, #32]
 8012926:	f240 4344 	movw	r3, #1092	@ 0x444
 801292a:	4013      	ands	r3, r2
 801292c:	2b00      	cmp	r3, #0
 801292e:	d107      	bne.n	8012940 <HAL_TIM_PWM_Stop+0x84>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801293e:	645a      	str	r2, [r3, #68]	@ 0x44
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6a1a      	ldr	r2, [r3, #32]
 8012946:	f241 1311 	movw	r3, #4369	@ 0x1111
 801294a:	4013      	ands	r3, r2
 801294c:	2b00      	cmp	r3, #0
 801294e:	d10f      	bne.n	8012970 <HAL_TIM_PWM_Stop+0xb4>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	6a1a      	ldr	r2, [r3, #32]
 8012956:	f240 4344 	movw	r3, #1092	@ 0x444
 801295a:	4013      	ands	r3, r2
 801295c:	2b00      	cmp	r3, #0
 801295e:	d107      	bne.n	8012970 <HAL_TIM_PWM_Stop+0xb4>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f022 0201 	bic.w	r2, r2, #1
 801296e:	601a      	str	r2, [r3, #0]
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d104      	bne.n	8012980 <HAL_TIM_PWM_Stop+0xc4>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2201      	movs	r2, #1
 801297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801297e:	e023      	b.n	80129c8 <HAL_TIM_PWM_Stop+0x10c>
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2b04      	cmp	r3, #4
 8012984:	d104      	bne.n	8012990 <HAL_TIM_PWM_Stop+0xd4>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2201      	movs	r2, #1
 801298a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801298e:	e01b      	b.n	80129c8 <HAL_TIM_PWM_Stop+0x10c>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2b08      	cmp	r3, #8
 8012994:	d104      	bne.n	80129a0 <HAL_TIM_PWM_Stop+0xe4>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2201      	movs	r2, #1
 801299a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801299e:	e013      	b.n	80129c8 <HAL_TIM_PWM_Stop+0x10c>
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b0c      	cmp	r3, #12
 80129a4:	d104      	bne.n	80129b0 <HAL_TIM_PWM_Stop+0xf4>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2201      	movs	r2, #1
 80129aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80129ae:	e00b      	b.n	80129c8 <HAL_TIM_PWM_Stop+0x10c>
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b10      	cmp	r3, #16
 80129b4:	d104      	bne.n	80129c0 <HAL_TIM_PWM_Stop+0x104>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2201      	movs	r2, #1
 80129ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80129be:	e003      	b.n	80129c8 <HAL_TIM_PWM_Stop+0x10c>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80129c8:	2300      	movs	r3, #0
 80129ca:	4618      	mov	r0, r3
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	40010000 	.word	0x40010000
 80129d8:	40010400 	.word	0x40010400
 80129dc:	40014000 	.word	0x40014000
 80129e0:	40014400 	.word	0x40014400
 80129e4:	40014800 	.word	0x40014800

080129e8 <HAL_TIM_OnePulse_Init>:
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <HAL_TIM_OnePulse_Init+0x14>
 80129f8:	2301      	movs	r3, #1
 80129fa:	e04c      	b.n	8012a96 <HAL_TIM_OnePulse_Init+0xae>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d111      	bne.n	8012a2c <HAL_TIM_OnePulse_Init+0x44>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f001 f943 	bl	8013c9c <TIM_ResetCallback>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d102      	bne.n	8012a24 <HAL_TIM_OnePulse_Init+0x3c>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4a1f      	ldr	r2, [pc, #124]	@ (8012aa0 <HAL_TIM_OnePulse_Init+0xb8>)
 8012a22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	4798      	blx	r3
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2202      	movs	r2, #2
 8012a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f000 fc02 	bl	8013248 <TIM_Base_SetConfig>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f022 0208 	bic.w	r2, r2, #8
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6819      	ldr	r1, [r3, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	683a      	ldr	r2, [r7, #0]
 8012a60:	430a      	orrs	r2, r1
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2201      	movs	r2, #1
 8012a68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2201      	movs	r2, #1
 8012a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2201      	movs	r2, #1
 8012a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2201      	movs	r2, #1
 8012a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2201      	movs	r2, #1
 8012a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012a94:	2300      	movs	r3, #0
 8012a96:	4618      	mov	r0, r3
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	08012aa5 	.word	0x08012aa5

08012aa4 <HAL_TIM_OnePulse_MspInit>:
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	bf00      	nop
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <HAL_TIM_IRQHandler>:
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	60fb      	str	r3, [r7, #12]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	691b      	ldr	r3, [r3, #16]
 8012ace:	60bb      	str	r3, [r7, #8]
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	f003 0302 	and.w	r3, r3, #2
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d026      	beq.n	8012b28 <HAL_TIM_IRQHandler+0x70>
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	f003 0302 	and.w	r3, r3, #2
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d021      	beq.n	8012b28 <HAL_TIM_IRQHandler+0x70>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	f06f 0202 	mvn.w	r2, #2
 8012aec:	611a      	str	r2, [r3, #16]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2201      	movs	r2, #1
 8012af2:	771a      	strb	r2, [r3, #28]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	699b      	ldr	r3, [r3, #24]
 8012afa:	f003 0303 	and.w	r3, r3, #3
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d005      	beq.n	8012b0e <HAL_TIM_IRQHandler+0x56>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	4798      	blx	r3
 8012b0c:	e009      	b.n	8012b22 <HAL_TIM_IRQHandler+0x6a>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	4798      	blx	r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	4798      	blx	r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2200      	movs	r2, #0
 8012b26:	771a      	strb	r2, [r3, #28]
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f003 0304 	and.w	r3, r3, #4
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d026      	beq.n	8012b80 <HAL_TIM_IRQHandler+0xc8>
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	f003 0304 	and.w	r3, r3, #4
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d021      	beq.n	8012b80 <HAL_TIM_IRQHandler+0xc8>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f06f 0204 	mvn.w	r2, #4
 8012b44:	611a      	str	r2, [r3, #16]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2202      	movs	r2, #2
 8012b4a:	771a      	strb	r2, [r3, #28]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	699b      	ldr	r3, [r3, #24]
 8012b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d005      	beq.n	8012b66 <HAL_TIM_IRQHandler+0xae>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	4798      	blx	r3
 8012b64:	e009      	b.n	8012b7a <HAL_TIM_IRQHandler+0xc2>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	4798      	blx	r3
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	4798      	blx	r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	771a      	strb	r2, [r3, #28]
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	f003 0308 	and.w	r3, r3, #8
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d026      	beq.n	8012bd8 <HAL_TIM_IRQHandler+0x120>
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	f003 0308 	and.w	r3, r3, #8
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d021      	beq.n	8012bd8 <HAL_TIM_IRQHandler+0x120>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f06f 0208 	mvn.w	r2, #8
 8012b9c:	611a      	str	r2, [r3, #16]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2204      	movs	r2, #4
 8012ba2:	771a      	strb	r2, [r3, #28]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	69db      	ldr	r3, [r3, #28]
 8012baa:	f003 0303 	and.w	r3, r3, #3
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d005      	beq.n	8012bbe <HAL_TIM_IRQHandler+0x106>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	4798      	blx	r3
 8012bbc:	e009      	b.n	8012bd2 <HAL_TIM_IRQHandler+0x11a>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	4798      	blx	r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	4798      	blx	r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	771a      	strb	r2, [r3, #28]
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f003 0310 	and.w	r3, r3, #16
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d026      	beq.n	8012c30 <HAL_TIM_IRQHandler+0x178>
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f003 0310 	and.w	r3, r3, #16
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d021      	beq.n	8012c30 <HAL_TIM_IRQHandler+0x178>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f06f 0210 	mvn.w	r2, #16
 8012bf4:	611a      	str	r2, [r3, #16]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2208      	movs	r2, #8
 8012bfa:	771a      	strb	r2, [r3, #28]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	69db      	ldr	r3, [r3, #28]
 8012c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d005      	beq.n	8012c16 <HAL_TIM_IRQHandler+0x15e>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	4798      	blx	r3
 8012c14:	e009      	b.n	8012c2a <HAL_TIM_IRQHandler+0x172>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	4798      	blx	r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	4798      	blx	r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	771a      	strb	r2, [r3, #28]
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	f003 0301 	and.w	r3, r3, #1
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00e      	beq.n	8012c58 <HAL_TIM_IRQHandler+0x1a0>
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	f003 0301 	and.w	r3, r3, #1
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d009      	beq.n	8012c58 <HAL_TIM_IRQHandler+0x1a0>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f06f 0201 	mvn.w	r2, #1
 8012c4c:	611a      	str	r2, [r3, #16]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	4798      	blx	r3
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d104      	bne.n	8012c6c <HAL_TIM_IRQHandler+0x1b4>
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00e      	beq.n	8012c8a <HAL_TIM_IRQHandler+0x1d2>
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d009      	beq.n	8012c8a <HAL_TIM_IRQHandler+0x1d2>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012c7e:	611a      	str	r2, [r3, #16]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	4798      	blx	r3
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00e      	beq.n	8012cb2 <HAL_TIM_IRQHandler+0x1fa>
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d009      	beq.n	8012cb2 <HAL_TIM_IRQHandler+0x1fa>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012ca6:	611a      	str	r2, [r3, #16]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	4798      	blx	r3
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00e      	beq.n	8012cda <HAL_TIM_IRQHandler+0x222>
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d009      	beq.n	8012cda <HAL_TIM_IRQHandler+0x222>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012cce:	611a      	str	r2, [r3, #16]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	4798      	blx	r3
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	f003 0320 	and.w	r3, r3, #32
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00e      	beq.n	8012d02 <HAL_TIM_IRQHandler+0x24a>
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f003 0320 	and.w	r3, r3, #32
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d009      	beq.n	8012d02 <HAL_TIM_IRQHandler+0x24a>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f06f 0220 	mvn.w	r2, #32
 8012cf6:	611a      	str	r2, [r3, #16]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	4798      	blx	r3
 8012d02:	bf00      	nop
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
	...

08012d0c <HAL_TIM_PWM_ConfigChannel>:
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b086      	sub	sp, #24
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
 8012d18:	2300      	movs	r3, #0
 8012d1a:	75fb      	strb	r3, [r7, #23]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d101      	bne.n	8012d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012d26:	2302      	movs	r3, #2
 8012d28:	e0ff      	b.n	8012f2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2b14      	cmp	r3, #20
 8012d36:	f200 80f0 	bhi.w	8012f1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d40:	08012d95 	.word	0x08012d95
 8012d44:	08012f1b 	.word	0x08012f1b
 8012d48:	08012f1b 	.word	0x08012f1b
 8012d4c:	08012f1b 	.word	0x08012f1b
 8012d50:	08012dd5 	.word	0x08012dd5
 8012d54:	08012f1b 	.word	0x08012f1b
 8012d58:	08012f1b 	.word	0x08012f1b
 8012d5c:	08012f1b 	.word	0x08012f1b
 8012d60:	08012e17 	.word	0x08012e17
 8012d64:	08012f1b 	.word	0x08012f1b
 8012d68:	08012f1b 	.word	0x08012f1b
 8012d6c:	08012f1b 	.word	0x08012f1b
 8012d70:	08012e57 	.word	0x08012e57
 8012d74:	08012f1b 	.word	0x08012f1b
 8012d78:	08012f1b 	.word	0x08012f1b
 8012d7c:	08012f1b 	.word	0x08012f1b
 8012d80:	08012e99 	.word	0x08012e99
 8012d84:	08012f1b 	.word	0x08012f1b
 8012d88:	08012f1b 	.word	0x08012f1b
 8012d8c:	08012f1b 	.word	0x08012f1b
 8012d90:	08012ed9 	.word	0x08012ed9
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	68b9      	ldr	r1, [r7, #8]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f000 fafa 	bl	8013394 <TIM_OC1_SetConfig>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	699a      	ldr	r2, [r3, #24]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f042 0208 	orr.w	r2, r2, #8
 8012dae:	619a      	str	r2, [r3, #24]
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	699a      	ldr	r2, [r3, #24]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f022 0204 	bic.w	r2, r2, #4
 8012dbe:	619a      	str	r2, [r3, #24]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	6999      	ldr	r1, [r3, #24]
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	691a      	ldr	r2, [r3, #16]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	430a      	orrs	r2, r1
 8012dd0:	619a      	str	r2, [r3, #24]
 8012dd2:	e0a5      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	68b9      	ldr	r1, [r7, #8]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fb6a 	bl	80134b4 <TIM_OC2_SetConfig>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	699a      	ldr	r2, [r3, #24]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012dee:	619a      	str	r2, [r3, #24]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	699a      	ldr	r2, [r3, #24]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012dfe:	619a      	str	r2, [r3, #24]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	6999      	ldr	r1, [r3, #24]
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	021a      	lsls	r2, r3, #8
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	430a      	orrs	r2, r1
 8012e12:	619a      	str	r2, [r3, #24]
 8012e14:	e084      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68b9      	ldr	r1, [r7, #8]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f000 fbd3 	bl	80135c8 <TIM_OC3_SetConfig>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	69da      	ldr	r2, [r3, #28]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f042 0208 	orr.w	r2, r2, #8
 8012e30:	61da      	str	r2, [r3, #28]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	69da      	ldr	r2, [r3, #28]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f022 0204 	bic.w	r2, r2, #4
 8012e40:	61da      	str	r2, [r3, #28]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	69d9      	ldr	r1, [r3, #28]
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	691a      	ldr	r2, [r3, #16]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	430a      	orrs	r2, r1
 8012e52:	61da      	str	r2, [r3, #28]
 8012e54:	e064      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	68b9      	ldr	r1, [r7, #8]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f000 fc3b 	bl	80136d8 <TIM_OC4_SetConfig>
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	69da      	ldr	r2, [r3, #28]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012e70:	61da      	str	r2, [r3, #28]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	69da      	ldr	r2, [r3, #28]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012e80:	61da      	str	r2, [r3, #28]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	69d9      	ldr	r1, [r3, #28]
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	021a      	lsls	r2, r3, #8
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	430a      	orrs	r2, r1
 8012e94:	61da      	str	r2, [r3, #28]
 8012e96:	e043      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68b9      	ldr	r1, [r7, #8]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f000 fc84 	bl	80137ac <TIM_OC5_SetConfig>
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f042 0208 	orr.w	r2, r2, #8
 8012eb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f022 0204 	bic.w	r2, r2, #4
 8012ec2:	655a      	str	r2, [r3, #84]	@ 0x54
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	691a      	ldr	r2, [r3, #16]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	430a      	orrs	r2, r1
 8012ed4:	655a      	str	r2, [r3, #84]	@ 0x54
 8012ed6:	e023      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68b9      	ldr	r1, [r7, #8]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f000 fcc8 	bl	8013874 <TIM_OC6_SetConfig>
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012ef2:	655a      	str	r2, [r3, #84]	@ 0x54
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	691b      	ldr	r3, [r3, #16]
 8012f0e:	021a      	lsls	r2, r3, #8
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	430a      	orrs	r2, r1
 8012f16:	655a      	str	r2, [r3, #84]	@ 0x54
 8012f18:	e002      	b.n	8012f20 <HAL_TIM_PWM_ConfigChannel+0x214>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	75fb      	strb	r3, [r7, #23]
 8012f1e:	bf00      	nop
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012f28:	7dfb      	ldrb	r3, [r7, #23]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3718      	adds	r7, #24
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop

08012f34 <HAL_TIM_ConfigClockSource>:
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
 8012f3e:	2300      	movs	r3, #0
 8012f40:	73fb      	strb	r3, [r7, #15]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d101      	bne.n	8012f50 <HAL_TIM_ConfigClockSource+0x1c>
 8012f4c:	2302      	movs	r3, #2
 8012f4e:	e0dc      	b.n	801310a <HAL_TIM_ConfigClockSource+0x1d6>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2201      	movs	r2, #1
 8012f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2202      	movs	r2, #2
 8012f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	689b      	ldr	r3, [r3, #8]
 8012f66:	60bb      	str	r3, [r7, #8]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8013114 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	60bb      	str	r3, [r7, #8]
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012f76:	60bb      	str	r3, [r7, #8]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	609a      	str	r2, [r3, #8]
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	4a64      	ldr	r2, [pc, #400]	@ (8013118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	f000 80a9 	beq.w	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8012f8c:	4a62      	ldr	r2, [pc, #392]	@ (8013118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	f200 80ae 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f94:	4a61      	ldr	r2, [pc, #388]	@ (801311c <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	f000 80a1 	beq.w	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8012f9c:	4a5f      	ldr	r2, [pc, #380]	@ (801311c <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	f200 80a6 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8013120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	f000 8099 	beq.w	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8012fac:	4a5c      	ldr	r2, [pc, #368]	@ (8013120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	f200 809e 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012fb8:	f000 8091 	beq.w	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8012fbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012fc0:	f200 8096 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fc8:	f000 8089 	beq.w	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8012fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fd0:	f200 808e 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012fd8:	d03e      	beq.n	8013058 <HAL_TIM_ConfigClockSource+0x124>
 8012fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012fde:	f200 8087 	bhi.w	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012fe6:	f000 8086 	beq.w	80130f6 <HAL_TIM_ConfigClockSource+0x1c2>
 8012fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012fee:	d87f      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ff0:	2b70      	cmp	r3, #112	@ 0x70
 8012ff2:	d01a      	beq.n	801302a <HAL_TIM_ConfigClockSource+0xf6>
 8012ff4:	2b70      	cmp	r3, #112	@ 0x70
 8012ff6:	d87b      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ff8:	2b60      	cmp	r3, #96	@ 0x60
 8012ffa:	d050      	beq.n	801309e <HAL_TIM_ConfigClockSource+0x16a>
 8012ffc:	2b60      	cmp	r3, #96	@ 0x60
 8012ffe:	d877      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013000:	2b50      	cmp	r3, #80	@ 0x50
 8013002:	d03c      	beq.n	801307e <HAL_TIM_ConfigClockSource+0x14a>
 8013004:	2b50      	cmp	r3, #80	@ 0x50
 8013006:	d873      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013008:	2b40      	cmp	r3, #64	@ 0x40
 801300a:	d058      	beq.n	80130be <HAL_TIM_ConfigClockSource+0x18a>
 801300c:	2b40      	cmp	r3, #64	@ 0x40
 801300e:	d86f      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013010:	2b30      	cmp	r3, #48	@ 0x30
 8013012:	d064      	beq.n	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8013014:	2b30      	cmp	r3, #48	@ 0x30
 8013016:	d86b      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013018:	2b20      	cmp	r3, #32
 801301a:	d060      	beq.n	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 801301c:	2b20      	cmp	r3, #32
 801301e:	d867      	bhi.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013020:	2b00      	cmp	r3, #0
 8013022:	d05c      	beq.n	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8013024:	2b10      	cmp	r3, #16
 8013026:	d05a      	beq.n	80130de <HAL_TIM_ConfigClockSource+0x1aa>
 8013028:	e062      	b.n	80130f0 <HAL_TIM_ConfigClockSource+0x1bc>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6818      	ldr	r0, [r3, #0]
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	6899      	ldr	r1, [r3, #8]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	685a      	ldr	r2, [r3, #4]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	f000 fde9 	bl	8013c10 <TIM_ETR_SetConfig>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	689b      	ldr	r3, [r3, #8]
 8013044:	60bb      	str	r3, [r7, #8]
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801304c:	60bb      	str	r3, [r7, #8]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	68ba      	ldr	r2, [r7, #8]
 8013054:	609a      	str	r2, [r3, #8]
 8013056:	e04f      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6818      	ldr	r0, [r3, #0]
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	6899      	ldr	r1, [r3, #8]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	685a      	ldr	r2, [r3, #4]
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	f000 fdd2 	bl	8013c10 <TIM_ETR_SetConfig>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	689a      	ldr	r2, [r3, #8]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801307a:	609a      	str	r2, [r3, #8]
 801307c:	e03c      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6818      	ldr	r0, [r3, #0]
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	6859      	ldr	r1, [r3, #4]
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	461a      	mov	r2, r3
 801308c:	f000 fd42 	bl	8013b14 <TIM_TI1_ConfigInputStage>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	2150      	movs	r1, #80	@ 0x50
 8013096:	4618      	mov	r0, r3
 8013098:	f000 fd9c 	bl	8013bd4 <TIM_ITRx_SetConfig>
 801309c:	e02c      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6818      	ldr	r0, [r3, #0]
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	6859      	ldr	r1, [r3, #4]
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	461a      	mov	r2, r3
 80130ac:	f000 fd61 	bl	8013b72 <TIM_TI2_ConfigInputStage>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2160      	movs	r1, #96	@ 0x60
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fd8c 	bl	8013bd4 <TIM_ITRx_SetConfig>
 80130bc:	e01c      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	6859      	ldr	r1, [r3, #4]
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	461a      	mov	r2, r3
 80130cc:	f000 fd22 	bl	8013b14 <TIM_TI1_ConfigInputStage>
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2140      	movs	r1, #64	@ 0x40
 80130d6:	4618      	mov	r0, r3
 80130d8:	f000 fd7c 	bl	8013bd4 <TIM_ITRx_SetConfig>
 80130dc:	e00c      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4619      	mov	r1, r3
 80130e8:	4610      	mov	r0, r2
 80130ea:	f000 fd73 	bl	8013bd4 <TIM_ITRx_SetConfig>
 80130ee:	e003      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 80130f0:	2301      	movs	r3, #1
 80130f2:	73fb      	strb	r3, [r7, #15]
 80130f4:	e000      	b.n	80130f8 <HAL_TIM_ConfigClockSource+0x1c4>
 80130f6:	bf00      	nop
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013108:	7bfb      	ldrb	r3, [r7, #15]
 801310a:	4618      	mov	r0, r3
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	ffceff88 	.word	0xffceff88
 8013118:	00100040 	.word	0x00100040
 801311c:	00100030 	.word	0x00100030
 8013120:	00100020 	.word	0x00100020

08013124 <HAL_TIM_SlaveConfigSynchro>:
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013134:	2b01      	cmp	r3, #1
 8013136:	d101      	bne.n	801313c <HAL_TIM_SlaveConfigSynchro+0x18>
 8013138:	2302      	movs	r3, #2
 801313a:	e031      	b.n	80131a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2201      	movs	r2, #1
 8013140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2202      	movs	r2, #2
 8013148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801314c:	6839      	ldr	r1, [r7, #0]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fbf6 	bl	8013940 <TIM_SlaveTimer_SetConfig>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d009      	beq.n	801316e <HAL_TIM_SlaveConfigSynchro+0x4a>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2201      	movs	r2, #1
 801315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801316a:	2301      	movs	r3, #1
 801316c:	e018      	b.n	80131a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	68da      	ldr	r2, [r3, #12]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	68da      	ldr	r2, [r3, #12]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801318c:	60da      	str	r2, [r3, #12]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2201      	movs	r2, #1
 8013192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801319e:	2300      	movs	r3, #0
 80131a0:	4618      	mov	r0, r3
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	bf00      	nop
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <HAL_TIM_OC_DelayElapsedCallback>:
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	bf00      	nop
 80131c6:	370c      	adds	r7, #12
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr

080131d0 <HAL_TIM_IC_CaptureCallback>:
 80131d0:	b480      	push	{r7}
 80131d2:	b083      	sub	sp, #12
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	bf00      	nop
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	bf00      	nop
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	bf00      	nop
 8013202:	370c      	adds	r7, #12
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr

0801320c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 801320c:	b480      	push	{r7}
 801320e:	b083      	sub	sp, #12
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	bf00      	nop
 8013216:	370c      	adds	r7, #12
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr

08013220 <HAL_TIM_TriggerHalfCpltCallback>:
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	bf00      	nop
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <HAL_TIM_ErrorCallback>:
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	bf00      	nop
 801323e:	370c      	adds	r7, #12
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr

08013248 <TIM_Base_SetConfig>:
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	60fb      	str	r3, [r7, #12]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	4a46      	ldr	r2, [pc, #280]	@ (8013374 <TIM_Base_SetConfig+0x12c>)
 801325c:	4293      	cmp	r3, r2
 801325e:	d013      	beq.n	8013288 <TIM_Base_SetConfig+0x40>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013266:	d00f      	beq.n	8013288 <TIM_Base_SetConfig+0x40>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	4a43      	ldr	r2, [pc, #268]	@ (8013378 <TIM_Base_SetConfig+0x130>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d00b      	beq.n	8013288 <TIM_Base_SetConfig+0x40>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4a42      	ldr	r2, [pc, #264]	@ (801337c <TIM_Base_SetConfig+0x134>)
 8013274:	4293      	cmp	r3, r2
 8013276:	d007      	beq.n	8013288 <TIM_Base_SetConfig+0x40>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	4a41      	ldr	r2, [pc, #260]	@ (8013380 <TIM_Base_SetConfig+0x138>)
 801327c:	4293      	cmp	r3, r2
 801327e:	d003      	beq.n	8013288 <TIM_Base_SetConfig+0x40>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	4a40      	ldr	r2, [pc, #256]	@ (8013384 <TIM_Base_SetConfig+0x13c>)
 8013284:	4293      	cmp	r3, r2
 8013286:	d108      	bne.n	801329a <TIM_Base_SetConfig+0x52>
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801328e:	60fb      	str	r3, [r7, #12]
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	4313      	orrs	r3, r2
 8013298:	60fb      	str	r3, [r7, #12]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4a35      	ldr	r2, [pc, #212]	@ (8013374 <TIM_Base_SetConfig+0x12c>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d01f      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132a8:	d01b      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	4a32      	ldr	r2, [pc, #200]	@ (8013378 <TIM_Base_SetConfig+0x130>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d017      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4a31      	ldr	r2, [pc, #196]	@ (801337c <TIM_Base_SetConfig+0x134>)
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d013      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4a30      	ldr	r2, [pc, #192]	@ (8013380 <TIM_Base_SetConfig+0x138>)
 80132be:	4293      	cmp	r3, r2
 80132c0:	d00f      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4a2f      	ldr	r2, [pc, #188]	@ (8013384 <TIM_Base_SetConfig+0x13c>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d00b      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4a2e      	ldr	r2, [pc, #184]	@ (8013388 <TIM_Base_SetConfig+0x140>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d007      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4a2d      	ldr	r2, [pc, #180]	@ (801338c <TIM_Base_SetConfig+0x144>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d003      	beq.n	80132e2 <TIM_Base_SetConfig+0x9a>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4a2c      	ldr	r2, [pc, #176]	@ (8013390 <TIM_Base_SetConfig+0x148>)
 80132de:	4293      	cmp	r3, r2
 80132e0:	d108      	bne.n	80132f4 <TIM_Base_SetConfig+0xac>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80132e8:	60fb      	str	r3, [r7, #12]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	68fa      	ldr	r2, [r7, #12]
 80132f0:	4313      	orrs	r3, r2
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	695b      	ldr	r3, [r3, #20]
 80132fe:	4313      	orrs	r3, r2
 8013300:	60fb      	str	r3, [r7, #12]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	689a      	ldr	r2, [r3, #8]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	629a      	str	r2, [r3, #40]	@ 0x28
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	4a16      	ldr	r2, [pc, #88]	@ (8013374 <TIM_Base_SetConfig+0x12c>)
 801331c:	4293      	cmp	r3, r2
 801331e:	d00f      	beq.n	8013340 <TIM_Base_SetConfig+0xf8>
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	4a18      	ldr	r2, [pc, #96]	@ (8013384 <TIM_Base_SetConfig+0x13c>)
 8013324:	4293      	cmp	r3, r2
 8013326:	d00b      	beq.n	8013340 <TIM_Base_SetConfig+0xf8>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4a17      	ldr	r2, [pc, #92]	@ (8013388 <TIM_Base_SetConfig+0x140>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d007      	beq.n	8013340 <TIM_Base_SetConfig+0xf8>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4a16      	ldr	r2, [pc, #88]	@ (801338c <TIM_Base_SetConfig+0x144>)
 8013334:	4293      	cmp	r3, r2
 8013336:	d003      	beq.n	8013340 <TIM_Base_SetConfig+0xf8>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4a15      	ldr	r2, [pc, #84]	@ (8013390 <TIM_Base_SetConfig+0x148>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d103      	bne.n	8013348 <TIM_Base_SetConfig+0x100>
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	691a      	ldr	r2, [r3, #16]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	631a      	str	r2, [r3, #48]	@ 0x30
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2201      	movs	r2, #1
 801334c:	615a      	str	r2, [r3, #20]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	691b      	ldr	r3, [r3, #16]
 8013352:	f003 0301 	and.w	r3, r3, #1
 8013356:	2b01      	cmp	r3, #1
 8013358:	d105      	bne.n	8013366 <TIM_Base_SetConfig+0x11e>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	691b      	ldr	r3, [r3, #16]
 801335e:	f023 0201 	bic.w	r2, r3, #1
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	611a      	str	r2, [r3, #16]
 8013366:	bf00      	nop
 8013368:	3714      	adds	r7, #20
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	40010000 	.word	0x40010000
 8013378:	40000400 	.word	0x40000400
 801337c:	40000800 	.word	0x40000800
 8013380:	40000c00 	.word	0x40000c00
 8013384:	40010400 	.word	0x40010400
 8013388:	40014000 	.word	0x40014000
 801338c:	40014400 	.word	0x40014400
 8013390:	40014800 	.word	0x40014800

08013394 <TIM_OC1_SetConfig>:
 8013394:	b480      	push	{r7}
 8013396:	b087      	sub	sp, #28
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6a1b      	ldr	r3, [r3, #32]
 80133a2:	617b      	str	r3, [r7, #20]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6a1b      	ldr	r3, [r3, #32]
 80133a8:	f023 0201 	bic.w	r2, r3, #1
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	621a      	str	r2, [r3, #32]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	613b      	str	r3, [r7, #16]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	4b37      	ldr	r3, [pc, #220]	@ (801349c <TIM_OC1_SetConfig+0x108>)
 80133c0:	4013      	ands	r3, r2
 80133c2:	60fb      	str	r3, [r7, #12]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f023 0303 	bic.w	r3, r3, #3
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	4313      	orrs	r3, r2
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	f023 0302 	bic.w	r3, r3, #2
 80133dc:	617b      	str	r3, [r7, #20]
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	697a      	ldr	r2, [r7, #20]
 80133e4:	4313      	orrs	r3, r2
 80133e6:	617b      	str	r3, [r7, #20]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4a2d      	ldr	r2, [pc, #180]	@ (80134a0 <TIM_OC1_SetConfig+0x10c>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d00f      	beq.n	8013410 <TIM_OC1_SetConfig+0x7c>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4a2c      	ldr	r2, [pc, #176]	@ (80134a4 <TIM_OC1_SetConfig+0x110>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d00b      	beq.n	8013410 <TIM_OC1_SetConfig+0x7c>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a2b      	ldr	r2, [pc, #172]	@ (80134a8 <TIM_OC1_SetConfig+0x114>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d007      	beq.n	8013410 <TIM_OC1_SetConfig+0x7c>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	4a2a      	ldr	r2, [pc, #168]	@ (80134ac <TIM_OC1_SetConfig+0x118>)
 8013404:	4293      	cmp	r3, r2
 8013406:	d003      	beq.n	8013410 <TIM_OC1_SetConfig+0x7c>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4a29      	ldr	r2, [pc, #164]	@ (80134b0 <TIM_OC1_SetConfig+0x11c>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d10c      	bne.n	801342a <TIM_OC1_SetConfig+0x96>
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	f023 0308 	bic.w	r3, r3, #8
 8013416:	617b      	str	r3, [r7, #20]
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	4313      	orrs	r3, r2
 8013420:	617b      	str	r3, [r7, #20]
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	f023 0304 	bic.w	r3, r3, #4
 8013428:	617b      	str	r3, [r7, #20]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4a1c      	ldr	r2, [pc, #112]	@ (80134a0 <TIM_OC1_SetConfig+0x10c>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d00f      	beq.n	8013452 <TIM_OC1_SetConfig+0xbe>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4a1b      	ldr	r2, [pc, #108]	@ (80134a4 <TIM_OC1_SetConfig+0x110>)
 8013436:	4293      	cmp	r3, r2
 8013438:	d00b      	beq.n	8013452 <TIM_OC1_SetConfig+0xbe>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4a1a      	ldr	r2, [pc, #104]	@ (80134a8 <TIM_OC1_SetConfig+0x114>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d007      	beq.n	8013452 <TIM_OC1_SetConfig+0xbe>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a19      	ldr	r2, [pc, #100]	@ (80134ac <TIM_OC1_SetConfig+0x118>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d003      	beq.n	8013452 <TIM_OC1_SetConfig+0xbe>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4a18      	ldr	r2, [pc, #96]	@ (80134b0 <TIM_OC1_SetConfig+0x11c>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d111      	bne.n	8013476 <TIM_OC1_SetConfig+0xe2>
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013458:	613b      	str	r3, [r7, #16]
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013460:	613b      	str	r3, [r7, #16]
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	695b      	ldr	r3, [r3, #20]
 8013466:	693a      	ldr	r2, [r7, #16]
 8013468:	4313      	orrs	r3, r2
 801346a:	613b      	str	r3, [r7, #16]
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	699b      	ldr	r3, [r3, #24]
 8013470:	693a      	ldr	r2, [r7, #16]
 8013472:	4313      	orrs	r3, r2
 8013474:	613b      	str	r3, [r7, #16]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	693a      	ldr	r2, [r7, #16]
 801347a:	605a      	str	r2, [r3, #4]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	619a      	str	r2, [r3, #24]
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	685a      	ldr	r2, [r3, #4]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	635a      	str	r2, [r3, #52]	@ 0x34
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	697a      	ldr	r2, [r7, #20]
 801348e:	621a      	str	r2, [r3, #32]
 8013490:	bf00      	nop
 8013492:	371c      	adds	r7, #28
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	fffeff8f 	.word	0xfffeff8f
 80134a0:	40010000 	.word	0x40010000
 80134a4:	40010400 	.word	0x40010400
 80134a8:	40014000 	.word	0x40014000
 80134ac:	40014400 	.word	0x40014400
 80134b0:	40014800 	.word	0x40014800

080134b4 <TIM_OC2_SetConfig>:
 80134b4:	b480      	push	{r7}
 80134b6:	b087      	sub	sp, #28
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	617b      	str	r3, [r7, #20]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6a1b      	ldr	r3, [r3, #32]
 80134c8:	f023 0210 	bic.w	r2, r3, #16
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	621a      	str	r2, [r3, #32]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	613b      	str	r3, [r7, #16]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	699b      	ldr	r3, [r3, #24]
 80134da:	60fb      	str	r3, [r7, #12]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	4b34      	ldr	r3, [pc, #208]	@ (80135b0 <TIM_OC2_SetConfig+0xfc>)
 80134e0:	4013      	ands	r3, r2
 80134e2:	60fb      	str	r3, [r7, #12]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80134ea:	60fb      	str	r3, [r7, #12]
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	021b      	lsls	r3, r3, #8
 80134f2:	68fa      	ldr	r2, [r7, #12]
 80134f4:	4313      	orrs	r3, r2
 80134f6:	60fb      	str	r3, [r7, #12]
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f023 0320 	bic.w	r3, r3, #32
 80134fe:	617b      	str	r3, [r7, #20]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	011b      	lsls	r3, r3, #4
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	4313      	orrs	r3, r2
 801350a:	617b      	str	r3, [r7, #20]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4a29      	ldr	r2, [pc, #164]	@ (80135b4 <TIM_OC2_SetConfig+0x100>)
 8013510:	4293      	cmp	r3, r2
 8013512:	d003      	beq.n	801351c <TIM_OC2_SetConfig+0x68>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	4a28      	ldr	r2, [pc, #160]	@ (80135b8 <TIM_OC2_SetConfig+0x104>)
 8013518:	4293      	cmp	r3, r2
 801351a:	d10d      	bne.n	8013538 <TIM_OC2_SetConfig+0x84>
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013522:	617b      	str	r3, [r7, #20]
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	011b      	lsls	r3, r3, #4
 801352a:	697a      	ldr	r2, [r7, #20]
 801352c:	4313      	orrs	r3, r2
 801352e:	617b      	str	r3, [r7, #20]
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4a1e      	ldr	r2, [pc, #120]	@ (80135b4 <TIM_OC2_SetConfig+0x100>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d00f      	beq.n	8013560 <TIM_OC2_SetConfig+0xac>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	4a1d      	ldr	r2, [pc, #116]	@ (80135b8 <TIM_OC2_SetConfig+0x104>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d00b      	beq.n	8013560 <TIM_OC2_SetConfig+0xac>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	4a1c      	ldr	r2, [pc, #112]	@ (80135bc <TIM_OC2_SetConfig+0x108>)
 801354c:	4293      	cmp	r3, r2
 801354e:	d007      	beq.n	8013560 <TIM_OC2_SetConfig+0xac>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	4a1b      	ldr	r2, [pc, #108]	@ (80135c0 <TIM_OC2_SetConfig+0x10c>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d003      	beq.n	8013560 <TIM_OC2_SetConfig+0xac>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4a1a      	ldr	r2, [pc, #104]	@ (80135c4 <TIM_OC2_SetConfig+0x110>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d113      	bne.n	8013588 <TIM_OC2_SetConfig+0xd4>
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013566:	613b      	str	r3, [r7, #16]
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801356e:	613b      	str	r3, [r7, #16]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	695b      	ldr	r3, [r3, #20]
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	693a      	ldr	r2, [r7, #16]
 8013578:	4313      	orrs	r3, r2
 801357a:	613b      	str	r3, [r7, #16]
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	693a      	ldr	r2, [r7, #16]
 8013584:	4313      	orrs	r3, r2
 8013586:	613b      	str	r3, [r7, #16]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	693a      	ldr	r2, [r7, #16]
 801358c:	605a      	str	r2, [r3, #4]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	619a      	str	r2, [r3, #24]
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	685a      	ldr	r2, [r3, #4]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	639a      	str	r2, [r3, #56]	@ 0x38
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	697a      	ldr	r2, [r7, #20]
 80135a0:	621a      	str	r2, [r3, #32]
 80135a2:	bf00      	nop
 80135a4:	371c      	adds	r7, #28
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop
 80135b0:	feff8fff 	.word	0xfeff8fff
 80135b4:	40010000 	.word	0x40010000
 80135b8:	40010400 	.word	0x40010400
 80135bc:	40014000 	.word	0x40014000
 80135c0:	40014400 	.word	0x40014400
 80135c4:	40014800 	.word	0x40014800

080135c8 <TIM_OC3_SetConfig>:
 80135c8:	b480      	push	{r7}
 80135ca:	b087      	sub	sp, #28
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6a1b      	ldr	r3, [r3, #32]
 80135d6:	617b      	str	r3, [r7, #20]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6a1b      	ldr	r3, [r3, #32]
 80135dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	621a      	str	r2, [r3, #32]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	613b      	str	r3, [r7, #16]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	69db      	ldr	r3, [r3, #28]
 80135ee:	60fb      	str	r3, [r7, #12]
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	4b33      	ldr	r3, [pc, #204]	@ (80136c0 <TIM_OC3_SetConfig+0xf8>)
 80135f4:	4013      	ands	r3, r2
 80135f6:	60fb      	str	r3, [r7, #12]
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	f023 0303 	bic.w	r3, r3, #3
 80135fe:	60fb      	str	r3, [r7, #12]
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	4313      	orrs	r3, r2
 8013608:	60fb      	str	r3, [r7, #12]
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013610:	617b      	str	r3, [r7, #20]
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	021b      	lsls	r3, r3, #8
 8013618:	697a      	ldr	r2, [r7, #20]
 801361a:	4313      	orrs	r3, r2
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4a28      	ldr	r2, [pc, #160]	@ (80136c4 <TIM_OC3_SetConfig+0xfc>)
 8013622:	4293      	cmp	r3, r2
 8013624:	d003      	beq.n	801362e <TIM_OC3_SetConfig+0x66>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4a27      	ldr	r2, [pc, #156]	@ (80136c8 <TIM_OC3_SetConfig+0x100>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d10d      	bne.n	801364a <TIM_OC3_SetConfig+0x82>
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013634:	617b      	str	r3, [r7, #20]
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	021b      	lsls	r3, r3, #8
 801363c:	697a      	ldr	r2, [r7, #20]
 801363e:	4313      	orrs	r3, r2
 8013640:	617b      	str	r3, [r7, #20]
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013648:	617b      	str	r3, [r7, #20]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a1d      	ldr	r2, [pc, #116]	@ (80136c4 <TIM_OC3_SetConfig+0xfc>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d00f      	beq.n	8013672 <TIM_OC3_SetConfig+0xaa>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4a1c      	ldr	r2, [pc, #112]	@ (80136c8 <TIM_OC3_SetConfig+0x100>)
 8013656:	4293      	cmp	r3, r2
 8013658:	d00b      	beq.n	8013672 <TIM_OC3_SetConfig+0xaa>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4a1b      	ldr	r2, [pc, #108]	@ (80136cc <TIM_OC3_SetConfig+0x104>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d007      	beq.n	8013672 <TIM_OC3_SetConfig+0xaa>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4a1a      	ldr	r2, [pc, #104]	@ (80136d0 <TIM_OC3_SetConfig+0x108>)
 8013666:	4293      	cmp	r3, r2
 8013668:	d003      	beq.n	8013672 <TIM_OC3_SetConfig+0xaa>
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	4a19      	ldr	r2, [pc, #100]	@ (80136d4 <TIM_OC3_SetConfig+0x10c>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d113      	bne.n	801369a <TIM_OC3_SetConfig+0xd2>
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013678:	613b      	str	r3, [r7, #16]
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013680:	613b      	str	r3, [r7, #16]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	695b      	ldr	r3, [r3, #20]
 8013686:	011b      	lsls	r3, r3, #4
 8013688:	693a      	ldr	r2, [r7, #16]
 801368a:	4313      	orrs	r3, r2
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	699b      	ldr	r3, [r3, #24]
 8013692:	011b      	lsls	r3, r3, #4
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	4313      	orrs	r3, r2
 8013698:	613b      	str	r3, [r7, #16]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	693a      	ldr	r2, [r7, #16]
 801369e:	605a      	str	r2, [r3, #4]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	61da      	str	r2, [r3, #28]
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	685a      	ldr	r2, [r3, #4]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	697a      	ldr	r2, [r7, #20]
 80136b2:	621a      	str	r2, [r3, #32]
 80136b4:	bf00      	nop
 80136b6:	371c      	adds	r7, #28
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr
 80136c0:	fffeff8f 	.word	0xfffeff8f
 80136c4:	40010000 	.word	0x40010000
 80136c8:	40010400 	.word	0x40010400
 80136cc:	40014000 	.word	0x40014000
 80136d0:	40014400 	.word	0x40014400
 80136d4:	40014800 	.word	0x40014800

080136d8 <TIM_OC4_SetConfig>:
 80136d8:	b480      	push	{r7}
 80136da:	b087      	sub	sp, #28
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6a1b      	ldr	r3, [r3, #32]
 80136e6:	613b      	str	r3, [r7, #16]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6a1b      	ldr	r3, [r3, #32]
 80136ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	621a      	str	r2, [r3, #32]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	617b      	str	r3, [r7, #20]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	69db      	ldr	r3, [r3, #28]
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	68fa      	ldr	r2, [r7, #12]
 8013702:	4b24      	ldr	r3, [pc, #144]	@ (8013794 <TIM_OC4_SetConfig+0xbc>)
 8013704:	4013      	ands	r3, r2
 8013706:	60fb      	str	r3, [r7, #12]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801370e:	60fb      	str	r3, [r7, #12]
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	021b      	lsls	r3, r3, #8
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	4313      	orrs	r3, r2
 801371a:	60fb      	str	r3, [r7, #12]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013722:	613b      	str	r3, [r7, #16]
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	689b      	ldr	r3, [r3, #8]
 8013728:	031b      	lsls	r3, r3, #12
 801372a:	693a      	ldr	r2, [r7, #16]
 801372c:	4313      	orrs	r3, r2
 801372e:	613b      	str	r3, [r7, #16]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4a19      	ldr	r2, [pc, #100]	@ (8013798 <TIM_OC4_SetConfig+0xc0>)
 8013734:	4293      	cmp	r3, r2
 8013736:	d00f      	beq.n	8013758 <TIM_OC4_SetConfig+0x80>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	4a18      	ldr	r2, [pc, #96]	@ (801379c <TIM_OC4_SetConfig+0xc4>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d00b      	beq.n	8013758 <TIM_OC4_SetConfig+0x80>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	4a17      	ldr	r2, [pc, #92]	@ (80137a0 <TIM_OC4_SetConfig+0xc8>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d007      	beq.n	8013758 <TIM_OC4_SetConfig+0x80>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	4a16      	ldr	r2, [pc, #88]	@ (80137a4 <TIM_OC4_SetConfig+0xcc>)
 801374c:	4293      	cmp	r3, r2
 801374e:	d003      	beq.n	8013758 <TIM_OC4_SetConfig+0x80>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4a15      	ldr	r2, [pc, #84]	@ (80137a8 <TIM_OC4_SetConfig+0xd0>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d109      	bne.n	801376c <TIM_OC4_SetConfig+0x94>
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801375e:	617b      	str	r3, [r7, #20]
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	695b      	ldr	r3, [r3, #20]
 8013764:	019b      	lsls	r3, r3, #6
 8013766:	697a      	ldr	r2, [r7, #20]
 8013768:	4313      	orrs	r3, r2
 801376a:	617b      	str	r3, [r7, #20]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	697a      	ldr	r2, [r7, #20]
 8013770:	605a      	str	r2, [r3, #4]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	61da      	str	r2, [r3, #28]
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	685a      	ldr	r2, [r3, #4]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	641a      	str	r2, [r3, #64]	@ 0x40
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	693a      	ldr	r2, [r7, #16]
 8013784:	621a      	str	r2, [r3, #32]
 8013786:	bf00      	nop
 8013788:	371c      	adds	r7, #28
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop
 8013794:	feff8fff 	.word	0xfeff8fff
 8013798:	40010000 	.word	0x40010000
 801379c:	40010400 	.word	0x40010400
 80137a0:	40014000 	.word	0x40014000
 80137a4:	40014400 	.word	0x40014400
 80137a8:	40014800 	.word	0x40014800

080137ac <TIM_OC5_SetConfig>:
 80137ac:	b480      	push	{r7}
 80137ae:	b087      	sub	sp, #28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6a1b      	ldr	r3, [r3, #32]
 80137ba:	613b      	str	r3, [r7, #16]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6a1b      	ldr	r3, [r3, #32]
 80137c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	621a      	str	r2, [r3, #32]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	617b      	str	r3, [r7, #20]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137d2:	60fb      	str	r3, [r7, #12]
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	4b21      	ldr	r3, [pc, #132]	@ (801385c <TIM_OC5_SetConfig+0xb0>)
 80137d8:	4013      	ands	r3, r2
 80137da:	60fb      	str	r3, [r7, #12]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	4313      	orrs	r3, r2
 80137e4:	60fb      	str	r3, [r7, #12]
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80137ec:	613b      	str	r3, [r7, #16]
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	689b      	ldr	r3, [r3, #8]
 80137f2:	041b      	lsls	r3, r3, #16
 80137f4:	693a      	ldr	r2, [r7, #16]
 80137f6:	4313      	orrs	r3, r2
 80137f8:	613b      	str	r3, [r7, #16]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4a18      	ldr	r2, [pc, #96]	@ (8013860 <TIM_OC5_SetConfig+0xb4>)
 80137fe:	4293      	cmp	r3, r2
 8013800:	d00f      	beq.n	8013822 <TIM_OC5_SetConfig+0x76>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4a17      	ldr	r2, [pc, #92]	@ (8013864 <TIM_OC5_SetConfig+0xb8>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d00b      	beq.n	8013822 <TIM_OC5_SetConfig+0x76>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	4a16      	ldr	r2, [pc, #88]	@ (8013868 <TIM_OC5_SetConfig+0xbc>)
 801380e:	4293      	cmp	r3, r2
 8013810:	d007      	beq.n	8013822 <TIM_OC5_SetConfig+0x76>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4a15      	ldr	r2, [pc, #84]	@ (801386c <TIM_OC5_SetConfig+0xc0>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d003      	beq.n	8013822 <TIM_OC5_SetConfig+0x76>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4a14      	ldr	r2, [pc, #80]	@ (8013870 <TIM_OC5_SetConfig+0xc4>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d109      	bne.n	8013836 <TIM_OC5_SetConfig+0x8a>
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013828:	617b      	str	r3, [r7, #20]
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	695b      	ldr	r3, [r3, #20]
 801382e:	021b      	lsls	r3, r3, #8
 8013830:	697a      	ldr	r2, [r7, #20]
 8013832:	4313      	orrs	r3, r2
 8013834:	617b      	str	r3, [r7, #20]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	605a      	str	r2, [r3, #4]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	68fa      	ldr	r2, [r7, #12]
 8013840:	655a      	str	r2, [r3, #84]	@ 0x54
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	685a      	ldr	r2, [r3, #4]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	659a      	str	r2, [r3, #88]	@ 0x58
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	693a      	ldr	r2, [r7, #16]
 801384e:	621a      	str	r2, [r3, #32]
 8013850:	bf00      	nop
 8013852:	371c      	adds	r7, #28
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr
 801385c:	fffeff8f 	.word	0xfffeff8f
 8013860:	40010000 	.word	0x40010000
 8013864:	40010400 	.word	0x40010400
 8013868:	40014000 	.word	0x40014000
 801386c:	40014400 	.word	0x40014400
 8013870:	40014800 	.word	0x40014800

08013874 <TIM_OC6_SetConfig>:
 8013874:	b480      	push	{r7}
 8013876:	b087      	sub	sp, #28
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6a1b      	ldr	r3, [r3, #32]
 8013882:	613b      	str	r3, [r7, #16]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6a1b      	ldr	r3, [r3, #32]
 8013888:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	621a      	str	r2, [r3, #32]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	617b      	str	r3, [r7, #20]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801389a:	60fb      	str	r3, [r7, #12]
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	4b22      	ldr	r3, [pc, #136]	@ (8013928 <TIM_OC6_SetConfig+0xb4>)
 80138a0:	4013      	ands	r3, r2
 80138a2:	60fb      	str	r3, [r7, #12]
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	021b      	lsls	r3, r3, #8
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	4313      	orrs	r3, r2
 80138ae:	60fb      	str	r3, [r7, #12]
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80138b6:	613b      	str	r3, [r7, #16]
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	051b      	lsls	r3, r3, #20
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	4313      	orrs	r3, r2
 80138c2:	613b      	str	r3, [r7, #16]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4a19      	ldr	r2, [pc, #100]	@ (801392c <TIM_OC6_SetConfig+0xb8>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d00f      	beq.n	80138ec <TIM_OC6_SetConfig+0x78>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a18      	ldr	r2, [pc, #96]	@ (8013930 <TIM_OC6_SetConfig+0xbc>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d00b      	beq.n	80138ec <TIM_OC6_SetConfig+0x78>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4a17      	ldr	r2, [pc, #92]	@ (8013934 <TIM_OC6_SetConfig+0xc0>)
 80138d8:	4293      	cmp	r3, r2
 80138da:	d007      	beq.n	80138ec <TIM_OC6_SetConfig+0x78>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4a16      	ldr	r2, [pc, #88]	@ (8013938 <TIM_OC6_SetConfig+0xc4>)
 80138e0:	4293      	cmp	r3, r2
 80138e2:	d003      	beq.n	80138ec <TIM_OC6_SetConfig+0x78>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4a15      	ldr	r2, [pc, #84]	@ (801393c <TIM_OC6_SetConfig+0xc8>)
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d109      	bne.n	8013900 <TIM_OC6_SetConfig+0x8c>
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	695b      	ldr	r3, [r3, #20]
 80138f8:	029b      	lsls	r3, r3, #10
 80138fa:	697a      	ldr	r2, [r7, #20]
 80138fc:	4313      	orrs	r3, r2
 80138fe:	617b      	str	r3, [r7, #20]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	697a      	ldr	r2, [r7, #20]
 8013904:	605a      	str	r2, [r3, #4]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	655a      	str	r2, [r3, #84]	@ 0x54
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	685a      	ldr	r2, [r3, #4]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	693a      	ldr	r2, [r7, #16]
 8013918:	621a      	str	r2, [r3, #32]
 801391a:	bf00      	nop
 801391c:	371c      	adds	r7, #28
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop
 8013928:	feff8fff 	.word	0xfeff8fff
 801392c:	40010000 	.word	0x40010000
 8013930:	40010400 	.word	0x40010400
 8013934:	40014000 	.word	0x40014000
 8013938:	40014400 	.word	0x40014400
 801393c:	40014800 	.word	0x40014800

08013940 <TIM_SlaveTimer_SetConfig>:
 8013940:	b580      	push	{r7, lr}
 8013942:	b086      	sub	sp, #24
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
 801394a:	2300      	movs	r3, #0
 801394c:	75fb      	strb	r3, [r7, #23]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	613b      	str	r3, [r7, #16]
 8013956:	693a      	ldr	r2, [r7, #16]
 8013958:	4b65      	ldr	r3, [pc, #404]	@ (8013af0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 801395a:	4013      	ands	r3, r2
 801395c:	613b      	str	r3, [r7, #16]
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	693a      	ldr	r2, [r7, #16]
 8013964:	4313      	orrs	r3, r2
 8013966:	613b      	str	r3, [r7, #16]
 8013968:	693a      	ldr	r2, [r7, #16]
 801396a:	4b62      	ldr	r3, [pc, #392]	@ (8013af4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 801396c:	4013      	ands	r3, r2
 801396e:	613b      	str	r3, [r7, #16]
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	693a      	ldr	r2, [r7, #16]
 8013976:	4313      	orrs	r3, r2
 8013978:	613b      	str	r3, [r7, #16]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	693a      	ldr	r2, [r7, #16]
 8013980:	609a      	str	r2, [r3, #8]
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	685b      	ldr	r3, [r3, #4]
 8013986:	4a5c      	ldr	r2, [pc, #368]	@ (8013af8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8013988:	4293      	cmp	r3, r2
 801398a:	f000 80ab 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801398e:	4a5a      	ldr	r2, [pc, #360]	@ (8013af8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8013990:	4293      	cmp	r3, r2
 8013992:	f200 80a4 	bhi.w	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801399a:	f000 80a3 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801399e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80139a2:	f200 809c 	bhi.w	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139a6:	4a55      	ldr	r2, [pc, #340]	@ (8013afc <TIM_SlaveTimer_SetConfig+0x1bc>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	f000 809b 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139ae:	4a53      	ldr	r2, [pc, #332]	@ (8013afc <TIM_SlaveTimer_SetConfig+0x1bc>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	f200 8094 	bhi.w	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139b6:	4a52      	ldr	r2, [pc, #328]	@ (8013b00 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80139b8:	4293      	cmp	r3, r2
 80139ba:	f000 8093 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139be:	4a50      	ldr	r2, [pc, #320]	@ (8013b00 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80139c0:	4293      	cmp	r3, r2
 80139c2:	f200 808c 	bhi.w	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139c6:	4a4f      	ldr	r2, [pc, #316]	@ (8013b04 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80139c8:	4293      	cmp	r3, r2
 80139ca:	f000 808b 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139ce:	4a4d      	ldr	r2, [pc, #308]	@ (8013b04 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	f200 8084 	bhi.w	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139d6:	4a4c      	ldr	r2, [pc, #304]	@ (8013b08 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	f000 8083 	beq.w	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139de:	4a4a      	ldr	r2, [pc, #296]	@ (8013b08 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d87c      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139e4:	4a49      	ldr	r2, [pc, #292]	@ (8013b0c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d07c      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139ea:	4a48      	ldr	r2, [pc, #288]	@ (8013b0c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d876      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139f0:	4a47      	ldr	r2, [pc, #284]	@ (8013b10 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d076      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139f6:	4a46      	ldr	r2, [pc, #280]	@ (8013b10 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d870      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 80139fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013a00:	d070      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a02:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013a06:	d86a      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013a0c:	d06a      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013a12:	d864      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a14:	2b70      	cmp	r3, #112	@ 0x70
 8013a16:	d01a      	beq.n	8013a4e <TIM_SlaveTimer_SetConfig+0x10e>
 8013a18:	2b70      	cmp	r3, #112	@ 0x70
 8013a1a:	d860      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a1c:	2b60      	cmp	r3, #96	@ 0x60
 8013a1e:	d054      	beq.n	8013aca <TIM_SlaveTimer_SetConfig+0x18a>
 8013a20:	2b60      	cmp	r3, #96	@ 0x60
 8013a22:	d85c      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a24:	2b50      	cmp	r3, #80	@ 0x50
 8013a26:	d046      	beq.n	8013ab6 <TIM_SlaveTimer_SetConfig+0x176>
 8013a28:	2b50      	cmp	r3, #80	@ 0x50
 8013a2a:	d858      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a2c:	2b40      	cmp	r3, #64	@ 0x40
 8013a2e:	d019      	beq.n	8013a64 <TIM_SlaveTimer_SetConfig+0x124>
 8013a30:	2b40      	cmp	r3, #64	@ 0x40
 8013a32:	d854      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a34:	2b30      	cmp	r3, #48	@ 0x30
 8013a36:	d055      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a38:	2b30      	cmp	r3, #48	@ 0x30
 8013a3a:	d850      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a3c:	2b20      	cmp	r3, #32
 8013a3e:	d051      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a40:	2b20      	cmp	r3, #32
 8013a42:	d84c      	bhi.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d04d      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a48:	2b10      	cmp	r3, #16
 8013a4a:	d04b      	beq.n	8013ae4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013a4c:	e047      	b.n	8013ade <TIM_SlaveTimer_SetConfig+0x19e>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6818      	ldr	r0, [r3, #0]
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	68d9      	ldr	r1, [r3, #12]
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	689a      	ldr	r2, [r3, #8]
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	691b      	ldr	r3, [r3, #16]
 8013a5e:	f000 f8d7 	bl	8013c10 <TIM_ETR_SetConfig>
 8013a62:	e040      	b.n	8013ae6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	2b05      	cmp	r3, #5
 8013a6a:	d101      	bne.n	8013a70 <TIM_SlaveTimer_SetConfig+0x130>
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	e03b      	b.n	8013ae8 <TIM_SlaveTimer_SetConfig+0x1a8>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	6a1b      	ldr	r3, [r3, #32]
 8013a76:	60fb      	str	r3, [r7, #12]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	6a1a      	ldr	r2, [r3, #32]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	f022 0201 	bic.w	r2, r2, #1
 8013a86:	621a      	str	r2, [r3, #32]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	699b      	ldr	r3, [r3, #24]
 8013a8e:	60bb      	str	r3, [r7, #8]
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013a96:	60bb      	str	r3, [r7, #8]
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	691b      	ldr	r3, [r3, #16]
 8013a9c:	011b      	lsls	r3, r3, #4
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	4313      	orrs	r3, r2
 8013aa2:	60bb      	str	r3, [r7, #8]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	68ba      	ldr	r2, [r7, #8]
 8013aaa:	619a      	str	r2, [r3, #24]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	68fa      	ldr	r2, [r7, #12]
 8013ab2:	621a      	str	r2, [r3, #32]
 8013ab4:	e017      	b.n	8013ae6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6818      	ldr	r0, [r3, #0]
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	6899      	ldr	r1, [r3, #8]
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	f000 f826 	bl	8013b14 <TIM_TI1_ConfigInputStage>
 8013ac8:	e00d      	b.n	8013ae6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6818      	ldr	r0, [r3, #0]
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	6899      	ldr	r1, [r3, #8]
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	f000 f84b 	bl	8013b72 <TIM_TI2_ConfigInputStage>
 8013adc:	e003      	b.n	8013ae6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8013ade:	2301      	movs	r3, #1
 8013ae0:	75fb      	strb	r3, [r7, #23]
 8013ae2:	e000      	b.n	8013ae6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8013ae4:	bf00      	nop
 8013ae6:	7dfb      	ldrb	r3, [r7, #23]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3718      	adds	r7, #24
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	ffcfff8f 	.word	0xffcfff8f
 8013af4:	fffefff8 	.word	0xfffefff8
 8013af8:	00200010 	.word	0x00200010
 8013afc:	00100070 	.word	0x00100070
 8013b00:	00100060 	.word	0x00100060
 8013b04:	00100050 	.word	0x00100050
 8013b08:	00100040 	.word	0x00100040
 8013b0c:	00100030 	.word	0x00100030
 8013b10:	00100020 	.word	0x00100020

08013b14 <TIM_TI1_ConfigInputStage>:
 8013b14:	b480      	push	{r7}
 8013b16:	b087      	sub	sp, #28
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6a1b      	ldr	r3, [r3, #32]
 8013b24:	617b      	str	r3, [r7, #20]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	6a1b      	ldr	r3, [r3, #32]
 8013b2a:	f023 0201 	bic.w	r2, r3, #1
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	621a      	str	r2, [r3, #32]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	699b      	ldr	r3, [r3, #24]
 8013b36:	613b      	str	r3, [r7, #16]
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013b3e:	613b      	str	r3, [r7, #16]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	011b      	lsls	r3, r3, #4
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	4313      	orrs	r3, r2
 8013b48:	613b      	str	r3, [r7, #16]
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	f023 030a 	bic.w	r3, r3, #10
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	697a      	ldr	r2, [r7, #20]
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	617b      	str	r3, [r7, #20]
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	693a      	ldr	r2, [r7, #16]
 8013b5e:	619a      	str	r2, [r3, #24]
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	697a      	ldr	r2, [r7, #20]
 8013b64:	621a      	str	r2, [r3, #32]
 8013b66:	bf00      	nop
 8013b68:	371c      	adds	r7, #28
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr

08013b72 <TIM_TI2_ConfigInputStage>:
 8013b72:	b480      	push	{r7}
 8013b74:	b087      	sub	sp, #28
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	60f8      	str	r0, [r7, #12]
 8013b7a:	60b9      	str	r1, [r7, #8]
 8013b7c:	607a      	str	r2, [r7, #4]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6a1b      	ldr	r3, [r3, #32]
 8013b82:	617b      	str	r3, [r7, #20]
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6a1b      	ldr	r3, [r3, #32]
 8013b88:	f023 0210 	bic.w	r2, r3, #16
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	621a      	str	r2, [r3, #32]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	699b      	ldr	r3, [r3, #24]
 8013b94:	613b      	str	r3, [r7, #16]
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013b9c:	613b      	str	r3, [r7, #16]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	031b      	lsls	r3, r3, #12
 8013ba2:	693a      	ldr	r2, [r7, #16]
 8013ba4:	4313      	orrs	r3, r2
 8013ba6:	613b      	str	r3, [r7, #16]
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013bae:	617b      	str	r3, [r7, #20]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	011b      	lsls	r3, r3, #4
 8013bb4:	697a      	ldr	r2, [r7, #20]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	617b      	str	r3, [r7, #20]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	619a      	str	r2, [r3, #24]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	697a      	ldr	r2, [r7, #20]
 8013bc4:	621a      	str	r2, [r3, #32]
 8013bc6:	bf00      	nop
 8013bc8:	371c      	adds	r7, #28
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
	...

08013bd4 <TIM_ITRx_SetConfig>:
 8013bd4:	b480      	push	{r7}
 8013bd6:	b085      	sub	sp, #20
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	689b      	ldr	r3, [r3, #8]
 8013be2:	60fb      	str	r3, [r7, #12]
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	4b09      	ldr	r3, [pc, #36]	@ (8013c0c <TIM_ITRx_SetConfig+0x38>)
 8013be8:	4013      	ands	r3, r2
 8013bea:	60fb      	str	r3, [r7, #12]
 8013bec:	683a      	ldr	r2, [r7, #0]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	f043 0307 	orr.w	r3, r3, #7
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	609a      	str	r2, [r3, #8]
 8013bfe:	bf00      	nop
 8013c00:	3714      	adds	r7, #20
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	ffcfff8f 	.word	0xffcfff8f

08013c10 <TIM_ETR_SetConfig>:
 8013c10:	b480      	push	{r7}
 8013c12:	b087      	sub	sp, #28
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	607a      	str	r2, [r7, #4]
 8013c1c:	603b      	str	r3, [r7, #0]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	689b      	ldr	r3, [r3, #8]
 8013c22:	617b      	str	r3, [r7, #20]
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013c2a:	617b      	str	r3, [r7, #20]
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	021a      	lsls	r2, r3, #8
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	431a      	orrs	r2, r3
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	697a      	ldr	r2, [r7, #20]
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	617b      	str	r3, [r7, #20]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	609a      	str	r2, [r3, #8]
 8013c44:	bf00      	nop
 8013c46:	371c      	adds	r7, #28
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <TIM_CCxChannelCmd>:
 8013c50:	b480      	push	{r7}
 8013c52:	b087      	sub	sp, #28
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	f003 031f 	and.w	r3, r3, #31
 8013c62:	2201      	movs	r2, #1
 8013c64:	fa02 f303 	lsl.w	r3, r2, r3
 8013c68:	617b      	str	r3, [r7, #20]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	6a1a      	ldr	r2, [r3, #32]
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	43db      	mvns	r3, r3
 8013c72:	401a      	ands	r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	621a      	str	r2, [r3, #32]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	6a1a      	ldr	r2, [r3, #32]
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	f003 031f 	and.w	r3, r3, #31
 8013c82:	6879      	ldr	r1, [r7, #4]
 8013c84:	fa01 f303 	lsl.w	r3, r1, r3
 8013c88:	431a      	orrs	r2, r3
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	621a      	str	r2, [r3, #32]
 8013c8e:	bf00      	nop
 8013c90:	371c      	adds	r7, #28
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
	...

08013c9c <TIM_ResetCallback>:
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8013d20 <TIM_ResetCallback+0x84>)
 8013ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4a1d      	ldr	r2, [pc, #116]	@ (8013d24 <TIM_ResetCallback+0x88>)
 8013cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8013d28 <TIM_ResetCallback+0x8c>)
 8013cb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8013d2c <TIM_ResetCallback+0x90>)
 8013cc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8013d30 <TIM_ResetCallback+0x94>)
 8013cc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	4a19      	ldr	r2, [pc, #100]	@ (8013d34 <TIM_ResetCallback+0x98>)
 8013cd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	4a18      	ldr	r2, [pc, #96]	@ (8013d38 <TIM_ResetCallback+0x9c>)
 8013cd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	4a17      	ldr	r2, [pc, #92]	@ (8013d3c <TIM_ResetCallback+0xa0>)
 8013ce0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4a16      	ldr	r2, [pc, #88]	@ (8013d40 <TIM_ResetCallback+0xa4>)
 8013ce8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	4a15      	ldr	r2, [pc, #84]	@ (8013d44 <TIM_ResetCallback+0xa8>)
 8013cf0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	4a14      	ldr	r2, [pc, #80]	@ (8013d48 <TIM_ResetCallback+0xac>)
 8013cf8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	4a13      	ldr	r2, [pc, #76]	@ (8013d4c <TIM_ResetCallback+0xb0>)
 8013d00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	4a12      	ldr	r2, [pc, #72]	@ (8013d50 <TIM_ResetCallback+0xb4>)
 8013d08:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	4a11      	ldr	r2, [pc, #68]	@ (8013d54 <TIM_ResetCallback+0xb8>)
 8013d10:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8013d14:	bf00      	nop
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	08003085 	.word	0x08003085
 8013d24:	080131a9 	.word	0x080131a9
 8013d28:	080030f9 	.word	0x080030f9
 8013d2c:	08013221 	.word	0x08013221
 8013d30:	080131d1 	.word	0x080131d1
 8013d34:	080131e5 	.word	0x080131e5
 8013d38:	080131bd 	.word	0x080131bd
 8013d3c:	080131f9 	.word	0x080131f9
 8013d40:	0801320d 	.word	0x0801320d
 8013d44:	08013235 	.word	0x08013235
 8013d48:	08013f71 	.word	0x08013f71
 8013d4c:	08013f85 	.word	0x08013f85
 8013d50:	08013f99 	.word	0x08013f99
 8013d54:	08013fad 	.word	0x08013fad

08013d58 <HAL_TIMEx_MasterConfigSynchronization>:
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d101      	bne.n	8013d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d6c:	2302      	movs	r3, #2
 8013d6e:	e06d      	b.n	8013e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2201      	movs	r2, #1
 8013d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2202      	movs	r2, #2
 8013d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	685b      	ldr	r3, [r3, #4]
 8013d86:	60fb      	str	r3, [r7, #12]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	60bb      	str	r3, [r7, #8]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4a30      	ldr	r2, [pc, #192]	@ (8013e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d004      	beq.n	8013da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8013e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d108      	bne.n	8013db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	4313      	orrs	r3, r2
 8013db4:	60fb      	str	r3, [r7, #12]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013dbc:	60fb      	str	r3, [r7, #12]
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	4313      	orrs	r3, r2
 8013dc6:	60fb      	str	r3, [r7, #12]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	605a      	str	r2, [r3, #4]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	4a20      	ldr	r2, [pc, #128]	@ (8013e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d022      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013de2:	d01d      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d018      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	4a1c      	ldr	r2, [pc, #112]	@ (8013e64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d013      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8013e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	d00e      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	4a15      	ldr	r2, [pc, #84]	@ (8013e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d009      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4a16      	ldr	r2, [pc, #88]	@ (8013e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013e12:	4293      	cmp	r3, r2
 8013e14:	d004      	beq.n	8013e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a15      	ldr	r2, [pc, #84]	@ (8013e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d10c      	bne.n	8013e3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e26:	60bb      	str	r3, [r7, #8]
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	68ba      	ldr	r2, [r7, #8]
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	60bb      	str	r3, [r7, #8]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	68ba      	ldr	r2, [r7, #8]
 8013e38:	609a      	str	r2, [r3, #8]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3714      	adds	r7, #20
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr
 8013e58:	40010000 	.word	0x40010000
 8013e5c:	40010400 	.word	0x40010400
 8013e60:	40000400 	.word	0x40000400
 8013e64:	40000800 	.word	0x40000800
 8013e68:	40000c00 	.word	0x40000c00
 8013e6c:	40001800 	.word	0x40001800
 8013e70:	40014000 	.word	0x40014000

08013e74 <HAL_TIMEx_ConfigBreakDeadTime>:
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	60fb      	str	r3, [r7, #12]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	d101      	bne.n	8013e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013e8c:	2302      	movs	r3, #2
 8013e8e:	e065      	b.n	8013f5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2201      	movs	r2, #1
 8013e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	4313      	orrs	r3, r2
 8013ea4:	60fb      	str	r3, [r7, #12]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	689b      	ldr	r3, [r3, #8]
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	60fb      	str	r3, [r7, #12]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	60fb      	str	r3, [r7, #12]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	60fb      	str	r3, [r7, #12]
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	60fb      	str	r3, [r7, #12]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	695b      	ldr	r3, [r3, #20]
 8013ee8:	4313      	orrs	r3, r2
 8013eea:	60fb      	str	r3, [r7, #12]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ef6:	4313      	orrs	r3, r2
 8013ef8:	60fb      	str	r3, [r7, #12]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	699b      	ldr	r3, [r3, #24]
 8013f04:	041b      	lsls	r3, r3, #16
 8013f06:	4313      	orrs	r3, r2
 8013f08:	60fb      	str	r3, [r7, #12]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	4a16      	ldr	r2, [pc, #88]	@ (8013f68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d004      	beq.n	8013f1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4a14      	ldr	r2, [pc, #80]	@ (8013f6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d115      	bne.n	8013f4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f28:	051b      	lsls	r3, r3, #20
 8013f2a:	4313      	orrs	r3, r2
 8013f2c:	60fb      	str	r3, [r7, #12]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	69db      	ldr	r3, [r3, #28]
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	60fb      	str	r3, [r7, #12]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	6a1b      	ldr	r3, [r3, #32]
 8013f46:	4313      	orrs	r3, r2
 8013f48:	60fb      	str	r3, [r7, #12]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	645a      	str	r2, [r3, #68]	@ 0x44
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2200      	movs	r2, #0
 8013f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3714      	adds	r7, #20
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr
 8013f68:	40010000 	.word	0x40010000
 8013f6c:	40010400 	.word	0x40010400

08013f70 <HAL_TIMEx_CommutCallback>:
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <HAL_TIMEx_CommutHalfCpltCallback>:
 8013f84:	b480      	push	{r7}
 8013f86:	b083      	sub	sp, #12
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	bf00      	nop
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <HAL_TIMEx_BreakCallback>:
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	bf00      	nop
 8013fa2:	370c      	adds	r7, #12
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr

08013fac <HAL_TIMEx_Break2Callback>:
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	bf00      	nop
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <FMC_SDRAM_Init>:
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d121      	bne.n	8014016 <FMC_SDRAM_Init+0x56>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	4b27      	ldr	r3, [pc, #156]	@ (8014074 <FMC_SDRAM_Init+0xb4>)
 8013fd8:	4013      	ands	r3, r2
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	6851      	ldr	r1, [r2, #4]
 8013fde:	683a      	ldr	r2, [r7, #0]
 8013fe0:	6892      	ldr	r2, [r2, #8]
 8013fe2:	4311      	orrs	r1, r2
 8013fe4:	683a      	ldr	r2, [r7, #0]
 8013fe6:	68d2      	ldr	r2, [r2, #12]
 8013fe8:	4311      	orrs	r1, r2
 8013fea:	683a      	ldr	r2, [r7, #0]
 8013fec:	6912      	ldr	r2, [r2, #16]
 8013fee:	4311      	orrs	r1, r2
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	6952      	ldr	r2, [r2, #20]
 8013ff4:	4311      	orrs	r1, r2
 8013ff6:	683a      	ldr	r2, [r7, #0]
 8013ff8:	6992      	ldr	r2, [r2, #24]
 8013ffa:	4311      	orrs	r1, r2
 8013ffc:	683a      	ldr	r2, [r7, #0]
 8013ffe:	69d2      	ldr	r2, [r2, #28]
 8014000:	4311      	orrs	r1, r2
 8014002:	683a      	ldr	r2, [r7, #0]
 8014004:	6a12      	ldr	r2, [r2, #32]
 8014006:	4311      	orrs	r1, r2
 8014008:	683a      	ldr	r2, [r7, #0]
 801400a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801400c:	430a      	orrs	r2, r1
 801400e:	431a      	orrs	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	601a      	str	r2, [r3, #0]
 8014014:	e026      	b.n	8014064 <FMC_SDRAM_Init+0xa4>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	69d9      	ldr	r1, [r3, #28]
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	6a1b      	ldr	r3, [r3, #32]
 8014026:	4319      	orrs	r1, r3
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801402c:	430b      	orrs	r3, r1
 801402e:	431a      	orrs	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	601a      	str	r2, [r3, #0]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	685a      	ldr	r2, [r3, #4]
 8014038:	4b0e      	ldr	r3, [pc, #56]	@ (8014074 <FMC_SDRAM_Init+0xb4>)
 801403a:	4013      	ands	r3, r2
 801403c:	683a      	ldr	r2, [r7, #0]
 801403e:	6851      	ldr	r1, [r2, #4]
 8014040:	683a      	ldr	r2, [r7, #0]
 8014042:	6892      	ldr	r2, [r2, #8]
 8014044:	4311      	orrs	r1, r2
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	68d2      	ldr	r2, [r2, #12]
 801404a:	4311      	orrs	r1, r2
 801404c:	683a      	ldr	r2, [r7, #0]
 801404e:	6912      	ldr	r2, [r2, #16]
 8014050:	4311      	orrs	r1, r2
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	6952      	ldr	r2, [r2, #20]
 8014056:	4311      	orrs	r1, r2
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	6992      	ldr	r2, [r2, #24]
 801405c:	430a      	orrs	r2, r1
 801405e:	431a      	orrs	r2, r3
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	605a      	str	r2, [r3, #4]
 8014064:	2300      	movs	r3, #0
 8014066:	4618      	mov	r0, r3
 8014068:	370c      	adds	r7, #12
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	ffff8000 	.word	0xffff8000

08014078 <FMC_SDRAM_Timing_Init>:
 8014078:	b480      	push	{r7}
 801407a:	b085      	sub	sp, #20
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d128      	bne.n	80140dc <FMC_SDRAM_Timing_Init+0x64>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	1e59      	subs	r1, r3, #1
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	3b01      	subs	r3, #1
 801409e:	011b      	lsls	r3, r3, #4
 80140a0:	4319      	orrs	r1, r3
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	689b      	ldr	r3, [r3, #8]
 80140a6:	3b01      	subs	r3, #1
 80140a8:	021b      	lsls	r3, r3, #8
 80140aa:	4319      	orrs	r1, r3
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	3b01      	subs	r3, #1
 80140b2:	031b      	lsls	r3, r3, #12
 80140b4:	4319      	orrs	r1, r3
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	3b01      	subs	r3, #1
 80140bc:	041b      	lsls	r3, r3, #16
 80140be:	4319      	orrs	r1, r3
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	3b01      	subs	r3, #1
 80140c6:	051b      	lsls	r3, r3, #20
 80140c8:	4319      	orrs	r1, r3
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	699b      	ldr	r3, [r3, #24]
 80140ce:	3b01      	subs	r3, #1
 80140d0:	061b      	lsls	r3, r3, #24
 80140d2:	430b      	orrs	r3, r1
 80140d4:	431a      	orrs	r2, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	609a      	str	r2, [r3, #8]
 80140da:	e02d      	b.n	8014138 <FMC_SDRAM_Timing_Init+0xc0>
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	689a      	ldr	r2, [r3, #8]
 80140e0:	4b19      	ldr	r3, [pc, #100]	@ (8014148 <FMC_SDRAM_Timing_Init+0xd0>)
 80140e2:	4013      	ands	r3, r2
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	68d2      	ldr	r2, [r2, #12]
 80140e8:	3a01      	subs	r2, #1
 80140ea:	0311      	lsls	r1, r2, #12
 80140ec:	68ba      	ldr	r2, [r7, #8]
 80140ee:	6952      	ldr	r2, [r2, #20]
 80140f0:	3a01      	subs	r2, #1
 80140f2:	0512      	lsls	r2, r2, #20
 80140f4:	430a      	orrs	r2, r1
 80140f6:	431a      	orrs	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	609a      	str	r2, [r3, #8]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	1e59      	subs	r1, r3, #1
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	3b01      	subs	r3, #1
 8014110:	011b      	lsls	r3, r3, #4
 8014112:	4319      	orrs	r1, r3
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	3b01      	subs	r3, #1
 801411a:	021b      	lsls	r3, r3, #8
 801411c:	4319      	orrs	r1, r3
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	691b      	ldr	r3, [r3, #16]
 8014122:	3b01      	subs	r3, #1
 8014124:	041b      	lsls	r3, r3, #16
 8014126:	4319      	orrs	r1, r3
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	699b      	ldr	r3, [r3, #24]
 801412c:	3b01      	subs	r3, #1
 801412e:	061b      	lsls	r3, r3, #24
 8014130:	430b      	orrs	r3, r1
 8014132:	431a      	orrs	r2, r3
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	60da      	str	r2, [r3, #12]
 8014138:	2300      	movs	r3, #0
 801413a:	4618      	mov	r0, r3
 801413c:	3714      	adds	r7, #20
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	ff0f0fff 	.word	0xff0f0fff

0801414c <FMC_SDRAM_SendCommand>:
 801414c:	b480      	push	{r7}
 801414e:	b085      	sub	sp, #20
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	691a      	ldr	r2, [r3, #16]
 801415c:	4b0c      	ldr	r3, [pc, #48]	@ (8014190 <FMC_SDRAM_SendCommand+0x44>)
 801415e:	4013      	ands	r3, r2
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	6811      	ldr	r1, [r2, #0]
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	6852      	ldr	r2, [r2, #4]
 8014168:	4311      	orrs	r1, r2
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	6892      	ldr	r2, [r2, #8]
 801416e:	3a01      	subs	r2, #1
 8014170:	0152      	lsls	r2, r2, #5
 8014172:	4311      	orrs	r1, r2
 8014174:	68ba      	ldr	r2, [r7, #8]
 8014176:	68d2      	ldr	r2, [r2, #12]
 8014178:	0252      	lsls	r2, r2, #9
 801417a:	430a      	orrs	r2, r1
 801417c:	431a      	orrs	r2, r3
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	611a      	str	r2, [r3, #16]
 8014182:	2300      	movs	r3, #0
 8014184:	4618      	mov	r0, r3
 8014186:	3714      	adds	r7, #20
 8014188:	46bd      	mov	sp, r7
 801418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418e:	4770      	bx	lr
 8014190:	ffc00000 	.word	0xffc00000

08014194 <FMC_SDRAM_ProgramRefreshRate>:
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	695a      	ldr	r2, [r3, #20]
 80141a2:	4b07      	ldr	r3, [pc, #28]	@ (80141c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80141a4:	4013      	ands	r3, r2
 80141a6:	683a      	ldr	r2, [r7, #0]
 80141a8:	0052      	lsls	r2, r2, #1
 80141aa:	431a      	orrs	r2, r3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	615a      	str	r2, [r3, #20]
 80141b0:	2300      	movs	r3, #0
 80141b2:	4618      	mov	r0, r3
 80141b4:	370c      	adds	r7, #12
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop
 80141c0:	ffffc001 	.word	0xffffc001

080141c4 <SDMMC_Init>:
 80141c4:	b084      	sub	sp, #16
 80141c6:	b480      	push	{r7}
 80141c8:	b085      	sub	sp, #20
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
 80141ce:	f107 001c 	add.w	r0, r7, #28
 80141d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80141d6:	2300      	movs	r3, #0
 80141d8:	60fb      	str	r3, [r7, #12]
 80141da:	69fa      	ldr	r2, [r7, #28]
 80141dc:	6a3b      	ldr	r3, [r7, #32]
 80141de:	431a      	orrs	r2, r3
 80141e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e2:	431a      	orrs	r2, r3
 80141e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e6:	431a      	orrs	r2, r3
 80141e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ea:	4313      	orrs	r3, r2
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	4313      	orrs	r3, r2
 80141f0:	60fb      	str	r3, [r7, #12]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	685a      	ldr	r2, [r3, #4]
 80141f6:	4b07      	ldr	r3, [pc, #28]	@ (8014214 <SDMMC_Init+0x50>)
 80141f8:	4013      	ands	r3, r2
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	431a      	orrs	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	605a      	str	r2, [r3, #4]
 8014202:	2300      	movs	r3, #0
 8014204:	4618      	mov	r0, r3
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	b004      	add	sp, #16
 8014210:	4770      	bx	lr
 8014212:	bf00      	nop
 8014214:	ffc02c00 	.word	0xffc02c00

08014218 <SDMMC_ReadFIFO>:
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014226:	4618      	mov	r0, r3
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr

08014232 <SDMMC_WriteFIFO>:
 8014232:	b480      	push	{r7}
 8014234:	b083      	sub	sp, #12
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
 801423a:	6039      	str	r1, [r7, #0]
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8014246:	2300      	movs	r3, #0
 8014248:	4618      	mov	r0, r3
 801424a:	370c      	adds	r7, #12
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr

08014254 <SDMMC_PowerState_ON>:
 8014254:	b480      	push	{r7}
 8014256:	b083      	sub	sp, #12
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	f043 0203 	orr.w	r2, r3, #3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	601a      	str	r2, [r3, #0]
 8014268:	2300      	movs	r3, #0
 801426a:	4618      	mov	r0, r3
 801426c:	370c      	adds	r7, #12
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr

08014276 <SDMMC_GetPowerState>:
 8014276:	b480      	push	{r7}
 8014278:	b083      	sub	sp, #12
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	f003 0303 	and.w	r3, r3, #3
 8014286:	4618      	mov	r0, r3
 8014288:	370c      	adds	r7, #12
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr
	...

08014294 <SDMMC_SendCommand>:
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
 801429e:	2300      	movs	r3, #0
 80142a0:	60fb      	str	r3, [r7, #12]
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	609a      	str	r2, [r3, #8]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	689b      	ldr	r3, [r3, #8]
 80142b2:	431a      	orrs	r2, r3
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	431a      	orrs	r2, r3
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	691b      	ldr	r3, [r3, #16]
 80142be:	4313      	orrs	r3, r2
 80142c0:	68fa      	ldr	r2, [r7, #12]
 80142c2:	4313      	orrs	r3, r2
 80142c4:	60fb      	str	r3, [r7, #12]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	68da      	ldr	r2, [r3, #12]
 80142ca:	4b06      	ldr	r3, [pc, #24]	@ (80142e4 <SDMMC_SendCommand+0x50>)
 80142cc:	4013      	ands	r3, r2
 80142ce:	68fa      	ldr	r2, [r7, #12]
 80142d0:	431a      	orrs	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	60da      	str	r2, [r3, #12]
 80142d6:	2300      	movs	r3, #0
 80142d8:	4618      	mov	r0, r3
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr
 80142e4:	fffee0c0 	.word	0xfffee0c0

080142e8 <SDMMC_GetCommandResponse>:
 80142e8:	b480      	push	{r7}
 80142ea:	b083      	sub	sp, #12
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	691b      	ldr	r3, [r3, #16]
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	4618      	mov	r0, r3
 80142f8:	370c      	adds	r7, #12
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <SDMMC_GetResponse>:
 8014302:	b480      	push	{r7}
 8014304:	b085      	sub	sp, #20
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	6039      	str	r1, [r7, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	3314      	adds	r3, #20
 8014310:	461a      	mov	r2, r3
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	4413      	add	r3, r2
 8014316:	60fb      	str	r3, [r7, #12]
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4618      	mov	r0, r3
 801431e:	3714      	adds	r7, #20
 8014320:	46bd      	mov	sp, r7
 8014322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014326:	4770      	bx	lr

08014328 <SDMMC_ConfigData>:
 8014328:	b480      	push	{r7}
 801432a:	b085      	sub	sp, #20
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	6039      	str	r1, [r7, #0]
 8014332:	2300      	movs	r3, #0
 8014334:	60fb      	str	r3, [r7, #12]
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	625a      	str	r2, [r3, #36]	@ 0x24
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	685a      	ldr	r2, [r3, #4]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	629a      	str	r2, [r3, #40]	@ 0x28
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	689a      	ldr	r2, [r3, #8]
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	431a      	orrs	r2, r3
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	691b      	ldr	r3, [r3, #16]
 8014354:	431a      	orrs	r2, r3
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	695b      	ldr	r3, [r3, #20]
 801435a:	4313      	orrs	r3, r2
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	4313      	orrs	r3, r2
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	431a      	orrs	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014372:	2300      	movs	r3, #0
 8014374:	4618      	mov	r0, r3
 8014376:	3714      	adds	r7, #20
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <SDMMC_CmdBlockLength>:
 8014380:	b580      	push	{r7, lr}
 8014382:	b088      	sub	sp, #32
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	60bb      	str	r3, [r7, #8]
 801438e:	2310      	movs	r3, #16
 8014390:	60fb      	str	r3, [r7, #12]
 8014392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014396:	613b      	str	r3, [r7, #16]
 8014398:	2300      	movs	r3, #0
 801439a:	617b      	str	r3, [r7, #20]
 801439c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80143a0:	61bb      	str	r3, [r7, #24]
 80143a2:	f107 0308 	add.w	r3, r7, #8
 80143a6:	4619      	mov	r1, r3
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7ff ff73 	bl	8014294 <SDMMC_SendCommand>
 80143ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143b2:	2110      	movs	r1, #16
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fa5f 	bl	8014878 <SDMMC_GetCmdResp1>
 80143ba:	61f8      	str	r0, [r7, #28]
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	4618      	mov	r0, r3
 80143c0:	3720      	adds	r7, #32
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <SDMMC_CmdReadSingleBlock>:
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b088      	sub	sp, #32
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
 80143ce:	6039      	str	r1, [r7, #0]
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	60bb      	str	r3, [r7, #8]
 80143d4:	2311      	movs	r3, #17
 80143d6:	60fb      	str	r3, [r7, #12]
 80143d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80143dc:	613b      	str	r3, [r7, #16]
 80143de:	2300      	movs	r3, #0
 80143e0:	617b      	str	r3, [r7, #20]
 80143e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80143e6:	61bb      	str	r3, [r7, #24]
 80143e8:	f107 0308 	add.w	r3, r7, #8
 80143ec:	4619      	mov	r1, r3
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7ff ff50 	bl	8014294 <SDMMC_SendCommand>
 80143f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143f8:	2111      	movs	r1, #17
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f000 fa3c 	bl	8014878 <SDMMC_GetCmdResp1>
 8014400:	61f8      	str	r0, [r7, #28]
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	4618      	mov	r0, r3
 8014406:	3720      	adds	r7, #32
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <SDMMC_CmdReadMultiBlock>:
 801440c:	b580      	push	{r7, lr}
 801440e:	b088      	sub	sp, #32
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	60bb      	str	r3, [r7, #8]
 801441a:	2312      	movs	r3, #18
 801441c:	60fb      	str	r3, [r7, #12]
 801441e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014422:	613b      	str	r3, [r7, #16]
 8014424:	2300      	movs	r3, #0
 8014426:	617b      	str	r3, [r7, #20]
 8014428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801442c:	61bb      	str	r3, [r7, #24]
 801442e:	f107 0308 	add.w	r3, r7, #8
 8014432:	4619      	mov	r1, r3
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f7ff ff2d 	bl	8014294 <SDMMC_SendCommand>
 801443a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801443e:	2112      	movs	r1, #18
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f000 fa19 	bl	8014878 <SDMMC_GetCmdResp1>
 8014446:	61f8      	str	r0, [r7, #28]
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	4618      	mov	r0, r3
 801444c:	3720      	adds	r7, #32
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}

08014452 <SDMMC_CmdWriteSingleBlock>:
 8014452:	b580      	push	{r7, lr}
 8014454:	b088      	sub	sp, #32
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
 801445a:	6039      	str	r1, [r7, #0]
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	60bb      	str	r3, [r7, #8]
 8014460:	2318      	movs	r3, #24
 8014462:	60fb      	str	r3, [r7, #12]
 8014464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014468:	613b      	str	r3, [r7, #16]
 801446a:	2300      	movs	r3, #0
 801446c:	617b      	str	r3, [r7, #20]
 801446e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014472:	61bb      	str	r3, [r7, #24]
 8014474:	f107 0308 	add.w	r3, r7, #8
 8014478:	4619      	mov	r1, r3
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f7ff ff0a 	bl	8014294 <SDMMC_SendCommand>
 8014480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014484:	2118      	movs	r1, #24
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 f9f6 	bl	8014878 <SDMMC_GetCmdResp1>
 801448c:	61f8      	str	r0, [r7, #28]
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	4618      	mov	r0, r3
 8014492:	3720      	adds	r7, #32
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <SDMMC_CmdWriteMultiBlock>:
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	60bb      	str	r3, [r7, #8]
 80144a6:	2319      	movs	r3, #25
 80144a8:	60fb      	str	r3, [r7, #12]
 80144aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80144ae:	613b      	str	r3, [r7, #16]
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
 80144b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80144b8:	61bb      	str	r3, [r7, #24]
 80144ba:	f107 0308 	add.w	r3, r7, #8
 80144be:	4619      	mov	r1, r3
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f7ff fee7 	bl	8014294 <SDMMC_SendCommand>
 80144c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144ca:	2119      	movs	r1, #25
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 f9d3 	bl	8014878 <SDMMC_GetCmdResp1>
 80144d2:	61f8      	str	r0, [r7, #28]
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	4618      	mov	r0, r3
 80144d8:	3720      	adds	r7, #32
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}
	...

080144e0 <SDMMC_CmdStopTransfer>:
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b088      	sub	sp, #32
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	2300      	movs	r3, #0
 80144ea:	60bb      	str	r3, [r7, #8]
 80144ec:	230c      	movs	r3, #12
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80144f4:	613b      	str	r3, [r7, #16]
 80144f6:	2300      	movs	r3, #0
 80144f8:	617b      	str	r3, [r7, #20]
 80144fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80144fe:	61bb      	str	r3, [r7, #24]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	60da      	str	r2, [r3, #12]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	60da      	str	r2, [r3, #12]
 8014518:	f107 0308 	add.w	r3, r7, #8
 801451c:	4619      	mov	r1, r3
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f7ff feb8 	bl	8014294 <SDMMC_SendCommand>
 8014524:	4a0b      	ldr	r2, [pc, #44]	@ (8014554 <SDMMC_CmdStopTransfer+0x74>)
 8014526:	210c      	movs	r1, #12
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f000 f9a5 	bl	8014878 <SDMMC_GetCmdResp1>
 801452e:	61f8      	str	r0, [r7, #28]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	60da      	str	r2, [r3, #12]
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014542:	d101      	bne.n	8014548 <SDMMC_CmdStopTransfer+0x68>
 8014544:	2300      	movs	r3, #0
 8014546:	61fb      	str	r3, [r7, #28]
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	4618      	mov	r0, r3
 801454c:	3720      	adds	r7, #32
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	05f5e100 	.word	0x05f5e100

08014558 <SDMMC_CmdSelDesel>:
 8014558:	b580      	push	{r7, lr}
 801455a:	b088      	sub	sp, #32
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	60bb      	str	r3, [r7, #8]
 8014566:	2307      	movs	r3, #7
 8014568:	60fb      	str	r3, [r7, #12]
 801456a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801456e:	613b      	str	r3, [r7, #16]
 8014570:	2300      	movs	r3, #0
 8014572:	617b      	str	r3, [r7, #20]
 8014574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014578:	61bb      	str	r3, [r7, #24]
 801457a:	f107 0308 	add.w	r3, r7, #8
 801457e:	4619      	mov	r1, r3
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff fe87 	bl	8014294 <SDMMC_SendCommand>
 8014586:	f241 3288 	movw	r2, #5000	@ 0x1388
 801458a:	2107      	movs	r1, #7
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 f973 	bl	8014878 <SDMMC_GetCmdResp1>
 8014592:	61f8      	str	r0, [r7, #28]
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	4618      	mov	r0, r3
 8014598:	3720      	adds	r7, #32
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <SDMMC_CmdGoIdleState>:
 801459e:	b580      	push	{r7, lr}
 80145a0:	b088      	sub	sp, #32
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	2300      	movs	r3, #0
 80145a8:	60bb      	str	r3, [r7, #8]
 80145aa:	2300      	movs	r3, #0
 80145ac:	60fb      	str	r3, [r7, #12]
 80145ae:	2300      	movs	r3, #0
 80145b0:	613b      	str	r3, [r7, #16]
 80145b2:	2300      	movs	r3, #0
 80145b4:	617b      	str	r3, [r7, #20]
 80145b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80145ba:	61bb      	str	r3, [r7, #24]
 80145bc:	f107 0308 	add.w	r3, r7, #8
 80145c0:	4619      	mov	r1, r3
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff fe66 	bl	8014294 <SDMMC_SendCommand>
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 fb97 	bl	8014cfc <SDMMC_GetCmdError>
 80145ce:	61f8      	str	r0, [r7, #28]
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	4618      	mov	r0, r3
 80145d4:	3720      	adds	r7, #32
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}

080145da <SDMMC_CmdOperCond>:
 80145da:	b580      	push	{r7, lr}
 80145dc:	b088      	sub	sp, #32
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
 80145e2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80145e6:	60bb      	str	r3, [r7, #8]
 80145e8:	2308      	movs	r3, #8
 80145ea:	60fb      	str	r3, [r7, #12]
 80145ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80145f0:	613b      	str	r3, [r7, #16]
 80145f2:	2300      	movs	r3, #0
 80145f4:	617b      	str	r3, [r7, #20]
 80145f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80145fa:	61bb      	str	r3, [r7, #24]
 80145fc:	f107 0308 	add.w	r3, r7, #8
 8014600:	4619      	mov	r1, r3
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f7ff fe46 	bl	8014294 <SDMMC_SendCommand>
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 fb29 	bl	8014c60 <SDMMC_GetCmdResp7>
 801460e:	61f8      	str	r0, [r7, #28]
 8014610:	69fb      	ldr	r3, [r7, #28]
 8014612:	4618      	mov	r0, r3
 8014614:	3720      	adds	r7, #32
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}

0801461a <SDMMC_CmdAppCommand>:
 801461a:	b580      	push	{r7, lr}
 801461c:	b088      	sub	sp, #32
 801461e:	af00      	add	r7, sp, #0
 8014620:	6078      	str	r0, [r7, #4]
 8014622:	6039      	str	r1, [r7, #0]
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	60bb      	str	r3, [r7, #8]
 8014628:	2337      	movs	r3, #55	@ 0x37
 801462a:	60fb      	str	r3, [r7, #12]
 801462c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014630:	613b      	str	r3, [r7, #16]
 8014632:	2300      	movs	r3, #0
 8014634:	617b      	str	r3, [r7, #20]
 8014636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801463a:	61bb      	str	r3, [r7, #24]
 801463c:	f107 0308 	add.w	r3, r7, #8
 8014640:	4619      	mov	r1, r3
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff fe26 	bl	8014294 <SDMMC_SendCommand>
 8014648:	f241 3288 	movw	r2, #5000	@ 0x1388
 801464c:	2137      	movs	r1, #55	@ 0x37
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 f912 	bl	8014878 <SDMMC_GetCmdResp1>
 8014654:	61f8      	str	r0, [r7, #28]
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	4618      	mov	r0, r3
 801465a:	3720      	adds	r7, #32
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <SDMMC_CmdAppOperCommand>:
 8014660:	b580      	push	{r7, lr}
 8014662:	b088      	sub	sp, #32
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	60bb      	str	r3, [r7, #8]
 801466e:	2329      	movs	r3, #41	@ 0x29
 8014670:	60fb      	str	r3, [r7, #12]
 8014672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014676:	613b      	str	r3, [r7, #16]
 8014678:	2300      	movs	r3, #0
 801467a:	617b      	str	r3, [r7, #20]
 801467c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014680:	61bb      	str	r3, [r7, #24]
 8014682:	f107 0308 	add.w	r3, r7, #8
 8014686:	4619      	mov	r1, r3
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7ff fe03 	bl	8014294 <SDMMC_SendCommand>
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 fa2e 	bl	8014af0 <SDMMC_GetCmdResp3>
 8014694:	61f8      	str	r0, [r7, #28]
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	4618      	mov	r0, r3
 801469a:	3720      	adds	r7, #32
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}

080146a0 <SDMMC_CmdBusWidth>:
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b088      	sub	sp, #32
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	60bb      	str	r3, [r7, #8]
 80146ae:	2306      	movs	r3, #6
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80146b6:	613b      	str	r3, [r7, #16]
 80146b8:	2300      	movs	r3, #0
 80146ba:	617b      	str	r3, [r7, #20]
 80146bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80146c0:	61bb      	str	r3, [r7, #24]
 80146c2:	f107 0308 	add.w	r3, r7, #8
 80146c6:	4619      	mov	r1, r3
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f7ff fde3 	bl	8014294 <SDMMC_SendCommand>
 80146ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146d2:	2106      	movs	r1, #6
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f000 f8cf 	bl	8014878 <SDMMC_GetCmdResp1>
 80146da:	61f8      	str	r0, [r7, #28]
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	4618      	mov	r0, r3
 80146e0:	3720      	adds	r7, #32
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <SDMMC_CmdSendSCR>:
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b088      	sub	sp, #32
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
 80146ee:	2300      	movs	r3, #0
 80146f0:	60bb      	str	r3, [r7, #8]
 80146f2:	2333      	movs	r3, #51	@ 0x33
 80146f4:	60fb      	str	r3, [r7, #12]
 80146f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80146fa:	613b      	str	r3, [r7, #16]
 80146fc:	2300      	movs	r3, #0
 80146fe:	617b      	str	r3, [r7, #20]
 8014700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014704:	61bb      	str	r3, [r7, #24]
 8014706:	f107 0308 	add.w	r3, r7, #8
 801470a:	4619      	mov	r1, r3
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f7ff fdc1 	bl	8014294 <SDMMC_SendCommand>
 8014712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014716:	2133      	movs	r1, #51	@ 0x33
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f000 f8ad 	bl	8014878 <SDMMC_GetCmdResp1>
 801471e:	61f8      	str	r0, [r7, #28]
 8014720:	69fb      	ldr	r3, [r7, #28]
 8014722:	4618      	mov	r0, r3
 8014724:	3720      	adds	r7, #32
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <SDMMC_CmdSendCID>:
 801472a:	b580      	push	{r7, lr}
 801472c:	b088      	sub	sp, #32
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
 8014732:	2300      	movs	r3, #0
 8014734:	60bb      	str	r3, [r7, #8]
 8014736:	2302      	movs	r3, #2
 8014738:	60fb      	str	r3, [r7, #12]
 801473a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801473e:	613b      	str	r3, [r7, #16]
 8014740:	2300      	movs	r3, #0
 8014742:	617b      	str	r3, [r7, #20]
 8014744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014748:	61bb      	str	r3, [r7, #24]
 801474a:	f107 0308 	add.w	r3, r7, #8
 801474e:	4619      	mov	r1, r3
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7ff fd9f 	bl	8014294 <SDMMC_SendCommand>
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f000 f980 	bl	8014a5c <SDMMC_GetCmdResp2>
 801475c:	61f8      	str	r0, [r7, #28]
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	4618      	mov	r0, r3
 8014762:	3720      	adds	r7, #32
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}

08014768 <SDMMC_CmdSendCSD>:
 8014768:	b580      	push	{r7, lr}
 801476a:	b088      	sub	sp, #32
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	60bb      	str	r3, [r7, #8]
 8014776:	2309      	movs	r3, #9
 8014778:	60fb      	str	r3, [r7, #12]
 801477a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801477e:	613b      	str	r3, [r7, #16]
 8014780:	2300      	movs	r3, #0
 8014782:	617b      	str	r3, [r7, #20]
 8014784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014788:	61bb      	str	r3, [r7, #24]
 801478a:	f107 0308 	add.w	r3, r7, #8
 801478e:	4619      	mov	r1, r3
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f7ff fd7f 	bl	8014294 <SDMMC_SendCommand>
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 f960 	bl	8014a5c <SDMMC_GetCmdResp2>
 801479c:	61f8      	str	r0, [r7, #28]
 801479e:	69fb      	ldr	r3, [r7, #28]
 80147a0:	4618      	mov	r0, r3
 80147a2:	3720      	adds	r7, #32
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <SDMMC_CmdSetRelAdd>:
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b088      	sub	sp, #32
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
 80147b2:	2300      	movs	r3, #0
 80147b4:	60bb      	str	r3, [r7, #8]
 80147b6:	2303      	movs	r3, #3
 80147b8:	60fb      	str	r3, [r7, #12]
 80147ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80147be:	613b      	str	r3, [r7, #16]
 80147c0:	2300      	movs	r3, #0
 80147c2:	617b      	str	r3, [r7, #20]
 80147c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147c8:	61bb      	str	r3, [r7, #24]
 80147ca:	f107 0308 	add.w	r3, r7, #8
 80147ce:	4619      	mov	r1, r3
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ff fd5f 	bl	8014294 <SDMMC_SendCommand>
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	2103      	movs	r1, #3
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 f9c8 	bl	8014b70 <SDMMC_GetCmdResp6>
 80147e0:	61f8      	str	r0, [r7, #28]
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	4618      	mov	r0, r3
 80147e6:	3720      	adds	r7, #32
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <SDMMC_CmdSendStatus>:
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b088      	sub	sp, #32
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	60bb      	str	r3, [r7, #8]
 80147fa:	230d      	movs	r3, #13
 80147fc:	60fb      	str	r3, [r7, #12]
 80147fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014802:	613b      	str	r3, [r7, #16]
 8014804:	2300      	movs	r3, #0
 8014806:	617b      	str	r3, [r7, #20]
 8014808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801480c:	61bb      	str	r3, [r7, #24]
 801480e:	f107 0308 	add.w	r3, r7, #8
 8014812:	4619      	mov	r1, r3
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7ff fd3d 	bl	8014294 <SDMMC_SendCommand>
 801481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801481e:	210d      	movs	r1, #13
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 f829 	bl	8014878 <SDMMC_GetCmdResp1>
 8014826:	61f8      	str	r0, [r7, #28]
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	4618      	mov	r0, r3
 801482c:	3720      	adds	r7, #32
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <SDMMC_CmdStatusRegister>:
 8014832:	b580      	push	{r7, lr}
 8014834:	b088      	sub	sp, #32
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	2300      	movs	r3, #0
 801483c:	60bb      	str	r3, [r7, #8]
 801483e:	230d      	movs	r3, #13
 8014840:	60fb      	str	r3, [r7, #12]
 8014842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014846:	613b      	str	r3, [r7, #16]
 8014848:	2300      	movs	r3, #0
 801484a:	617b      	str	r3, [r7, #20]
 801484c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014850:	61bb      	str	r3, [r7, #24]
 8014852:	f107 0308 	add.w	r3, r7, #8
 8014856:	4619      	mov	r1, r3
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff fd1b 	bl	8014294 <SDMMC_SendCommand>
 801485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014862:	210d      	movs	r1, #13
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 f807 	bl	8014878 <SDMMC_GetCmdResp1>
 801486a:	61f8      	str	r0, [r7, #28]
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	4618      	mov	r0, r3
 8014870:	3720      	adds	r7, #32
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
	...

08014878 <SDMMC_GetCmdResp1>:
 8014878:	b580      	push	{r7, lr}
 801487a:	b088      	sub	sp, #32
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	460b      	mov	r3, r1
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	72fb      	strb	r3, [r7, #11]
 8014886:	4b70      	ldr	r3, [pc, #448]	@ (8014a48 <SDMMC_GetCmdResp1+0x1d0>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4a70      	ldr	r2, [pc, #448]	@ (8014a4c <SDMMC_GetCmdResp1+0x1d4>)
 801488c:	fba2 2303 	umull	r2, r3, r2, r3
 8014890:	0a5a      	lsrs	r2, r3, #9
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	fb02 f303 	mul.w	r3, r2, r3
 8014898:	61fb      	str	r3, [r7, #28]
 801489a:	69fb      	ldr	r3, [r7, #28]
 801489c:	1e5a      	subs	r2, r3, #1
 801489e:	61fa      	str	r2, [r7, #28]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d102      	bne.n	80148aa <SDMMC_GetCmdResp1+0x32>
 80148a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80148a8:	e0c9      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148ae:	61bb      	str	r3, [r7, #24]
 80148b0:	69ba      	ldr	r2, [r7, #24]
 80148b2:	4b67      	ldr	r3, [pc, #412]	@ (8014a50 <SDMMC_GetCmdResp1+0x1d8>)
 80148b4:	4013      	ands	r3, r2
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d0ef      	beq.n	801489a <SDMMC_GetCmdResp1+0x22>
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d1ea      	bne.n	801489a <SDMMC_GetCmdResp1+0x22>
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148c8:	f003 0304 	and.w	r3, r3, #4
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d004      	beq.n	80148da <SDMMC_GetCmdResp1+0x62>
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2204      	movs	r2, #4
 80148d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80148d6:	2304      	movs	r3, #4
 80148d8:	e0b1      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148de:	f003 0301 	and.w	r3, r3, #1
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d004      	beq.n	80148f0 <SDMMC_GetCmdResp1+0x78>
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2201      	movs	r2, #1
 80148ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80148ec:	2301      	movs	r3, #1
 80148ee:	e0a6      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	4a58      	ldr	r2, [pc, #352]	@ (8014a54 <SDMMC_GetCmdResp1+0x1dc>)
 80148f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7ff fcf6 	bl	80142e8 <SDMMC_GetCommandResponse>
 80148fc:	4603      	mov	r3, r0
 80148fe:	461a      	mov	r2, r3
 8014900:	7afb      	ldrb	r3, [r7, #11]
 8014902:	4293      	cmp	r3, r2
 8014904:	d001      	beq.n	801490a <SDMMC_GetCmdResp1+0x92>
 8014906:	2301      	movs	r3, #1
 8014908:	e099      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801490a:	2100      	movs	r1, #0
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7ff fcf8 	bl	8014302 <SDMMC_GetResponse>
 8014912:	6178      	str	r0, [r7, #20]
 8014914:	697a      	ldr	r2, [r7, #20]
 8014916:	4b50      	ldr	r3, [pc, #320]	@ (8014a58 <SDMMC_GetCmdResp1+0x1e0>)
 8014918:	4013      	ands	r3, r2
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <SDMMC_GetCmdResp1+0xaa>
 801491e:	2300      	movs	r3, #0
 8014920:	e08d      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	2b00      	cmp	r3, #0
 8014926:	da02      	bge.n	801492e <SDMMC_GetCmdResp1+0xb6>
 8014928:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801492c:	e087      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8014934:	2b00      	cmp	r3, #0
 8014936:	d001      	beq.n	801493c <SDMMC_GetCmdResp1+0xc4>
 8014938:	2340      	movs	r3, #64	@ 0x40
 801493a:	e080      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014942:	2b00      	cmp	r3, #0
 8014944:	d001      	beq.n	801494a <SDMMC_GetCmdResp1+0xd2>
 8014946:	2380      	movs	r3, #128	@ 0x80
 8014948:	e079      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014950:	2b00      	cmp	r3, #0
 8014952:	d002      	beq.n	801495a <SDMMC_GetCmdResp1+0xe2>
 8014954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014958:	e071      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <SDMMC_GetCmdResp1+0xf2>
 8014964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014968:	e069      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014970:	2b00      	cmp	r3, #0
 8014972:	d002      	beq.n	801497a <SDMMC_GetCmdResp1+0x102>
 8014974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014978:	e061      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014980:	2b00      	cmp	r3, #0
 8014982:	d002      	beq.n	801498a <SDMMC_GetCmdResp1+0x112>
 8014984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014988:	e059      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <SDMMC_GetCmdResp1+0x122>
 8014994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014998:	e051      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d002      	beq.n	80149aa <SDMMC_GetCmdResp1+0x132>
 80149a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80149a8:	e049      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <SDMMC_GetCmdResp1+0x142>
 80149b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80149b8:	e041      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d002      	beq.n	80149ca <SDMMC_GetCmdResp1+0x152>
 80149c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80149c8:	e039      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d002      	beq.n	80149da <SDMMC_GetCmdResp1+0x162>
 80149d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80149d8:	e031      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <SDMMC_GetCmdResp1+0x172>
 80149e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80149e8:	e029      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d002      	beq.n	80149fa <SDMMC_GetCmdResp1+0x182>
 80149f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80149f8:	e021      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d002      	beq.n	8014a0a <SDMMC_GetCmdResp1+0x192>
 8014a04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014a08:	e019      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <SDMMC_GetCmdResp1+0x1a2>
 8014a14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8014a18:	e011      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d002      	beq.n	8014a2a <SDMMC_GetCmdResp1+0x1b2>
 8014a24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8014a28:	e009      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	f003 0308 	and.w	r3, r3, #8
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d002      	beq.n	8014a3a <SDMMC_GetCmdResp1+0x1c2>
 8014a34:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8014a38:	e001      	b.n	8014a3e <SDMMC_GetCmdResp1+0x1c6>
 8014a3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3720      	adds	r7, #32
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	24000228 	.word	0x24000228
 8014a4c:	10624dd3 	.word	0x10624dd3
 8014a50:	00200045 	.word	0x00200045
 8014a54:	002000c5 	.word	0x002000c5
 8014a58:	fdffe008 	.word	0xfdffe008

08014a5c <SDMMC_GetCmdResp2>:
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	4b1f      	ldr	r3, [pc, #124]	@ (8014ae4 <SDMMC_GetCmdResp2+0x88>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	4a1f      	ldr	r2, [pc, #124]	@ (8014ae8 <SDMMC_GetCmdResp2+0x8c>)
 8014a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8014a6e:	0a5b      	lsrs	r3, r3, #9
 8014a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014a74:	fb02 f303 	mul.w	r3, r2, r3
 8014a78:	60fb      	str	r3, [r7, #12]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	1e5a      	subs	r2, r3, #1
 8014a7e:	60fa      	str	r2, [r7, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <SDMMC_GetCmdResp2+0x2e>
 8014a84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014a88:	e026      	b.n	8014ad8 <SDMMC_GetCmdResp2+0x7c>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a8e:	60bb      	str	r3, [r7, #8]
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d0ef      	beq.n	8014a7a <SDMMC_GetCmdResp2+0x1e>
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d1ea      	bne.n	8014a7a <SDMMC_GetCmdResp2+0x1e>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014aa8:	f003 0304 	and.w	r3, r3, #4
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d004      	beq.n	8014aba <SDMMC_GetCmdResp2+0x5e>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2204      	movs	r2, #4
 8014ab4:	639a      	str	r2, [r3, #56]	@ 0x38
 8014ab6:	2304      	movs	r3, #4
 8014ab8:	e00e      	b.n	8014ad8 <SDMMC_GetCmdResp2+0x7c>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014abe:	f003 0301 	and.w	r3, r3, #1
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d004      	beq.n	8014ad0 <SDMMC_GetCmdResp2+0x74>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	639a      	str	r2, [r3, #56]	@ 0x38
 8014acc:	2301      	movs	r3, #1
 8014ace:	e003      	b.n	8014ad8 <SDMMC_GetCmdResp2+0x7c>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4a06      	ldr	r2, [pc, #24]	@ (8014aec <SDMMC_GetCmdResp2+0x90>)
 8014ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3714      	adds	r7, #20
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr
 8014ae4:	24000228 	.word	0x24000228
 8014ae8:	10624dd3 	.word	0x10624dd3
 8014aec:	002000c5 	.word	0x002000c5

08014af0 <SDMMC_GetCmdResp3>:
 8014af0:	b480      	push	{r7}
 8014af2:	b085      	sub	sp, #20
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	4b1a      	ldr	r3, [pc, #104]	@ (8014b64 <SDMMC_GetCmdResp3+0x74>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4a1a      	ldr	r2, [pc, #104]	@ (8014b68 <SDMMC_GetCmdResp3+0x78>)
 8014afe:	fba2 2303 	umull	r2, r3, r2, r3
 8014b02:	0a5b      	lsrs	r3, r3, #9
 8014b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b08:	fb02 f303 	mul.w	r3, r2, r3
 8014b0c:	60fb      	str	r3, [r7, #12]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	1e5a      	subs	r2, r3, #1
 8014b12:	60fa      	str	r2, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d102      	bne.n	8014b1e <SDMMC_GetCmdResp3+0x2e>
 8014b18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014b1c:	e01b      	b.n	8014b56 <SDMMC_GetCmdResp3+0x66>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b22:	60bb      	str	r3, [r7, #8]
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d0ef      	beq.n	8014b0e <SDMMC_GetCmdResp3+0x1e>
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1ea      	bne.n	8014b0e <SDMMC_GetCmdResp3+0x1e>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b3c:	f003 0304 	and.w	r3, r3, #4
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d004      	beq.n	8014b4e <SDMMC_GetCmdResp3+0x5e>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2204      	movs	r2, #4
 8014b48:	639a      	str	r2, [r3, #56]	@ 0x38
 8014b4a:	2304      	movs	r3, #4
 8014b4c:	e003      	b.n	8014b56 <SDMMC_GetCmdResp3+0x66>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	4a06      	ldr	r2, [pc, #24]	@ (8014b6c <SDMMC_GetCmdResp3+0x7c>)
 8014b52:	639a      	str	r2, [r3, #56]	@ 0x38
 8014b54:	2300      	movs	r3, #0
 8014b56:	4618      	mov	r0, r3
 8014b58:	3714      	adds	r7, #20
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b60:	4770      	bx	lr
 8014b62:	bf00      	nop
 8014b64:	24000228 	.word	0x24000228
 8014b68:	10624dd3 	.word	0x10624dd3
 8014b6c:	002000c5 	.word	0x002000c5

08014b70 <SDMMC_GetCmdResp6>:
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b088      	sub	sp, #32
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	460b      	mov	r3, r1
 8014b7a:	607a      	str	r2, [r7, #4]
 8014b7c:	72fb      	strb	r3, [r7, #11]
 8014b7e:	4b35      	ldr	r3, [pc, #212]	@ (8014c54 <SDMMC_GetCmdResp6+0xe4>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	4a35      	ldr	r2, [pc, #212]	@ (8014c58 <SDMMC_GetCmdResp6+0xe8>)
 8014b84:	fba2 2303 	umull	r2, r3, r2, r3
 8014b88:	0a5b      	lsrs	r3, r3, #9
 8014b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b8e:	fb02 f303 	mul.w	r3, r2, r3
 8014b92:	61fb      	str	r3, [r7, #28]
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	1e5a      	subs	r2, r3, #1
 8014b98:	61fa      	str	r2, [r7, #28]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d102      	bne.n	8014ba4 <SDMMC_GetCmdResp6+0x34>
 8014b9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014ba2:	e052      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ba8:	61bb      	str	r3, [r7, #24]
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d0ef      	beq.n	8014b94 <SDMMC_GetCmdResp6+0x24>
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d1ea      	bne.n	8014b94 <SDMMC_GetCmdResp6+0x24>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bc2:	f003 0304 	and.w	r3, r3, #4
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d004      	beq.n	8014bd4 <SDMMC_GetCmdResp6+0x64>
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2204      	movs	r2, #4
 8014bce:	639a      	str	r2, [r3, #56]	@ 0x38
 8014bd0:	2304      	movs	r3, #4
 8014bd2:	e03a      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bd8:	f003 0301 	and.w	r3, r3, #1
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d004      	beq.n	8014bea <SDMMC_GetCmdResp6+0x7a>
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2201      	movs	r2, #1
 8014be4:	639a      	str	r2, [r3, #56]	@ 0x38
 8014be6:	2301      	movs	r3, #1
 8014be8:	e02f      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7ff fb7c 	bl	80142e8 <SDMMC_GetCommandResponse>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	7afb      	ldrb	r3, [r7, #11]
 8014bf6:	4293      	cmp	r3, r2
 8014bf8:	d001      	beq.n	8014bfe <SDMMC_GetCmdResp6+0x8e>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e025      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	4a16      	ldr	r2, [pc, #88]	@ (8014c5c <SDMMC_GetCmdResp6+0xec>)
 8014c02:	639a      	str	r2, [r3, #56]	@ 0x38
 8014c04:	2100      	movs	r1, #0
 8014c06:	68f8      	ldr	r0, [r7, #12]
 8014c08:	f7ff fb7b 	bl	8014302 <SDMMC_GetResponse>
 8014c0c:	6178      	str	r0, [r7, #20]
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d106      	bne.n	8014c26 <SDMMC_GetCmdResp6+0xb6>
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	0c1b      	lsrs	r3, r3, #16
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	2300      	movs	r3, #0
 8014c24:	e011      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d002      	beq.n	8014c36 <SDMMC_GetCmdResp6+0xc6>
 8014c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014c34:	e009      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d002      	beq.n	8014c46 <SDMMC_GetCmdResp6+0xd6>
 8014c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014c44:	e001      	b.n	8014c4a <SDMMC_GetCmdResp6+0xda>
 8014c46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3720      	adds	r7, #32
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	24000228 	.word	0x24000228
 8014c58:	10624dd3 	.word	0x10624dd3
 8014c5c:	002000c5 	.word	0x002000c5

08014c60 <SDMMC_GetCmdResp7>:
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	4b22      	ldr	r3, [pc, #136]	@ (8014cf4 <SDMMC_GetCmdResp7+0x94>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4a22      	ldr	r2, [pc, #136]	@ (8014cf8 <SDMMC_GetCmdResp7+0x98>)
 8014c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8014c72:	0a5b      	lsrs	r3, r3, #9
 8014c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014c78:	fb02 f303 	mul.w	r3, r2, r3
 8014c7c:	60fb      	str	r3, [r7, #12]
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	1e5a      	subs	r2, r3, #1
 8014c82:	60fa      	str	r2, [r7, #12]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <SDMMC_GetCmdResp7+0x2e>
 8014c88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014c8c:	e02c      	b.n	8014ce8 <SDMMC_GetCmdResp7+0x88>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c92:	60bb      	str	r3, [r7, #8]
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d0ef      	beq.n	8014c7e <SDMMC_GetCmdResp7+0x1e>
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d1ea      	bne.n	8014c7e <SDMMC_GetCmdResp7+0x1e>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cac:	f003 0304 	and.w	r3, r3, #4
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d004      	beq.n	8014cbe <SDMMC_GetCmdResp7+0x5e>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2204      	movs	r2, #4
 8014cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8014cba:	2304      	movs	r3, #4
 8014cbc:	e014      	b.n	8014ce8 <SDMMC_GetCmdResp7+0x88>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cc2:	f003 0301 	and.w	r3, r3, #1
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d004      	beq.n	8014cd4 <SDMMC_GetCmdResp7+0x74>
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2201      	movs	r2, #1
 8014cce:	639a      	str	r2, [r3, #56]	@ 0x38
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e009      	b.n	8014ce8 <SDMMC_GetCmdResp7+0x88>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d002      	beq.n	8014ce6 <SDMMC_GetCmdResp7+0x86>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2240      	movs	r2, #64	@ 0x40
 8014ce4:	639a      	str	r2, [r3, #56]	@ 0x38
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3714      	adds	r7, #20
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr
 8014cf4:	24000228 	.word	0x24000228
 8014cf8:	10624dd3 	.word	0x10624dd3

08014cfc <SDMMC_GetCmdError>:
 8014cfc:	b480      	push	{r7}
 8014cfe:	b085      	sub	sp, #20
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	4b11      	ldr	r3, [pc, #68]	@ (8014d4c <SDMMC_GetCmdError+0x50>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	4a11      	ldr	r2, [pc, #68]	@ (8014d50 <SDMMC_GetCmdError+0x54>)
 8014d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8014d0e:	0a5b      	lsrs	r3, r3, #9
 8014d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014d14:	fb02 f303 	mul.w	r3, r2, r3
 8014d18:	60fb      	str	r3, [r7, #12]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	1e5a      	subs	r2, r3, #1
 8014d1e:	60fa      	str	r2, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d102      	bne.n	8014d2a <SDMMC_GetCmdError+0x2e>
 8014d24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014d28:	e009      	b.n	8014d3e <SDMMC_GetCmdError+0x42>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d0f1      	beq.n	8014d1a <SDMMC_GetCmdError+0x1e>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	4a06      	ldr	r2, [pc, #24]	@ (8014d54 <SDMMC_GetCmdError+0x58>)
 8014d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3714      	adds	r7, #20
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr
 8014d4a:	bf00      	nop
 8014d4c:	24000228 	.word	0x24000228
 8014d50:	10624dd3 	.word	0x10624dd3
 8014d54:	002000c5 	.word	0x002000c5

08014d58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014d5c:	4904      	ldr	r1, [pc, #16]	@ (8014d70 <MX_FATFS_Init+0x18>)
 8014d5e:	4805      	ldr	r0, [pc, #20]	@ (8014d74 <MX_FATFS_Init+0x1c>)
 8014d60:	f004 fc34 	bl	80195cc <FATFS_LinkDriver>
 8014d64:	4603      	mov	r3, r0
 8014d66:	461a      	mov	r2, r3
 8014d68:	4b03      	ldr	r3, [pc, #12]	@ (8014d78 <MX_FATFS_Init+0x20>)
 8014d6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014d6c:	bf00      	nop
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	24000fc4 	.word	0x24000fc4
 8014d74:	0801b298 	.word	0x0801b298
 8014d78:	24000fc0 	.word	0x24000fc0

08014d7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014d80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <BSP_SD_Init>:
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b082      	sub	sp, #8
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	2300      	movs	r3, #0
 8014d94:	71fb      	strb	r3, [r7, #7]
 8014d96:	f000 f896 	bl	8014ec6 <BSP_SD_IsDetected>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d001      	beq.n	8014da4 <BSP_SD_Init+0x18>
 8014da0:	2302      	movs	r3, #2
 8014da2:	e012      	b.n	8014dca <BSP_SD_Init+0x3e>
 8014da4:	480b      	ldr	r0, [pc, #44]	@ (8014dd4 <BSP_SD_Init+0x48>)
 8014da6:	f7fb fd11 	bl	80107cc <HAL_SD_Init>
 8014daa:	4603      	mov	r3, r0
 8014dac:	71fb      	strb	r3, [r7, #7]
 8014dae:	79fb      	ldrb	r3, [r7, #7]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d109      	bne.n	8014dc8 <BSP_SD_Init+0x3c>
 8014db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014db8:	4806      	ldr	r0, [pc, #24]	@ (8014dd4 <BSP_SD_Init+0x48>)
 8014dba:	f7fc fc19 	bl	80115f0 <HAL_SD_ConfigWideBusOperation>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d001      	beq.n	8014dc8 <BSP_SD_Init+0x3c>
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	71fb      	strb	r3, [r7, #7]
 8014dc8:	79fb      	ldrb	r3, [r7, #7]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3708      	adds	r7, #8
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	24000c18 	.word	0x24000c18

08014dd8 <BSP_SD_ReadBlocks_DMA>:
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	607a      	str	r2, [r7, #4]
 8014de4:	2300      	movs	r3, #0
 8014de6:	75fb      	strb	r3, [r7, #23]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	68f9      	ldr	r1, [r7, #12]
 8014dee:	4806      	ldr	r0, [pc, #24]	@ (8014e08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014df0:	f7fb fe48 	bl	8010a84 <HAL_SD_ReadBlocks_DMA>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d001      	beq.n	8014dfe <BSP_SD_ReadBlocks_DMA+0x26>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	75fb      	strb	r3, [r7, #23]
 8014dfe:	7dfb      	ldrb	r3, [r7, #23]
 8014e00:	4618      	mov	r0, r3
 8014e02:	3718      	adds	r7, #24
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	24000c18 	.word	0x24000c18

08014e0c <BSP_SD_WriteBlocks_DMA>:
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b086      	sub	sp, #24
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	60f8      	str	r0, [r7, #12]
 8014e14:	60b9      	str	r1, [r7, #8]
 8014e16:	607a      	str	r2, [r7, #4]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	75fb      	strb	r3, [r7, #23]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	68ba      	ldr	r2, [r7, #8]
 8014e20:	68f9      	ldr	r1, [r7, #12]
 8014e22:	4806      	ldr	r0, [pc, #24]	@ (8014e3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014e24:	f7fb fed6 	bl	8010bd4 <HAL_SD_WriteBlocks_DMA>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d001      	beq.n	8014e32 <BSP_SD_WriteBlocks_DMA+0x26>
 8014e2e:	2301      	movs	r3, #1
 8014e30:	75fb      	strb	r3, [r7, #23]
 8014e32:	7dfb      	ldrb	r3, [r7, #23]
 8014e34:	4618      	mov	r0, r3
 8014e36:	3718      	adds	r7, #24
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	24000c18 	.word	0x24000c18

08014e40 <BSP_SD_GetCardState>:
 8014e40:	b580      	push	{r7, lr}
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	4805      	ldr	r0, [pc, #20]	@ (8014e5c <BSP_SD_GetCardState+0x1c>)
 8014e46:	f7fc fce5 	bl	8011814 <HAL_SD_GetCardState>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	2b04      	cmp	r3, #4
 8014e4e:	bf14      	ite	ne
 8014e50:	2301      	movne	r3, #1
 8014e52:	2300      	moveq	r3, #0
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	4618      	mov	r0, r3
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	24000c18 	.word	0x24000c18

08014e60 <BSP_SD_GetCardInfo>:
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6879      	ldr	r1, [r7, #4]
 8014e6a:	4803      	ldr	r0, [pc, #12]	@ (8014e78 <BSP_SD_GetCardInfo+0x18>)
 8014e6c:	f7fc fb94 	bl	8011598 <HAL_SD_GetCardInfo>
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	24000c18 	.word	0x24000c18

08014e7c <HAL_SD_AbortCallback>:
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	f000 f818 	bl	8014eb8 <BSP_SD_AbortCallback>
 8014e88:	bf00      	nop
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <HAL_SD_TxCpltCallback>:
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	f000 fa4a 	bl	8015330 <BSP_SD_WriteCpltCallback>
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <HAL_SD_RxCpltCallback>:
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	f000 fa4c 	bl	8015348 <BSP_SD_ReadCpltCallback>
 8014eb0:	bf00      	nop
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <BSP_SD_AbortCallback>:
 8014eb8:	b480      	push	{r7}
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	bf00      	nop
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr

08014ec6 <BSP_SD_IsDetected>:
 8014ec6:	b580      	push	{r7, lr}
 8014ec8:	b082      	sub	sp, #8
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	2301      	movs	r3, #1
 8014ece:	71fb      	strb	r3, [r7, #7]
 8014ed0:	f000 f80c 	bl	8014eec <BSP_PlatformIsDetected>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <BSP_SD_IsDetected+0x18>
 8014eda:	2300      	movs	r3, #0
 8014edc:	71fb      	strb	r3, [r7, #7]
 8014ede:	79fb      	ldrb	r3, [r7, #7]
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
	...

08014eec <BSP_PlatformIsDetected>:
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	71fb      	strb	r3, [r7, #7]
 8014ef6:	2108      	movs	r1, #8
 8014ef8:	4806      	ldr	r0, [pc, #24]	@ (8014f14 <BSP_PlatformIsDetected+0x28>)
 8014efa:	f7f4 fdeb 	bl	8009ad4 <HAL_GPIO_ReadPin>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d001      	beq.n	8014f08 <BSP_PlatformIsDetected+0x1c>
 8014f04:	2300      	movs	r3, #0
 8014f06:	71fb      	strb	r3, [r7, #7]
 8014f08:	79fb      	ldrb	r3, [r7, #7]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	58021800 	.word	0x58021800

08014f18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014f20:	f7ef ff7a 	bl	8004e18 <HAL_GetTick>
 8014f24:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014f26:	e006      	b.n	8014f36 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014f28:	f7ff ff8a 	bl	8014e40 <BSP_SD_GetCardState>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d101      	bne.n	8014f36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	e009      	b.n	8014f4a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014f36:	f7ef ff6f 	bl	8004e18 <HAL_GetTick>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	1ad3      	subs	r3, r2, r3
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d8f0      	bhi.n	8014f28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
	...

08014f54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8014f8c <SD_CheckStatus+0x38>)
 8014f60:	2201      	movs	r2, #1
 8014f62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014f64:	f7ff ff6c 	bl	8014e40 <BSP_SD_GetCardState>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d107      	bne.n	8014f7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014f6e:	4b07      	ldr	r3, [pc, #28]	@ (8014f8c <SD_CheckStatus+0x38>)
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	f023 0301 	bic.w	r3, r3, #1
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	4b04      	ldr	r3, [pc, #16]	@ (8014f8c <SD_CheckStatus+0x38>)
 8014f7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014f7e:	4b03      	ldr	r3, [pc, #12]	@ (8014f8c <SD_CheckStatus+0x38>)
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	b2db      	uxtb	r3, r3
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	24000235 	.word	0x24000235

08014f90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	4603      	mov	r3, r0
 8014f98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014f9a:	f7ff fef7 	bl	8014d8c <BSP_SD_Init>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d107      	bne.n	8014fb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014fa4:	79fb      	ldrb	r3, [r7, #7]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7ff ffd4 	bl	8014f54 <SD_CheckStatus>
 8014fac:	4603      	mov	r3, r0
 8014fae:	461a      	mov	r2, r3
 8014fb0:	4b04      	ldr	r3, [pc, #16]	@ (8014fc4 <SD_initialize+0x34>)
 8014fb2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014fb4:	4b03      	ldr	r3, [pc, #12]	@ (8014fc4 <SD_initialize+0x34>)
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	b2db      	uxtb	r3, r3
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	24000235 	.word	0x24000235

08014fc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	4603      	mov	r3, r0
 8014fd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014fd2:	79fb      	ldrb	r3, [r7, #7]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7ff ffbd 	bl	8014f54 <SD_CheckStatus>
 8014fda:	4603      	mov	r3, r0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3708      	adds	r7, #8
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b088      	sub	sp, #32
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60b9      	str	r1, [r7, #8]
 8014fec:	607a      	str	r2, [r7, #4]
 8014fee:	603b      	str	r3, [r7, #0]
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014ff8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8014ffc:	f7ff ff8c 	bl	8014f18 <SD_CheckStatusWithTimeout>
 8015000:	4603      	mov	r3, r0
 8015002:	2b00      	cmp	r3, #0
 8015004:	da01      	bge.n	801500a <SD_read+0x26>
  {
    return res;
 8015006:	7ffb      	ldrb	r3, [r7, #31]
 8015008:	e08b      	b.n	8015122 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	f003 0303 	and.w	r3, r3, #3
 8015010:	2b00      	cmp	r3, #0
 8015012:	d13b      	bne.n	801508c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015014:	683a      	ldr	r2, [r7, #0]
 8015016:	6879      	ldr	r1, [r7, #4]
 8015018:	68b8      	ldr	r0, [r7, #8]
 801501a:	f7ff fedd 	bl	8014dd8 <BSP_SD_ReadBlocks_DMA>
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d17d      	bne.n	8015120 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015024:	4b41      	ldr	r3, [pc, #260]	@ (801512c <SD_read+0x148>)
 8015026:	2200      	movs	r2, #0
 8015028:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801502a:	f7ef fef5 	bl	8004e18 <HAL_GetTick>
 801502e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015030:	bf00      	nop
 8015032:	4b3e      	ldr	r3, [pc, #248]	@ (801512c <SD_read+0x148>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d108      	bne.n	801504c <SD_read+0x68>
 801503a:	f7ef feed 	bl	8004e18 <HAL_GetTick>
 801503e:	4602      	mov	r2, r0
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	1ad3      	subs	r3, r2, r3
 8015044:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015048:	4293      	cmp	r3, r2
 801504a:	d9f2      	bls.n	8015032 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801504c:	4b37      	ldr	r3, [pc, #220]	@ (801512c <SD_read+0x148>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d102      	bne.n	801505a <SD_read+0x76>
      {
        res = RES_ERROR;
 8015054:	2301      	movs	r3, #1
 8015056:	77fb      	strb	r3, [r7, #31]
 8015058:	e062      	b.n	8015120 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801505a:	4b34      	ldr	r3, [pc, #208]	@ (801512c <SD_read+0x148>)
 801505c:	2200      	movs	r2, #0
 801505e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015060:	f7ef feda 	bl	8004e18 <HAL_GetTick>
 8015064:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015066:	e007      	b.n	8015078 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015068:	f7ff feea 	bl	8014e40 <BSP_SD_GetCardState>
 801506c:	4603      	mov	r3, r0
 801506e:	2b00      	cmp	r3, #0
 8015070:	d102      	bne.n	8015078 <SD_read+0x94>
          {
            res = RES_OK;
 8015072:	2300      	movs	r3, #0
 8015074:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015076:	e053      	b.n	8015120 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015078:	f7ef fece 	bl	8004e18 <HAL_GetTick>
 801507c:	4602      	mov	r2, r0
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015086:	4293      	cmp	r3, r2
 8015088:	d9ee      	bls.n	8015068 <SD_read+0x84>
 801508a:	e049      	b.n	8015120 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801508c:	2300      	movs	r3, #0
 801508e:	61bb      	str	r3, [r7, #24]
 8015090:	e037      	b.n	8015102 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	1c5a      	adds	r2, r3, #1
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	2201      	movs	r2, #1
 801509a:	4619      	mov	r1, r3
 801509c:	4824      	ldr	r0, [pc, #144]	@ (8015130 <SD_read+0x14c>)
 801509e:	f7ff fe9b 	bl	8014dd8 <BSP_SD_ReadBlocks_DMA>
 80150a2:	4603      	mov	r3, r0
 80150a4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80150a6:	7fbb      	ldrb	r3, [r7, #30]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d12f      	bne.n	801510c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 80150ac:	f7ef feb4 	bl	8004e18 <HAL_GetTick>
 80150b0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80150b2:	bf00      	nop
 80150b4:	4b1d      	ldr	r3, [pc, #116]	@ (801512c <SD_read+0x148>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d108      	bne.n	80150ce <SD_read+0xea>
 80150bc:	f7ef feac 	bl	8004e18 <HAL_GetTick>
 80150c0:	4602      	mov	r2, r0
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	1ad3      	subs	r3, r2, r3
 80150c6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d9f2      	bls.n	80150b4 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 80150ce:	4b17      	ldr	r3, [pc, #92]	@ (801512c <SD_read+0x148>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d102      	bne.n	80150dc <SD_read+0xf8>
          {
            res = RES_ERROR;
 80150d6:	2301      	movs	r3, #1
 80150d8:	77fb      	strb	r3, [r7, #31]
            break;
 80150da:	e018      	b.n	801510e <SD_read+0x12a>
          }
          ReadStatus = 0;
 80150dc:	4b13      	ldr	r3, [pc, #76]	@ (801512c <SD_read+0x148>)
 80150de:	2200      	movs	r2, #0
 80150e0:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	4a12      	ldr	r2, [pc, #72]	@ (8015130 <SD_read+0x14c>)
 80150e6:	4618      	mov	r0, r3
 80150e8:	4611      	mov	r1, r2
 80150ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80150ee:	461a      	mov	r2, r3
 80150f0:	f004 fcf5 	bl	8019ade <memcpy>
          buff += BLOCKSIZE;
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80150fa:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	3301      	adds	r3, #1
 8015100:	61bb      	str	r3, [r7, #24]
 8015102:	69bb      	ldr	r3, [r7, #24]
 8015104:	683a      	ldr	r2, [r7, #0]
 8015106:	429a      	cmp	r2, r3
 8015108:	d8c3      	bhi.n	8015092 <SD_read+0xae>
 801510a:	e000      	b.n	801510e <SD_read+0x12a>
        }
        else
        {
          break;
 801510c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	683a      	ldr	r2, [r7, #0]
 8015112:	429a      	cmp	r2, r3
 8015114:	d104      	bne.n	8015120 <SD_read+0x13c>
 8015116:	7fbb      	ldrb	r3, [r7, #30]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <SD_read+0x13c>
        res = RES_OK;
 801511c:	2300      	movs	r3, #0
 801511e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8015120:	7ffb      	ldrb	r3, [r7, #31]
}
 8015122:	4618      	mov	r0, r3
 8015124:	3720      	adds	r7, #32
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	240011e4 	.word	0x240011e4
 8015130:	24000fe0 	.word	0x24000fe0

08015134 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b088      	sub	sp, #32
 8015138:	af00      	add	r7, sp, #0
 801513a:	60b9      	str	r1, [r7, #8]
 801513c:	607a      	str	r2, [r7, #4]
 801513e:	603b      	str	r3, [r7, #0]
 8015140:	4603      	mov	r3, r0
 8015142:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015144:	2301      	movs	r3, #1
 8015146:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015148:	4b4b      	ldr	r3, [pc, #300]	@ (8015278 <SD_write+0x144>)
 801514a:	2200      	movs	r2, #0
 801514c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801514e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8015152:	f7ff fee1 	bl	8014f18 <SD_CheckStatusWithTimeout>
 8015156:	4603      	mov	r3, r0
 8015158:	2b00      	cmp	r3, #0
 801515a:	da01      	bge.n	8015160 <SD_write+0x2c>
  {
    return res;
 801515c:	7ffb      	ldrb	r3, [r7, #31]
 801515e:	e087      	b.n	8015270 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	f003 0303 	and.w	r3, r3, #3
 8015166:	2b00      	cmp	r3, #0
 8015168:	d138      	bne.n	80151dc <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801516a:	683a      	ldr	r2, [r7, #0]
 801516c:	6879      	ldr	r1, [r7, #4]
 801516e:	68b8      	ldr	r0, [r7, #8]
 8015170:	f7ff fe4c 	bl	8014e0c <BSP_SD_WriteBlocks_DMA>
 8015174:	4603      	mov	r3, r0
 8015176:	2b00      	cmp	r3, #0
 8015178:	d179      	bne.n	801526e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801517a:	f7ef fe4d 	bl	8004e18 <HAL_GetTick>
 801517e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015180:	bf00      	nop
 8015182:	4b3d      	ldr	r3, [pc, #244]	@ (8015278 <SD_write+0x144>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d108      	bne.n	801519c <SD_write+0x68>
 801518a:	f7ef fe45 	bl	8004e18 <HAL_GetTick>
 801518e:	4602      	mov	r2, r0
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015198:	4293      	cmp	r3, r2
 801519a:	d9f2      	bls.n	8015182 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801519c:	4b36      	ldr	r3, [pc, #216]	@ (8015278 <SD_write+0x144>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d102      	bne.n	80151aa <SD_write+0x76>
      {
        res = RES_ERROR;
 80151a4:	2301      	movs	r3, #1
 80151a6:	77fb      	strb	r3, [r7, #31]
 80151a8:	e061      	b.n	801526e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 80151aa:	4b33      	ldr	r3, [pc, #204]	@ (8015278 <SD_write+0x144>)
 80151ac:	2200      	movs	r2, #0
 80151ae:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80151b0:	f7ef fe32 	bl	8004e18 <HAL_GetTick>
 80151b4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80151b6:	e007      	b.n	80151c8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80151b8:	f7ff fe42 	bl	8014e40 <BSP_SD_GetCardState>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d102      	bne.n	80151c8 <SD_write+0x94>
          {
            res = RES_OK;
 80151c2:	2300      	movs	r3, #0
 80151c4:	77fb      	strb	r3, [r7, #31]
            break;
 80151c6:	e052      	b.n	801526e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80151c8:	f7ef fe26 	bl	8004e18 <HAL_GetTick>
 80151cc:	4602      	mov	r2, r0
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d9ee      	bls.n	80151b8 <SD_write+0x84>
 80151da:	e048      	b.n	801526e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80151dc:	2300      	movs	r3, #0
 80151de:	61bb      	str	r3, [r7, #24]
 80151e0:	e034      	b.n	801524c <SD_write+0x118>
      {
        WriteStatus = 0;
 80151e2:	4b25      	ldr	r3, [pc, #148]	@ (8015278 <SD_write+0x144>)
 80151e4:	2200      	movs	r2, #0
 80151e6:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 80151e8:	4a24      	ldr	r2, [pc, #144]	@ (801527c <SD_write+0x148>)
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	4610      	mov	r0, r2
 80151ee:	4619      	mov	r1, r3
 80151f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80151f4:	461a      	mov	r2, r3
 80151f6:	f004 fc72 	bl	8019ade <memcpy>
        buff += BLOCKSIZE;
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8015200:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	607a      	str	r2, [r7, #4]
 8015208:	2201      	movs	r2, #1
 801520a:	4619      	mov	r1, r3
 801520c:	481b      	ldr	r0, [pc, #108]	@ (801527c <SD_write+0x148>)
 801520e:	f7ff fdfd 	bl	8014e0c <BSP_SD_WriteBlocks_DMA>
 8015212:	4603      	mov	r3, r0
 8015214:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015216:	7fbb      	ldrb	r3, [r7, #30]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d11c      	bne.n	8015256 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801521c:	f7ef fdfc 	bl	8004e18 <HAL_GetTick>
 8015220:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015222:	bf00      	nop
 8015224:	4b14      	ldr	r3, [pc, #80]	@ (8015278 <SD_write+0x144>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d108      	bne.n	801523e <SD_write+0x10a>
 801522c:	f7ef fdf4 	bl	8004e18 <HAL_GetTick>
 8015230:	4602      	mov	r2, r0
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	1ad3      	subs	r3, r2, r3
 8015236:	f247 522f 	movw	r2, #29999	@ 0x752f
 801523a:	4293      	cmp	r3, r2
 801523c:	d9f2      	bls.n	8015224 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801523e:	4b0e      	ldr	r3, [pc, #56]	@ (8015278 <SD_write+0x144>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d009      	beq.n	801525a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	3301      	adds	r3, #1
 801524a:	61bb      	str	r3, [r7, #24]
 801524c:	69bb      	ldr	r3, [r7, #24]
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	429a      	cmp	r2, r3
 8015252:	d8c6      	bhi.n	80151e2 <SD_write+0xae>
 8015254:	e002      	b.n	801525c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8015256:	bf00      	nop
 8015258:	e000      	b.n	801525c <SD_write+0x128>
            break;
 801525a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	683a      	ldr	r2, [r7, #0]
 8015260:	429a      	cmp	r2, r3
 8015262:	d104      	bne.n	801526e <SD_write+0x13a>
 8015264:	7fbb      	ldrb	r3, [r7, #30]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d101      	bne.n	801526e <SD_write+0x13a>
        res = RES_OK;
 801526a:	2300      	movs	r3, #0
 801526c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801526e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015270:	4618      	mov	r0, r3
 8015272:	3720      	adds	r7, #32
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	240011e0 	.word	0x240011e0
 801527c:	24000fe0 	.word	0x24000fe0

08015280 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b08c      	sub	sp, #48	@ 0x30
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	603a      	str	r2, [r7, #0]
 801528a:	71fb      	strb	r3, [r7, #7]
 801528c:	460b      	mov	r3, r1
 801528e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015290:	2301      	movs	r3, #1
 8015292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015296:	4b25      	ldr	r3, [pc, #148]	@ (801532c <SD_ioctl+0xac>)
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	b2db      	uxtb	r3, r3
 801529c:	f003 0301 	and.w	r3, r3, #1
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d001      	beq.n	80152a8 <SD_ioctl+0x28>
 80152a4:	2303      	movs	r3, #3
 80152a6:	e03c      	b.n	8015322 <SD_ioctl+0xa2>

  switch (cmd)
 80152a8:	79bb      	ldrb	r3, [r7, #6]
 80152aa:	2b03      	cmp	r3, #3
 80152ac:	d834      	bhi.n	8015318 <SD_ioctl+0x98>
 80152ae:	a201      	add	r2, pc, #4	@ (adr r2, 80152b4 <SD_ioctl+0x34>)
 80152b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b4:	080152c5 	.word	0x080152c5
 80152b8:	080152cd 	.word	0x080152cd
 80152bc:	080152e5 	.word	0x080152e5
 80152c0:	080152ff 	.word	0x080152ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80152c4:	2300      	movs	r3, #0
 80152c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80152ca:	e028      	b.n	801531e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80152cc:	f107 0308 	add.w	r3, r7, #8
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7ff fdc5 	bl	8014e60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80152d6:	6a3a      	ldr	r2, [r7, #32]
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80152dc:	2300      	movs	r3, #0
 80152de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80152e2:	e01c      	b.n	801531e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80152e4:	f107 0308 	add.w	r3, r7, #8
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7ff fdb9 	bl	8014e60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80152ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80152f6:	2300      	movs	r3, #0
 80152f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80152fc:	e00f      	b.n	801531e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80152fe:	f107 0308 	add.w	r3, r7, #8
 8015302:	4618      	mov	r0, r3
 8015304:	f7ff fdac 	bl	8014e60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801530a:	0a5a      	lsrs	r2, r3, #9
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015310:	2300      	movs	r3, #0
 8015312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015316:	e002      	b.n	801531e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015318:	2304      	movs	r3, #4
 801531a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801531e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8015322:	4618      	mov	r0, r3
 8015324:	3730      	adds	r7, #48	@ 0x30
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	24000235 	.word	0x24000235

08015330 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015330:	b480      	push	{r7}
 8015332:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015334:	4b03      	ldr	r3, [pc, #12]	@ (8015344 <BSP_SD_WriteCpltCallback+0x14>)
 8015336:	2201      	movs	r2, #1
 8015338:	601a      	str	r2, [r3, #0]
}
 801533a:	bf00      	nop
 801533c:	46bd      	mov	sp, r7
 801533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015342:	4770      	bx	lr
 8015344:	240011e0 	.word	0x240011e0

08015348 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015348:	b480      	push	{r7}
 801534a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801534c:	4b03      	ldr	r3, [pc, #12]	@ (801535c <BSP_SD_ReadCpltCallback+0x14>)
 801534e:	2201      	movs	r2, #1
 8015350:	601a      	str	r2, [r3, #0]
}
 8015352:	bf00      	nop
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr
 801535c:	240011e4 	.word	0x240011e4

08015360 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	4603      	mov	r3, r0
 8015368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801536a:	79fb      	ldrb	r3, [r7, #7]
 801536c:	4a08      	ldr	r2, [pc, #32]	@ (8015390 <disk_status+0x30>)
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	4413      	add	r3, r2
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	79fa      	ldrb	r2, [r7, #7]
 8015378:	4905      	ldr	r1, [pc, #20]	@ (8015390 <disk_status+0x30>)
 801537a:	440a      	add	r2, r1
 801537c:	7a12      	ldrb	r2, [r2, #8]
 801537e:	4610      	mov	r0, r2
 8015380:	4798      	blx	r3
 8015382:	4603      	mov	r3, r0
 8015384:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015386:	7bfb      	ldrb	r3, [r7, #15]
}
 8015388:	4618      	mov	r0, r3
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	24001670 	.word	0x24001670

08015394 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	4603      	mov	r3, r0
 801539c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801539e:	2300      	movs	r3, #0
 80153a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80153a2:	79fb      	ldrb	r3, [r7, #7]
 80153a4:	4a0e      	ldr	r2, [pc, #56]	@ (80153e0 <disk_initialize+0x4c>)
 80153a6:	5cd3      	ldrb	r3, [r2, r3]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d114      	bne.n	80153d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80153ac:	79fb      	ldrb	r3, [r7, #7]
 80153ae:	4a0c      	ldr	r2, [pc, #48]	@ (80153e0 <disk_initialize+0x4c>)
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	79fa      	ldrb	r2, [r7, #7]
 80153ba:	4909      	ldr	r1, [pc, #36]	@ (80153e0 <disk_initialize+0x4c>)
 80153bc:	440a      	add	r2, r1
 80153be:	7a12      	ldrb	r2, [r2, #8]
 80153c0:	4610      	mov	r0, r2
 80153c2:	4798      	blx	r3
 80153c4:	4603      	mov	r3, r0
 80153c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80153c8:	7bfb      	ldrb	r3, [r7, #15]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d103      	bne.n	80153d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80153ce:	79fb      	ldrb	r3, [r7, #7]
 80153d0:	4a03      	ldr	r2, [pc, #12]	@ (80153e0 <disk_initialize+0x4c>)
 80153d2:	2101      	movs	r1, #1
 80153d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80153d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153d8:	4618      	mov	r0, r3
 80153da:	3710      	adds	r7, #16
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	24001670 	.word	0x24001670

080153e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80153e4:	b590      	push	{r4, r7, lr}
 80153e6:	b087      	sub	sp, #28
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60b9      	str	r1, [r7, #8]
 80153ec:	607a      	str	r2, [r7, #4]
 80153ee:	603b      	str	r3, [r7, #0]
 80153f0:	4603      	mov	r3, r0
 80153f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80153f4:	7bfb      	ldrb	r3, [r7, #15]
 80153f6:	4a0a      	ldr	r2, [pc, #40]	@ (8015420 <disk_read+0x3c>)
 80153f8:	009b      	lsls	r3, r3, #2
 80153fa:	4413      	add	r3, r2
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	689c      	ldr	r4, [r3, #8]
 8015400:	7bfb      	ldrb	r3, [r7, #15]
 8015402:	4a07      	ldr	r2, [pc, #28]	@ (8015420 <disk_read+0x3c>)
 8015404:	4413      	add	r3, r2
 8015406:	7a18      	ldrb	r0, [r3, #8]
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	687a      	ldr	r2, [r7, #4]
 801540c:	68b9      	ldr	r1, [r7, #8]
 801540e:	47a0      	blx	r4
 8015410:	4603      	mov	r3, r0
 8015412:	75fb      	strb	r3, [r7, #23]
  return res;
 8015414:	7dfb      	ldrb	r3, [r7, #23]
}
 8015416:	4618      	mov	r0, r3
 8015418:	371c      	adds	r7, #28
 801541a:	46bd      	mov	sp, r7
 801541c:	bd90      	pop	{r4, r7, pc}
 801541e:	bf00      	nop
 8015420:	24001670 	.word	0x24001670

08015424 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015424:	b590      	push	{r4, r7, lr}
 8015426:	b087      	sub	sp, #28
 8015428:	af00      	add	r7, sp, #0
 801542a:	60b9      	str	r1, [r7, #8]
 801542c:	607a      	str	r2, [r7, #4]
 801542e:	603b      	str	r3, [r7, #0]
 8015430:	4603      	mov	r3, r0
 8015432:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015434:	7bfb      	ldrb	r3, [r7, #15]
 8015436:	4a0a      	ldr	r2, [pc, #40]	@ (8015460 <disk_write+0x3c>)
 8015438:	009b      	lsls	r3, r3, #2
 801543a:	4413      	add	r3, r2
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	68dc      	ldr	r4, [r3, #12]
 8015440:	7bfb      	ldrb	r3, [r7, #15]
 8015442:	4a07      	ldr	r2, [pc, #28]	@ (8015460 <disk_write+0x3c>)
 8015444:	4413      	add	r3, r2
 8015446:	7a18      	ldrb	r0, [r3, #8]
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	68b9      	ldr	r1, [r7, #8]
 801544e:	47a0      	blx	r4
 8015450:	4603      	mov	r3, r0
 8015452:	75fb      	strb	r3, [r7, #23]
  return res;
 8015454:	7dfb      	ldrb	r3, [r7, #23]
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	bd90      	pop	{r4, r7, pc}
 801545e:	bf00      	nop
 8015460:	24001670 	.word	0x24001670

08015464 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	603a      	str	r2, [r7, #0]
 801546e:	71fb      	strb	r3, [r7, #7]
 8015470:	460b      	mov	r3, r1
 8015472:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015474:	79fb      	ldrb	r3, [r7, #7]
 8015476:	4a09      	ldr	r2, [pc, #36]	@ (801549c <disk_ioctl+0x38>)
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	4413      	add	r3, r2
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	691b      	ldr	r3, [r3, #16]
 8015480:	79fa      	ldrb	r2, [r7, #7]
 8015482:	4906      	ldr	r1, [pc, #24]	@ (801549c <disk_ioctl+0x38>)
 8015484:	440a      	add	r2, r1
 8015486:	7a10      	ldrb	r0, [r2, #8]
 8015488:	79b9      	ldrb	r1, [r7, #6]
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	4798      	blx	r3
 801548e:	4603      	mov	r3, r0
 8015490:	73fb      	strb	r3, [r7, #15]
  return res;
 8015492:	7bfb      	ldrb	r3, [r7, #15]
}
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	24001670 	.word	0x24001670

080154a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80154a0:	b480      	push	{r7}
 80154a2:	b085      	sub	sp, #20
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	3301      	adds	r3, #1
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80154b0:	89fb      	ldrh	r3, [r7, #14]
 80154b2:	021b      	lsls	r3, r3, #8
 80154b4:	b21a      	sxth	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	b21b      	sxth	r3, r3
 80154bc:	4313      	orrs	r3, r2
 80154be:	b21b      	sxth	r3, r3
 80154c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80154c2:	89fb      	ldrh	r3, [r7, #14]
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3714      	adds	r7, #20
 80154c8:	46bd      	mov	sp, r7
 80154ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ce:	4770      	bx	lr

080154d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	3303      	adds	r3, #3
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	021b      	lsls	r3, r3, #8
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	3202      	adds	r2, #2
 80154e8:	7812      	ldrb	r2, [r2, #0]
 80154ea:	4313      	orrs	r3, r2
 80154ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	021b      	lsls	r3, r3, #8
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	3201      	adds	r2, #1
 80154f6:	7812      	ldrb	r2, [r2, #0]
 80154f8:	4313      	orrs	r3, r2
 80154fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	021b      	lsls	r3, r3, #8
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	7812      	ldrb	r2, [r2, #0]
 8015504:	4313      	orrs	r3, r2
 8015506:	60fb      	str	r3, [r7, #12]
	return rv;
 8015508:	68fb      	ldr	r3, [r7, #12]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3714      	adds	r7, #20
 801550e:	46bd      	mov	sp, r7
 8015510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015514:	4770      	bx	lr

08015516 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8015516:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801551a:	b09d      	sub	sp, #116	@ 0x74
 801551c:	af00      	add	r7, sp, #0
 801551e:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8015520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015522:	3307      	adds	r3, #7
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	b2db      	uxtb	r3, r3
 8015528:	2200      	movs	r2, #0
 801552a:	469a      	mov	sl, r3
 801552c:	4693      	mov	fp, r2
 801552e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8015532:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8015536:	f04f 0000 	mov.w	r0, #0
 801553a:	f04f 0100 	mov.w	r1, #0
 801553e:	0219      	lsls	r1, r3, #8
 8015540:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015544:	0210      	lsls	r0, r2, #8
 8015546:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015548:	3306      	adds	r3, #6
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	b2db      	uxtb	r3, r3
 801554e:	2200      	movs	r2, #0
 8015550:	461c      	mov	r4, r3
 8015552:	4615      	mov	r5, r2
 8015554:	ea40 0804 	orr.w	r8, r0, r4
 8015558:	ea41 0905 	orr.w	r9, r1, r5
 801555c:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8015560:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8015564:	f04f 0000 	mov.w	r0, #0
 8015568:	f04f 0100 	mov.w	r1, #0
 801556c:	0219      	lsls	r1, r3, #8
 801556e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015572:	0210      	lsls	r0, r2, #8
 8015574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015576:	3305      	adds	r3, #5
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	b2db      	uxtb	r3, r3
 801557c:	2200      	movs	r2, #0
 801557e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015580:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8015582:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8015586:	4623      	mov	r3, r4
 8015588:	4303      	orrs	r3, r0
 801558a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801558c:	462b      	mov	r3, r5
 801558e:	430b      	orrs	r3, r1
 8015590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015592:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8015596:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 801559a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801559e:	f04f 0000 	mov.w	r0, #0
 80155a2:	f04f 0100 	mov.w	r1, #0
 80155a6:	0219      	lsls	r1, r3, #8
 80155a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80155ac:	0210      	lsls	r0, r2, #8
 80155ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155b0:	3304      	adds	r3, #4
 80155b2:	781b      	ldrb	r3, [r3, #0]
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2200      	movs	r2, #0
 80155b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80155ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80155bc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80155c0:	4623      	mov	r3, r4
 80155c2:	4303      	orrs	r3, r0
 80155c4:	623b      	str	r3, [r7, #32]
 80155c6:	462b      	mov	r3, r5
 80155c8:	430b      	orrs	r3, r1
 80155ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80155cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80155d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 80155d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80155d8:	f04f 0000 	mov.w	r0, #0
 80155dc:	f04f 0100 	mov.w	r1, #0
 80155e0:	0219      	lsls	r1, r3, #8
 80155e2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80155e6:	0210      	lsls	r0, r2, #8
 80155e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155ea:	3303      	adds	r3, #3
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2200      	movs	r2, #0
 80155f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80155f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80155f6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80155fa:	4623      	mov	r3, r4
 80155fc:	4303      	orrs	r3, r0
 80155fe:	61bb      	str	r3, [r7, #24]
 8015600:	462b      	mov	r3, r5
 8015602:	430b      	orrs	r3, r1
 8015604:	61fb      	str	r3, [r7, #28]
 8015606:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801560a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 801560e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8015612:	f04f 0000 	mov.w	r0, #0
 8015616:	f04f 0100 	mov.w	r1, #0
 801561a:	0219      	lsls	r1, r3, #8
 801561c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015620:	0210      	lsls	r0, r2, #8
 8015622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015624:	3302      	adds	r3, #2
 8015626:	781b      	ldrb	r3, [r3, #0]
 8015628:	b2db      	uxtb	r3, r3
 801562a:	2200      	movs	r2, #0
 801562c:	643b      	str	r3, [r7, #64]	@ 0x40
 801562e:	647a      	str	r2, [r7, #68]	@ 0x44
 8015630:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8015634:	4623      	mov	r3, r4
 8015636:	4303      	orrs	r3, r0
 8015638:	613b      	str	r3, [r7, #16]
 801563a:	462b      	mov	r3, r5
 801563c:	430b      	orrs	r3, r1
 801563e:	617b      	str	r3, [r7, #20]
 8015640:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015644:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8015648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801564c:	f04f 0200 	mov.w	r2, #0
 8015650:	f04f 0300 	mov.w	r3, #0
 8015654:	020b      	lsls	r3, r1, #8
 8015656:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801565a:	0202      	lsls	r2, r0, #8
 801565c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801565e:	3101      	adds	r1, #1
 8015660:	7809      	ldrb	r1, [r1, #0]
 8015662:	b2c9      	uxtb	r1, r1
 8015664:	2000      	movs	r0, #0
 8015666:	63b9      	str	r1, [r7, #56]	@ 0x38
 8015668:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801566a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801566e:	4621      	mov	r1, r4
 8015670:	4311      	orrs	r1, r2
 8015672:	60b9      	str	r1, [r7, #8]
 8015674:	4629      	mov	r1, r5
 8015676:	4319      	orrs	r1, r3
 8015678:	60f9      	str	r1, [r7, #12]
 801567a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801567e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8015682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015686:	f04f 0200 	mov.w	r2, #0
 801568a:	f04f 0300 	mov.w	r3, #0
 801568e:	020b      	lsls	r3, r1, #8
 8015690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015694:	0202      	lsls	r2, r0, #8
 8015696:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8015698:	7809      	ldrb	r1, [r1, #0]
 801569a:	b2c9      	uxtb	r1, r1
 801569c:	2000      	movs	r0, #0
 801569e:	6339      	str	r1, [r7, #48]	@ 0x30
 80156a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80156a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80156a6:	4621      	mov	r1, r4
 80156a8:	4311      	orrs	r1, r2
 80156aa:	6039      	str	r1, [r7, #0]
 80156ac:	4629      	mov	r1, r5
 80156ae:	4319      	orrs	r1, r3
 80156b0:	6079      	str	r1, [r7, #4]
 80156b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80156b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 80156ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 80156be:	4610      	mov	r0, r2
 80156c0:	4619      	mov	r1, r3
 80156c2:	3774      	adds	r7, #116	@ 0x74
 80156c4:	46bd      	mov	sp, r7
 80156c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80156ca:	4770      	bx	lr

080156cc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	607a      	str	r2, [r7, #4]
 80156de:	887a      	ldrh	r2, [r7, #2]
 80156e0:	b2d2      	uxtb	r2, r2
 80156e2:	701a      	strb	r2, [r3, #0]
 80156e4:	887b      	ldrh	r3, [r7, #2]
 80156e6:	0a1b      	lsrs	r3, r3, #8
 80156e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	1c5a      	adds	r2, r3, #1
 80156ee:	607a      	str	r2, [r7, #4]
 80156f0:	887a      	ldrh	r2, [r7, #2]
 80156f2:	b2d2      	uxtb	r2, r2
 80156f4:	701a      	strb	r2, [r3, #0]
}
 80156f6:	bf00      	nop
 80156f8:	370c      	adds	r7, #12
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr

08015702 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015702:	b480      	push	{r7}
 8015704:	b083      	sub	sp, #12
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]
 801570a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	1c5a      	adds	r2, r3, #1
 8015710:	607a      	str	r2, [r7, #4]
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	b2d2      	uxtb	r2, r2
 8015716:	701a      	strb	r2, [r3, #0]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	0a1b      	lsrs	r3, r3, #8
 801571c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	1c5a      	adds	r2, r3, #1
 8015722:	607a      	str	r2, [r7, #4]
 8015724:	683a      	ldr	r2, [r7, #0]
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	701a      	strb	r2, [r3, #0]
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	0a1b      	lsrs	r3, r3, #8
 801572e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	1c5a      	adds	r2, r3, #1
 8015734:	607a      	str	r2, [r7, #4]
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	b2d2      	uxtb	r2, r2
 801573a:	701a      	strb	r2, [r3, #0]
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	0a1b      	lsrs	r3, r3, #8
 8015740:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	1c5a      	adds	r2, r3, #1
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	b2d2      	uxtb	r2, r2
 801574c:	701a      	strb	r2, [r3, #0]
}
 801574e:	bf00      	nop
 8015750:	370c      	adds	r7, #12
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr

0801575a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 801575a:	b480      	push	{r7}
 801575c:	b085      	sub	sp, #20
 801575e:	af00      	add	r7, sp, #0
 8015760:	60f8      	str	r0, [r7, #12]
 8015762:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	1c5a      	adds	r2, r3, #1
 801576a:	60fa      	str	r2, [r7, #12]
 801576c:	783a      	ldrb	r2, [r7, #0]
 801576e:	701a      	strb	r2, [r3, #0]
 8015770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015774:	f04f 0200 	mov.w	r2, #0
 8015778:	f04f 0300 	mov.w	r3, #0
 801577c:	0a02      	lsrs	r2, r0, #8
 801577e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015782:	0a0b      	lsrs	r3, r1, #8
 8015784:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	1c5a      	adds	r2, r3, #1
 801578c:	60fa      	str	r2, [r7, #12]
 801578e:	783a      	ldrb	r2, [r7, #0]
 8015790:	701a      	strb	r2, [r3, #0]
 8015792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015796:	f04f 0200 	mov.w	r2, #0
 801579a:	f04f 0300 	mov.w	r3, #0
 801579e:	0a02      	lsrs	r2, r0, #8
 80157a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80157a4:	0a0b      	lsrs	r3, r1, #8
 80157a6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	1c5a      	adds	r2, r3, #1
 80157ae:	60fa      	str	r2, [r7, #12]
 80157b0:	783a      	ldrb	r2, [r7, #0]
 80157b2:	701a      	strb	r2, [r3, #0]
 80157b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80157b8:	f04f 0200 	mov.w	r2, #0
 80157bc:	f04f 0300 	mov.w	r3, #0
 80157c0:	0a02      	lsrs	r2, r0, #8
 80157c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80157c6:	0a0b      	lsrs	r3, r1, #8
 80157c8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	1c5a      	adds	r2, r3, #1
 80157d0:	60fa      	str	r2, [r7, #12]
 80157d2:	783a      	ldrb	r2, [r7, #0]
 80157d4:	701a      	strb	r2, [r3, #0]
 80157d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80157da:	f04f 0200 	mov.w	r2, #0
 80157de:	f04f 0300 	mov.w	r3, #0
 80157e2:	0a02      	lsrs	r2, r0, #8
 80157e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80157e8:	0a0b      	lsrs	r3, r1, #8
 80157ea:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	1c5a      	adds	r2, r3, #1
 80157f2:	60fa      	str	r2, [r7, #12]
 80157f4:	783a      	ldrb	r2, [r7, #0]
 80157f6:	701a      	strb	r2, [r3, #0]
 80157f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80157fc:	f04f 0200 	mov.w	r2, #0
 8015800:	f04f 0300 	mov.w	r3, #0
 8015804:	0a02      	lsrs	r2, r0, #8
 8015806:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801580a:	0a0b      	lsrs	r3, r1, #8
 801580c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	1c5a      	adds	r2, r3, #1
 8015814:	60fa      	str	r2, [r7, #12]
 8015816:	783a      	ldrb	r2, [r7, #0]
 8015818:	701a      	strb	r2, [r3, #0]
 801581a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801581e:	f04f 0200 	mov.w	r2, #0
 8015822:	f04f 0300 	mov.w	r3, #0
 8015826:	0a02      	lsrs	r2, r0, #8
 8015828:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801582c:	0a0b      	lsrs	r3, r1, #8
 801582e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	1c5a      	adds	r2, r3, #1
 8015836:	60fa      	str	r2, [r7, #12]
 8015838:	783a      	ldrb	r2, [r7, #0]
 801583a:	701a      	strb	r2, [r3, #0]
 801583c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015840:	f04f 0200 	mov.w	r2, #0
 8015844:	f04f 0300 	mov.w	r3, #0
 8015848:	0a02      	lsrs	r2, r0, #8
 801584a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801584e:	0a0b      	lsrs	r3, r1, #8
 8015850:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	1c5a      	adds	r2, r3, #1
 8015858:	60fa      	str	r2, [r7, #12]
 801585a:	783a      	ldrb	r2, [r7, #0]
 801585c:	701a      	strb	r2, [r3, #0]
}
 801585e:	bf00      	nop
 8015860:	3714      	adds	r7, #20
 8015862:	46bd      	mov	sp, r7
 8015864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015868:	4770      	bx	lr

0801586a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801586a:	b480      	push	{r7}
 801586c:	b087      	sub	sp, #28
 801586e:	af00      	add	r7, sp, #0
 8015870:	60f8      	str	r0, [r7, #12]
 8015872:	60b9      	str	r1, [r7, #8]
 8015874:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d00d      	beq.n	80158a0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015884:	693a      	ldr	r2, [r7, #16]
 8015886:	1c53      	adds	r3, r2, #1
 8015888:	613b      	str	r3, [r7, #16]
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	1c59      	adds	r1, r3, #1
 801588e:	6179      	str	r1, [r7, #20]
 8015890:	7812      	ldrb	r2, [r2, #0]
 8015892:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	3b01      	subs	r3, #1
 8015898:	607b      	str	r3, [r7, #4]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1f1      	bne.n	8015884 <mem_cpy+0x1a>
	}
}
 80158a0:	bf00      	nop
 80158a2:	371c      	adds	r7, #28
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80158ac:	b480      	push	{r7}
 80158ae:	b087      	sub	sp, #28
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	1c5a      	adds	r2, r3, #1
 80158c0:	617a      	str	r2, [r7, #20]
 80158c2:	68ba      	ldr	r2, [r7, #8]
 80158c4:	b2d2      	uxtb	r2, r2
 80158c6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	607b      	str	r3, [r7, #4]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1f3      	bne.n	80158bc <mem_set+0x10>
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop
 80158d8:	371c      	adds	r7, #28
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr

080158e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80158e2:	b480      	push	{r7}
 80158e4:	b089      	sub	sp, #36	@ 0x24
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	61fb      	str	r3, [r7, #28]
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	1c5a      	adds	r2, r3, #1
 80158fe:	61fa      	str	r2, [r7, #28]
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	4619      	mov	r1, r3
 8015904:	69bb      	ldr	r3, [r7, #24]
 8015906:	1c5a      	adds	r2, r3, #1
 8015908:	61ba      	str	r2, [r7, #24]
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	1acb      	subs	r3, r1, r3
 801590e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3b01      	subs	r3, #1
 8015914:	607b      	str	r3, [r7, #4]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d002      	beq.n	8015922 <mem_cmp+0x40>
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d0eb      	beq.n	80158fa <mem_cmp+0x18>

	return r;
 8015922:	697b      	ldr	r3, [r7, #20]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3724      	adds	r7, #36	@ 0x24
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr

08015930 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015930:	b480      	push	{r7}
 8015932:	b083      	sub	sp, #12
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
 8015938:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801593a:	e002      	b.n	8015942 <chk_chr+0x12>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	3301      	adds	r3, #1
 8015940:	607b      	str	r3, [r7, #4]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d005      	beq.n	8015956 <chk_chr+0x26>
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	461a      	mov	r2, r3
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	4293      	cmp	r3, r2
 8015954:	d1f2      	bne.n	801593c <chk_chr+0xc>
	return *str;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	781b      	ldrb	r3, [r3, #0]
}
 801595a:	4618      	mov	r0, r3
 801595c:	370c      	adds	r7, #12
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr
	...

08015968 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015972:	2300      	movs	r3, #0
 8015974:	60bb      	str	r3, [r7, #8]
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	60fb      	str	r3, [r7, #12]
 801597a:	e029      	b.n	80159d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801597c:	4a27      	ldr	r2, [pc, #156]	@ (8015a1c <chk_lock+0xb4>)
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	011b      	lsls	r3, r3, #4
 8015982:	4413      	add	r3, r2
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d01d      	beq.n	80159c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801598a:	4a24      	ldr	r2, [pc, #144]	@ (8015a1c <chk_lock+0xb4>)
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	011b      	lsls	r3, r3, #4
 8015990:	4413      	add	r3, r2
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	429a      	cmp	r2, r3
 801599a:	d116      	bne.n	80159ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801599c:	4a1f      	ldr	r2, [pc, #124]	@ (8015a1c <chk_lock+0xb4>)
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	011b      	lsls	r3, r3, #4
 80159a2:	4413      	add	r3, r2
 80159a4:	3304      	adds	r3, #4
 80159a6:	681a      	ldr	r2, [r3, #0]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d10c      	bne.n	80159ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80159b0:	4a1a      	ldr	r2, [pc, #104]	@ (8015a1c <chk_lock+0xb4>)
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	011b      	lsls	r3, r3, #4
 80159b6:	4413      	add	r3, r2
 80159b8:	3308      	adds	r3, #8
 80159ba:	681a      	ldr	r2, [r3, #0]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d102      	bne.n	80159ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80159c4:	e007      	b.n	80159d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80159c6:	2301      	movs	r3, #1
 80159c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	3301      	adds	r3, #1
 80159ce:	60fb      	str	r3, [r7, #12]
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	2b01      	cmp	r3, #1
 80159d4:	d9d2      	bls.n	801597c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d109      	bne.n	80159f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d102      	bne.n	80159e8 <chk_lock+0x80>
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	2b02      	cmp	r3, #2
 80159e6:	d101      	bne.n	80159ec <chk_lock+0x84>
 80159e8:	2300      	movs	r3, #0
 80159ea:	e010      	b.n	8015a0e <chk_lock+0xa6>
 80159ec:	2312      	movs	r3, #18
 80159ee:	e00e      	b.n	8015a0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d108      	bne.n	8015a08 <chk_lock+0xa0>
 80159f6:	4a09      	ldr	r2, [pc, #36]	@ (8015a1c <chk_lock+0xb4>)
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	011b      	lsls	r3, r3, #4
 80159fc:	4413      	add	r3, r2
 80159fe:	330c      	adds	r3, #12
 8015a00:	881b      	ldrh	r3, [r3, #0]
 8015a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a06:	d101      	bne.n	8015a0c <chk_lock+0xa4>
 8015a08:	2310      	movs	r3, #16
 8015a0a:	e000      	b.n	8015a0e <chk_lock+0xa6>
 8015a0c:	2300      	movs	r3, #0
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3714      	adds	r7, #20
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	240011f0 	.word	0x240011f0

08015a20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015a26:	2300      	movs	r3, #0
 8015a28:	607b      	str	r3, [r7, #4]
 8015a2a:	e002      	b.n	8015a32 <enq_lock+0x12>
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	3301      	adds	r3, #1
 8015a30:	607b      	str	r3, [r7, #4]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d806      	bhi.n	8015a46 <enq_lock+0x26>
 8015a38:	4a09      	ldr	r2, [pc, #36]	@ (8015a60 <enq_lock+0x40>)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	011b      	lsls	r3, r3, #4
 8015a3e:	4413      	add	r3, r2
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d1f2      	bne.n	8015a2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b02      	cmp	r3, #2
 8015a4a:	bf14      	ite	ne
 8015a4c:	2301      	movne	r3, #1
 8015a4e:	2300      	moveq	r3, #0
 8015a50:	b2db      	uxtb	r3, r3
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr
 8015a5e:	bf00      	nop
 8015a60:	240011f0 	.word	0x240011f0

08015a64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b085      	sub	sp, #20
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015a6e:	2300      	movs	r3, #0
 8015a70:	60fb      	str	r3, [r7, #12]
 8015a72:	e01f      	b.n	8015ab4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015a74:	4a41      	ldr	r2, [pc, #260]	@ (8015b7c <inc_lock+0x118>)
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	011b      	lsls	r3, r3, #4
 8015a7a:	4413      	add	r3, r2
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d113      	bne.n	8015aae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015a86:	4a3d      	ldr	r2, [pc, #244]	@ (8015b7c <inc_lock+0x118>)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	011b      	lsls	r3, r3, #4
 8015a8c:	4413      	add	r3, r2
 8015a8e:	3304      	adds	r3, #4
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d109      	bne.n	8015aae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015a9a:	4a38      	ldr	r2, [pc, #224]	@ (8015b7c <inc_lock+0x118>)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	011b      	lsls	r3, r3, #4
 8015aa0:	4413      	add	r3, r2
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d006      	beq.n	8015abc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	60fb      	str	r3, [r7, #12]
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2b01      	cmp	r3, #1
 8015ab8:	d9dc      	bls.n	8015a74 <inc_lock+0x10>
 8015aba:	e000      	b.n	8015abe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015abc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2b02      	cmp	r3, #2
 8015ac2:	d132      	bne.n	8015b2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	60fb      	str	r3, [r7, #12]
 8015ac8:	e002      	b.n	8015ad0 <inc_lock+0x6c>
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	3301      	adds	r3, #1
 8015ace:	60fb      	str	r3, [r7, #12]
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d806      	bhi.n	8015ae4 <inc_lock+0x80>
 8015ad6:	4a29      	ldr	r2, [pc, #164]	@ (8015b7c <inc_lock+0x118>)
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	011b      	lsls	r3, r3, #4
 8015adc:	4413      	add	r3, r2
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d1f2      	bne.n	8015aca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	d101      	bne.n	8015aee <inc_lock+0x8a>
 8015aea:	2300      	movs	r3, #0
 8015aec:	e040      	b.n	8015b70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	4922      	ldr	r1, [pc, #136]	@ (8015b7c <inc_lock+0x118>)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	011b      	lsls	r3, r3, #4
 8015af8:	440b      	add	r3, r1
 8015afa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	689a      	ldr	r2, [r3, #8]
 8015b00:	491e      	ldr	r1, [pc, #120]	@ (8015b7c <inc_lock+0x118>)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	011b      	lsls	r3, r3, #4
 8015b06:	440b      	add	r3, r1
 8015b08:	3304      	adds	r3, #4
 8015b0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015b10:	491a      	ldr	r1, [pc, #104]	@ (8015b7c <inc_lock+0x118>)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	011b      	lsls	r3, r3, #4
 8015b16:	440b      	add	r3, r1
 8015b18:	3308      	adds	r3, #8
 8015b1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015b1c:	4a17      	ldr	r2, [pc, #92]	@ (8015b7c <inc_lock+0x118>)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	011b      	lsls	r3, r3, #4
 8015b22:	4413      	add	r3, r2
 8015b24:	330c      	adds	r3, #12
 8015b26:	2200      	movs	r2, #0
 8015b28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d009      	beq.n	8015b44 <inc_lock+0xe0>
 8015b30:	4a12      	ldr	r2, [pc, #72]	@ (8015b7c <inc_lock+0x118>)
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	011b      	lsls	r3, r3, #4
 8015b36:	4413      	add	r3, r2
 8015b38:	330c      	adds	r3, #12
 8015b3a:	881b      	ldrh	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d001      	beq.n	8015b44 <inc_lock+0xe0>
 8015b40:	2300      	movs	r3, #0
 8015b42:	e015      	b.n	8015b70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d108      	bne.n	8015b5c <inc_lock+0xf8>
 8015b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8015b7c <inc_lock+0x118>)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	011b      	lsls	r3, r3, #4
 8015b50:	4413      	add	r3, r2
 8015b52:	330c      	adds	r3, #12
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	3301      	adds	r3, #1
 8015b58:	b29a      	uxth	r2, r3
 8015b5a:	e001      	b.n	8015b60 <inc_lock+0xfc>
 8015b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015b60:	4906      	ldr	r1, [pc, #24]	@ (8015b7c <inc_lock+0x118>)
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	011b      	lsls	r3, r3, #4
 8015b66:	440b      	add	r3, r1
 8015b68:	330c      	adds	r3, #12
 8015b6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	3301      	adds	r3, #1
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3714      	adds	r7, #20
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr
 8015b7c:	240011f0 	.word	0x240011f0

08015b80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b085      	sub	sp, #20
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	607b      	str	r3, [r7, #4]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d825      	bhi.n	8015be0 <dec_lock+0x60>
		n = Files[i].ctr;
 8015b94:	4a17      	ldr	r2, [pc, #92]	@ (8015bf4 <dec_lock+0x74>)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	011b      	lsls	r3, r3, #4
 8015b9a:	4413      	add	r3, r2
 8015b9c:	330c      	adds	r3, #12
 8015b9e:	881b      	ldrh	r3, [r3, #0]
 8015ba0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015ba2:	89fb      	ldrh	r3, [r7, #14]
 8015ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ba8:	d101      	bne.n	8015bae <dec_lock+0x2e>
 8015baa:	2300      	movs	r3, #0
 8015bac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015bae:	89fb      	ldrh	r3, [r7, #14]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d002      	beq.n	8015bba <dec_lock+0x3a>
 8015bb4:	89fb      	ldrh	r3, [r7, #14]
 8015bb6:	3b01      	subs	r3, #1
 8015bb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015bba:	4a0e      	ldr	r2, [pc, #56]	@ (8015bf4 <dec_lock+0x74>)
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	011b      	lsls	r3, r3, #4
 8015bc0:	4413      	add	r3, r2
 8015bc2:	330c      	adds	r3, #12
 8015bc4:	89fa      	ldrh	r2, [r7, #14]
 8015bc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015bc8:	89fb      	ldrh	r3, [r7, #14]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d105      	bne.n	8015bda <dec_lock+0x5a>
 8015bce:	4a09      	ldr	r2, [pc, #36]	@ (8015bf4 <dec_lock+0x74>)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	011b      	lsls	r3, r3, #4
 8015bd4:	4413      	add	r3, r2
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	737b      	strb	r3, [r7, #13]
 8015bde:	e001      	b.n	8015be4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015be0:	2302      	movs	r3, #2
 8015be2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015be4:	7b7b      	ldrb	r3, [r7, #13]
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3714      	adds	r7, #20
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr
 8015bf2:	bf00      	nop
 8015bf4:	240011f0 	.word	0x240011f0

08015bf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015c00:	2300      	movs	r3, #0
 8015c02:	60fb      	str	r3, [r7, #12]
 8015c04:	e010      	b.n	8015c28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015c06:	4a0d      	ldr	r2, [pc, #52]	@ (8015c3c <clear_lock+0x44>)
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	011b      	lsls	r3, r3, #4
 8015c0c:	4413      	add	r3, r2
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d105      	bne.n	8015c22 <clear_lock+0x2a>
 8015c16:	4a09      	ldr	r2, [pc, #36]	@ (8015c3c <clear_lock+0x44>)
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	011b      	lsls	r3, r3, #4
 8015c1c:	4413      	add	r3, r2
 8015c1e:	2200      	movs	r2, #0
 8015c20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	3301      	adds	r3, #1
 8015c26:	60fb      	str	r3, [r7, #12]
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d9eb      	bls.n	8015c06 <clear_lock+0xe>
	}
}
 8015c2e:	bf00      	nop
 8015c30:	bf00      	nop
 8015c32:	3714      	adds	r7, #20
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr
 8015c3c:	240011f0 	.word	0x240011f0

08015c40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b086      	sub	sp, #24
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	78db      	ldrb	r3, [r3, #3]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d034      	beq.n	8015cbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015c58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	7858      	ldrb	r0, [r3, #1]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015c64:	2301      	movs	r3, #1
 8015c66:	697a      	ldr	r2, [r7, #20]
 8015c68:	f7ff fbdc 	bl	8015424 <disk_write>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d002      	beq.n	8015c78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015c72:	2301      	movs	r3, #1
 8015c74:	73fb      	strb	r3, [r7, #15]
 8015c76:	e022      	b.n	8015cbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c82:	697a      	ldr	r2, [r7, #20]
 8015c84:	1ad2      	subs	r2, r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a1b      	ldr	r3, [r3, #32]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d217      	bcs.n	8015cbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	789b      	ldrb	r3, [r3, #2]
 8015c92:	613b      	str	r3, [r7, #16]
 8015c94:	e010      	b.n	8015cb8 <sync_window+0x78>
					wsect += fs->fsize;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a1b      	ldr	r3, [r3, #32]
 8015c9a:	697a      	ldr	r2, [r7, #20]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7858      	ldrb	r0, [r3, #1]
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015caa:	2301      	movs	r3, #1
 8015cac:	697a      	ldr	r2, [r7, #20]
 8015cae:	f7ff fbb9 	bl	8015424 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	3b01      	subs	r3, #1
 8015cb6:	613b      	str	r3, [r7, #16]
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d8eb      	bhi.n	8015c96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3718      	adds	r7, #24
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015cda:	683a      	ldr	r2, [r7, #0]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d01b      	beq.n	8015d18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f7ff ffad 	bl	8015c40 <sync_window>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015cea:	7bfb      	ldrb	r3, [r7, #15]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d113      	bne.n	8015d18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	7858      	ldrb	r0, [r3, #1]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	683a      	ldr	r2, [r7, #0]
 8015cfe:	f7ff fb71 	bl	80153e4 <disk_read>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d004      	beq.n	8015d12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015d08:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	683a      	ldr	r2, [r7, #0]
 8015d16:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8015d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
	...

08015d24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f7ff ff87 	bl	8015c40 <sync_window>
 8015d32:	4603      	mov	r3, r0
 8015d34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015d36:	7bfb      	ldrb	r3, [r7, #15]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d158      	bne.n	8015dee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	2b03      	cmp	r3, #3
 8015d42:	d148      	bne.n	8015dd6 <sync_fs+0xb2>
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	791b      	ldrb	r3, [r3, #4]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d144      	bne.n	8015dd6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	3338      	adds	r3, #56	@ 0x38
 8015d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d54:	2100      	movs	r1, #0
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7ff fda8 	bl	80158ac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	3338      	adds	r3, #56	@ 0x38
 8015d60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015d64:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7ff fcaf 	bl	80156cc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	3338      	adds	r3, #56	@ 0x38
 8015d72:	4921      	ldr	r1, [pc, #132]	@ (8015df8 <sync_fs+0xd4>)
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7ff fcc4 	bl	8015702 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	3338      	adds	r3, #56	@ 0x38
 8015d7e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015d82:	491e      	ldr	r1, [pc, #120]	@ (8015dfc <sync_fs+0xd8>)
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7ff fcbc 	bl	8015702 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	3338      	adds	r3, #56	@ 0x38
 8015d8e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	699b      	ldr	r3, [r3, #24]
 8015d96:	4619      	mov	r1, r3
 8015d98:	4610      	mov	r0, r2
 8015d9a:	f7ff fcb2 	bl	8015702 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	3338      	adds	r3, #56	@ 0x38
 8015da2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	695b      	ldr	r3, [r3, #20]
 8015daa:	4619      	mov	r1, r3
 8015dac:	4610      	mov	r0, r2
 8015dae:	f7ff fca8 	bl	8015702 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015db6:	1c5a      	adds	r2, r3, #1
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	7858      	ldrb	r0, [r3, #1]
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015dca:	2301      	movs	r3, #1
 8015dcc:	f7ff fb2a 	bl	8015424 <disk_write>
			fs->fsi_flag = 0;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	785b      	ldrb	r3, [r3, #1]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2100      	movs	r1, #0
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7ff fb40 	bl	8015464 <disk_ioctl>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d001      	beq.n	8015dee <sync_fs+0xca>
 8015dea:	2301      	movs	r3, #1
 8015dec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3710      	adds	r7, #16
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	41615252 	.word	0x41615252
 8015dfc:	61417272 	.word	0x61417272

08015e00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015e00:	b480      	push	{r7}
 8015e02:	b083      	sub	sp, #12
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	3b02      	subs	r3, #2
 8015e0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	69db      	ldr	r3, [r3, #28]
 8015e14:	3b02      	subs	r3, #2
 8015e16:	683a      	ldr	r2, [r7, #0]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d301      	bcc.n	8015e20 <clust2sect+0x20>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e008      	b.n	8015e32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	895b      	ldrh	r3, [r3, #10]
 8015e24:	461a      	mov	r2, r3
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	fb03 f202 	mul.w	r2, r3, r2
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e30:	4413      	add	r3, r2
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr
	...

08015e40 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	6809      	ldr	r1, [r1, #0]
 8015e4e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	2901      	cmp	r1, #1
 8015e54:	d904      	bls.n	8015e60 <get_fat+0x20>
 8015e56:	69b9      	ldr	r1, [r7, #24]
 8015e58:	69c9      	ldr	r1, [r1, #28]
 8015e5a:	6838      	ldr	r0, [r7, #0]
 8015e5c:	4288      	cmp	r0, r1
 8015e5e:	d302      	bcc.n	8015e66 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015e60:	2301      	movs	r3, #1
 8015e62:	61fb      	str	r3, [r7, #28]
 8015e64:	e100      	b.n	8016068 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015e66:	f04f 31ff 	mov.w	r1, #4294967295
 8015e6a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8015e6c:	69b9      	ldr	r1, [r7, #24]
 8015e6e:	7809      	ldrb	r1, [r1, #0]
 8015e70:	3901      	subs	r1, #1
 8015e72:	2903      	cmp	r1, #3
 8015e74:	f200 80ec 	bhi.w	8016050 <get_fat+0x210>
 8015e78:	a001      	add	r0, pc, #4	@ (adr r0, 8015e80 <get_fat+0x40>)
 8015e7a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015e7e:	bf00      	nop
 8015e80:	08015e91 	.word	0x08015e91
 8015e84:	08015f17 	.word	0x08015f17
 8015e88:	08015f4d 	.word	0x08015f4d
 8015e8c:	08015f85 	.word	0x08015f85
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	60fb      	str	r3, [r7, #12]
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	085b      	lsrs	r3, r3, #1
 8015e98:	68fa      	ldr	r2, [r7, #12]
 8015e9a:	4413      	add	r3, r2
 8015e9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e9e:	69bb      	ldr	r3, [r7, #24]
 8015ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	0a5b      	lsrs	r3, r3, #9
 8015ea6:	4413      	add	r3, r2
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	69b8      	ldr	r0, [r7, #24]
 8015eac:	f7ff ff0c 	bl	8015cc8 <move_window>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f040 80cf 	bne.w	8016056 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	1c5a      	adds	r2, r3, #1
 8015ebc:	60fa      	str	r2, [r7, #12]
 8015ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ec2:	69ba      	ldr	r2, [r7, #24]
 8015ec4:	4413      	add	r3, r2
 8015ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015eca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	0a5b      	lsrs	r3, r3, #9
 8015ed4:	4413      	add	r3, r2
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	69b8      	ldr	r0, [r7, #24]
 8015eda:	f7ff fef5 	bl	8015cc8 <move_window>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f040 80ba 	bne.w	801605a <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015eec:	69ba      	ldr	r2, [r7, #24]
 8015eee:	4413      	add	r3, r2
 8015ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015ef4:	021b      	lsls	r3, r3, #8
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	4313      	orrs	r3, r2
 8015efa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	f003 0301 	and.w	r3, r3, #1
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d002      	beq.n	8015f0c <get_fat+0xcc>
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	091b      	lsrs	r3, r3, #4
 8015f0a:	e002      	b.n	8015f12 <get_fat+0xd2>
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015f12:	61fb      	str	r3, [r7, #28]
			break;
 8015f14:	e0a8      	b.n	8016068 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	0a1b      	lsrs	r3, r3, #8
 8015f1e:	4413      	add	r3, r2
 8015f20:	4619      	mov	r1, r3
 8015f22:	69b8      	ldr	r0, [r7, #24]
 8015f24:	f7ff fed0 	bl	8015cc8 <move_window>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	f040 8097 	bne.w	801605e <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015f30:	69bb      	ldr	r3, [r7, #24]
 8015f32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8015f3e:	4413      	add	r3, r2
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ff faad 	bl	80154a0 <ld_word>
 8015f46:	4603      	mov	r3, r0
 8015f48:	61fb      	str	r3, [r7, #28]
			break;
 8015f4a:	e08d      	b.n	8016068 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015f4c:	69bb      	ldr	r3, [r7, #24]
 8015f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	09db      	lsrs	r3, r3, #7
 8015f54:	4413      	add	r3, r2
 8015f56:	4619      	mov	r1, r3
 8015f58:	69b8      	ldr	r0, [r7, #24]
 8015f5a:	f7ff feb5 	bl	8015cc8 <move_window>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d17e      	bne.n	8016062 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8015f72:	4413      	add	r3, r2
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7ff faab 	bl	80154d0 <ld_dword>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8015f80:	61fb      	str	r3, [r7, #28]
			break;
 8015f82:	e071      	b.n	8016068 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8015f84:	6879      	ldr	r1, [r7, #4]
 8015f86:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8015f8a:	4301      	orrs	r1, r0
 8015f8c:	d060      	beq.n	8016050 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8015f8e:	6879      	ldr	r1, [r7, #4]
 8015f90:	6889      	ldr	r1, [r1, #8]
 8015f92:	6838      	ldr	r0, [r7, #0]
 8015f94:	1a41      	subs	r1, r0, r1
 8015f96:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8015f98:	6879      	ldr	r1, [r7, #4]
 8015f9a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8015f9e:	1e42      	subs	r2, r0, #1
 8015fa0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8015fa4:	f04f 0000 	mov.w	r0, #0
 8015fa8:	f04f 0100 	mov.w	r1, #0
 8015fac:	0a50      	lsrs	r0, r2, #9
 8015fae:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8015fb2:	0a59      	lsrs	r1, r3, #9
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	895b      	ldrh	r3, [r3, #10]
 8015fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fbe:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	79db      	ldrb	r3, [r3, #7]
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	d10e      	bne.n	8015fe6 <get_fat+0x1a6>
					if (cofs <= clen) {
 8015fc8:	697a      	ldr	r2, [r7, #20]
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d80a      	bhi.n	8015fe6 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8015fd0:	697a      	ldr	r2, [r7, #20]
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d002      	beq.n	8015fde <get_fat+0x19e>
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	e001      	b.n	8015fe2 <get_fat+0x1a2>
 8015fde:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015fe2:	61fb      	str	r3, [r7, #28]
						break;
 8015fe4:	e040      	b.n	8016068 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	79db      	ldrb	r3, [r3, #7]
 8015fea:	2b03      	cmp	r3, #3
 8015fec:	d108      	bne.n	8016000 <get_fat+0x1c0>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	699b      	ldr	r3, [r3, #24]
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	429a      	cmp	r2, r3
 8015ff6:	d203      	bcs.n	8016000 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8015ff8:	683b      	ldr	r3, [r7, #0]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	61fb      	str	r3, [r7, #28]
					break;
 8015ffe:	e033      	b.n	8016068 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	79db      	ldrb	r3, [r3, #7]
 8016004:	2b02      	cmp	r3, #2
 8016006:	d023      	beq.n	8016050 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	69db      	ldr	r3, [r3, #28]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d003      	beq.n	8016018 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8016010:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016014:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8016016:	e027      	b.n	8016068 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016018:	69bb      	ldr	r3, [r7, #24]
 801601a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	09db      	lsrs	r3, r3, #7
 8016020:	4413      	add	r3, r2
 8016022:	4619      	mov	r1, r3
 8016024:	69b8      	ldr	r0, [r7, #24]
 8016026:	f7ff fe4f 	bl	8015cc8 <move_window>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d11a      	bne.n	8016066 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	009b      	lsls	r3, r3, #2
 801603a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801603e:	4413      	add	r3, r2
 8016040:	4618      	mov	r0, r3
 8016042:	f7ff fa45 	bl	80154d0 <ld_dword>
 8016046:	4603      	mov	r3, r0
 8016048:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801604c:	61fb      	str	r3, [r7, #28]
					break;
 801604e:	e00b      	b.n	8016068 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016050:	2301      	movs	r3, #1
 8016052:	61fb      	str	r3, [r7, #28]
 8016054:	e008      	b.n	8016068 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016056:	bf00      	nop
 8016058:	e006      	b.n	8016068 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801605a:	bf00      	nop
 801605c:	e004      	b.n	8016068 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801605e:	bf00      	nop
 8016060:	e002      	b.n	8016068 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016062:	bf00      	nop
 8016064:	e000      	b.n	8016068 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016066:	bf00      	nop
		}
	}

	return val;
 8016068:	69fb      	ldr	r3, [r7, #28]
}
 801606a:	4618      	mov	r0, r3
 801606c:	3720      	adds	r7, #32
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}
 8016072:	bf00      	nop

08016074 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016074:	b590      	push	{r4, r7, lr}
 8016076:	b089      	sub	sp, #36	@ 0x24
 8016078:	af00      	add	r7, sp, #0
 801607a:	60f8      	str	r0, [r7, #12]
 801607c:	60b9      	str	r1, [r7, #8]
 801607e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016080:	2302      	movs	r3, #2
 8016082:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	2b01      	cmp	r3, #1
 8016088:	f240 80dd 	bls.w	8016246 <put_fat+0x1d2>
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	69db      	ldr	r3, [r3, #28]
 8016090:	68ba      	ldr	r2, [r7, #8]
 8016092:	429a      	cmp	r2, r3
 8016094:	f080 80d7 	bcs.w	8016246 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b04      	cmp	r3, #4
 801609e:	f300 80d2 	bgt.w	8016246 <put_fat+0x1d2>
 80160a2:	2b03      	cmp	r3, #3
 80160a4:	f280 8093 	bge.w	80161ce <put_fat+0x15a>
 80160a8:	2b01      	cmp	r3, #1
 80160aa:	d002      	beq.n	80160b2 <put_fat+0x3e>
 80160ac:	2b02      	cmp	r3, #2
 80160ae:	d06e      	beq.n	801618e <put_fat+0x11a>
 80160b0:	e0c9      	b.n	8016246 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	61bb      	str	r3, [r7, #24]
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	085b      	lsrs	r3, r3, #1
 80160ba:	69ba      	ldr	r2, [r7, #24]
 80160bc:	4413      	add	r3, r2
 80160be:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80160c4:	69bb      	ldr	r3, [r7, #24]
 80160c6:	0a5b      	lsrs	r3, r3, #9
 80160c8:	4413      	add	r3, r2
 80160ca:	4619      	mov	r1, r3
 80160cc:	68f8      	ldr	r0, [r7, #12]
 80160ce:	f7ff fdfb 	bl	8015cc8 <move_window>
 80160d2:	4603      	mov	r3, r0
 80160d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160d6:	7ffb      	ldrb	r3, [r7, #31]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	f040 80ad 	bne.w	8016238 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	1c59      	adds	r1, r3, #1
 80160e8:	61b9      	str	r1, [r7, #24]
 80160ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160ee:	4413      	add	r3, r2
 80160f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	f003 0301 	and.w	r3, r3, #1
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00d      	beq.n	8016118 <put_fat+0xa4>
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	b25b      	sxtb	r3, r3
 8016102:	f003 030f 	and.w	r3, r3, #15
 8016106:	b25a      	sxtb	r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	b2db      	uxtb	r3, r3
 801610c:	011b      	lsls	r3, r3, #4
 801610e:	b25b      	sxtb	r3, r3
 8016110:	4313      	orrs	r3, r2
 8016112:	b25b      	sxtb	r3, r3
 8016114:	b2db      	uxtb	r3, r3
 8016116:	e001      	b.n	801611c <put_fat+0xa8>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	b2db      	uxtb	r3, r3
 801611c:	697a      	ldr	r2, [r7, #20]
 801611e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	2201      	movs	r2, #1
 8016124:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	0a5b      	lsrs	r3, r3, #9
 801612e:	4413      	add	r3, r2
 8016130:	4619      	mov	r1, r3
 8016132:	68f8      	ldr	r0, [r7, #12]
 8016134:	f7ff fdc8 	bl	8015cc8 <move_window>
 8016138:	4603      	mov	r3, r0
 801613a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801613c:	7ffb      	ldrb	r3, [r7, #31]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d17c      	bne.n	801623c <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801614e:	4413      	add	r3, r2
 8016150:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	f003 0301 	and.w	r3, r3, #1
 8016158:	2b00      	cmp	r3, #0
 801615a:	d003      	beq.n	8016164 <put_fat+0xf0>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	091b      	lsrs	r3, r3, #4
 8016160:	b2db      	uxtb	r3, r3
 8016162:	e00e      	b.n	8016182 <put_fat+0x10e>
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	b25b      	sxtb	r3, r3
 801616a:	f023 030f 	bic.w	r3, r3, #15
 801616e:	b25a      	sxtb	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	0a1b      	lsrs	r3, r3, #8
 8016174:	b25b      	sxtb	r3, r3
 8016176:	f003 030f 	and.w	r3, r3, #15
 801617a:	b25b      	sxtb	r3, r3
 801617c:	4313      	orrs	r3, r2
 801617e:	b25b      	sxtb	r3, r3
 8016180:	b2db      	uxtb	r3, r3
 8016182:	697a      	ldr	r2, [r7, #20]
 8016184:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	2201      	movs	r2, #1
 801618a:	70da      	strb	r2, [r3, #3]
			break;
 801618c:	e05b      	b.n	8016246 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	0a1b      	lsrs	r3, r3, #8
 8016196:	4413      	add	r3, r2
 8016198:	4619      	mov	r1, r3
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f7ff fd94 	bl	8015cc8 <move_window>
 80161a0:	4603      	mov	r3, r0
 80161a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80161a4:	7ffb      	ldrb	r3, [r7, #31]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d14a      	bne.n	8016240 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	005b      	lsls	r3, r3, #1
 80161b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80161b8:	4413      	add	r3, r2
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	b292      	uxth	r2, r2
 80161be:	4611      	mov	r1, r2
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7ff fa83 	bl	80156cc <st_word>
			fs->wflag = 1;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2201      	movs	r2, #1
 80161ca:	70da      	strb	r2, [r3, #3]
			break;
 80161cc:	e03b      	b.n	8016246 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	09db      	lsrs	r3, r3, #7
 80161d6:	4413      	add	r3, r2
 80161d8:	4619      	mov	r1, r3
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	f7ff fd74 	bl	8015cc8 <move_window>
 80161e0:	4603      	mov	r3, r0
 80161e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80161e4:	7ffb      	ldrb	r3, [r7, #31]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d12c      	bne.n	8016244 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b04      	cmp	r3, #4
 80161f0:	d012      	beq.n	8016218 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	009b      	lsls	r3, r3, #2
 8016202:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8016206:	4413      	add	r3, r2
 8016208:	4618      	mov	r0, r3
 801620a:	f7ff f961 	bl	80154d0 <ld_dword>
 801620e:	4603      	mov	r3, r0
 8016210:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8016214:	4323      	orrs	r3, r4
 8016216:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8016226:	4413      	add	r3, r2
 8016228:	6879      	ldr	r1, [r7, #4]
 801622a:	4618      	mov	r0, r3
 801622c:	f7ff fa69 	bl	8015702 <st_dword>
			fs->wflag = 1;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2201      	movs	r2, #1
 8016234:	70da      	strb	r2, [r3, #3]
			break;
 8016236:	e006      	b.n	8016246 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8016238:	bf00      	nop
 801623a:	e004      	b.n	8016246 <put_fat+0x1d2>
			if (res != FR_OK) break;
 801623c:	bf00      	nop
 801623e:	e002      	b.n	8016246 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8016240:	bf00      	nop
 8016242:	e000      	b.n	8016246 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8016244:	bf00      	nop
		}
	}
	return res;
 8016246:	7ffb      	ldrb	r3, [r7, #31]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3724      	adds	r7, #36	@ 0x24
 801624c:	46bd      	mov	sp, r7
 801624e:	bd90      	pop	{r4, r7, pc}

08016250 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b08a      	sub	sp, #40	@ 0x28
 8016254:	af00      	add	r7, sp, #0
 8016256:	60f8      	str	r0, [r7, #12]
 8016258:	60b9      	str	r1, [r7, #8]
 801625a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	3b02      	subs	r3, #2
 8016260:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	69db      	ldr	r3, [r3, #28]
 8016266:	3b02      	subs	r3, #2
 8016268:	68ba      	ldr	r2, [r7, #8]
 801626a:	429a      	cmp	r2, r3
 801626c:	d301      	bcc.n	8016272 <find_bitmap+0x22>
 801626e:	2300      	movs	r3, #0
 8016270:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	61fb      	str	r3, [r7, #28]
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	61bb      	str	r3, [r7, #24]
 801627a:	2300      	movs	r3, #0
 801627c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	0b1b      	lsrs	r3, r3, #12
 8016286:	4413      	add	r3, r2
 8016288:	4619      	mov	r1, r3
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f7ff fd1c 	bl	8015cc8 <move_window>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	d002      	beq.n	801629c <find_bitmap+0x4c>
 8016296:	f04f 33ff 	mov.w	r3, #4294967295
 801629a:	e051      	b.n	8016340 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	08db      	lsrs	r3, r3, #3
 80162a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162a4:	623b      	str	r3, [r7, #32]
 80162a6:	69fb      	ldr	r3, [r7, #28]
 80162a8:	f003 0307 	and.w	r3, r3, #7
 80162ac:	2201      	movs	r2, #1
 80162ae:	fa02 f303 	lsl.w	r3, r2, r3
 80162b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80162b6:	68fa      	ldr	r2, [r7, #12]
 80162b8:	6a3b      	ldr	r3, [r7, #32]
 80162ba:	4413      	add	r3, r2
 80162bc:	3338      	adds	r3, #56	@ 0x38
 80162be:	781a      	ldrb	r2, [r3, #0]
 80162c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162c4:	4013      	ands	r3, r2
 80162c6:	74fb      	strb	r3, [r7, #19]
 80162c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80162d2:	69fb      	ldr	r3, [r7, #28]
 80162d4:	3301      	adds	r3, #1
 80162d6:	61fb      	str	r3, [r7, #28]
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	69db      	ldr	r3, [r3, #28]
 80162dc:	3b02      	subs	r3, #2
 80162de:	69fa      	ldr	r2, [r7, #28]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d307      	bcc.n	80162f4 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80162e4:	2300      	movs	r3, #0
 80162e6:	61fb      	str	r3, [r7, #28]
 80162e8:	2300      	movs	r3, #0
 80162ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80162ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80162f2:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80162f4:	7cfb      	ldrb	r3, [r7, #19]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d109      	bne.n	801630e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	3301      	adds	r3, #1
 80162fe:	617b      	str	r3, [r7, #20]
 8016300:	697a      	ldr	r2, [r7, #20]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	429a      	cmp	r2, r3
 8016306:	d106      	bne.n	8016316 <find_bitmap+0xc6>
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	3302      	adds	r3, #2
 801630c:	e018      	b.n	8016340 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	61bb      	str	r3, [r7, #24]
 8016312:	2300      	movs	r3, #0
 8016314:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8016316:	69fa      	ldr	r2, [r7, #28]
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	429a      	cmp	r2, r3
 801631c:	d101      	bne.n	8016322 <find_bitmap+0xd2>
 801631e:	2300      	movs	r3, #0
 8016320:	e00e      	b.n	8016340 <find_bitmap+0xf0>
			} while (bm);
 8016322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016326:	2b00      	cmp	r3, #0
 8016328:	d1c5      	bne.n	80162b6 <find_bitmap+0x66>
			bm = 1;
 801632a:	2301      	movs	r3, #1
 801632c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8016330:	6a3b      	ldr	r3, [r7, #32]
 8016332:	3301      	adds	r3, #1
 8016334:	623b      	str	r3, [r7, #32]
 8016336:	6a3b      	ldr	r3, [r7, #32]
 8016338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801633c:	d3bb      	bcc.n	80162b6 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801633e:	e79e      	b.n	801627e <find_bitmap+0x2e>
	}
}
 8016340:	4618      	mov	r0, r3
 8016342:	3728      	adds	r7, #40	@ 0x28
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}

08016348 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b088      	sub	sp, #32
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	607a      	str	r2, [r7, #4]
 8016354:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	3b02      	subs	r3, #2
 801635a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	0b1b      	lsrs	r3, r3, #12
 8016364:	4413      	add	r3, r2
 8016366:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	08db      	lsrs	r3, r3, #3
 801636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016370:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	f003 0307 	and.w	r3, r3, #7
 8016378:	2201      	movs	r2, #1
 801637a:	fa02 f303 	lsl.w	r3, r2, r3
 801637e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	1c5a      	adds	r2, r3, #1
 8016384:	617a      	str	r2, [r7, #20]
 8016386:	4619      	mov	r1, r3
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	f7ff fc9d 	bl	8015cc8 <move_window>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d001      	beq.n	8016398 <change_bitmap+0x50>
 8016394:	2301      	movs	r3, #1
 8016396:	e03d      	b.n	8016414 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8016398:	68fa      	ldr	r2, [r7, #12]
 801639a:	69bb      	ldr	r3, [r7, #24]
 801639c:	4413      	add	r3, r2
 801639e:	3338      	adds	r3, #56	@ 0x38
 80163a0:	781a      	ldrb	r2, [r3, #0]
 80163a2:	7ffb      	ldrb	r3, [r7, #31]
 80163a4:	4013      	ands	r3, r2
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	bf14      	ite	ne
 80163ac:	2301      	movne	r3, #1
 80163ae:	2300      	moveq	r3, #0
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	461a      	mov	r2, r3
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d101      	bne.n	80163be <change_bitmap+0x76>
 80163ba:	2302      	movs	r3, #2
 80163bc:	e02a      	b.n	8016414 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80163be:	68fa      	ldr	r2, [r7, #12]
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	4413      	add	r3, r2
 80163c4:	3338      	adds	r3, #56	@ 0x38
 80163c6:	781a      	ldrb	r2, [r3, #0]
 80163c8:	7ffb      	ldrb	r3, [r7, #31]
 80163ca:	4053      	eors	r3, r2
 80163cc:	b2d9      	uxtb	r1, r3
 80163ce:	68fa      	ldr	r2, [r7, #12]
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	4413      	add	r3, r2
 80163d4:	3338      	adds	r3, #56	@ 0x38
 80163d6:	460a      	mov	r2, r1
 80163d8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2201      	movs	r2, #1
 80163de:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	3b01      	subs	r3, #1
 80163e4:	607b      	str	r3, [r7, #4]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d101      	bne.n	80163f0 <change_bitmap+0xa8>
 80163ec:	2300      	movs	r3, #0
 80163ee:	e011      	b.n	8016414 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80163f0:	7ffb      	ldrb	r3, [r7, #31]
 80163f2:	005b      	lsls	r3, r3, #1
 80163f4:	77fb      	strb	r3, [r7, #31]
 80163f6:	7ffb      	ldrb	r3, [r7, #31]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d1cd      	bne.n	8016398 <change_bitmap+0x50>
			bm = 1;
 80163fc:	2301      	movs	r3, #1
 80163fe:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	3301      	adds	r3, #1
 8016404:	61bb      	str	r3, [r7, #24]
 8016406:	69bb      	ldr	r3, [r7, #24]
 8016408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801640c:	d3c4      	bcc.n	8016398 <change_bitmap+0x50>
		i = 0;
 801640e:	2300      	movs	r3, #0
 8016410:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8016412:	e7b5      	b.n	8016380 <change_bitmap+0x38>
	}
}
 8016414:	4618      	mov	r0, r3
 8016416:	3720      	adds	r7, #32
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}

0801641c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	79db      	ldrb	r3, [r3, #7]
 8016428:	2b03      	cmp	r3, #3
 801642a:	d121      	bne.n	8016470 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	689b      	ldr	r3, [r3, #8]
 8016430:	617b      	str	r3, [r7, #20]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	699b      	ldr	r3, [r3, #24]
 8016436:	613b      	str	r3, [r7, #16]
 8016438:	e014      	b.n	8016464 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6818      	ldr	r0, [r3, #0]
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	3301      	adds	r3, #1
 8016442:	461a      	mov	r2, r3
 8016444:	6979      	ldr	r1, [r7, #20]
 8016446:	f7ff fe15 	bl	8016074 <put_fat>
 801644a:	4603      	mov	r3, r0
 801644c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 801644e:	7bfb      	ldrb	r3, [r7, #15]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d001      	beq.n	8016458 <fill_first_frag+0x3c>
 8016454:	7bfb      	ldrb	r3, [r7, #15]
 8016456:	e00c      	b.n	8016472 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	3301      	adds	r3, #1
 801645c:	617b      	str	r3, [r7, #20]
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	3b01      	subs	r3, #1
 8016462:	613b      	str	r3, [r7, #16]
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1e7      	bne.n	801643a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2200      	movs	r2, #0
 801646e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8016470:	2300      	movs	r3, #0
}
 8016472:	4618      	mov	r0, r3
 8016474:	3718      	adds	r7, #24
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}

0801647a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 801647a:	b580      	push	{r7, lr}
 801647c:	b086      	sub	sp, #24
 801647e:	af00      	add	r7, sp, #0
 8016480:	60f8      	str	r0, [r7, #12]
 8016482:	60b9      	str	r1, [r7, #8]
 8016484:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8016486:	e020      	b.n	80164ca <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	6818      	ldr	r0, [r3, #0]
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	69db      	ldr	r3, [r3, #28]
 8016490:	68ba      	ldr	r2, [r7, #8]
 8016492:	1ad3      	subs	r3, r2, r3
 8016494:	1c59      	adds	r1, r3, #1
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	69db      	ldr	r3, [r3, #28]
 801649a:	2b01      	cmp	r3, #1
 801649c:	d905      	bls.n	80164aa <fill_last_frag+0x30>
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	69db      	ldr	r3, [r3, #28]
 80164a2:	68ba      	ldr	r2, [r7, #8]
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	3302      	adds	r3, #2
 80164a8:	e000      	b.n	80164ac <fill_last_frag+0x32>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	461a      	mov	r2, r3
 80164ae:	f7ff fde1 	bl	8016074 <put_fat>
 80164b2:	4603      	mov	r3, r0
 80164b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80164b6:	7dfb      	ldrb	r3, [r7, #23]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d001      	beq.n	80164c0 <fill_last_frag+0x46>
 80164bc:	7dfb      	ldrb	r3, [r7, #23]
 80164be:	e009      	b.n	80164d4 <fill_last_frag+0x5a>
		obj->n_frag--;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	69db      	ldr	r3, [r3, #28]
 80164c4:	1e5a      	subs	r2, r3, #1
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	69db      	ldr	r3, [r3, #28]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1da      	bne.n	8016488 <fill_last_frag+0xe>
	}
	return FR_OK;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3718      	adds	r7, #24
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b08a      	sub	sp, #40	@ 0x28
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80164e8:	2300      	movs	r3, #0
 80164ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d904      	bls.n	801650a <remove_chain+0x2e>
 8016500:	69bb      	ldr	r3, [r7, #24]
 8016502:	69db      	ldr	r3, [r3, #28]
 8016504:	68ba      	ldr	r2, [r7, #8]
 8016506:	429a      	cmp	r2, r3
 8016508:	d301      	bcc.n	801650e <remove_chain+0x32>
 801650a:	2302      	movs	r3, #2
 801650c:	e096      	b.n	801663c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d014      	beq.n	801653e <remove_chain+0x62>
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	2b04      	cmp	r3, #4
 801651a:	d103      	bne.n	8016524 <remove_chain+0x48>
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	79db      	ldrb	r3, [r3, #7]
 8016520:	2b02      	cmp	r3, #2
 8016522:	d00c      	beq.n	801653e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016524:	f04f 32ff 	mov.w	r2, #4294967295
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	69b8      	ldr	r0, [r7, #24]
 801652c:	f7ff fda2 	bl	8016074 <put_fat>
 8016530:	4603      	mov	r3, r0
 8016532:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016534:	7ffb      	ldrb	r3, [r7, #31]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d001      	beq.n	801653e <remove_chain+0x62>
 801653a:	7ffb      	ldrb	r3, [r7, #31]
 801653c:	e07e      	b.n	801663c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801653e:	68b9      	ldr	r1, [r7, #8]
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f7ff fc7d 	bl	8015e40 <get_fat>
 8016546:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d055      	beq.n	80165fa <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	2b01      	cmp	r3, #1
 8016552:	d101      	bne.n	8016558 <remove_chain+0x7c>
 8016554:	2302      	movs	r3, #2
 8016556:	e071      	b.n	801663c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801655e:	d101      	bne.n	8016564 <remove_chain+0x88>
 8016560:	2301      	movs	r3, #1
 8016562:	e06b      	b.n	801663c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	2b04      	cmp	r3, #4
 801656a:	d00b      	beq.n	8016584 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801656c:	2200      	movs	r2, #0
 801656e:	68b9      	ldr	r1, [r7, #8]
 8016570:	69b8      	ldr	r0, [r7, #24]
 8016572:	f7ff fd7f 	bl	8016074 <put_fat>
 8016576:	4603      	mov	r3, r0
 8016578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801657a:	7ffb      	ldrb	r3, [r7, #31]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d001      	beq.n	8016584 <remove_chain+0xa8>
 8016580:	7ffb      	ldrb	r3, [r7, #31]
 8016582:	e05b      	b.n	801663c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	699a      	ldr	r2, [r3, #24]
 8016588:	69bb      	ldr	r3, [r7, #24]
 801658a:	69db      	ldr	r3, [r3, #28]
 801658c:	3b02      	subs	r3, #2
 801658e:	429a      	cmp	r2, r3
 8016590:	d20b      	bcs.n	80165aa <remove_chain+0xce>
			fs->free_clst++;
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	699b      	ldr	r3, [r3, #24]
 8016596:	1c5a      	adds	r2, r3, #1
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801659c:	69bb      	ldr	r3, [r7, #24]
 801659e:	791b      	ldrb	r3, [r3, #4]
 80165a0:	f043 0301 	orr.w	r3, r3, #1
 80165a4:	b2da      	uxtb	r2, r3
 80165a6:	69bb      	ldr	r3, [r7, #24]
 80165a8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	3301      	adds	r3, #1
 80165ae:	697a      	ldr	r2, [r7, #20]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d102      	bne.n	80165ba <remove_chain+0xde>
			ecl = nxt;
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	623b      	str	r3, [r7, #32]
 80165b8:	e017      	b.n	80165ea <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80165ba:	69bb      	ldr	r3, [r7, #24]
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	2b04      	cmp	r3, #4
 80165c0:	d10f      	bne.n	80165e2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80165c2:	6a3a      	ldr	r2, [r7, #32]
 80165c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c6:	1ad3      	subs	r3, r2, r3
 80165c8:	1c5a      	adds	r2, r3, #1
 80165ca:	2300      	movs	r3, #0
 80165cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165ce:	69b8      	ldr	r0, [r7, #24]
 80165d0:	f7ff feba 	bl	8016348 <change_bitmap>
 80165d4:	4603      	mov	r3, r0
 80165d6:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80165d8:	7ffb      	ldrb	r3, [r7, #31]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d001      	beq.n	80165e2 <remove_chain+0x106>
 80165de:	7ffb      	ldrb	r3, [r7, #31]
 80165e0:	e02c      	b.n	801663c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	623b      	str	r3, [r7, #32]
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	69db      	ldr	r3, [r3, #28]
 80165f2:	68ba      	ldr	r2, [r7, #8]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d3a2      	bcc.n	801653e <remove_chain+0x62>
 80165f8:	e000      	b.n	80165fc <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80165fa:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80165fc:	69bb      	ldr	r3, [r7, #24]
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	2b04      	cmp	r3, #4
 8016602:	d11a      	bne.n	801663a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d103      	bne.n	8016612 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2200      	movs	r2, #0
 801660e:	71da      	strb	r2, [r3, #7]
 8016610:	e013      	b.n	801663a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	79db      	ldrb	r3, [r3, #7]
 8016616:	2b03      	cmp	r3, #3
 8016618:	d10f      	bne.n	801663a <remove_chain+0x15e>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	689b      	ldr	r3, [r3, #8]
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	429a      	cmp	r2, r3
 8016622:	d30a      	bcc.n	801663a <remove_chain+0x15e>
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	689a      	ldr	r2, [r3, #8]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	699b      	ldr	r3, [r3, #24]
 801662c:	4413      	add	r3, r2
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	429a      	cmp	r2, r3
 8016632:	d802      	bhi.n	801663a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2202      	movs	r2, #2
 8016638:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 801663a:	2300      	movs	r3, #0
}
 801663c:	4618      	mov	r0, r3
 801663e:	3728      	adds	r7, #40	@ 0x28
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b088      	sub	sp, #32
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d10d      	bne.n	8016676 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	695b      	ldr	r3, [r3, #20]
 801665e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016660:	69bb      	ldr	r3, [r7, #24]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d004      	beq.n	8016670 <create_chain+0x2c>
 8016666:	693b      	ldr	r3, [r7, #16]
 8016668:	69db      	ldr	r3, [r3, #28]
 801666a:	69ba      	ldr	r2, [r7, #24]
 801666c:	429a      	cmp	r2, r3
 801666e:	d31b      	bcc.n	80166a8 <create_chain+0x64>
 8016670:	2301      	movs	r3, #1
 8016672:	61bb      	str	r3, [r7, #24]
 8016674:	e018      	b.n	80166a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016676:	6839      	ldr	r1, [r7, #0]
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7ff fbe1 	bl	8015e40 <get_fat>
 801667e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	2b01      	cmp	r3, #1
 8016684:	d801      	bhi.n	801668a <create_chain+0x46>
 8016686:	2301      	movs	r3, #1
 8016688:	e0d9      	b.n	801683e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016690:	d101      	bne.n	8016696 <create_chain+0x52>
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	e0d3      	b.n	801683e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	69db      	ldr	r3, [r3, #28]
 801669a:	68fa      	ldr	r2, [r7, #12]
 801669c:	429a      	cmp	r2, r3
 801669e:	d201      	bcs.n	80166a4 <create_chain+0x60>
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	e0cc      	b.n	801683e <create_chain+0x1fa>
		scl = clst;
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	2b04      	cmp	r3, #4
 80166ae:	d164      	bne.n	801677a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80166b0:	2201      	movs	r2, #1
 80166b2:	69b9      	ldr	r1, [r7, #24]
 80166b4:	6938      	ldr	r0, [r7, #16]
 80166b6:	f7ff fdcb 	bl	8016250 <find_bitmap>
 80166ba:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80166bc:	69fb      	ldr	r3, [r7, #28]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d003      	beq.n	80166ca <create_chain+0x86>
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166c8:	d101      	bne.n	80166ce <create_chain+0x8a>
 80166ca:	69fb      	ldr	r3, [r7, #28]
 80166cc:	e0b7      	b.n	801683e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80166ce:	2301      	movs	r3, #1
 80166d0:	2201      	movs	r2, #1
 80166d2:	69f9      	ldr	r1, [r7, #28]
 80166d4:	6938      	ldr	r0, [r7, #16]
 80166d6:	f7ff fe37 	bl	8016348 <change_bitmap>
 80166da:	4603      	mov	r3, r0
 80166dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80166de:	7dfb      	ldrb	r3, [r7, #23]
 80166e0:	2b02      	cmp	r3, #2
 80166e2:	d101      	bne.n	80166e8 <create_chain+0xa4>
 80166e4:	2301      	movs	r3, #1
 80166e6:	e0aa      	b.n	801683e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80166e8:	7dfb      	ldrb	r3, [r7, #23]
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d102      	bne.n	80166f4 <create_chain+0xb0>
 80166ee:	f04f 33ff 	mov.w	r3, #4294967295
 80166f2:	e0a4      	b.n	801683e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d103      	bne.n	8016702 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2202      	movs	r2, #2
 80166fe:	71da      	strb	r2, [r3, #7]
 8016700:	e011      	b.n	8016726 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	79db      	ldrb	r3, [r3, #7]
 8016706:	2b02      	cmp	r3, #2
 8016708:	d10d      	bne.n	8016726 <create_chain+0xe2>
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	3301      	adds	r3, #1
 801670e:	69fa      	ldr	r2, [r7, #28]
 8016710:	429a      	cmp	r2, r3
 8016712:	d008      	beq.n	8016726 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	689b      	ldr	r3, [r3, #8]
 8016718:	69ba      	ldr	r2, [r7, #24]
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2203      	movs	r2, #3
 8016724:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	79db      	ldrb	r3, [r3, #7]
 801672a:	2b02      	cmp	r3, #2
 801672c:	d064      	beq.n	80167f8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	3301      	adds	r3, #1
 8016732:	69fa      	ldr	r2, [r7, #28]
 8016734:	429a      	cmp	r2, r3
 8016736:	d10b      	bne.n	8016750 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	69db      	ldr	r3, [r3, #28]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d003      	beq.n	8016748 <create_chain+0x104>
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	69db      	ldr	r3, [r3, #28]
 8016744:	3301      	adds	r3, #1
 8016746:	e000      	b.n	801674a <create_chain+0x106>
 8016748:	2302      	movs	r3, #2
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	61d3      	str	r3, [r2, #28]
 801674e:	e053      	b.n	80167f8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	69db      	ldr	r3, [r3, #28]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d102      	bne.n	801675e <create_chain+0x11a>
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2201      	movs	r2, #1
 801675c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 801675e:	69fa      	ldr	r2, [r7, #28]
 8016760:	6839      	ldr	r1, [r7, #0]
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f7ff fe89 	bl	801647a <fill_last_frag>
 8016768:	4603      	mov	r3, r0
 801676a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 801676c:	7dfb      	ldrb	r3, [r7, #23]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d142      	bne.n	80167f8 <create_chain+0x1b4>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2201      	movs	r2, #1
 8016776:	61da      	str	r2, [r3, #28]
 8016778:	e03e      	b.n	80167f8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801677e:	69fb      	ldr	r3, [r7, #28]
 8016780:	3301      	adds	r3, #1
 8016782:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	69db      	ldr	r3, [r3, #28]
 8016788:	69fa      	ldr	r2, [r7, #28]
 801678a:	429a      	cmp	r2, r3
 801678c:	d307      	bcc.n	801679e <create_chain+0x15a>
				ncl = 2;
 801678e:	2302      	movs	r3, #2
 8016790:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016792:	69fa      	ldr	r2, [r7, #28]
 8016794:	69bb      	ldr	r3, [r7, #24]
 8016796:	429a      	cmp	r2, r3
 8016798:	d901      	bls.n	801679e <create_chain+0x15a>
 801679a:	2300      	movs	r3, #0
 801679c:	e04f      	b.n	801683e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801679e:	69f9      	ldr	r1, [r7, #28]
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7ff fb4d 	bl	8015e40 <get_fat>
 80167a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d00e      	beq.n	80167cc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	2b01      	cmp	r3, #1
 80167b2:	d003      	beq.n	80167bc <create_chain+0x178>
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ba:	d101      	bne.n	80167c0 <create_chain+0x17c>
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	e03e      	b.n	801683e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80167c0:	69fa      	ldr	r2, [r7, #28]
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d1da      	bne.n	801677e <create_chain+0x13a>
 80167c8:	2300      	movs	r3, #0
 80167ca:	e038      	b.n	801683e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 80167cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80167ce:	f04f 32ff 	mov.w	r2, #4294967295
 80167d2:	69f9      	ldr	r1, [r7, #28]
 80167d4:	6938      	ldr	r0, [r7, #16]
 80167d6:	f7ff fc4d 	bl	8016074 <put_fat>
 80167da:	4603      	mov	r3, r0
 80167dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80167de:	7dfb      	ldrb	r3, [r7, #23]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d109      	bne.n	80167f8 <create_chain+0x1b4>
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d006      	beq.n	80167f8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80167ea:	69fa      	ldr	r2, [r7, #28]
 80167ec:	6839      	ldr	r1, [r7, #0]
 80167ee:	6938      	ldr	r0, [r7, #16]
 80167f0:	f7ff fc40 	bl	8016074 <put_fat>
 80167f4:	4603      	mov	r3, r0
 80167f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d116      	bne.n	801682c <create_chain+0x1e8>
		fs->last_clst = ncl;
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	69fa      	ldr	r2, [r7, #28]
 8016802:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	699a      	ldr	r2, [r3, #24]
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	69db      	ldr	r3, [r3, #28]
 801680c:	3b02      	subs	r3, #2
 801680e:	429a      	cmp	r2, r3
 8016810:	d804      	bhi.n	801681c <create_chain+0x1d8>
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	699b      	ldr	r3, [r3, #24]
 8016816:	1e5a      	subs	r2, r3, #1
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	791b      	ldrb	r3, [r3, #4]
 8016820:	f043 0301 	orr.w	r3, r3, #1
 8016824:	b2da      	uxtb	r2, r3
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	711a      	strb	r2, [r3, #4]
 801682a:	e007      	b.n	801683c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801682c:	7dfb      	ldrb	r3, [r7, #23]
 801682e:	2b01      	cmp	r3, #1
 8016830:	d102      	bne.n	8016838 <create_chain+0x1f4>
 8016832:	f04f 33ff 	mov.w	r3, #4294967295
 8016836:	e000      	b.n	801683a <create_chain+0x1f6>
 8016838:	2301      	movs	r3, #1
 801683a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801683c:	69fb      	ldr	r3, [r7, #28]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3720      	adds	r7, #32
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016846:	b5b0      	push	{r4, r5, r7, lr}
 8016848:	b088      	sub	sp, #32
 801684a:	af00      	add	r7, sp, #0
 801684c:	60f8      	str	r0, [r7, #12]
 801684e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801685c:	3304      	adds	r3, #4
 801685e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016864:	f04f 0000 	mov.w	r0, #0
 8016868:	f04f 0100 	mov.w	r1, #0
 801686c:	0a50      	lsrs	r0, r2, #9
 801686e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8016872:	0a59      	lsrs	r1, r3, #9
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	895b      	ldrh	r3, [r3, #10]
 8016878:	b29b      	uxth	r3, r3
 801687a:	2200      	movs	r2, #0
 801687c:	461c      	mov	r4, r3
 801687e:	4615      	mov	r5, r2
 8016880:	4622      	mov	r2, r4
 8016882:	462b      	mov	r3, r5
 8016884:	f7e9 fd7c 	bl	8000380 <__aeabi_uldivmod>
 8016888:	4602      	mov	r2, r0
 801688a:	460b      	mov	r3, r1
 801688c:	4613      	mov	r3, r2
 801688e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016890:	69bb      	ldr	r3, [r7, #24]
 8016892:	1d1a      	adds	r2, r3, #4
 8016894:	61ba      	str	r2, [r7, #24]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d101      	bne.n	80168a4 <clmt_clust+0x5e>
 80168a0:	2300      	movs	r3, #0
 80168a2:	e010      	b.n	80168c6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 80168a4:	69fa      	ldr	r2, [r7, #28]
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d307      	bcc.n	80168bc <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80168ac:	69fa      	ldr	r2, [r7, #28]
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	1ad3      	subs	r3, r2, r3
 80168b2:	61fb      	str	r3, [r7, #28]
 80168b4:	69bb      	ldr	r3, [r7, #24]
 80168b6:	3304      	adds	r3, #4
 80168b8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80168ba:	e7e9      	b.n	8016890 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 80168bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	69fb      	ldr	r3, [r7, #28]
 80168c4:	4413      	add	r3, r2
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3720      	adds	r7, #32
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bdb0      	pop	{r4, r5, r7, pc}

080168ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b086      	sub	sp, #24
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
 80168d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	2b04      	cmp	r3, #4
 80168e4:	d102      	bne.n	80168ec <dir_sdi+0x1e>
 80168e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168ea:	e001      	b.n	80168f0 <dir_sdi+0x22>
 80168ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d904      	bls.n	8016900 <dir_sdi+0x32>
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	f003 031f 	and.w	r3, r3, #31
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d001      	beq.n	8016904 <dir_sdi+0x36>
		return FR_INT_ERR;
 8016900:	2302      	movs	r3, #2
 8016902:	e066      	b.n	80169d2 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	683a      	ldr	r2, [r7, #0]
 8016908:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	689b      	ldr	r3, [r3, #8]
 801690e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d109      	bne.n	801692a <dir_sdi+0x5c>
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	2b02      	cmp	r3, #2
 801691c:	d905      	bls.n	801692a <dir_sdi+0x5c>
		clst = fs->dirbase;
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016922:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d10c      	bne.n	801694a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	095b      	lsrs	r3, r3, #5
 8016934:	693a      	ldr	r2, [r7, #16]
 8016936:	8912      	ldrh	r2, [r2, #8]
 8016938:	4293      	cmp	r3, r2
 801693a:	d301      	bcc.n	8016940 <dir_sdi+0x72>
 801693c:	2302      	movs	r3, #2
 801693e:	e048      	b.n	80169d2 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	639a      	str	r2, [r3, #56]	@ 0x38
 8016948:	e029      	b.n	801699e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801694a:	693b      	ldr	r3, [r7, #16]
 801694c:	895b      	ldrh	r3, [r3, #10]
 801694e:	025b      	lsls	r3, r3, #9
 8016950:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016952:	e019      	b.n	8016988 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6979      	ldr	r1, [r7, #20]
 8016958:	4618      	mov	r0, r3
 801695a:	f7ff fa71 	bl	8015e40 <get_fat>
 801695e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016960:	697b      	ldr	r3, [r7, #20]
 8016962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016966:	d101      	bne.n	801696c <dir_sdi+0x9e>
 8016968:	2301      	movs	r3, #1
 801696a:	e032      	b.n	80169d2 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	2b01      	cmp	r3, #1
 8016970:	d904      	bls.n	801697c <dir_sdi+0xae>
 8016972:	693b      	ldr	r3, [r7, #16]
 8016974:	69db      	ldr	r3, [r3, #28]
 8016976:	697a      	ldr	r2, [r7, #20]
 8016978:	429a      	cmp	r2, r3
 801697a:	d301      	bcc.n	8016980 <dir_sdi+0xb2>
 801697c:	2302      	movs	r3, #2
 801697e:	e028      	b.n	80169d2 <dir_sdi+0x104>
			ofs -= csz;
 8016980:	683a      	ldr	r2, [r7, #0]
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	1ad3      	subs	r3, r2, r3
 8016986:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	429a      	cmp	r2, r3
 801698e:	d2e1      	bcs.n	8016954 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8016990:	6979      	ldr	r1, [r7, #20]
 8016992:	6938      	ldr	r0, [r7, #16]
 8016994:	f7ff fa34 	bl	8015e00 <clust2sect>
 8016998:	4602      	mov	r2, r0
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	697a      	ldr	r2, [r7, #20]
 80169a2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d101      	bne.n	80169b0 <dir_sdi+0xe2>
 80169ac:	2302      	movs	r3, #2
 80169ae:	e010      	b.n	80169d2 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	0a5b      	lsrs	r3, r3, #9
 80169b8:	441a      	add	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169ca:	441a      	add	r2, r3
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80169d0:	2300      	movs	r3, #0
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3718      	adds	r7, #24
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80169da:	b580      	push	{r7, lr}
 80169dc:	b086      	sub	sp, #24
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
 80169e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169ee:	3320      	adds	r3, #32
 80169f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00b      	beq.n	8016a12 <dir_next+0x38>
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	2b04      	cmp	r3, #4
 8016a00:	d102      	bne.n	8016a08 <dir_next+0x2e>
 8016a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a06:	e001      	b.n	8016a0c <dir_next+0x32>
 8016a08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d801      	bhi.n	8016a16 <dir_next+0x3c>
 8016a12:	2304      	movs	r3, #4
 8016a14:	e0b2      	b.n	8016b7c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f040 80a0 	bne.w	8016b62 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a26:	1c5a      	adds	r2, r3, #1
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d10b      	bne.n	8016a4c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	095b      	lsrs	r3, r3, #5
 8016a38:	68fa      	ldr	r2, [r7, #12]
 8016a3a:	8912      	ldrh	r2, [r2, #8]
 8016a3c:	4293      	cmp	r3, r2
 8016a3e:	f0c0 8090 	bcc.w	8016b62 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2200      	movs	r2, #0
 8016a46:	639a      	str	r2, [r3, #56]	@ 0x38
 8016a48:	2304      	movs	r3, #4
 8016a4a:	e097      	b.n	8016b7c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016a4c:	68bb      	ldr	r3, [r7, #8]
 8016a4e:	0a5b      	lsrs	r3, r3, #9
 8016a50:	68fa      	ldr	r2, [r7, #12]
 8016a52:	8952      	ldrh	r2, [r2, #10]
 8016a54:	3a01      	subs	r2, #1
 8016a56:	4013      	ands	r3, r2
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	f040 8082 	bne.w	8016b62 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a64:	4619      	mov	r1, r3
 8016a66:	4610      	mov	r0, r2
 8016a68:	f7ff f9ea 	bl	8015e40 <get_fat>
 8016a6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	2b01      	cmp	r3, #1
 8016a72:	d801      	bhi.n	8016a78 <dir_next+0x9e>
 8016a74:	2302      	movs	r3, #2
 8016a76:	e081      	b.n	8016b7c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a7e:	d101      	bne.n	8016a84 <dir_next+0xaa>
 8016a80:	2301      	movs	r3, #1
 8016a82:	e07b      	b.n	8016b7c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	69db      	ldr	r3, [r3, #28]
 8016a88:	697a      	ldr	r2, [r7, #20]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d35f      	bcc.n	8016b4e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d104      	bne.n	8016a9e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2200      	movs	r2, #0
 8016a98:	639a      	str	r2, [r3, #56]	@ 0x38
 8016a9a:	2304      	movs	r3, #4
 8016a9c:	e06e      	b.n	8016b7c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016a9e:	687a      	ldr	r2, [r7, #4]
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	4610      	mov	r0, r2
 8016aa8:	f7ff fdcc 	bl	8016644 <create_chain>
 8016aac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d101      	bne.n	8016ab8 <dir_next+0xde>
 8016ab4:	2307      	movs	r3, #7
 8016ab6:	e061      	b.n	8016b7c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	d101      	bne.n	8016ac2 <dir_next+0xe8>
 8016abe:	2302      	movs	r3, #2
 8016ac0:	e05c      	b.n	8016b7c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac8:	d101      	bne.n	8016ace <dir_next+0xf4>
 8016aca:	2301      	movs	r3, #1
 8016acc:	e056      	b.n	8016b7c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	79db      	ldrb	r3, [r3, #7]
 8016ad2:	f043 0304 	orr.w	r3, r3, #4
 8016ad6:	b2da      	uxtb	r2, r3
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016adc:	68f8      	ldr	r0, [r7, #12]
 8016ade:	f7ff f8af 	bl	8015c40 <sync_window>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d001      	beq.n	8016aec <dir_next+0x112>
 8016ae8:	2301      	movs	r3, #1
 8016aea:	e047      	b.n	8016b7c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	3338      	adds	r3, #56	@ 0x38
 8016af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016af4:	2100      	movs	r1, #0
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fe fed8 	bl	80158ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016afc:	2300      	movs	r3, #0
 8016afe:	613b      	str	r3, [r7, #16]
 8016b00:	6979      	ldr	r1, [r7, #20]
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f7ff f97c 	bl	8015e00 <clust2sect>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8016b0e:	e012      	b.n	8016b36 <dir_next+0x15c>
						fs->wflag = 1;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	2201      	movs	r2, #1
 8016b14:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016b16:	68f8      	ldr	r0, [r7, #12]
 8016b18:	f7ff f892 	bl	8015c40 <sync_window>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d001      	beq.n	8016b26 <dir_next+0x14c>
 8016b22:	2301      	movs	r3, #1
 8016b24:	e02a      	b.n	8016b7c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	613b      	str	r3, [r7, #16]
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b30:	1c5a      	adds	r2, r3, #1
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	895b      	ldrh	r3, [r3, #10]
 8016b3a:	461a      	mov	r2, r3
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d3e6      	bcc.n	8016b10 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	1ad2      	subs	r2, r2, r3
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	697a      	ldr	r2, [r7, #20]
 8016b52:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8016b54:	6979      	ldr	r1, [r7, #20]
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	f7ff f952 	bl	8015e00 <clust2sect>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	68ba      	ldr	r2, [r7, #8]
 8016b66:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b74:	441a      	add	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3718      	adds	r7, #24
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b086      	sub	sp, #24
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016b94:	2100      	movs	r1, #0
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7ff fe99 	bl	80168ce <dir_sdi>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016ba0:	7dfb      	ldrb	r3, [r7, #23]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d140      	bne.n	8016c28 <dir_alloc+0xa4>
		n = 0;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016bae:	4619      	mov	r1, r3
 8016bb0:	68f8      	ldr	r0, [r7, #12]
 8016bb2:	f7ff f889 	bl	8015cc8 <move_window>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016bba:	7dfb      	ldrb	r3, [r7, #23]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d132      	bne.n	8016c26 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	2b04      	cmp	r3, #4
 8016bc6:	d108      	bne.n	8016bda <dir_alloc+0x56>
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	b25b      	sxtb	r3, r3
 8016bd0:	43db      	mvns	r3, r3
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	09db      	lsrs	r3, r3, #7
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	e00f      	b.n	8016bfa <dir_alloc+0x76>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	2be5      	cmp	r3, #229	@ 0xe5
 8016be2:	d004      	beq.n	8016bee <dir_alloc+0x6a>
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d101      	bne.n	8016bf2 <dir_alloc+0x6e>
 8016bee:	2301      	movs	r3, #1
 8016bf0:	e000      	b.n	8016bf4 <dir_alloc+0x70>
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	f003 0301 	and.w	r3, r3, #1
 8016bf8:	b2db      	uxtb	r3, r3
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d007      	beq.n	8016c0e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	3301      	adds	r3, #1
 8016c02:	613b      	str	r3, [r7, #16]
 8016c04:	693a      	ldr	r2, [r7, #16]
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d102      	bne.n	8016c12 <dir_alloc+0x8e>
 8016c0c:	e00c      	b.n	8016c28 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016c0e:	2300      	movs	r3, #0
 8016c10:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016c12:	2101      	movs	r1, #1
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f7ff fee0 	bl	80169da <dir_next>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d0c2      	beq.n	8016baa <dir_alloc+0x26>
 8016c24:	e000      	b.n	8016c28 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8016c26:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016c28:	7dfb      	ldrb	r3, [r7, #23]
 8016c2a:	2b04      	cmp	r3, #4
 8016c2c:	d101      	bne.n	8016c32 <dir_alloc+0xae>
 8016c2e:	2307      	movs	r3, #7
 8016c30:	75fb      	strb	r3, [r7, #23]
	return res;
 8016c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3718      	adds	r7, #24
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	331a      	adds	r3, #26
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fe fc28 	bl	80154a0 <ld_word>
 8016c50:	4603      	mov	r3, r0
 8016c52:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b03      	cmp	r3, #3
 8016c5a:	d109      	bne.n	8016c70 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	3314      	adds	r3, #20
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7fe fc1d 	bl	80154a0 <ld_word>
 8016c66:	4603      	mov	r3, r0
 8016c68:	041b      	lsls	r3, r3, #16
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016c70:	68fb      	ldr	r3, [r7, #12]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b084      	sub	sp, #16
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	60f8      	str	r0, [r7, #12]
 8016c82:	60b9      	str	r1, [r7, #8]
 8016c84:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	331a      	adds	r3, #26
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	b292      	uxth	r2, r2
 8016c8e:	4611      	mov	r1, r2
 8016c90:	4618      	mov	r0, r3
 8016c92:	f7fe fd1b 	bl	80156cc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	781b      	ldrb	r3, [r3, #0]
 8016c9a:	2b03      	cmp	r3, #3
 8016c9c:	d109      	bne.n	8016cb2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	f103 0214 	add.w	r2, r3, #20
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	0c1b      	lsrs	r3, r3, #16
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	4619      	mov	r1, r3
 8016cac:	4610      	mov	r0, r2
 8016cae:	f7fe fd0d 	bl	80156cc <st_word>
	}
}
 8016cb2:	bf00      	nop
 8016cb4:	3710      	adds	r7, #16
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
	...

08016cbc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016cbc:	b590      	push	{r4, r7, lr}
 8016cbe:	b087      	sub	sp, #28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	331a      	adds	r3, #26
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7fe fbe8 	bl	80154a0 <ld_word>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d001      	beq.n	8016cda <cmp_lfn+0x1e>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e059      	b.n	8016d8e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016ce2:	1e5a      	subs	r2, r3, #1
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	009b      	lsls	r3, r3, #2
 8016cec:	4413      	add	r3, r2
 8016cee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	81fb      	strh	r3, [r7, #14]
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	613b      	str	r3, [r7, #16]
 8016cf8:	e033      	b.n	8016d62 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016cfa:	4a27      	ldr	r2, [pc, #156]	@ (8016d98 <cmp_lfn+0xdc>)
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	4413      	add	r3, r2
 8016d00:	781b      	ldrb	r3, [r3, #0]
 8016d02:	461a      	mov	r2, r3
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	4413      	add	r3, r2
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f7fe fbc9 	bl	80154a0 <ld_word>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016d12:	89fb      	ldrh	r3, [r7, #14]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d01a      	beq.n	8016d4e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8016d1c:	d812      	bhi.n	8016d44 <cmp_lfn+0x88>
 8016d1e:	89bb      	ldrh	r3, [r7, #12]
 8016d20:	4618      	mov	r0, r3
 8016d22:	f002 fc9f 	bl	8019664 <ff_wtoupper>
 8016d26:	4603      	mov	r3, r0
 8016d28:	461c      	mov	r4, r3
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	1c5a      	adds	r2, r3, #1
 8016d2e:	617a      	str	r2, [r7, #20]
 8016d30:	005b      	lsls	r3, r3, #1
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	4413      	add	r3, r2
 8016d36:	881b      	ldrh	r3, [r3, #0]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f002 fc93 	bl	8019664 <ff_wtoupper>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	429c      	cmp	r4, r3
 8016d42:	d001      	beq.n	8016d48 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016d44:	2300      	movs	r3, #0
 8016d46:	e022      	b.n	8016d8e <cmp_lfn+0xd2>
			}
			wc = uc;
 8016d48:	89bb      	ldrh	r3, [r7, #12]
 8016d4a:	81fb      	strh	r3, [r7, #14]
 8016d4c:	e006      	b.n	8016d5c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016d4e:	89bb      	ldrh	r3, [r7, #12]
 8016d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d54:	4293      	cmp	r3, r2
 8016d56:	d001      	beq.n	8016d5c <cmp_lfn+0xa0>
 8016d58:	2300      	movs	r3, #0
 8016d5a:	e018      	b.n	8016d8e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016d5c:	693b      	ldr	r3, [r7, #16]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	613b      	str	r3, [r7, #16]
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	2b0c      	cmp	r3, #12
 8016d66:	d9c8      	bls.n	8016cfa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d00b      	beq.n	8016d8c <cmp_lfn+0xd0>
 8016d74:	89fb      	ldrh	r3, [r7, #14]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d008      	beq.n	8016d8c <cmp_lfn+0xd0>
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	4413      	add	r3, r2
 8016d82:	881b      	ldrh	r3, [r3, #0]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d001      	beq.n	8016d8c <cmp_lfn+0xd0>
 8016d88:	2300      	movs	r3, #0
 8016d8a:	e000      	b.n	8016d8e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016d8c:	2301      	movs	r3, #1
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	371c      	adds	r7, #28
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd90      	pop	{r4, r7, pc}
 8016d96:	bf00      	nop
 8016d98:	0801b32c 	.word	0x0801b32c

08016d9c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b086      	sub	sp, #24
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	331a      	adds	r3, #26
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fe fb78 	bl	80154a0 <ld_word>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d001      	beq.n	8016dba <pick_lfn+0x1e>
 8016db6:	2300      	movs	r3, #0
 8016db8:	e04d      	b.n	8016e56 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016dc2:	1e5a      	subs	r2, r3, #1
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	005b      	lsls	r3, r3, #1
 8016dc8:	4413      	add	r3, r2
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	4413      	add	r3, r2
 8016dce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	81fb      	strh	r3, [r7, #14]
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	613b      	str	r3, [r7, #16]
 8016dd8:	e028      	b.n	8016e2c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016dda:	4a21      	ldr	r2, [pc, #132]	@ (8016e60 <pick_lfn+0xc4>)
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	4413      	add	r3, r2
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	461a      	mov	r2, r3
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	4413      	add	r3, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7fe fb59 	bl	80154a0 <ld_word>
 8016dee:	4603      	mov	r3, r0
 8016df0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016df2:	89fb      	ldrh	r3, [r7, #14]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00f      	beq.n	8016e18 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8016dfc:	d901      	bls.n	8016e02 <pick_lfn+0x66>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	e029      	b.n	8016e56 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016e02:	89bb      	ldrh	r3, [r7, #12]
 8016e04:	81fb      	strh	r3, [r7, #14]
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	1c5a      	adds	r2, r3, #1
 8016e0a:	617a      	str	r2, [r7, #20]
 8016e0c:	005b      	lsls	r3, r3, #1
 8016e0e:	687a      	ldr	r2, [r7, #4]
 8016e10:	4413      	add	r3, r2
 8016e12:	89fa      	ldrh	r2, [r7, #14]
 8016e14:	801a      	strh	r2, [r3, #0]
 8016e16:	e006      	b.n	8016e26 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016e18:	89bb      	ldrh	r3, [r7, #12]
 8016e1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d001      	beq.n	8016e26 <pick_lfn+0x8a>
 8016e22:	2300      	movs	r3, #0
 8016e24:	e017      	b.n	8016e56 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	3301      	adds	r3, #1
 8016e2a:	613b      	str	r3, [r7, #16]
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	2b0c      	cmp	r3, #12
 8016e30:	d9d3      	bls.n	8016dda <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d00a      	beq.n	8016e54 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	2bfe      	cmp	r3, #254	@ 0xfe
 8016e42:	d901      	bls.n	8016e48 <pick_lfn+0xac>
 8016e44:	2300      	movs	r3, #0
 8016e46:	e006      	b.n	8016e56 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	005b      	lsls	r3, r3, #1
 8016e4c:	687a      	ldr	r2, [r7, #4]
 8016e4e:	4413      	add	r3, r2
 8016e50:	2200      	movs	r2, #0
 8016e52:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8016e54:	2301      	movs	r3, #1
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	0801b32c 	.word	0x0801b32c

08016e64 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b088      	sub	sp, #32
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	4611      	mov	r1, r2
 8016e70:	461a      	mov	r2, r3
 8016e72:	460b      	mov	r3, r1
 8016e74:	71fb      	strb	r3, [r7, #7]
 8016e76:	4613      	mov	r3, r2
 8016e78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	330d      	adds	r3, #13
 8016e7e:	79ba      	ldrb	r2, [r7, #6]
 8016e80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016e82:	68bb      	ldr	r3, [r7, #8]
 8016e84:	330b      	adds	r3, #11
 8016e86:	220f      	movs	r2, #15
 8016e88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	330c      	adds	r3, #12
 8016e8e:	2200      	movs	r2, #0
 8016e90:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	331a      	adds	r3, #26
 8016e96:	2100      	movs	r1, #0
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fe fc17 	bl	80156cc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016e9e:	79fb      	ldrb	r3, [r7, #7]
 8016ea0:	1e5a      	subs	r2, r3, #1
 8016ea2:	4613      	mov	r3, r2
 8016ea4:	005b      	lsls	r3, r3, #1
 8016ea6:	4413      	add	r3, r2
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	4413      	add	r3, r2
 8016eac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	82fb      	strh	r3, [r7, #22]
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016eb6:	8afb      	ldrh	r3, [r7, #22]
 8016eb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	d007      	beq.n	8016ed0 <put_lfn+0x6c>
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	1c5a      	adds	r2, r3, #1
 8016ec4:	61fa      	str	r2, [r7, #28]
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	68fa      	ldr	r2, [r7, #12]
 8016eca:	4413      	add	r3, r2
 8016ecc:	881b      	ldrh	r3, [r3, #0]
 8016ece:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016ed0:	4a17      	ldr	r2, [pc, #92]	@ (8016f30 <put_lfn+0xcc>)
 8016ed2:	69bb      	ldr	r3, [r7, #24]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	781b      	ldrb	r3, [r3, #0]
 8016ed8:	461a      	mov	r2, r3
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	4413      	add	r3, r2
 8016ede:	8afa      	ldrh	r2, [r7, #22]
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fe fbf2 	bl	80156cc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016ee8:	8afb      	ldrh	r3, [r7, #22]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d102      	bne.n	8016ef4 <put_lfn+0x90>
 8016eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ef2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016ef4:	69bb      	ldr	r3, [r7, #24]
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	61bb      	str	r3, [r7, #24]
 8016efa:	69bb      	ldr	r3, [r7, #24]
 8016efc:	2b0c      	cmp	r3, #12
 8016efe:	d9da      	bls.n	8016eb6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016f00:	8afb      	ldrh	r3, [r7, #22]
 8016f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f06:	4293      	cmp	r3, r2
 8016f08:	d006      	beq.n	8016f18 <put_lfn+0xb4>
 8016f0a:	69fb      	ldr	r3, [r7, #28]
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	4413      	add	r3, r2
 8016f12:	881b      	ldrh	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d103      	bne.n	8016f20 <put_lfn+0xbc>
 8016f18:	79fb      	ldrb	r3, [r7, #7]
 8016f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	79fa      	ldrb	r2, [r7, #7]
 8016f24:	701a      	strb	r2, [r3, #0]
}
 8016f26:	bf00      	nop
 8016f28:	3720      	adds	r7, #32
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	0801b32c 	.word	0x0801b32c

08016f34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b08c      	sub	sp, #48	@ 0x30
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	60f8      	str	r0, [r7, #12]
 8016f3c:	60b9      	str	r1, [r7, #8]
 8016f3e:	607a      	str	r2, [r7, #4]
 8016f40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8016f42:	220b      	movs	r2, #11
 8016f44:	68b9      	ldr	r1, [r7, #8]
 8016f46:	68f8      	ldr	r0, [r7, #12]
 8016f48:	f7fe fc8f 	bl	801586a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2b05      	cmp	r3, #5
 8016f50:	d929      	bls.n	8016fa6 <gen_numname+0x72>
		sr = seq;
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8016f56:	e020      	b.n	8016f9a <gen_numname+0x66>
			wc = *lfn++;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	1c9a      	adds	r2, r3, #2
 8016f5c:	607a      	str	r2, [r7, #4]
 8016f5e:	881b      	ldrh	r3, [r3, #0]
 8016f60:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8016f62:	2300      	movs	r3, #0
 8016f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016f66:	e015      	b.n	8016f94 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	005a      	lsls	r2, r3, #1
 8016f6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f6e:	f003 0301 	and.w	r3, r3, #1
 8016f72:	4413      	add	r3, r2
 8016f74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016f76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f78:	085b      	lsrs	r3, r3, #1
 8016f7a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d003      	beq.n	8016f8e <gen_numname+0x5a>
 8016f86:	69fa      	ldr	r2, [r7, #28]
 8016f88:	4b30      	ldr	r3, [pc, #192]	@ (801704c <gen_numname+0x118>)
 8016f8a:	4053      	eors	r3, r2
 8016f8c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f90:	3301      	adds	r3, #1
 8016f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f96:	2b0f      	cmp	r3, #15
 8016f98:	d9e6      	bls.n	8016f68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1da      	bne.n	8016f58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016fa6:	2307      	movs	r3, #7
 8016fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	f003 030f 	and.w	r3, r3, #15
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	3330      	adds	r3, #48	@ 0x30
 8016fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8016fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016fbe:	2b39      	cmp	r3, #57	@ 0x39
 8016fc0:	d904      	bls.n	8016fcc <gen_numname+0x98>
 8016fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016fc6:	3307      	adds	r3, #7
 8016fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8016fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fce:	1e5a      	subs	r2, r3, #1
 8016fd0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8016fd2:	3330      	adds	r3, #48	@ 0x30
 8016fd4:	443b      	add	r3, r7
 8016fd6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016fda:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	091b      	lsrs	r3, r3, #4
 8016fe2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d1df      	bne.n	8016faa <gen_numname+0x76>
	ns[i] = '~';
 8016fea:	f107 0214 	add.w	r2, r7, #20
 8016fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ff0:	4413      	add	r3, r2
 8016ff2:	227e      	movs	r2, #126	@ 0x7e
 8016ff4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ffa:	e002      	b.n	8017002 <gen_numname+0xce>
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ffe:	3301      	adds	r3, #1
 8017000:	627b      	str	r3, [r7, #36]	@ 0x24
 8017002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017006:	429a      	cmp	r2, r3
 8017008:	d205      	bcs.n	8017016 <gen_numname+0xe2>
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801700e:	4413      	add	r3, r2
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	2b20      	cmp	r3, #32
 8017014:	d1f2      	bne.n	8016ffc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017018:	2b07      	cmp	r3, #7
 801701a:	d807      	bhi.n	801702c <gen_numname+0xf8>
 801701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801701e:	1c5a      	adds	r2, r3, #1
 8017020:	62ba      	str	r2, [r7, #40]	@ 0x28
 8017022:	3330      	adds	r3, #48	@ 0x30
 8017024:	443b      	add	r3, r7
 8017026:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801702a:	e000      	b.n	801702e <gen_numname+0xfa>
 801702c:	2120      	movs	r1, #32
 801702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017030:	1c5a      	adds	r2, r3, #1
 8017032:	627a      	str	r2, [r7, #36]	@ 0x24
 8017034:	68fa      	ldr	r2, [r7, #12]
 8017036:	4413      	add	r3, r2
 8017038:	460a      	mov	r2, r1
 801703a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801703e:	2b07      	cmp	r3, #7
 8017040:	d9e9      	bls.n	8017016 <gen_numname+0xe2>
}
 8017042:	bf00      	nop
 8017044:	bf00      	nop
 8017046:	3730      	adds	r7, #48	@ 0x30
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	00011021 	.word	0x00011021

08017050 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017050:	b480      	push	{r7}
 8017052:	b085      	sub	sp, #20
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801705c:	230b      	movs	r3, #11
 801705e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017060:	7bfb      	ldrb	r3, [r7, #15]
 8017062:	b2da      	uxtb	r2, r3
 8017064:	0852      	lsrs	r2, r2, #1
 8017066:	01db      	lsls	r3, r3, #7
 8017068:	4313      	orrs	r3, r2
 801706a:	b2da      	uxtb	r2, r3
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	1c59      	adds	r1, r3, #1
 8017070:	6079      	str	r1, [r7, #4]
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	4413      	add	r3, r2
 8017076:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	3b01      	subs	r3, #1
 801707c:	60bb      	str	r3, [r7, #8]
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1ed      	bne.n	8017060 <sum_sfn+0x10>
	return sum;
 8017084:	7bfb      	ldrb	r3, [r7, #15]
}
 8017086:	4618      	mov	r0, r3
 8017088:	3714      	adds	r7, #20
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr

08017092 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8017092:	b480      	push	{r7}
 8017094:	b087      	sub	sp, #28
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	3301      	adds	r3, #1
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	3301      	adds	r3, #1
 80170a2:	015b      	lsls	r3, r3, #5
 80170a4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80170a6:	2300      	movs	r3, #0
 80170a8:	827b      	strh	r3, [r7, #18]
 80170aa:	2300      	movs	r3, #0
 80170ac:	617b      	str	r3, [r7, #20]
 80170ae:	e017      	b.n	80170e0 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	2b02      	cmp	r3, #2
 80170b4:	d103      	bne.n	80170be <xdir_sum+0x2c>
			i++;
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	3301      	adds	r3, #1
 80170ba:	617b      	str	r3, [r7, #20]
 80170bc:	e00d      	b.n	80170da <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80170be:	8a7b      	ldrh	r3, [r7, #18]
 80170c0:	03db      	lsls	r3, r3, #15
 80170c2:	b29a      	uxth	r2, r3
 80170c4:	8a7b      	ldrh	r3, [r7, #18]
 80170c6:	085b      	lsrs	r3, r3, #1
 80170c8:	b29b      	uxth	r3, r3
 80170ca:	4413      	add	r3, r2
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	6879      	ldr	r1, [r7, #4]
 80170d0:	697a      	ldr	r2, [r7, #20]
 80170d2:	440a      	add	r2, r1
 80170d4:	7812      	ldrb	r2, [r2, #0]
 80170d6:	4413      	add	r3, r2
 80170d8:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	3301      	adds	r3, #1
 80170de:	617b      	str	r3, [r7, #20]
 80170e0:	697a      	ldr	r2, [r7, #20]
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d3e3      	bcc.n	80170b0 <xdir_sum+0x1e>
		}
	}
	return sum;
 80170e8:	8a7b      	ldrh	r3, [r7, #18]
}
 80170ea:	4618      	mov	r0, r3
 80170ec:	371c      	adds	r7, #28
 80170ee:	46bd      	mov	sp, r7
 80170f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f4:	4770      	bx	lr

080170f6 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80170f6:	b580      	push	{r7, lr}
 80170f8:	b084      	sub	sp, #16
 80170fa:	af00      	add	r7, sp, #0
 80170fc:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80170fe:	2300      	movs	r3, #0
 8017100:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8017102:	e01f      	b.n	8017144 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8017104:	89bb      	ldrh	r3, [r7, #12]
 8017106:	4618      	mov	r0, r3
 8017108:	f002 faac 	bl	8019664 <ff_wtoupper>
 801710c:	4603      	mov	r3, r0
 801710e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8017110:	89fb      	ldrh	r3, [r7, #14]
 8017112:	03db      	lsls	r3, r3, #15
 8017114:	b29a      	uxth	r2, r3
 8017116:	89fb      	ldrh	r3, [r7, #14]
 8017118:	085b      	lsrs	r3, r3, #1
 801711a:	b29b      	uxth	r3, r3
 801711c:	4413      	add	r3, r2
 801711e:	b29a      	uxth	r2, r3
 8017120:	89bb      	ldrh	r3, [r7, #12]
 8017122:	b2db      	uxtb	r3, r3
 8017124:	b29b      	uxth	r3, r3
 8017126:	4413      	add	r3, r2
 8017128:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 801712a:	89fb      	ldrh	r3, [r7, #14]
 801712c:	03db      	lsls	r3, r3, #15
 801712e:	b29a      	uxth	r2, r3
 8017130:	89fb      	ldrh	r3, [r7, #14]
 8017132:	085b      	lsrs	r3, r3, #1
 8017134:	b29b      	uxth	r3, r3
 8017136:	4413      	add	r3, r2
 8017138:	b29a      	uxth	r2, r3
 801713a:	89bb      	ldrh	r3, [r7, #12]
 801713c:	0a1b      	lsrs	r3, r3, #8
 801713e:	b29b      	uxth	r3, r3
 8017140:	4413      	add	r3, r2
 8017142:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	1c9a      	adds	r2, r3, #2
 8017148:	607a      	str	r2, [r7, #4]
 801714a:	881b      	ldrh	r3, [r3, #0]
 801714c:	81bb      	strh	r3, [r7, #12]
 801714e:	89bb      	ldrh	r3, [r7, #12]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d1d7      	bne.n	8017104 <xname_sum+0xe>
	}
	return sum;
 8017154:	89fb      	ldrh	r3, [r7, #14]
}
 8017156:	4618      	mov	r0, r3
 8017158:	3710      	adds	r7, #16
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
	...

08017160 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8017160:	b590      	push	{r4, r7, lr}
 8017162:	b087      	sub	sp, #28
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	691b      	ldr	r3, [r3, #16]
 801716e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017178:	4619      	mov	r1, r3
 801717a:	4610      	mov	r0, r2
 801717c:	f7fe fda4 	bl	8015cc8 <move_window>
 8017180:	4603      	mov	r3, r0
 8017182:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8017184:	7bfb      	ldrb	r3, [r7, #15]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <load_xdir+0x2e>
 801718a:	7bfb      	ldrb	r3, [r7, #15]
 801718c:	e09f      	b.n	80172ce <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	2b85      	cmp	r3, #133	@ 0x85
 8017196:	d001      	beq.n	801719c <load_xdir+0x3c>
 8017198:	2302      	movs	r3, #2
 801719a:	e098      	b.n	80172ce <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171a0:	2220      	movs	r2, #32
 80171a2:	4619      	mov	r1, r3
 80171a4:	6938      	ldr	r0, [r7, #16]
 80171a6:	f7fe fb60 	bl	801586a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	3301      	adds	r3, #1
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	3301      	adds	r3, #1
 80171b2:	015b      	lsls	r3, r3, #5
 80171b4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	2b5f      	cmp	r3, #95	@ 0x5f
 80171ba:	d903      	bls.n	80171c4 <load_xdir+0x64>
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80171c2:	d901      	bls.n	80171c8 <load_xdir+0x68>
 80171c4:	2302      	movs	r3, #2
 80171c6:	e082      	b.n	80172ce <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80171c8:	2100      	movs	r1, #0
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7ff fc05 	bl	80169da <dir_next>
 80171d0:	4603      	mov	r3, r0
 80171d2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80171d4:	7bfb      	ldrb	r3, [r7, #15]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d001      	beq.n	80171de <load_xdir+0x7e>
 80171da:	7bfb      	ldrb	r3, [r7, #15]
 80171dc:	e077      	b.n	80172ce <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171e6:	4619      	mov	r1, r3
 80171e8:	4610      	mov	r0, r2
 80171ea:	f7fe fd6d 	bl	8015cc8 <move_window>
 80171ee:	4603      	mov	r3, r0
 80171f0:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80171f2:	7bfb      	ldrb	r3, [r7, #15]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d001      	beq.n	80171fc <load_xdir+0x9c>
 80171f8:	7bfb      	ldrb	r3, [r7, #15]
 80171fa:	e068      	b.n	80172ce <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	2bc0      	cmp	r3, #192	@ 0xc0
 8017204:	d001      	beq.n	801720a <load_xdir+0xaa>
 8017206:	2302      	movs	r3, #2
 8017208:	e061      	b.n	80172ce <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 801720a:	693b      	ldr	r3, [r7, #16]
 801720c:	f103 0020 	add.w	r0, r3, #32
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017214:	2220      	movs	r2, #32
 8017216:	4619      	mov	r1, r3
 8017218:	f7fe fb27 	bl	801586a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	3323      	adds	r3, #35	@ 0x23
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	332c      	adds	r3, #44	@ 0x2c
 8017224:	4a2c      	ldr	r2, [pc, #176]	@ (80172d8 <load_xdir+0x178>)
 8017226:	fba2 2303 	umull	r2, r3, r2, r3
 801722a:	08db      	lsrs	r3, r3, #3
 801722c:	015b      	lsls	r3, r3, #5
 801722e:	68ba      	ldr	r2, [r7, #8]
 8017230:	429a      	cmp	r2, r3
 8017232:	d201      	bcs.n	8017238 <load_xdir+0xd8>
 8017234:	2302      	movs	r3, #2
 8017236:	e04a      	b.n	80172ce <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8017238:	2340      	movs	r3, #64	@ 0x40
 801723a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 801723c:	2100      	movs	r1, #0
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7ff fbcb 	bl	80169da <dir_next>
 8017244:	4603      	mov	r3, r0
 8017246:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d001      	beq.n	8017252 <load_xdir+0xf2>
 801724e:	7bfb      	ldrb	r3, [r7, #15]
 8017250:	e03d      	b.n	80172ce <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801725a:	4619      	mov	r1, r3
 801725c:	4610      	mov	r0, r2
 801725e:	f7fe fd33 	bl	8015cc8 <move_window>
 8017262:	4603      	mov	r3, r0
 8017264:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8017266:	7bfb      	ldrb	r3, [r7, #15]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d001      	beq.n	8017270 <load_xdir+0x110>
 801726c:	7bfb      	ldrb	r3, [r7, #15]
 801726e:	e02e      	b.n	80172ce <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2bc1      	cmp	r3, #193	@ 0xc1
 8017278:	d001      	beq.n	801727e <load_xdir+0x11e>
 801727a:	2302      	movs	r3, #2
 801727c:	e027      	b.n	80172ce <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8017284:	d208      	bcs.n	8017298 <load_xdir+0x138>
 8017286:	693a      	ldr	r2, [r7, #16]
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	18d0      	adds	r0, r2, r3
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017290:	2220      	movs	r2, #32
 8017292:	4619      	mov	r1, r3
 8017294:	f7fe fae9 	bl	801586a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	3320      	adds	r3, #32
 801729c:	617b      	str	r3, [r7, #20]
 801729e:	697a      	ldr	r2, [r7, #20]
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d3ca      	bcc.n	801723c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80172ac:	d80e      	bhi.n	80172cc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80172ae:	6938      	ldr	r0, [r7, #16]
 80172b0:	f7ff feef 	bl	8017092 <xdir_sum>
 80172b4:	4603      	mov	r3, r0
 80172b6:	461c      	mov	r4, r3
 80172b8:	693b      	ldr	r3, [r7, #16]
 80172ba:	3302      	adds	r3, #2
 80172bc:	4618      	mov	r0, r3
 80172be:	f7fe f8ef 	bl	80154a0 <ld_word>
 80172c2:	4603      	mov	r3, r0
 80172c4:	429c      	cmp	r4, r3
 80172c6:	d001      	beq.n	80172cc <load_xdir+0x16c>
 80172c8:	2302      	movs	r3, #2
 80172ca:	e000      	b.n	80172ce <load_xdir+0x16e>
	}
	return FR_OK;
 80172cc:	2300      	movs	r3, #0
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	371c      	adds	r7, #28
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd90      	pop	{r4, r7, pc}
 80172d6:	bf00      	nop
 80172d8:	88888889 	.word	0x88888889

080172dc <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80172dc:	b5b0      	push	{r4, r5, r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80172e6:	6839      	ldr	r1, [r7, #0]
 80172e8:	6808      	ldr	r0, [r1, #0]
 80172ea:	6879      	ldr	r1, [r7, #4]
 80172ec:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80172ee:	6839      	ldr	r1, [r7, #0]
 80172f0:	6a08      	ldr	r0, [r1, #32]
 80172f2:	6879      	ldr	r1, [r7, #4]
 80172f4:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80172f6:	6839      	ldr	r1, [r7, #0]
 80172f8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80172fa:	b2c8      	uxtb	r0, r1
 80172fc:	6879      	ldr	r1, [r7, #4]
 80172fe:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8017300:	6839      	ldr	r1, [r7, #0]
 8017302:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8017304:	2000      	movs	r0, #0
 8017306:	460c      	mov	r4, r1
 8017308:	4605      	mov	r5, r0
 801730a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 801730e:	2300      	movs	r3, #0
 8017310:	6879      	ldr	r1, [r7, #4]
 8017312:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017322:	4619      	mov	r1, r3
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f7ff fad2 	bl	80168ce <dir_sdi>
 801732a:	4603      	mov	r3, r0
 801732c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801732e:	7bfb      	ldrb	r3, [r7, #15]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d104      	bne.n	801733e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f7ff ff13 	bl	8017160 <load_xdir>
 801733a:	4603      	mov	r3, r0
 801733c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017340:	4618      	mov	r0, r3
 8017342:	3710      	adds	r7, #16
 8017344:	46bd      	mov	sp, r7
 8017346:	bdb0      	pop	{r4, r5, r7, pc}

08017348 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8017348:	b590      	push	{r4, r7, lr}
 801734a:	b087      	sub	sp, #28
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	691b      	ldr	r3, [r3, #16]
 8017356:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	1c9c      	adds	r4, r3, #2
 801735c:	68f8      	ldr	r0, [r7, #12]
 801735e:	f7ff fe98 	bl	8017092 <xdir_sum>
 8017362:	4603      	mov	r3, r0
 8017364:	4619      	mov	r1, r3
 8017366:	4620      	mov	r0, r4
 8017368:	f7fe f9b0 	bl	80156cc <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	3301      	adds	r3, #1
 8017370:	781b      	ldrb	r3, [r3, #0]
 8017372:	3301      	adds	r3, #1
 8017374:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801737a:	4619      	mov	r1, r3
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7ff faa6 	bl	80168ce <dir_sdi>
 8017382:	4603      	mov	r3, r0
 8017384:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8017386:	e026      	b.n	80173d6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017390:	4619      	mov	r1, r3
 8017392:	4610      	mov	r0, r2
 8017394:	f7fe fc98 	bl	8015cc8 <move_window>
 8017398:	4603      	mov	r3, r0
 801739a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801739c:	7dfb      	ldrb	r3, [r7, #23]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d11d      	bne.n	80173de <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173a6:	2220      	movs	r2, #32
 80173a8:	68f9      	ldr	r1, [r7, #12]
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7fe fa5d 	bl	801586a <mem_cpy>
		dp->obj.fs->wflag = 1;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	2201      	movs	r2, #1
 80173b6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80173b8:	693b      	ldr	r3, [r7, #16]
 80173ba:	3b01      	subs	r3, #1
 80173bc:	613b      	str	r3, [r7, #16]
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d00e      	beq.n	80173e2 <store_xdir+0x9a>
		dirb += SZDIRE;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	3320      	adds	r3, #32
 80173c8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80173ca:	2100      	movs	r1, #0
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f7ff fb04 	bl	80169da <dir_next>
 80173d2:	4603      	mov	r3, r0
 80173d4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80173d6:	7dfb      	ldrb	r3, [r7, #23]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d0d5      	beq.n	8017388 <store_xdir+0x40>
 80173dc:	e002      	b.n	80173e4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80173de:	bf00      	nop
 80173e0:	e000      	b.n	80173e4 <store_xdir+0x9c>
		if (--nent == 0) break;
 80173e2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80173e4:	7dfb      	ldrb	r3, [r7, #23]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d002      	beq.n	80173f0 <store_xdir+0xa8>
 80173ea:	7dfb      	ldrb	r3, [r7, #23]
 80173ec:	2b01      	cmp	r3, #1
 80173ee:	d101      	bne.n	80173f4 <store_xdir+0xac>
 80173f0:	7dfb      	ldrb	r3, [r7, #23]
 80173f2:	e000      	b.n	80173f6 <store_xdir+0xae>
 80173f4:	2302      	movs	r3, #2
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	371c      	adds	r7, #28
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd90      	pop	{r4, r7, pc}

080173fe <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80173fe:	b590      	push	{r4, r7, lr}
 8017400:	b085      	sub	sp, #20
 8017402:	af00      	add	r7, sp, #0
 8017404:	6078      	str	r0, [r7, #4]
 8017406:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8017408:	2240      	movs	r2, #64	@ 0x40
 801740a:	2100      	movs	r1, #0
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7fe fa4d 	bl	80158ac <mem_set>
	dirb[XDIR_Type] = 0x85;
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2285      	movs	r2, #133	@ 0x85
 8017416:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	3320      	adds	r3, #32
 801741c:	22c0      	movs	r2, #192	@ 0xc0
 801741e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8017420:	2300      	movs	r3, #0
 8017422:	72bb      	strb	r3, [r7, #10]
 8017424:	2301      	movs	r3, #1
 8017426:	72fb      	strb	r3, [r7, #11]
 8017428:	2301      	movs	r3, #1
 801742a:	813b      	strh	r3, [r7, #8]
 801742c:	2340      	movs	r3, #64	@ 0x40
 801742e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	1c5a      	adds	r2, r3, #1
 8017434:	60fa      	str	r2, [r7, #12]
 8017436:	687a      	ldr	r2, [r7, #4]
 8017438:	4413      	add	r3, r2
 801743a:	22c1      	movs	r2, #193	@ 0xc1
 801743c:	701a      	strb	r2, [r3, #0]
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	1c5a      	adds	r2, r3, #1
 8017442:	60fa      	str	r2, [r7, #12]
 8017444:	687a      	ldr	r2, [r7, #4]
 8017446:	4413      	add	r3, r2
 8017448:	2200      	movs	r2, #0
 801744a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 801744c:	893b      	ldrh	r3, [r7, #8]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d00b      	beq.n	801746a <create_xdir+0x6c>
 8017452:	7abb      	ldrb	r3, [r7, #10]
 8017454:	005b      	lsls	r3, r3, #1
 8017456:	683a      	ldr	r2, [r7, #0]
 8017458:	4413      	add	r3, r2
 801745a:	881b      	ldrh	r3, [r3, #0]
 801745c:	813b      	strh	r3, [r7, #8]
 801745e:	893b      	ldrh	r3, [r7, #8]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d002      	beq.n	801746a <create_xdir+0x6c>
 8017464:	7abb      	ldrb	r3, [r7, #10]
 8017466:	3301      	adds	r3, #1
 8017468:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	4413      	add	r3, r2
 8017470:	893a      	ldrh	r2, [r7, #8]
 8017472:	4611      	mov	r1, r2
 8017474:	4618      	mov	r0, r3
 8017476:	f7fe f929 	bl	80156cc <st_word>
		} while ((i += 2) % SZDIRE != 0);
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	3302      	adds	r3, #2
 801747e:	60fb      	str	r3, [r7, #12]
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	f003 031f 	and.w	r3, r3, #31
 8017486:	2b00      	cmp	r3, #0
 8017488:	d1e0      	bne.n	801744c <create_xdir+0x4e>
		nb++;
 801748a:	7afb      	ldrb	r3, [r7, #11]
 801748c:	3301      	adds	r3, #1
 801748e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8017490:	7abb      	ldrb	r3, [r7, #10]
 8017492:	005b      	lsls	r3, r3, #1
 8017494:	683a      	ldr	r2, [r7, #0]
 8017496:	4413      	add	r3, r2
 8017498:	881b      	ldrh	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d1c8      	bne.n	8017430 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	3323      	adds	r3, #35	@ 0x23
 80174a2:	7aba      	ldrb	r2, [r7, #10]
 80174a4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	3301      	adds	r3, #1
 80174aa:	7afa      	ldrb	r2, [r7, #11]
 80174ac:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80174b4:	6838      	ldr	r0, [r7, #0]
 80174b6:	f7ff fe1e 	bl	80170f6 <xname_sum>
 80174ba:	4603      	mov	r3, r0
 80174bc:	4619      	mov	r1, r3
 80174be:	4620      	mov	r0, r4
 80174c0:	f7fe f904 	bl	80156cc <st_word>
}
 80174c4:	bf00      	nop
 80174c6:	3714      	adds	r7, #20
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd90      	pop	{r4, r7, pc}

080174cc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b086      	sub	sp, #24
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80174d6:	2304      	movs	r3, #4
 80174d8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80174e0:	23ff      	movs	r3, #255	@ 0xff
 80174e2:	757b      	strb	r3, [r7, #21]
 80174e4:	23ff      	movs	r3, #255	@ 0xff
 80174e6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80174e8:	e09f      	b.n	801762a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174ee:	4619      	mov	r1, r3
 80174f0:	6938      	ldr	r0, [r7, #16]
 80174f2:	f7fe fbe9 	bl	8015cc8 <move_window>
 80174f6:	4603      	mov	r3, r0
 80174f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80174fa:	7dfb      	ldrb	r3, [r7, #23]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	f040 809a 	bne.w	8017636 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801750a:	7dbb      	ldrb	r3, [r7, #22]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d102      	bne.n	8017516 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8017510:	2304      	movs	r3, #4
 8017512:	75fb      	strb	r3, [r7, #23]
 8017514:	e096      	b.n	8017644 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	2b04      	cmp	r3, #4
 801751c:	d118      	bne.n	8017550 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 801751e:	7dbb      	ldrb	r3, [r7, #22]
 8017520:	2b85      	cmp	r3, #133	@ 0x85
 8017522:	d179      	bne.n	8017618 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7ff fe17 	bl	8017160 <load_xdir>
 8017532:	4603      	mov	r3, r0
 8017534:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8017536:	7dfb      	ldrb	r3, [r7, #23]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d17e      	bne.n	801763a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	691b      	ldr	r3, [r3, #16]
 8017540:	3304      	adds	r3, #4
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017548:	b2da      	uxtb	r2, r3
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	719a      	strb	r2, [r3, #6]
					}
					break;
 801754e:	e074      	b.n	801763a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017554:	330b      	adds	r3, #11
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801755c:	73fb      	strb	r3, [r7, #15]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	7bfa      	ldrb	r2, [r7, #15]
 8017562:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8017564:	7dbb      	ldrb	r3, [r7, #22]
 8017566:	2be5      	cmp	r3, #229	@ 0xe5
 8017568:	d00e      	beq.n	8017588 <dir_read+0xbc>
 801756a:	7dbb      	ldrb	r3, [r7, #22]
 801756c:	2b2e      	cmp	r3, #46	@ 0x2e
 801756e:	d00b      	beq.n	8017588 <dir_read+0xbc>
 8017570:	7bfb      	ldrb	r3, [r7, #15]
 8017572:	f023 0320 	bic.w	r3, r3, #32
 8017576:	2b08      	cmp	r3, #8
 8017578:	bf0c      	ite	eq
 801757a:	2301      	moveq	r3, #1
 801757c:	2300      	movne	r3, #0
 801757e:	b2db      	uxtb	r3, r3
 8017580:	461a      	mov	r2, r3
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	4293      	cmp	r3, r2
 8017586:	d002      	beq.n	801758e <dir_read+0xc2>
				ord = 0xFF;
 8017588:	23ff      	movs	r3, #255	@ 0xff
 801758a:	757b      	strb	r3, [r7, #21]
 801758c:	e044      	b.n	8017618 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801758e:	7bfb      	ldrb	r3, [r7, #15]
 8017590:	2b0f      	cmp	r3, #15
 8017592:	d12f      	bne.n	80175f4 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8017594:	7dbb      	ldrb	r3, [r7, #22]
 8017596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801759a:	2b00      	cmp	r3, #0
 801759c:	d00d      	beq.n	80175ba <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175a2:	7b5b      	ldrb	r3, [r3, #13]
 80175a4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80175a6:	7dbb      	ldrb	r3, [r7, #22]
 80175a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80175ac:	75bb      	strb	r3, [r7, #22]
 80175ae:	7dbb      	ldrb	r3, [r7, #22]
 80175b0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80175ba:	7dba      	ldrb	r2, [r7, #22]
 80175bc:	7d7b      	ldrb	r3, [r7, #21]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d115      	bne.n	80175ee <dir_read+0x122>
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175c6:	330d      	adds	r3, #13
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	7d3a      	ldrb	r2, [r7, #20]
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d10e      	bne.n	80175ee <dir_read+0x122>
 80175d0:	693b      	ldr	r3, [r7, #16]
 80175d2:	68da      	ldr	r2, [r3, #12]
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175d8:	4619      	mov	r1, r3
 80175da:	4610      	mov	r0, r2
 80175dc:	f7ff fbde 	bl	8016d9c <pick_lfn>
 80175e0:	4603      	mov	r3, r0
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d003      	beq.n	80175ee <dir_read+0x122>
 80175e6:	7d7b      	ldrb	r3, [r7, #21]
 80175e8:	3b01      	subs	r3, #1
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	e000      	b.n	80175f0 <dir_read+0x124>
 80175ee:	23ff      	movs	r3, #255	@ 0xff
 80175f0:	757b      	strb	r3, [r7, #21]
 80175f2:	e011      	b.n	8017618 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80175f4:	7d7b      	ldrb	r3, [r7, #21]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d109      	bne.n	801760e <dir_read+0x142>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175fe:	4618      	mov	r0, r3
 8017600:	f7ff fd26 	bl	8017050 <sum_sfn>
 8017604:	4603      	mov	r3, r0
 8017606:	461a      	mov	r2, r3
 8017608:	7d3b      	ldrb	r3, [r7, #20]
 801760a:	4293      	cmp	r3, r2
 801760c:	d017      	beq.n	801763e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f04f 32ff 	mov.w	r2, #4294967295
 8017614:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8017616:	e012      	b.n	801763e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8017618:	2100      	movs	r1, #0
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff f9dd 	bl	80169da <dir_next>
 8017620:	4603      	mov	r3, r0
 8017622:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017624:	7dfb      	ldrb	r3, [r7, #23]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d10b      	bne.n	8017642 <dir_read+0x176>
	while (dp->sect) {
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801762e:	2b00      	cmp	r3, #0
 8017630:	f47f af5b 	bne.w	80174ea <dir_read+0x1e>
 8017634:	e006      	b.n	8017644 <dir_read+0x178>
		if (res != FR_OK) break;
 8017636:	bf00      	nop
 8017638:	e004      	b.n	8017644 <dir_read+0x178>
					break;
 801763a:	bf00      	nop
 801763c:	e002      	b.n	8017644 <dir_read+0x178>
					break;
 801763e:	bf00      	nop
 8017640:	e000      	b.n	8017644 <dir_read+0x178>
		if (res != FR_OK) break;
 8017642:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8017644:	7dfb      	ldrb	r3, [r7, #23]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d002      	beq.n	8017650 <dir_read+0x184>
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2200      	movs	r2, #0
 801764e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8017650:	7dfb      	ldrb	r3, [r7, #23]
}
 8017652:	4618      	mov	r0, r3
 8017654:	3718      	adds	r7, #24
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}

0801765a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801765a:	b590      	push	{r4, r7, lr}
 801765c:	b089      	sub	sp, #36	@ 0x24
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017668:	2100      	movs	r1, #0
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7ff f92f 	bl	80168ce <dir_sdi>
 8017670:	4603      	mov	r3, r0
 8017672:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8017674:	7ffb      	ldrb	r3, [r7, #31]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d001      	beq.n	801767e <dir_find+0x24>
 801767a:	7ffb      	ldrb	r3, [r7, #31]
 801767c:	e113      	b.n	80178a6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	2b04      	cmp	r3, #4
 8017684:	d165      	bne.n	8017752 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	4618      	mov	r0, r3
 801768c:	f7ff fd33 	bl	80170f6 <xname_sum>
 8017690:	4603      	mov	r3, r0
 8017692:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8017694:	e050      	b.n	8017738 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	691b      	ldr	r3, [r3, #16]
 801769a:	3324      	adds	r3, #36	@ 0x24
 801769c:	4618      	mov	r0, r3
 801769e:	f7fd feff 	bl	80154a0 <ld_word>
 80176a2:	4603      	mov	r3, r0
 80176a4:	461a      	mov	r2, r3
 80176a6:	893b      	ldrh	r3, [r7, #8]
 80176a8:	4293      	cmp	r3, r2
 80176aa:	d144      	bne.n	8017736 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	691b      	ldr	r3, [r3, #16]
 80176b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80176b4:	76fb      	strb	r3, [r7, #27]
 80176b6:	2340      	movs	r3, #64	@ 0x40
 80176b8:	617b      	str	r3, [r7, #20]
 80176ba:	2300      	movs	r3, #0
 80176bc:	613b      	str	r3, [r7, #16]
 80176be:	e029      	b.n	8017714 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	f003 031f 	and.w	r3, r3, #31
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d102      	bne.n	80176d0 <dir_find+0x76>
 80176ca:	697b      	ldr	r3, [r7, #20]
 80176cc:	3302      	adds	r3, #2
 80176ce:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	691a      	ldr	r2, [r3, #16]
 80176d4:	697b      	ldr	r3, [r7, #20]
 80176d6:	4413      	add	r3, r2
 80176d8:	4618      	mov	r0, r3
 80176da:	f7fd fee1 	bl	80154a0 <ld_word>
 80176de:	4603      	mov	r3, r0
 80176e0:	4618      	mov	r0, r3
 80176e2:	f001 ffbf 	bl	8019664 <ff_wtoupper>
 80176e6:	4603      	mov	r3, r0
 80176e8:	461c      	mov	r4, r3
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	68da      	ldr	r2, [r3, #12]
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	005b      	lsls	r3, r3, #1
 80176f2:	4413      	add	r3, r2
 80176f4:	881b      	ldrh	r3, [r3, #0]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f001 ffb4 	bl	8019664 <ff_wtoupper>
 80176fc:	4603      	mov	r3, r0
 80176fe:	429c      	cmp	r4, r3
 8017700:	d10c      	bne.n	801771c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8017702:	7efb      	ldrb	r3, [r7, #27]
 8017704:	3b01      	subs	r3, #1
 8017706:	76fb      	strb	r3, [r7, #27]
 8017708:	697b      	ldr	r3, [r7, #20]
 801770a:	3302      	adds	r3, #2
 801770c:	617b      	str	r3, [r7, #20]
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	3301      	adds	r3, #1
 8017712:	613b      	str	r3, [r7, #16]
 8017714:	7efb      	ldrb	r3, [r7, #27]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d1d2      	bne.n	80176c0 <dir_find+0x66>
 801771a:	e000      	b.n	801771e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801771c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801771e:	7efb      	ldrb	r3, [r7, #27]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d109      	bne.n	8017738 <dir_find+0xde>
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	68da      	ldr	r2, [r3, #12]
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	4413      	add	r3, r2
 801772e:	881b      	ldrh	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d00b      	beq.n	801774c <dir_find+0xf2>
 8017734:	e000      	b.n	8017738 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8017736:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8017738:	2100      	movs	r1, #0
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7ff fec6 	bl	80174cc <dir_read>
 8017740:	4603      	mov	r3, r0
 8017742:	77fb      	strb	r3, [r7, #31]
 8017744:	7ffb      	ldrb	r3, [r7, #31]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d0a5      	beq.n	8017696 <dir_find+0x3c>
 801774a:	e000      	b.n	801774e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801774c:	bf00      	nop
		}
		return res;
 801774e:	7ffb      	ldrb	r3, [r7, #31]
 8017750:	e0a9      	b.n	80178a6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017752:	23ff      	movs	r3, #255	@ 0xff
 8017754:	773b      	strb	r3, [r7, #28]
 8017756:	7f3b      	ldrb	r3, [r7, #28]
 8017758:	777b      	strb	r3, [r7, #29]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f04f 32ff 	mov.w	r2, #4294967295
 8017760:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017766:	4619      	mov	r1, r3
 8017768:	68f8      	ldr	r0, [r7, #12]
 801776a:	f7fe faad 	bl	8015cc8 <move_window>
 801776e:	4603      	mov	r3, r0
 8017770:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8017772:	7ffb      	ldrb	r3, [r7, #31]
 8017774:	2b00      	cmp	r3, #0
 8017776:	f040 8090 	bne.w	801789a <dir_find+0x240>
		c = dp->dir[DIR_Name];
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017782:	7fbb      	ldrb	r3, [r7, #30]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d102      	bne.n	801778e <dir_find+0x134>
 8017788:	2304      	movs	r3, #4
 801778a:	77fb      	strb	r3, [r7, #31]
 801778c:	e08a      	b.n	80178a4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017792:	330b      	adds	r3, #11
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801779a:	72fb      	strb	r3, [r7, #11]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	7afa      	ldrb	r2, [r7, #11]
 80177a0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80177a2:	7fbb      	ldrb	r3, [r7, #30]
 80177a4:	2be5      	cmp	r3, #229	@ 0xe5
 80177a6:	d007      	beq.n	80177b8 <dir_find+0x15e>
 80177a8:	7afb      	ldrb	r3, [r7, #11]
 80177aa:	f003 0308 	and.w	r3, r3, #8
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d009      	beq.n	80177c6 <dir_find+0x16c>
 80177b2:	7afb      	ldrb	r3, [r7, #11]
 80177b4:	2b0f      	cmp	r3, #15
 80177b6:	d006      	beq.n	80177c6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80177b8:	23ff      	movs	r3, #255	@ 0xff
 80177ba:	777b      	strb	r3, [r7, #29]
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f04f 32ff 	mov.w	r2, #4294967295
 80177c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80177c4:	e05e      	b.n	8017884 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80177c6:	7afb      	ldrb	r3, [r7, #11]
 80177c8:	2b0f      	cmp	r3, #15
 80177ca:	d136      	bne.n	801783a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80177d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d154      	bne.n	8017884 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80177da:	7fbb      	ldrb	r3, [r7, #30]
 80177dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d00d      	beq.n	8017800 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177e8:	7b5b      	ldrb	r3, [r3, #13]
 80177ea:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80177ec:	7fbb      	ldrb	r3, [r7, #30]
 80177ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80177f2:	77bb      	strb	r3, [r7, #30]
 80177f4:	7fbb      	ldrb	r3, [r7, #30]
 80177f6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017800:	7fba      	ldrb	r2, [r7, #30]
 8017802:	7f7b      	ldrb	r3, [r7, #29]
 8017804:	429a      	cmp	r2, r3
 8017806:	d115      	bne.n	8017834 <dir_find+0x1da>
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801780c:	330d      	adds	r3, #13
 801780e:	781b      	ldrb	r3, [r3, #0]
 8017810:	7f3a      	ldrb	r2, [r7, #28]
 8017812:	429a      	cmp	r2, r3
 8017814:	d10e      	bne.n	8017834 <dir_find+0x1da>
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	68da      	ldr	r2, [r3, #12]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801781e:	4619      	mov	r1, r3
 8017820:	4610      	mov	r0, r2
 8017822:	f7ff fa4b 	bl	8016cbc <cmp_lfn>
 8017826:	4603      	mov	r3, r0
 8017828:	2b00      	cmp	r3, #0
 801782a:	d003      	beq.n	8017834 <dir_find+0x1da>
 801782c:	7f7b      	ldrb	r3, [r7, #29]
 801782e:	3b01      	subs	r3, #1
 8017830:	b2db      	uxtb	r3, r3
 8017832:	e000      	b.n	8017836 <dir_find+0x1dc>
 8017834:	23ff      	movs	r3, #255	@ 0xff
 8017836:	777b      	strb	r3, [r7, #29]
 8017838:	e024      	b.n	8017884 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801783a:	7f7b      	ldrb	r3, [r7, #29]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d109      	bne.n	8017854 <dir_find+0x1fa>
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017844:	4618      	mov	r0, r3
 8017846:	f7ff fc03 	bl	8017050 <sum_sfn>
 801784a:	4603      	mov	r3, r0
 801784c:	461a      	mov	r2, r3
 801784e:	7f3b      	ldrb	r3, [r7, #28]
 8017850:	4293      	cmp	r3, r2
 8017852:	d024      	beq.n	801789e <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 801785a:	f003 0301 	and.w	r3, r3, #1
 801785e:	2b00      	cmp	r3, #0
 8017860:	d10a      	bne.n	8017878 <dir_find+0x21e>
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	3340      	adds	r3, #64	@ 0x40
 801786a:	220b      	movs	r2, #11
 801786c:	4619      	mov	r1, r3
 801786e:	f7fe f838 	bl	80158e2 <mem_cmp>
 8017872:	4603      	mov	r3, r0
 8017874:	2b00      	cmp	r3, #0
 8017876:	d014      	beq.n	80178a2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017878:	23ff      	movs	r3, #255	@ 0xff
 801787a:	777b      	strb	r3, [r7, #29]
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f04f 32ff 	mov.w	r2, #4294967295
 8017882:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017884:	2100      	movs	r1, #0
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f7ff f8a7 	bl	80169da <dir_next>
 801788c:	4603      	mov	r3, r0
 801788e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8017890:	7ffb      	ldrb	r3, [r7, #31]
 8017892:	2b00      	cmp	r3, #0
 8017894:	f43f af65 	beq.w	8017762 <dir_find+0x108>
 8017898:	e004      	b.n	80178a4 <dir_find+0x24a>
		if (res != FR_OK) break;
 801789a:	bf00      	nop
 801789c:	e002      	b.n	80178a4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801789e:	bf00      	nop
 80178a0:	e000      	b.n	80178a4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80178a2:	bf00      	nop

	return res;
 80178a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3724      	adds	r7, #36	@ 0x24
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd90      	pop	{r4, r7, pc}
	...

080178b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80178b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80178b4:	b0a0      	sub	sp, #128	@ 0x80
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80178c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d001      	beq.n	80178d2 <dir_register+0x22>
 80178ce:	2306      	movs	r3, #6
 80178d0:	e18e      	b.n	8017bf0 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80178d2:	2300      	movs	r3, #0
 80178d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80178d6:	e002      	b.n	80178de <dir_register+0x2e>
 80178d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80178da:	3301      	adds	r3, #1
 80178dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80178de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80178e0:	68da      	ldr	r2, [r3, #12]
 80178e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80178e4:	005b      	lsls	r3, r3, #1
 80178e6:	4413      	add	r3, r2
 80178e8:	881b      	ldrh	r3, [r3, #0]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d1f4      	bne.n	80178d8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80178ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	2b04      	cmp	r3, #4
 80178f4:	f040 809f 	bne.w	8017a36 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80178f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80178fa:	330e      	adds	r3, #14
 80178fc:	4aa2      	ldr	r2, [pc, #648]	@ (8017b88 <dir_register+0x2d8>)
 80178fe:	fba2 2303 	umull	r2, r3, r2, r3
 8017902:	08db      	lsrs	r3, r3, #3
 8017904:	3302      	adds	r3, #2
 8017906:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8017908:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff f93a 	bl	8016b84 <dir_alloc>
 8017910:	4603      	mov	r3, r0
 8017912:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8017916:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801791a:	2b00      	cmp	r3, #0
 801791c:	d002      	beq.n	8017924 <dir_register+0x74>
 801791e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017922:	e165      	b.n	8017bf0 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801792a:	3b01      	subs	r3, #1
 801792c:	015b      	lsls	r3, r3, #5
 801792e:	1ad2      	subs	r2, r2, r3
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	689b      	ldr	r3, [r3, #8]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d072      	beq.n	8017a22 <dir_register+0x172>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	79db      	ldrb	r3, [r3, #7]
 8017940:	f003 0304 	and.w	r3, r3, #4
 8017944:	2b00      	cmp	r3, #0
 8017946:	d06c      	beq.n	8017a22 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801794e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8017950:	8949      	ldrh	r1, [r1, #10]
 8017952:	0249      	lsls	r1, r1, #9
 8017954:	2000      	movs	r0, #0
 8017956:	460c      	mov	r4, r1
 8017958:	4605      	mov	r5, r0
 801795a:	eb12 0804 	adds.w	r8, r2, r4
 801795e:	eb43 0905 	adc.w	r9, r3, r5
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	4618      	mov	r0, r3
 801796c:	f7fe fd56 	bl	801641c <fill_first_frag>
 8017970:	4603      	mov	r3, r0
 8017972:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8017976:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801797a:	2b00      	cmp	r3, #0
 801797c:	d002      	beq.n	8017984 <dir_register+0xd4>
 801797e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017982:	e135      	b.n	8017bf0 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801798a:	f04f 32ff 	mov.w	r2, #4294967295
 801798e:	4619      	mov	r1, r3
 8017990:	f7fe fd73 	bl	801647a <fill_last_frag>
 8017994:	4603      	mov	r3, r0
 8017996:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 801799a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d002      	beq.n	80179a8 <dir_register+0xf8>
 80179a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80179a6:	e123      	b.n	8017bf0 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80179a8:	687a      	ldr	r2, [r7, #4]
 80179aa:	f107 0308 	add.w	r3, r7, #8
 80179ae:	4611      	mov	r1, r2
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7ff fc93 	bl	80172dc <load_obj_dir>
 80179b6:	4603      	mov	r3, r0
 80179b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80179bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d002      	beq.n	80179ca <dir_register+0x11a>
 80179c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80179c8:	e112      	b.n	8017bf0 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80179ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179cc:	691b      	ldr	r3, [r3, #16]
 80179ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80179d8:	4608      	mov	r0, r1
 80179da:	f7fd febe 	bl	801575a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80179de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179e0:	691b      	ldr	r3, [r3, #16]
 80179e2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80179ec:	4608      	mov	r0, r1
 80179ee:	f7fd feb4 	bl	801575a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	79da      	ldrb	r2, [r3, #7]
 80179f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179f8:	691b      	ldr	r3, [r3, #16]
 80179fa:	3321      	adds	r3, #33	@ 0x21
 80179fc:	f042 0201 	orr.w	r2, r2, #1
 8017a00:	b2d2      	uxtb	r2, r2
 8017a02:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8017a04:	f107 0308 	add.w	r3, r7, #8
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7ff fc9d 	bl	8017348 <store_xdir>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8017a14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d002      	beq.n	8017a22 <dir_register+0x172>
 8017a1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a20:	e0e6      	b.n	8017bf0 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8017a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017a24:	691a      	ldr	r2, [r3, #16]
 8017a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017a28:	68db      	ldr	r3, [r3, #12]
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	4610      	mov	r0, r2
 8017a2e:	f7ff fce6 	bl	80173fe <create_xdir>
		return FR_OK;
 8017a32:	2300      	movs	r3, #0
 8017a34:	e0dc      	b.n	8017bf0 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8017a3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017a40:	220c      	movs	r2, #12
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7fd ff11 	bl	801586a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8017a48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8017a4c:	f003 0301 	and.w	r3, r3, #1
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d033      	beq.n	8017abc <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2240      	movs	r2, #64	@ 0x40
 8017a58:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a60:	e016      	b.n	8017a90 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8017a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017a6a:	68da      	ldr	r2, [r3, #12]
 8017a6c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a72:	f7ff fa5f 	bl	8016f34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f7ff fdef 	bl	801765a <dir_find>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8017a82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d106      	bne.n	8017a98 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8017a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a8c:	3301      	adds	r3, #1
 8017a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a92:	2b63      	cmp	r3, #99	@ 0x63
 8017a94:	d9e5      	bls.n	8017a62 <dir_register+0x1b2>
 8017a96:	e000      	b.n	8017a9a <dir_register+0x1ea>
			if (res != FR_OK) break;
 8017a98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a9c:	2b64      	cmp	r3, #100	@ 0x64
 8017a9e:	d101      	bne.n	8017aa4 <dir_register+0x1f4>
 8017aa0:	2307      	movs	r3, #7
 8017aa2:	e0a5      	b.n	8017bf0 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017aa8:	2b04      	cmp	r3, #4
 8017aaa:	d002      	beq.n	8017ab2 <dir_register+0x202>
 8017aac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017ab0:	e09e      	b.n	8017bf0 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017ab2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017abc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8017ac0:	f003 0302 	and.w	r3, r3, #2
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d007      	beq.n	8017ad8 <dir_register+0x228>
 8017ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017aca:	330c      	adds	r3, #12
 8017acc:	4a2f      	ldr	r2, [pc, #188]	@ (8017b8c <dir_register+0x2dc>)
 8017ace:	fba2 2303 	umull	r2, r3, r2, r3
 8017ad2:	089b      	lsrs	r3, r3, #2
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	e000      	b.n	8017ada <dir_register+0x22a>
 8017ad8:	2301      	movs	r3, #1
 8017ada:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017adc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f7ff f850 	bl	8016b84 <dir_alloc>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017aea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d14f      	bne.n	8017b92 <dir_register+0x2e2>
 8017af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017af4:	3b01      	subs	r3, #1
 8017af6:	673b      	str	r3, [r7, #112]	@ 0x70
 8017af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d049      	beq.n	8017b92 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b04:	015b      	lsls	r3, r3, #5
 8017b06:	1ad3      	subs	r3, r2, r3
 8017b08:	4619      	mov	r1, r3
 8017b0a:	6878      	ldr	r0, [r7, #4]
 8017b0c:	f7fe fedf 	bl	80168ce <dir_sdi>
 8017b10:	4603      	mov	r3, r0
 8017b12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8017b16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d139      	bne.n	8017b92 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	3340      	adds	r3, #64	@ 0x40
 8017b22:	4618      	mov	r0, r3
 8017b24:	f7ff fa94 	bl	8017050 <sum_sfn>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b32:	4619      	mov	r1, r3
 8017b34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017b36:	f7fe f8c7 	bl	8015cc8 <move_window>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8017b40:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d123      	bne.n	8017b90 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b4a:	68d8      	ldr	r0, [r3, #12]
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8017b50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b52:	b2da      	uxtb	r2, r3
 8017b54:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8017b58:	f7ff f984 	bl	8016e64 <put_lfn>
				fs->wflag = 1;
 8017b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b5e:	2201      	movs	r2, #1
 8017b60:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017b62:	2100      	movs	r1, #0
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f7fe ff38 	bl	80169da <dir_next>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8017b70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d10c      	bne.n	8017b92 <dir_register+0x2e2>
 8017b78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b7a:	3b01      	subs	r3, #1
 8017b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8017b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d1d4      	bne.n	8017b2e <dir_register+0x27e>
 8017b84:	e005      	b.n	8017b92 <dir_register+0x2e2>
 8017b86:	bf00      	nop
 8017b88:	88888889 	.word	0x88888889
 8017b8c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8017b90:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017b92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d128      	bne.n	8017bec <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017ba2:	f7fe f891 	bl	8015cc8 <move_window>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8017bac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d11b      	bne.n	8017bec <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bb8:	2220      	movs	r2, #32
 8017bba:	2100      	movs	r1, #0
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7fd fe75 	bl	80158ac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	3340      	adds	r3, #64	@ 0x40
 8017bca:	220b      	movs	r2, #11
 8017bcc:	4619      	mov	r1, r3
 8017bce:	f7fd fe4c 	bl	801586a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bdc:	330c      	adds	r3, #12
 8017bde:	f002 0218 	and.w	r2, r2, #24
 8017be2:	b2d2      	uxtb	r2, r2
 8017be4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017be8:	2201      	movs	r2, #1
 8017bea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017bec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	3780      	adds	r7, #128	@ 0x80
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017bfa:	bf00      	nop

08017bfc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b08a      	sub	sp, #40	@ 0x28
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	613b      	str	r3, [r7, #16]
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	68db      	ldr	r3, [r3, #12]
 8017c12:	60fb      	str	r3, [r7, #12]
 8017c14:	2300      	movs	r3, #0
 8017c16:	617b      	str	r3, [r7, #20]
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017c1c:	69bb      	ldr	r3, [r7, #24]
 8017c1e:	1c5a      	adds	r2, r3, #1
 8017c20:	61ba      	str	r2, [r7, #24]
 8017c22:	693a      	ldr	r2, [r7, #16]
 8017c24:	4413      	add	r3, r2
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8017c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c2c:	2b1f      	cmp	r3, #31
 8017c2e:	d940      	bls.n	8017cb2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c32:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c34:	d006      	beq.n	8017c44 <create_name+0x48>
 8017c36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c38:	2b5c      	cmp	r3, #92	@ 0x5c
 8017c3a:	d110      	bne.n	8017c5e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017c3c:	e002      	b.n	8017c44 <create_name+0x48>
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	3301      	adds	r3, #1
 8017c42:	61bb      	str	r3, [r7, #24]
 8017c44:	693a      	ldr	r2, [r7, #16]
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	4413      	add	r3, r2
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8017c4e:	d0f6      	beq.n	8017c3e <create_name+0x42>
 8017c50:	693a      	ldr	r2, [r7, #16]
 8017c52:	69bb      	ldr	r3, [r7, #24]
 8017c54:	4413      	add	r3, r2
 8017c56:	781b      	ldrb	r3, [r3, #0]
 8017c58:	2b5c      	cmp	r3, #92	@ 0x5c
 8017c5a:	d0f0      	beq.n	8017c3e <create_name+0x42>
			break;
 8017c5c:	e02a      	b.n	8017cb4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017c5e:	697b      	ldr	r3, [r7, #20]
 8017c60:	2bfe      	cmp	r3, #254	@ 0xfe
 8017c62:	d901      	bls.n	8017c68 <create_name+0x6c>
 8017c64:	2306      	movs	r3, #6
 8017c66:	e17d      	b.n	8017f64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017c68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c6a:	b2db      	uxtb	r3, r3
 8017c6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c70:	2101      	movs	r1, #1
 8017c72:	4618      	mov	r0, r3
 8017c74:	f001 fcba 	bl	80195ec <ff_convert>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d101      	bne.n	8017c86 <create_name+0x8a>
 8017c82:	2306      	movs	r3, #6
 8017c84:	e16e      	b.n	8017f64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8017c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c8a:	d809      	bhi.n	8017ca0 <create_name+0xa4>
 8017c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c8e:	4619      	mov	r1, r3
 8017c90:	488d      	ldr	r0, [pc, #564]	@ (8017ec8 <create_name+0x2cc>)
 8017c92:	f7fd fe4d 	bl	8015930 <chk_chr>
 8017c96:	4603      	mov	r3, r0
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d001      	beq.n	8017ca0 <create_name+0xa4>
 8017c9c:	2306      	movs	r3, #6
 8017c9e:	e161      	b.n	8017f64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	1c5a      	adds	r2, r3, #1
 8017ca4:	617a      	str	r2, [r7, #20]
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	68fa      	ldr	r2, [r7, #12]
 8017caa:	4413      	add	r3, r2
 8017cac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017cae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017cb0:	e7b4      	b.n	8017c1c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017cb2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017cb4:	693a      	ldr	r2, [r7, #16]
 8017cb6:	69bb      	ldr	r3, [r7, #24]
 8017cb8:	441a      	add	r2, r3
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017cc0:	2b1f      	cmp	r3, #31
 8017cc2:	d801      	bhi.n	8017cc8 <create_name+0xcc>
 8017cc4:	2304      	movs	r3, #4
 8017cc6:	e000      	b.n	8017cca <create_name+0xce>
 8017cc8:	2300      	movs	r3, #0
 8017cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017cce:	e011      	b.n	8017cf4 <create_name+0xf8>
		w = lfn[di - 1];
 8017cd0:	697a      	ldr	r2, [r7, #20]
 8017cd2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017cd6:	4413      	add	r3, r2
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	68fa      	ldr	r2, [r7, #12]
 8017cdc:	4413      	add	r3, r2
 8017cde:	881b      	ldrh	r3, [r3, #0]
 8017ce0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8017ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ce4:	2b20      	cmp	r3, #32
 8017ce6:	d002      	beq.n	8017cee <create_name+0xf2>
 8017ce8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8017cec:	d106      	bne.n	8017cfc <create_name+0x100>
		di--;
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d1ea      	bne.n	8017cd0 <create_name+0xd4>
 8017cfa:	e000      	b.n	8017cfe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017cfc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8017cfe:	697b      	ldr	r3, [r7, #20]
 8017d00:	005b      	lsls	r3, r3, #1
 8017d02:	68fa      	ldr	r2, [r7, #12]
 8017d04:	4413      	add	r3, r2
 8017d06:	2200      	movs	r2, #0
 8017d08:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d101      	bne.n	8017d14 <create_name+0x118>
 8017d10:	2306      	movs	r3, #6
 8017d12:	e127      	b.n	8017f64 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	3340      	adds	r3, #64	@ 0x40
 8017d18:	220b      	movs	r2, #11
 8017d1a:	2120      	movs	r1, #32
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fd fdc5 	bl	80158ac <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017d22:	2300      	movs	r3, #0
 8017d24:	61bb      	str	r3, [r7, #24]
 8017d26:	e002      	b.n	8017d2e <create_name+0x132>
 8017d28:	69bb      	ldr	r3, [r7, #24]
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	61bb      	str	r3, [r7, #24]
 8017d2e:	69bb      	ldr	r3, [r7, #24]
 8017d30:	005b      	lsls	r3, r3, #1
 8017d32:	68fa      	ldr	r2, [r7, #12]
 8017d34:	4413      	add	r3, r2
 8017d36:	881b      	ldrh	r3, [r3, #0]
 8017d38:	2b20      	cmp	r3, #32
 8017d3a:	d0f5      	beq.n	8017d28 <create_name+0x12c>
 8017d3c:	69bb      	ldr	r3, [r7, #24]
 8017d3e:	005b      	lsls	r3, r3, #1
 8017d40:	68fa      	ldr	r2, [r7, #12]
 8017d42:	4413      	add	r3, r2
 8017d44:	881b      	ldrh	r3, [r3, #0]
 8017d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d48:	d0ee      	beq.n	8017d28 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017d4a:	69bb      	ldr	r3, [r7, #24]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d009      	beq.n	8017d64 <create_name+0x168>
 8017d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d54:	f043 0303 	orr.w	r3, r3, #3
 8017d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017d5c:	e002      	b.n	8017d64 <create_name+0x168>
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	3b01      	subs	r3, #1
 8017d62:	617b      	str	r3, [r7, #20]
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d009      	beq.n	8017d7e <create_name+0x182>
 8017d6a:	697a      	ldr	r2, [r7, #20]
 8017d6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d70:	4413      	add	r3, r2
 8017d72:	005b      	lsls	r3, r3, #1
 8017d74:	68fa      	ldr	r2, [r7, #12]
 8017d76:	4413      	add	r3, r2
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d7c:	d1ef      	bne.n	8017d5e <create_name+0x162>

	i = b = 0; ni = 8;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017d84:	2300      	movs	r3, #0
 8017d86:	623b      	str	r3, [r7, #32]
 8017d88:	2308      	movs	r3, #8
 8017d8a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017d8c:	69bb      	ldr	r3, [r7, #24]
 8017d8e:	1c5a      	adds	r2, r3, #1
 8017d90:	61ba      	str	r2, [r7, #24]
 8017d92:	005b      	lsls	r3, r3, #1
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	4413      	add	r3, r2
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017d9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	f000 8090 	beq.w	8017ec4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017da6:	2b20      	cmp	r3, #32
 8017da8:	d006      	beq.n	8017db8 <create_name+0x1bc>
 8017daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8017dae:	d10a      	bne.n	8017dc6 <create_name+0x1ca>
 8017db0:	69ba      	ldr	r2, [r7, #24]
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d006      	beq.n	8017dc6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017dbc:	f043 0303 	orr.w	r3, r3, #3
 8017dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017dc4:	e07d      	b.n	8017ec2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017dc6:	6a3a      	ldr	r2, [r7, #32]
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d203      	bcs.n	8017dd6 <create_name+0x1da>
 8017dce:	69ba      	ldr	r2, [r7, #24]
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d123      	bne.n	8017e1e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	2b0b      	cmp	r3, #11
 8017dda:	d106      	bne.n	8017dea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017de0:	f043 0303 	orr.w	r3, r3, #3
 8017de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017de8:	e075      	b.n	8017ed6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017dea:	69ba      	ldr	r2, [r7, #24]
 8017dec:	697b      	ldr	r3, [r7, #20]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d005      	beq.n	8017dfe <create_name+0x202>
 8017df2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017df6:	f043 0303 	orr.w	r3, r3, #3
 8017dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8017dfe:	69ba      	ldr	r2, [r7, #24]
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d866      	bhi.n	8017ed4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017e06:	697b      	ldr	r3, [r7, #20]
 8017e08:	61bb      	str	r3, [r7, #24]
 8017e0a:	2308      	movs	r3, #8
 8017e0c:	623b      	str	r3, [r7, #32]
 8017e0e:	230b      	movs	r3, #11
 8017e10:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017e12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e16:	009b      	lsls	r3, r3, #2
 8017e18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e1c:	e051      	b.n	8017ec2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017e1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8017e22:	d914      	bls.n	8017e4e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017e24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e26:	2100      	movs	r1, #0
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f001 fbdf 	bl	80195ec <ff_convert>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d004      	beq.n	8017e42 <create_name+0x246>
 8017e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e3a:	3b80      	subs	r3, #128	@ 0x80
 8017e3c:	4a23      	ldr	r2, [pc, #140]	@ (8017ecc <create_name+0x2d0>)
 8017e3e:	5cd3      	ldrb	r3, [r2, r3]
 8017e40:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e46:	f043 0302 	orr.w	r3, r3, #2
 8017e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017e4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d007      	beq.n	8017e64 <create_name+0x268>
 8017e54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e56:	4619      	mov	r1, r3
 8017e58:	481d      	ldr	r0, [pc, #116]	@ (8017ed0 <create_name+0x2d4>)
 8017e5a:	f7fd fd69 	bl	8015930 <chk_chr>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d008      	beq.n	8017e76 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017e64:	235f      	movs	r3, #95	@ 0x5f
 8017e66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e6c:	f043 0303 	orr.w	r3, r3, #3
 8017e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e74:	e01b      	b.n	8017eae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e78:	2b40      	cmp	r3, #64	@ 0x40
 8017e7a:	d909      	bls.n	8017e90 <create_name+0x294>
 8017e7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e7e:	2b5a      	cmp	r3, #90	@ 0x5a
 8017e80:	d806      	bhi.n	8017e90 <create_name+0x294>
					b |= 2;
 8017e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e86:	f043 0302 	orr.w	r3, r3, #2
 8017e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e8e:	e00e      	b.n	8017eae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017e90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e92:	2b60      	cmp	r3, #96	@ 0x60
 8017e94:	d90b      	bls.n	8017eae <create_name+0x2b2>
 8017e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e98:	2b7a      	cmp	r3, #122	@ 0x7a
 8017e9a:	d808      	bhi.n	8017eae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ea0:	f043 0301 	orr.w	r3, r3, #1
 8017ea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017ea8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017eaa:	3b20      	subs	r3, #32
 8017eac:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017eae:	6a3b      	ldr	r3, [r7, #32]
 8017eb0:	1c5a      	adds	r2, r3, #1
 8017eb2:	623a      	str	r2, [r7, #32]
 8017eb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017eb6:	b2d1      	uxtb	r1, r2
 8017eb8:	687a      	ldr	r2, [r7, #4]
 8017eba:	4413      	add	r3, r2
 8017ebc:	460a      	mov	r2, r1
 8017ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8017ec2:	e763      	b.n	8017d8c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017ec4:	bf00      	nop
 8017ec6:	e006      	b.n	8017ed6 <create_name+0x2da>
 8017ec8:	0801aac0 	.word	0x0801aac0
 8017ecc:	0801b2ac 	.word	0x0801b2ac
 8017ed0:	0801aacc 	.word	0x0801aacc
			if (si > di) break;			/* No extension */
 8017ed4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017edc:	2be5      	cmp	r3, #229	@ 0xe5
 8017ede:	d103      	bne.n	8017ee8 <create_name+0x2ec>
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2205      	movs	r2, #5
 8017ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	2b08      	cmp	r3, #8
 8017eec:	d104      	bne.n	8017ef8 <create_name+0x2fc>
 8017eee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ef2:	009b      	lsls	r3, r3, #2
 8017ef4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017efc:	f003 030c 	and.w	r3, r3, #12
 8017f00:	2b0c      	cmp	r3, #12
 8017f02:	d005      	beq.n	8017f10 <create_name+0x314>
 8017f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017f08:	f003 0303 	and.w	r3, r3, #3
 8017f0c:	2b03      	cmp	r3, #3
 8017f0e:	d105      	bne.n	8017f1c <create_name+0x320>
 8017f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f14:	f043 0302 	orr.w	r3, r3, #2
 8017f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f20:	f003 0302 	and.w	r3, r3, #2
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d117      	bne.n	8017f58 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017f28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017f2c:	f003 0303 	and.w	r3, r3, #3
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d105      	bne.n	8017f40 <create_name+0x344>
 8017f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f38:	f043 0310 	orr.w	r3, r3, #16
 8017f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017f40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017f44:	f003 030c 	and.w	r3, r3, #12
 8017f48:	2b04      	cmp	r3, #4
 8017f4a:	d105      	bne.n	8017f58 <create_name+0x35c>
 8017f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f50:	f043 0308 	orr.w	r3, r3, #8
 8017f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017f5e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8017f62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3728      	adds	r7, #40	@ 0x28
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b086      	sub	sp, #24
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
 8017f74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f7a:	693b      	ldr	r3, [r7, #16]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017f80:	e002      	b.n	8017f88 <follow_path+0x1c>
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	3301      	adds	r3, #1
 8017f86:	603b      	str	r3, [r7, #0]
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f8e:	d0f8      	beq.n	8017f82 <follow_path+0x16>
 8017f90:	683b      	ldr	r3, [r7, #0]
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	2b5c      	cmp	r3, #92	@ 0x5c
 8017f96:	d0f4      	beq.n	8017f82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8017f9e:	693b      	ldr	r3, [r7, #16]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	781b      	ldrb	r3, [r3, #0]
 8017fa8:	2b1f      	cmp	r3, #31
 8017faa:	d80a      	bhi.n	8017fc2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2280      	movs	r2, #128	@ 0x80
 8017fb0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8017fb4:	2100      	movs	r1, #0
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f7fe fc89 	bl	80168ce <dir_sdi>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	75fb      	strb	r3, [r7, #23]
 8017fc0:	e078      	b.n	80180b4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017fc2:	463b      	mov	r3, r7
 8017fc4:	4619      	mov	r1, r3
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f7ff fe18 	bl	8017bfc <create_name>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017fd0:	7dfb      	ldrb	r3, [r7, #23]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d169      	bne.n	80180aa <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f7ff fb3f 	bl	801765a <dir_find>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8017fe6:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017fe8:	7dfb      	ldrb	r3, [r7, #23]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d00a      	beq.n	8018004 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017fee:	7dfb      	ldrb	r3, [r7, #23]
 8017ff0:	2b04      	cmp	r3, #4
 8017ff2:	d15c      	bne.n	80180ae <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017ff4:	7afb      	ldrb	r3, [r7, #11]
 8017ff6:	f003 0304 	and.w	r3, r3, #4
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d157      	bne.n	80180ae <follow_path+0x142>
 8017ffe:	2305      	movs	r3, #5
 8018000:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018002:	e054      	b.n	80180ae <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018004:	7afb      	ldrb	r3, [r7, #11]
 8018006:	f003 0304 	and.w	r3, r3, #4
 801800a:	2b00      	cmp	r3, #0
 801800c:	d151      	bne.n	80180b2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801800e:	693b      	ldr	r3, [r7, #16]
 8018010:	799b      	ldrb	r3, [r3, #6]
 8018012:	f003 0310 	and.w	r3, r3, #16
 8018016:	2b00      	cmp	r3, #0
 8018018:	d102      	bne.n	8018020 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801801a:	2305      	movs	r3, #5
 801801c:	75fb      	strb	r3, [r7, #23]
 801801e:	e049      	b.n	80180b4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	2b04      	cmp	r3, #4
 8018026:	d130      	bne.n	801808a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8018028:	693b      	ldr	r3, [r7, #16]
 801802a:	689a      	ldr	r2, [r3, #8]
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8018030:	693b      	ldr	r3, [r7, #16]
 8018032:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018036:	4613      	mov	r3, r2
 8018038:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801803c:	693a      	ldr	r2, [r7, #16]
 801803e:	79d2      	ldrb	r2, [r2, #7]
 8018040:	431a      	orrs	r2, r3
 8018042:	693b      	ldr	r3, [r7, #16]
 8018044:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	691b      	ldr	r3, [r3, #16]
 8018052:	3334      	adds	r3, #52	@ 0x34
 8018054:	4618      	mov	r0, r3
 8018056:	f7fd fa3b 	bl	80154d0 <ld_dword>
 801805a:	4602      	mov	r2, r0
 801805c:	693b      	ldr	r3, [r7, #16]
 801805e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	691b      	ldr	r3, [r3, #16]
 8018064:	3321      	adds	r3, #33	@ 0x21
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	f003 0302 	and.w	r3, r3, #2
 801806c:	b2da      	uxtb	r2, r3
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	691b      	ldr	r3, [r3, #16]
 8018076:	3338      	adds	r3, #56	@ 0x38
 8018078:	4618      	mov	r0, r3
 801807a:	f7fd fa4c 	bl	8015516 <ld_qword>
 801807e:	4602      	mov	r2, r0
 8018080:	460b      	mov	r3, r1
 8018082:	6939      	ldr	r1, [r7, #16]
 8018084:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8018088:	e79b      	b.n	8017fc2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018098:	4413      	add	r3, r2
 801809a:	4619      	mov	r1, r3
 801809c:	68f8      	ldr	r0, [r7, #12]
 801809e:	f7fe fdcd 	bl	8016c3c <ld_clust>
 80180a2:	4602      	mov	r2, r0
 80180a4:	693b      	ldr	r3, [r7, #16]
 80180a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80180a8:	e78b      	b.n	8017fc2 <follow_path+0x56>
			if (res != FR_OK) break;
 80180aa:	bf00      	nop
 80180ac:	e002      	b.n	80180b4 <follow_path+0x148>
				break;
 80180ae:	bf00      	nop
 80180b0:	e000      	b.n	80180b4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80180b2:	bf00      	nop
			}
		}
	}

	return res;
 80180b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3718      	adds	r7, #24
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}

080180be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80180be:	b480      	push	{r7}
 80180c0:	b087      	sub	sp, #28
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80180c6:	f04f 33ff 	mov.w	r3, #4294967295
 80180ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d031      	beq.n	8018138 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	617b      	str	r3, [r7, #20]
 80180da:	e002      	b.n	80180e2 <get_ldnumber+0x24>
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	3301      	adds	r3, #1
 80180e0:	617b      	str	r3, [r7, #20]
 80180e2:	697b      	ldr	r3, [r7, #20]
 80180e4:	781b      	ldrb	r3, [r3, #0]
 80180e6:	2b1f      	cmp	r3, #31
 80180e8:	d903      	bls.n	80180f2 <get_ldnumber+0x34>
 80180ea:	697b      	ldr	r3, [r7, #20]
 80180ec:	781b      	ldrb	r3, [r3, #0]
 80180ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80180f0:	d1f4      	bne.n	80180dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80180f8:	d11c      	bne.n	8018134 <get_ldnumber+0x76>
			tp = *path;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	1c5a      	adds	r2, r3, #1
 8018104:	60fa      	str	r2, [r7, #12]
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	3b30      	subs	r3, #48	@ 0x30
 801810a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801810c:	68bb      	ldr	r3, [r7, #8]
 801810e:	2b09      	cmp	r3, #9
 8018110:	d80e      	bhi.n	8018130 <get_ldnumber+0x72>
 8018112:	68fa      	ldr	r2, [r7, #12]
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	429a      	cmp	r2, r3
 8018118:	d10a      	bne.n	8018130 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d107      	bne.n	8018130 <get_ldnumber+0x72>
					vol = (int)i;
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	3301      	adds	r3, #1
 8018128:	617b      	str	r3, [r7, #20]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	697a      	ldr	r2, [r7, #20]
 801812e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	e002      	b.n	801813a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018134:	2300      	movs	r3, #0
 8018136:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018138:	693b      	ldr	r3, [r7, #16]
}
 801813a:	4618      	mov	r0, r3
 801813c:	371c      	adds	r7, #28
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr
	...

08018148 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
 8018150:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2200      	movs	r2, #0
 8018156:	70da      	strb	r2, [r3, #3]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	f04f 32ff 	mov.w	r2, #4294967295
 801815e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018160:	6839      	ldr	r1, [r7, #0]
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f7fd fdb0 	bl	8015cc8 <move_window>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	d001      	beq.n	8018172 <check_fs+0x2a>
 801816e:	2304      	movs	r3, #4
 8018170:	e044      	b.n	80181fc <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	3338      	adds	r3, #56	@ 0x38
 8018176:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801817a:	4618      	mov	r0, r3
 801817c:	f7fd f990 	bl	80154a0 <ld_word>
 8018180:	4603      	mov	r3, r0
 8018182:	461a      	mov	r2, r3
 8018184:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8018188:	429a      	cmp	r2, r3
 801818a:	d001      	beq.n	8018190 <check_fs+0x48>
 801818c:	2303      	movs	r3, #3
 801818e:	e035      	b.n	80181fc <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018196:	2be9      	cmp	r3, #233	@ 0xe9
 8018198:	d009      	beq.n	80181ae <check_fs+0x66>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80181a0:	2beb      	cmp	r3, #235	@ 0xeb
 80181a2:	d11e      	bne.n	80181e2 <check_fs+0x9a>
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80181aa:	2b90      	cmp	r3, #144	@ 0x90
 80181ac:	d119      	bne.n	80181e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	3338      	adds	r3, #56	@ 0x38
 80181b2:	3336      	adds	r3, #54	@ 0x36
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7fd f98b 	bl	80154d0 <ld_dword>
 80181ba:	4603      	mov	r3, r0
 80181bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80181c0:	4a10      	ldr	r2, [pc, #64]	@ (8018204 <check_fs+0xbc>)
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d101      	bne.n	80181ca <check_fs+0x82>
 80181c6:	2300      	movs	r3, #0
 80181c8:	e018      	b.n	80181fc <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	3338      	adds	r3, #56	@ 0x38
 80181ce:	3352      	adds	r3, #82	@ 0x52
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7fd f97d 	bl	80154d0 <ld_dword>
 80181d6:	4603      	mov	r3, r0
 80181d8:	4a0b      	ldr	r2, [pc, #44]	@ (8018208 <check_fs+0xc0>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	d101      	bne.n	80181e2 <check_fs+0x9a>
 80181de:	2300      	movs	r3, #0
 80181e0:	e00c      	b.n	80181fc <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	3338      	adds	r3, #56	@ 0x38
 80181e6:	220b      	movs	r2, #11
 80181e8:	4908      	ldr	r1, [pc, #32]	@ (801820c <check_fs+0xc4>)
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7fd fb79 	bl	80158e2 <mem_cmp>
 80181f0:	4603      	mov	r3, r0
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d101      	bne.n	80181fa <check_fs+0xb2>
 80181f6:	2301      	movs	r3, #1
 80181f8:	e000      	b.n	80181fc <check_fs+0xb4>
#endif
	return 2;
 80181fa:	2302      	movs	r3, #2
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3708      	adds	r7, #8
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	00544146 	.word	0x00544146
 8018208:	33544146 	.word	0x33544146
 801820c:	0801aad4 	.word	0x0801aad4

08018210 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018214:	b09c      	sub	sp, #112	@ 0x70
 8018216:	af00      	add	r7, sp, #0
 8018218:	61f8      	str	r0, [r7, #28]
 801821a:	61b9      	str	r1, [r7, #24]
 801821c:	4613      	mov	r3, r2
 801821e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018220:	69bb      	ldr	r3, [r7, #24]
 8018222:	2200      	movs	r2, #0
 8018224:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018226:	69f8      	ldr	r0, [r7, #28]
 8018228:	f7ff ff49 	bl	80180be <get_ldnumber>
 801822c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 801822e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018230:	2b00      	cmp	r3, #0
 8018232:	da01      	bge.n	8018238 <find_volume+0x28>
 8018234:	230b      	movs	r3, #11
 8018236:	e337      	b.n	80188a8 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018238:	4a99      	ldr	r2, [pc, #612]	@ (80184a0 <find_volume+0x290>)
 801823a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801823c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018240:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018244:	2b00      	cmp	r3, #0
 8018246:	d101      	bne.n	801824c <find_volume+0x3c>
 8018248:	230c      	movs	r3, #12
 801824a:	e32d      	b.n	80188a8 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018250:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018252:	7dfb      	ldrb	r3, [r7, #23]
 8018254:	f023 0301 	bic.w	r3, r3, #1
 8018258:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801825a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801825c:	781b      	ldrb	r3, [r3, #0]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d01a      	beq.n	8018298 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8018262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018264:	785b      	ldrb	r3, [r3, #1]
 8018266:	4618      	mov	r0, r3
 8018268:	f7fd f87a 	bl	8015360 <disk_status>
 801826c:	4603      	mov	r3, r0
 801826e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018272:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018276:	f003 0301 	and.w	r3, r3, #1
 801827a:	2b00      	cmp	r3, #0
 801827c:	d10c      	bne.n	8018298 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801827e:	7dfb      	ldrb	r3, [r7, #23]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d007      	beq.n	8018294 <find_volume+0x84>
 8018284:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018288:	f003 0304 	and.w	r3, r3, #4
 801828c:	2b00      	cmp	r3, #0
 801828e:	d001      	beq.n	8018294 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8018290:	230a      	movs	r3, #10
 8018292:	e309      	b.n	80188a8 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 8018294:	2300      	movs	r3, #0
 8018296:	e307      	b.n	80188a8 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801829a:	2200      	movs	r2, #0
 801829c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801829e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80182a0:	b2da      	uxtb	r2, r3
 80182a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182a4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80182a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182a8:	785b      	ldrb	r3, [r3, #1]
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7fd f872 	bl	8015394 <disk_initialize>
 80182b0:	4603      	mov	r3, r0
 80182b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80182b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80182ba:	f003 0301 	and.w	r3, r3, #1
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d001      	beq.n	80182c6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80182c2:	2303      	movs	r3, #3
 80182c4:	e2f0      	b.n	80188a8 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80182c6:	7dfb      	ldrb	r3, [r7, #23]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d007      	beq.n	80182dc <find_volume+0xcc>
 80182cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80182d0:	f003 0304 	and.w	r3, r3, #4
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d001      	beq.n	80182dc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80182d8:	230a      	movs	r3, #10
 80182da:	e2e5      	b.n	80188a8 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80182dc:	2300      	movs	r3, #0
 80182de:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80182e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80182e2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80182e4:	f7ff ff30 	bl	8018148 <check_fs>
 80182e8:	4603      	mov	r3, r0
 80182ea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80182ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80182f2:	2b02      	cmp	r3, #2
 80182f4:	d14d      	bne.n	8018392 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182f6:	2300      	movs	r3, #0
 80182f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80182fa:	e020      	b.n	801833e <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80182fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018304:	011b      	lsls	r3, r3, #4
 8018306:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801830a:	4413      	add	r3, r2
 801830c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801830e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018310:	3304      	adds	r3, #4
 8018312:	781b      	ldrb	r3, [r3, #0]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d006      	beq.n	8018326 <find_volume+0x116>
 8018318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801831a:	3308      	adds	r3, #8
 801831c:	4618      	mov	r0, r3
 801831e:	f7fd f8d7 	bl	80154d0 <ld_dword>
 8018322:	4602      	mov	r2, r0
 8018324:	e000      	b.n	8018328 <find_volume+0x118>
 8018326:	2200      	movs	r2, #0
 8018328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801832a:	009b      	lsls	r3, r3, #2
 801832c:	3360      	adds	r3, #96	@ 0x60
 801832e:	f107 0110 	add.w	r1, r7, #16
 8018332:	440b      	add	r3, r1
 8018334:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801833a:	3301      	adds	r3, #1
 801833c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801833e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018340:	2b03      	cmp	r3, #3
 8018342:	d9db      	bls.n	80182fc <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018344:	2300      	movs	r3, #0
 8018346:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8018348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801834a:	2b00      	cmp	r3, #0
 801834c:	d002      	beq.n	8018354 <find_volume+0x144>
 801834e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018350:	3b01      	subs	r3, #1
 8018352:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018356:	009b      	lsls	r3, r3, #2
 8018358:	3360      	adds	r3, #96	@ 0x60
 801835a:	f107 0210 	add.w	r2, r7, #16
 801835e:	4413      	add	r3, r2
 8018360:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8018364:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018366:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018368:	2b00      	cmp	r3, #0
 801836a:	d005      	beq.n	8018378 <find_volume+0x168>
 801836c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801836e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018370:	f7ff feea 	bl	8018148 <check_fs>
 8018374:	4603      	mov	r3, r0
 8018376:	e000      	b.n	801837a <find_volume+0x16a>
 8018378:	2303      	movs	r3, #3
 801837a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801837e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018382:	2b01      	cmp	r3, #1
 8018384:	d905      	bls.n	8018392 <find_volume+0x182>
 8018386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018388:	3301      	adds	r3, #1
 801838a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801838c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801838e:	2b03      	cmp	r3, #3
 8018390:	d9e0      	bls.n	8018354 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018392:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018396:	2b04      	cmp	r3, #4
 8018398:	d101      	bne.n	801839e <find_volume+0x18e>
 801839a:	2301      	movs	r3, #1
 801839c:	e284      	b.n	80188a8 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801839e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	d901      	bls.n	80183aa <find_volume+0x19a>
 80183a6:	230d      	movs	r3, #13
 80183a8:	e27e      	b.n	80188a8 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80183aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80183ae:	2b01      	cmp	r3, #1
 80183b0:	f040 80fa 	bne.w	80185a8 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80183b4:	230b      	movs	r3, #11
 80183b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80183b8:	e002      	b.n	80183c0 <find_volume+0x1b0>
 80183ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183bc:	3301      	adds	r3, #1
 80183be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80183c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80183c4:	d806      	bhi.n	80183d4 <find_volume+0x1c4>
 80183c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80183c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183ca:	4413      	add	r3, r2
 80183cc:	3338      	adds	r3, #56	@ 0x38
 80183ce:	781b      	ldrb	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d0f2      	beq.n	80183ba <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80183d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80183d8:	d801      	bhi.n	80183de <find_volume+0x1ce>
 80183da:	230d      	movs	r3, #13
 80183dc:	e264      	b.n	80188a8 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80183de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183e0:	3338      	adds	r3, #56	@ 0x38
 80183e2:	3368      	adds	r3, #104	@ 0x68
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7fd f85b 	bl	80154a0 <ld_word>
 80183ea:	4603      	mov	r3, r0
 80183ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80183f0:	d001      	beq.n	80183f6 <find_volume+0x1e6>
 80183f2:	230d      	movs	r3, #13
 80183f4:	e258      	b.n	80188a8 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80183f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183f8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80183fc:	2b09      	cmp	r3, #9
 80183fe:	d001      	beq.n	8018404 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8018400:	230d      	movs	r3, #13
 8018402:	e251      	b.n	80188a8 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8018404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018406:	3338      	adds	r3, #56	@ 0x38
 8018408:	3348      	adds	r3, #72	@ 0x48
 801840a:	4618      	mov	r0, r3
 801840c:	f7fd f883 	bl	8015516 <ld_qword>
 8018410:	4602      	mov	r2, r0
 8018412:	460b      	mov	r3, r1
 8018414:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018416:	2000      	movs	r0, #0
 8018418:	60b9      	str	r1, [r7, #8]
 801841a:	60f8      	str	r0, [r7, #12]
 801841c:	68b9      	ldr	r1, [r7, #8]
 801841e:	1851      	adds	r1, r2, r1
 8018420:	6039      	str	r1, [r7, #0]
 8018422:	68f9      	ldr	r1, [r7, #12]
 8018424:	eb43 0101 	adc.w	r1, r3, r1
 8018428:	6079      	str	r1, [r7, #4]
 801842a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801842e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8018432:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8018436:	2b01      	cmp	r3, #1
 8018438:	d301      	bcc.n	801843e <find_volume+0x22e>
 801843a:	230d      	movs	r3, #13
 801843c:	e234      	b.n	80188a8 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801843e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018440:	3338      	adds	r3, #56	@ 0x38
 8018442:	3354      	adds	r3, #84	@ 0x54
 8018444:	4618      	mov	r0, r3
 8018446:	f7fd f843 	bl	80154d0 <ld_dword>
 801844a:	4602      	mov	r2, r0
 801844c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801844e:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8018450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018452:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 8018456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018458:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801845a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801845c:	789b      	ldrb	r3, [r3, #2]
 801845e:	2b01      	cmp	r3, #1
 8018460:	d001      	beq.n	8018466 <find_volume+0x256>
 8018462:	230d      	movs	r3, #13
 8018464:	e220      	b.n	80188a8 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8018466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018468:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801846c:	461a      	mov	r2, r3
 801846e:	2301      	movs	r3, #1
 8018470:	4093      	lsls	r3, r2
 8018472:	b29a      	uxth	r2, r3
 8018474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018476:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8018478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801847a:	895b      	ldrh	r3, [r3, #10]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d101      	bne.n	8018484 <find_volume+0x274>
 8018480:	230d      	movs	r3, #13
 8018482:	e211      	b.n	80188a8 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8018484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018486:	3338      	adds	r3, #56	@ 0x38
 8018488:	335c      	adds	r3, #92	@ 0x5c
 801848a:	4618      	mov	r0, r3
 801848c:	f7fd f820 	bl	80154d0 <ld_dword>
 8018490:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8018492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018494:	4a03      	ldr	r2, [pc, #12]	@ (80184a4 <find_volume+0x294>)
 8018496:	4293      	cmp	r3, r2
 8018498:	d906      	bls.n	80184a8 <find_volume+0x298>
 801849a:	230d      	movs	r3, #13
 801849c:	e204      	b.n	80188a8 <find_volume+0x698>
 801849e:	bf00      	nop
 80184a0:	240011e8 	.word	0x240011e8
 80184a4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80184a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184aa:	1c9a      	adds	r2, r3, #2
 80184ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ae:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80184b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80184b4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80184b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184b8:	3338      	adds	r3, #56	@ 0x38
 80184ba:	3358      	adds	r3, #88	@ 0x58
 80184bc:	4618      	mov	r0, r3
 80184be:	f7fd f807 	bl	80154d0 <ld_dword>
 80184c2:	4602      	mov	r2, r0
 80184c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80184c6:	441a      	add	r2, r3
 80184c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ca:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80184cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ce:	3338      	adds	r3, #56	@ 0x38
 80184d0:	3350      	adds	r3, #80	@ 0x50
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7fc fffc 	bl	80154d0 <ld_dword>
 80184d8:	4602      	mov	r2, r0
 80184da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80184dc:	441a      	add	r2, r3
 80184de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184e0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80184e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184e6:	2200      	movs	r2, #0
 80184e8:	469a      	mov	sl, r3
 80184ea:	4693      	mov	fp, r2
 80184ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ee:	895b      	ldrh	r3, [r3, #10]
 80184f0:	461a      	mov	r2, r3
 80184f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184f4:	fb02 f303 	mul.w	r3, r2, r3
 80184f8:	2200      	movs	r2, #0
 80184fa:	4698      	mov	r8, r3
 80184fc:	4691      	mov	r9, r2
 80184fe:	eb1a 0408 	adds.w	r4, sl, r8
 8018502:	eb4b 0509 	adc.w	r5, fp, r9
 8018506:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801850a:	42a2      	cmp	r2, r4
 801850c:	41ab      	sbcs	r3, r5
 801850e:	d201      	bcs.n	8018514 <find_volume+0x304>
 8018510:	230d      	movs	r3, #13
 8018512:	e1c9      	b.n	80188a8 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8018514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018516:	3338      	adds	r3, #56	@ 0x38
 8018518:	3360      	adds	r3, #96	@ 0x60
 801851a:	4618      	mov	r0, r3
 801851c:	f7fc ffd8 	bl	80154d0 <ld_dword>
 8018520:	4602      	mov	r2, r0
 8018522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018524:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8018526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801852a:	4619      	mov	r1, r3
 801852c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801852e:	f7fd fc67 	bl	8015e00 <clust2sect>
 8018532:	4603      	mov	r3, r0
 8018534:	4619      	mov	r1, r3
 8018536:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018538:	f7fd fbc6 	bl	8015cc8 <move_window>
 801853c:	4603      	mov	r3, r0
 801853e:	2b00      	cmp	r3, #0
 8018540:	d001      	beq.n	8018546 <find_volume+0x336>
 8018542:	2301      	movs	r3, #1
 8018544:	e1b0      	b.n	80188a8 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8018546:	2300      	movs	r3, #0
 8018548:	65bb      	str	r3, [r7, #88]	@ 0x58
 801854a:	e015      	b.n	8018578 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801854c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801854e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018550:	4413      	add	r3, r2
 8018552:	3338      	adds	r3, #56	@ 0x38
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	2b81      	cmp	r3, #129	@ 0x81
 8018558:	d10b      	bne.n	8018572 <find_volume+0x362>
 801855a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801855c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018562:	3314      	adds	r3, #20
 8018564:	4413      	add	r3, r2
 8018566:	4618      	mov	r0, r3
 8018568:	f7fc ffb2 	bl	80154d0 <ld_dword>
 801856c:	4603      	mov	r3, r0
 801856e:	2b02      	cmp	r3, #2
 8018570:	d007      	beq.n	8018582 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8018572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018574:	3320      	adds	r3, #32
 8018576:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018578:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801857a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801857e:	d3e5      	bcc.n	801854c <find_volume+0x33c>
 8018580:	e000      	b.n	8018584 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8018582:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8018584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801858a:	d101      	bne.n	8018590 <find_volume+0x380>
 801858c:	230d      	movs	r3, #13
 801858e:	e18b      	b.n	80188a8 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018592:	f04f 32ff 	mov.w	r2, #4294967295
 8018596:	619a      	str	r2, [r3, #24]
 8018598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801859a:	699a      	ldr	r2, [r3, #24]
 801859c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801859e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80185a0:	2304      	movs	r3, #4
 80185a2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80185a6:	e167      	b.n	8018878 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80185a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185aa:	3338      	adds	r3, #56	@ 0x38
 80185ac:	330b      	adds	r3, #11
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7fc ff76 	bl	80154a0 <ld_word>
 80185b4:	4603      	mov	r3, r0
 80185b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80185ba:	d001      	beq.n	80185c0 <find_volume+0x3b0>
 80185bc:	230d      	movs	r3, #13
 80185be:	e173      	b.n	80188a8 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80185c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185c2:	3338      	adds	r3, #56	@ 0x38
 80185c4:	3316      	adds	r3, #22
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7fc ff6a 	bl	80154a0 <ld_word>
 80185cc:	4603      	mov	r3, r0
 80185ce:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80185d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d106      	bne.n	80185e4 <find_volume+0x3d4>
 80185d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185d8:	3338      	adds	r3, #56	@ 0x38
 80185da:	3324      	adds	r3, #36	@ 0x24
 80185dc:	4618      	mov	r0, r3
 80185de:	f7fc ff77 	bl	80154d0 <ld_dword>
 80185e2:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 80185e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80185e8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80185ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185ec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80185f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80185f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185f6:	789b      	ldrb	r3, [r3, #2]
 80185f8:	2b01      	cmp	r3, #1
 80185fa:	d005      	beq.n	8018608 <find_volume+0x3f8>
 80185fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185fe:	789b      	ldrb	r3, [r3, #2]
 8018600:	2b02      	cmp	r3, #2
 8018602:	d001      	beq.n	8018608 <find_volume+0x3f8>
 8018604:	230d      	movs	r3, #13
 8018606:	e14f      	b.n	80188a8 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801860a:	789b      	ldrb	r3, [r3, #2]
 801860c:	461a      	mov	r2, r3
 801860e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018610:	fb02 f303 	mul.w	r3, r2, r3
 8018614:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801861c:	461a      	mov	r2, r3
 801861e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018620:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018624:	895b      	ldrh	r3, [r3, #10]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d008      	beq.n	801863c <find_volume+0x42c>
 801862a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801862c:	895b      	ldrh	r3, [r3, #10]
 801862e:	461a      	mov	r2, r3
 8018630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018632:	895b      	ldrh	r3, [r3, #10]
 8018634:	3b01      	subs	r3, #1
 8018636:	4013      	ands	r3, r2
 8018638:	2b00      	cmp	r3, #0
 801863a:	d001      	beq.n	8018640 <find_volume+0x430>
 801863c:	230d      	movs	r3, #13
 801863e:	e133      	b.n	80188a8 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018642:	3338      	adds	r3, #56	@ 0x38
 8018644:	3311      	adds	r3, #17
 8018646:	4618      	mov	r0, r3
 8018648:	f7fc ff2a 	bl	80154a0 <ld_word>
 801864c:	4603      	mov	r3, r0
 801864e:	461a      	mov	r2, r3
 8018650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018652:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018656:	891b      	ldrh	r3, [r3, #8]
 8018658:	f003 030f 	and.w	r3, r3, #15
 801865c:	b29b      	uxth	r3, r3
 801865e:	2b00      	cmp	r3, #0
 8018660:	d001      	beq.n	8018666 <find_volume+0x456>
 8018662:	230d      	movs	r3, #13
 8018664:	e120      	b.n	80188a8 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018668:	3338      	adds	r3, #56	@ 0x38
 801866a:	3313      	adds	r3, #19
 801866c:	4618      	mov	r0, r3
 801866e:	f7fc ff17 	bl	80154a0 <ld_word>
 8018672:	4603      	mov	r3, r0
 8018674:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018678:	2b00      	cmp	r3, #0
 801867a:	d106      	bne.n	801868a <find_volume+0x47a>
 801867c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801867e:	3338      	adds	r3, #56	@ 0x38
 8018680:	3320      	adds	r3, #32
 8018682:	4618      	mov	r0, r3
 8018684:	f7fc ff24 	bl	80154d0 <ld_dword>
 8018688:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801868a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801868c:	3338      	adds	r3, #56	@ 0x38
 801868e:	330e      	adds	r3, #14
 8018690:	4618      	mov	r0, r3
 8018692:	f7fc ff05 	bl	80154a0 <ld_word>
 8018696:	4603      	mov	r3, r0
 8018698:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801869c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d101      	bne.n	80186a8 <find_volume+0x498>
 80186a4:	230d      	movs	r3, #13
 80186a6:	e0ff      	b.n	80188a8 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80186a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80186ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80186ae:	4413      	add	r3, r2
 80186b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186b2:	8912      	ldrh	r2, [r2, #8]
 80186b4:	0912      	lsrs	r2, r2, #4
 80186b6:	b292      	uxth	r2, r2
 80186b8:	4413      	add	r3, r2
 80186ba:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80186bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80186be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d201      	bcs.n	80186c8 <find_volume+0x4b8>
 80186c4:	230d      	movs	r3, #13
 80186c6:	e0ef      	b.n	80188a8 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80186c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80186ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186cc:	1ad3      	subs	r3, r2, r3
 80186ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186d0:	8952      	ldrh	r2, [r2, #10]
 80186d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80186d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80186d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d101      	bne.n	80186e2 <find_volume+0x4d2>
 80186de:	230d      	movs	r3, #13
 80186e0:	e0e2      	b.n	80188a8 <find_volume+0x698>
		fmt = FS_FAT32;
 80186e2:	2303      	movs	r3, #3
 80186e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80186e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80186ee:	4293      	cmp	r3, r2
 80186f0:	d802      	bhi.n	80186f8 <find_volume+0x4e8>
 80186f2:	2302      	movs	r3, #2
 80186f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80186f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80186fe:	4293      	cmp	r3, r2
 8018700:	d802      	bhi.n	8018708 <find_volume+0x4f8>
 8018702:	2301      	movs	r3, #1
 8018704:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801870a:	1c9a      	adds	r2, r3, #2
 801870c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801870e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8018710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018712:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018714:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018716:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801871a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801871c:	441a      	add	r2, r3
 801871e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018720:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8018722:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018726:	441a      	add	r2, r3
 8018728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801872a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801872c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018730:	2b03      	cmp	r3, #3
 8018732:	d11e      	bne.n	8018772 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018736:	3338      	adds	r3, #56	@ 0x38
 8018738:	332a      	adds	r3, #42	@ 0x2a
 801873a:	4618      	mov	r0, r3
 801873c:	f7fc feb0 	bl	80154a0 <ld_word>
 8018740:	4603      	mov	r3, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	d001      	beq.n	801874a <find_volume+0x53a>
 8018746:	230d      	movs	r3, #13
 8018748:	e0ae      	b.n	80188a8 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801874a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801874c:	891b      	ldrh	r3, [r3, #8]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d001      	beq.n	8018756 <find_volume+0x546>
 8018752:	230d      	movs	r3, #13
 8018754:	e0a8      	b.n	80188a8 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018758:	3338      	adds	r3, #56	@ 0x38
 801875a:	332c      	adds	r3, #44	@ 0x2c
 801875c:	4618      	mov	r0, r3
 801875e:	f7fc feb7 	bl	80154d0 <ld_dword>
 8018762:	4602      	mov	r2, r0
 8018764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018766:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801876a:	69db      	ldr	r3, [r3, #28]
 801876c:	009b      	lsls	r3, r3, #2
 801876e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018770:	e01f      	b.n	80187b2 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018774:	891b      	ldrh	r3, [r3, #8]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d101      	bne.n	801877e <find_volume+0x56e>
 801877a:	230d      	movs	r3, #13
 801877c:	e094      	b.n	80188a8 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801877e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018784:	441a      	add	r2, r3
 8018786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018788:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801878a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801878e:	2b02      	cmp	r3, #2
 8018790:	d103      	bne.n	801879a <find_volume+0x58a>
 8018792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018794:	69db      	ldr	r3, [r3, #28]
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	e00a      	b.n	80187b0 <find_volume+0x5a0>
 801879a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801879c:	69da      	ldr	r2, [r3, #28]
 801879e:	4613      	mov	r3, r2
 80187a0:	005b      	lsls	r3, r3, #1
 80187a2:	4413      	add	r3, r2
 80187a4:	085a      	lsrs	r2, r3, #1
 80187a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187a8:	69db      	ldr	r3, [r3, #28]
 80187aa:	f003 0301 	and.w	r3, r3, #1
 80187ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80187b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80187b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187b4:	6a1a      	ldr	r2, [r3, #32]
 80187b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187b8:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80187bc:	0a5b      	lsrs	r3, r3, #9
 80187be:	429a      	cmp	r2, r3
 80187c0:	d201      	bcs.n	80187c6 <find_volume+0x5b6>
 80187c2:	230d      	movs	r3, #13
 80187c4:	e070      	b.n	80188a8 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80187c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187c8:	f04f 32ff 	mov.w	r2, #4294967295
 80187cc:	619a      	str	r2, [r3, #24]
 80187ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187d0:	699a      	ldr	r2, [r3, #24]
 80187d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80187d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187d8:	2280      	movs	r2, #128	@ 0x80
 80187da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80187dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80187e0:	2b03      	cmp	r3, #3
 80187e2:	d149      	bne.n	8018878 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80187e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187e6:	3338      	adds	r3, #56	@ 0x38
 80187e8:	3330      	adds	r3, #48	@ 0x30
 80187ea:	4618      	mov	r0, r3
 80187ec:	f7fc fe58 	bl	80154a0 <ld_word>
 80187f0:	4603      	mov	r3, r0
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	d140      	bne.n	8018878 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 80187f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80187f8:	3301      	adds	r3, #1
 80187fa:	4619      	mov	r1, r3
 80187fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80187fe:	f7fd fa63 	bl	8015cc8 <move_window>
 8018802:	4603      	mov	r3, r0
 8018804:	2b00      	cmp	r3, #0
 8018806:	d137      	bne.n	8018878 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8018808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801880a:	2200      	movs	r2, #0
 801880c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801880e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018810:	3338      	adds	r3, #56	@ 0x38
 8018812:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8018816:	4618      	mov	r0, r3
 8018818:	f7fc fe42 	bl	80154a0 <ld_word>
 801881c:	4603      	mov	r3, r0
 801881e:	461a      	mov	r2, r3
 8018820:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8018824:	429a      	cmp	r2, r3
 8018826:	d127      	bne.n	8018878 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801882a:	3338      	adds	r3, #56	@ 0x38
 801882c:	4618      	mov	r0, r3
 801882e:	f7fc fe4f 	bl	80154d0 <ld_dword>
 8018832:	4603      	mov	r3, r0
 8018834:	4a1f      	ldr	r2, [pc, #124]	@ (80188b4 <find_volume+0x6a4>)
 8018836:	4293      	cmp	r3, r2
 8018838:	d11e      	bne.n	8018878 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801883a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801883c:	3338      	adds	r3, #56	@ 0x38
 801883e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8018842:	4618      	mov	r0, r3
 8018844:	f7fc fe44 	bl	80154d0 <ld_dword>
 8018848:	4603      	mov	r3, r0
 801884a:	4a1b      	ldr	r2, [pc, #108]	@ (80188b8 <find_volume+0x6a8>)
 801884c:	4293      	cmp	r3, r2
 801884e:	d113      	bne.n	8018878 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018852:	3338      	adds	r3, #56	@ 0x38
 8018854:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8018858:	4618      	mov	r0, r3
 801885a:	f7fc fe39 	bl	80154d0 <ld_dword>
 801885e:	4602      	mov	r2, r0
 8018860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018862:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018866:	3338      	adds	r3, #56	@ 0x38
 8018868:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801886c:	4618      	mov	r0, r3
 801886e:	f7fc fe2f 	bl	80154d0 <ld_dword>
 8018872:	4602      	mov	r2, r0
 8018874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018876:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801887a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 801887e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018880:	4b0e      	ldr	r3, [pc, #56]	@ (80188bc <find_volume+0x6ac>)
 8018882:	881b      	ldrh	r3, [r3, #0]
 8018884:	3301      	adds	r3, #1
 8018886:	b29a      	uxth	r2, r3
 8018888:	4b0c      	ldr	r3, [pc, #48]	@ (80188bc <find_volume+0x6ac>)
 801888a:	801a      	strh	r2, [r3, #0]
 801888c:	4b0b      	ldr	r3, [pc, #44]	@ (80188bc <find_volume+0x6ac>)
 801888e:	881a      	ldrh	r2, [r3, #0]
 8018890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018892:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018896:	4a0a      	ldr	r2, [pc, #40]	@ (80188c0 <find_volume+0x6b0>)
 8018898:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801889a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801889c:	4a09      	ldr	r2, [pc, #36]	@ (80188c4 <find_volume+0x6b4>)
 801889e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80188a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80188a2:	f7fd f9a9 	bl	8015bf8 <clear_lock>
#endif
	return FR_OK;
 80188a6:	2300      	movs	r3, #0
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3770      	adds	r7, #112	@ 0x70
 80188ac:	46bd      	mov	sp, r7
 80188ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80188b2:	bf00      	nop
 80188b4:	41615252 	.word	0x41615252
 80188b8:	61417272 	.word	0x61417272
 80188bc:	240011ec 	.word	0x240011ec
 80188c0:	24001470 	.word	0x24001470
 80188c4:	24001210 	.word	0x24001210

080188c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b084      	sub	sp, #16
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
 80188d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80188d2:	2309      	movs	r3, #9
 80188d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d01c      	beq.n	8018916 <validate+0x4e>
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d018      	beq.n	8018916 <validate+0x4e>
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d013      	beq.n	8018916 <validate+0x4e>
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	889a      	ldrh	r2, [r3, #4]
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	88db      	ldrh	r3, [r3, #6]
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d10c      	bne.n	8018916 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	785b      	ldrb	r3, [r3, #1]
 8018902:	4618      	mov	r0, r3
 8018904:	f7fc fd2c 	bl	8015360 <disk_status>
 8018908:	4603      	mov	r3, r0
 801890a:	f003 0301 	and.w	r3, r3, #1
 801890e:	2b00      	cmp	r3, #0
 8018910:	d101      	bne.n	8018916 <validate+0x4e>
			res = FR_OK;
 8018912:	2300      	movs	r3, #0
 8018914:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018916:	7bfb      	ldrb	r3, [r7, #15]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d102      	bne.n	8018922 <validate+0x5a>
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	e000      	b.n	8018924 <validate+0x5c>
 8018922:	2300      	movs	r3, #0
 8018924:	683a      	ldr	r2, [r7, #0]
 8018926:	6013      	str	r3, [r2, #0]
	return res;
 8018928:	7bfb      	ldrb	r3, [r7, #15]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3710      	adds	r7, #16
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
	...

08018934 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b088      	sub	sp, #32
 8018938:	af00      	add	r7, sp, #0
 801893a:	60f8      	str	r0, [r7, #12]
 801893c:	60b9      	str	r1, [r7, #8]
 801893e:	4613      	mov	r3, r2
 8018940:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018942:	68bb      	ldr	r3, [r7, #8]
 8018944:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018946:	f107 0310 	add.w	r3, r7, #16
 801894a:	4618      	mov	r0, r3
 801894c:	f7ff fbb7 	bl	80180be <get_ldnumber>
 8018950:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018952:	69fb      	ldr	r3, [r7, #28]
 8018954:	2b00      	cmp	r3, #0
 8018956:	da01      	bge.n	801895c <f_mount+0x28>
 8018958:	230b      	movs	r3, #11
 801895a:	e02b      	b.n	80189b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801895c:	4a17      	ldr	r2, [pc, #92]	@ (80189bc <f_mount+0x88>)
 801895e:	69fb      	ldr	r3, [r7, #28]
 8018960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018964:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018966:	69bb      	ldr	r3, [r7, #24]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d005      	beq.n	8018978 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801896c:	69b8      	ldr	r0, [r7, #24]
 801896e:	f7fd f943 	bl	8015bf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018972:	69bb      	ldr	r3, [r7, #24]
 8018974:	2200      	movs	r2, #0
 8018976:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d002      	beq.n	8018984 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	2200      	movs	r2, #0
 8018982:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018984:	68fa      	ldr	r2, [r7, #12]
 8018986:	490d      	ldr	r1, [pc, #52]	@ (80189bc <f_mount+0x88>)
 8018988:	69fb      	ldr	r3, [r7, #28]
 801898a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d002      	beq.n	801899a <f_mount+0x66>
 8018994:	79fb      	ldrb	r3, [r7, #7]
 8018996:	2b01      	cmp	r3, #1
 8018998:	d001      	beq.n	801899e <f_mount+0x6a>
 801899a:	2300      	movs	r3, #0
 801899c:	e00a      	b.n	80189b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801899e:	f107 010c 	add.w	r1, r7, #12
 80189a2:	f107 0308 	add.w	r3, r7, #8
 80189a6:	2200      	movs	r2, #0
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7ff fc31 	bl	8018210 <find_volume>
 80189ae:	4603      	mov	r3, r0
 80189b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80189b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3720      	adds	r7, #32
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	240011e8 	.word	0x240011e8

080189c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80189c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80189c4:	b0a6      	sub	sp, #152	@ 0x98
 80189c6:	af00      	add	r7, sp, #0
 80189c8:	61f8      	str	r0, [r7, #28]
 80189ca:	61b9      	str	r1, [r7, #24]
 80189cc:	4613      	mov	r3, r2
 80189ce:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80189d0:	69fb      	ldr	r3, [r7, #28]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d101      	bne.n	80189da <f_open+0x1a>
 80189d6:	2309      	movs	r3, #9
 80189d8:	e2aa      	b.n	8018f30 <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80189da:	7dfb      	ldrb	r3, [r7, #23]
 80189dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80189e0:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 80189e2:	7dfa      	ldrb	r2, [r7, #23]
 80189e4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80189e8:	f107 0318 	add.w	r3, r7, #24
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7ff fc0f 	bl	8018210 <find_volume>
 80189f2:	4603      	mov	r3, r0
 80189f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 80189f8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	f040 828e 	bne.w	8018f1e <f_open+0x55e>
		dj.obj.fs = fs;
 8018a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a04:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018a06:	69ba      	ldr	r2, [r7, #24]
 8018a08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a0c:	4611      	mov	r1, r2
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7ff faac 	bl	8017f6c <follow_path>
 8018a14:	4603      	mov	r3, r0
 8018a16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018a1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d118      	bne.n	8018a54 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018a22:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8018a26:	b25b      	sxtb	r3, r3
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	da03      	bge.n	8018a34 <f_open+0x74>
				res = FR_INVALID_NAME;
 8018a2c:	2306      	movs	r3, #6
 8018a2e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018a32:	e00f      	b.n	8018a54 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018a34:	7dfb      	ldrb	r3, [r7, #23]
 8018a36:	2b01      	cmp	r3, #1
 8018a38:	bf8c      	ite	hi
 8018a3a:	2301      	movhi	r3, #1
 8018a3c:	2300      	movls	r3, #0
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	461a      	mov	r2, r3
 8018a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a46:	4611      	mov	r1, r2
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7fc ff8d 	bl	8015968 <chk_lock>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018a54:	7dfb      	ldrb	r3, [r7, #23]
 8018a56:	f003 031c 	and.w	r3, r3, #28
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	f000 8115 	beq.w	8018c8a <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 8018a60:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d017      	beq.n	8018a98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018a68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018a6c:	2b04      	cmp	r3, #4
 8018a6e:	d10e      	bne.n	8018a8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018a70:	f7fc ffd6 	bl	8015a20 <enq_lock>
 8018a74:	4603      	mov	r3, r0
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d006      	beq.n	8018a88 <f_open+0xc8>
 8018a7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7fe ff16 	bl	80178b0 <dir_register>
 8018a84:	4603      	mov	r3, r0
 8018a86:	e000      	b.n	8018a8a <f_open+0xca>
 8018a88:	2312      	movs	r3, #18
 8018a8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018a8e:	7dfb      	ldrb	r3, [r7, #23]
 8018a90:	f043 0308 	orr.w	r3, r3, #8
 8018a94:	75fb      	strb	r3, [r7, #23]
 8018a96:	e011      	b.n	8018abc <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018a98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018a9c:	f003 0311 	and.w	r3, r3, #17
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d003      	beq.n	8018aac <f_open+0xec>
					res = FR_DENIED;
 8018aa4:	2307      	movs	r3, #7
 8018aa6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018aaa:	e007      	b.n	8018abc <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018aac:	7dfb      	ldrb	r3, [r7, #23]
 8018aae:	f003 0304 	and.w	r3, r3, #4
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d002      	beq.n	8018abc <f_open+0xfc>
 8018ab6:	2308      	movs	r3, #8
 8018ab8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018abc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	f040 80fe 	bne.w	8018cc2 <f_open+0x302>
 8018ac6:	7dfb      	ldrb	r3, [r7, #23]
 8018ac8:	f003 0308 	and.w	r3, r3, #8
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f000 80f8 	beq.w	8018cc2 <f_open+0x302>
				dw = GET_FATTIME();
 8018ad2:	f7fc f953 	bl	8014d7c <get_fattime>
 8018ad6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8018ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	2b04      	cmp	r3, #4
 8018ae0:	f040 8084 	bne.w	8018bec <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8018ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ae6:	69fb      	ldr	r3, [r7, #28]
 8018ae8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8018aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aec:	691b      	ldr	r3, [r3, #16]
 8018aee:	3334      	adds	r3, #52	@ 0x34
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7fc fced 	bl	80154d0 <ld_dword>
 8018af6:	4602      	mov	r2, r0
 8018af8:	69fb      	ldr	r3, [r7, #28]
 8018afa:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018afe:	691b      	ldr	r3, [r3, #16]
 8018b00:	3338      	adds	r3, #56	@ 0x38
 8018b02:	4618      	mov	r0, r3
 8018b04:	f7fc fd07 	bl	8015516 <ld_qword>
 8018b08:	4602      	mov	r2, r0
 8018b0a:	460b      	mov	r3, r1
 8018b0c:	69f9      	ldr	r1, [r7, #28]
 8018b0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b14:	691b      	ldr	r3, [r3, #16]
 8018b16:	3321      	adds	r3, #33	@ 0x21
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	f003 0302 	and.w	r3, r3, #2
 8018b1e:	b2da      	uxtb	r2, r3
 8018b20:	69fb      	ldr	r3, [r7, #28]
 8018b22:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8018b24:	69fb      	ldr	r3, [r7, #28]
 8018b26:	2200      	movs	r2, #0
 8018b28:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8018b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b2c:	691b      	ldr	r3, [r3, #16]
 8018b2e:	3308      	adds	r3, #8
 8018b30:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7fc fde4 	bl	8015702 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8018b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b3c:	691b      	ldr	r3, [r3, #16]
 8018b3e:	3314      	adds	r3, #20
 8018b40:	2200      	movs	r2, #0
 8018b42:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8018b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b46:	691b      	ldr	r3, [r3, #16]
 8018b48:	330c      	adds	r3, #12
 8018b4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7fc fdd7 	bl	8015702 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8018b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b56:	691b      	ldr	r3, [r3, #16]
 8018b58:	3315      	adds	r3, #21
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8018b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b60:	691b      	ldr	r3, [r3, #16]
 8018b62:	3304      	adds	r3, #4
 8018b64:	2220      	movs	r2, #32
 8018b66:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8018b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b6a:	691b      	ldr	r3, [r3, #16]
 8018b6c:	3334      	adds	r3, #52	@ 0x34
 8018b6e:	2100      	movs	r1, #0
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7fc fdc6 	bl	8015702 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8018b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b78:	691b      	ldr	r3, [r3, #16]
 8018b7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018b7e:	f04f 0200 	mov.w	r2, #0
 8018b82:	f04f 0300 	mov.w	r3, #0
 8018b86:	4608      	mov	r0, r1
 8018b88:	f7fc fde7 	bl	801575a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8018b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b8e:	691b      	ldr	r3, [r3, #16]
 8018b90:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8018b94:	f04f 0200 	mov.w	r2, #0
 8018b98:	f04f 0300 	mov.w	r3, #0
 8018b9c:	4608      	mov	r0, r1
 8018b9e:	f7fc fddc 	bl	801575a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8018ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba4:	691b      	ldr	r3, [r3, #16]
 8018ba6:	3321      	adds	r3, #33	@ 0x21
 8018ba8:	2201      	movs	r2, #1
 8018baa:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8018bac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7fe fbc9 	bl	8017348 <store_xdir>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8018bbc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d17e      	bne.n	8018cc2 <f_open+0x302>
 8018bc4:	69fb      	ldr	r3, [r7, #28]
 8018bc6:	689b      	ldr	r3, [r3, #8]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d07a      	beq.n	8018cc2 <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8018bcc:	69f8      	ldr	r0, [r7, #28]
 8018bce:	69fb      	ldr	r3, [r7, #28]
 8018bd0:	689b      	ldr	r3, [r3, #8]
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	f7fd fc81 	bl	80164dc <remove_chain>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8018be0:	69fb      	ldr	r3, [r7, #28]
 8018be2:	689a      	ldr	r2, [r3, #8]
 8018be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be6:	3a01      	subs	r2, #1
 8018be8:	615a      	str	r2, [r3, #20]
 8018bea:	e06a      	b.n	8018cc2 <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018bee:	330e      	adds	r3, #14
 8018bf0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7fc fd84 	bl	8015702 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018bfc:	3316      	adds	r3, #22
 8018bfe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fc fd7d 	bl	8015702 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018c0a:	330b      	adds	r3, #11
 8018c0c:	2220      	movs	r2, #32
 8018c0e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018c14:	4611      	mov	r1, r2
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fe f810 	bl	8016c3c <ld_clust>
 8018c1c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8018c24:	2200      	movs	r2, #0
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fe f827 	bl	8016c7a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018c2e:	331c      	adds	r3, #28
 8018c30:	2100      	movs	r1, #0
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7fc fd65 	bl	8015702 <st_dword>
					fs->wflag = 1;
 8018c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c3a:	2201      	movs	r2, #1
 8018c3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d03d      	beq.n	8018cc2 <f_open+0x302>
						dw = fs->winsect;
 8018c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8018c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018c52:	2200      	movs	r2, #0
 8018c54:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f7fd fc3f 	bl	80164dc <remove_chain>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 8018c64:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d12a      	bne.n	8018cc2 <f_open+0x302>
							res = move_window(fs, dw);
 8018c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7fd f828 	bl	8015cc8 <move_window>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018c84:	3a01      	subs	r2, #1
 8018c86:	615a      	str	r2, [r3, #20]
 8018c88:	e01b      	b.n	8018cc2 <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018c8a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d117      	bne.n	8018cc2 <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018c92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018c96:	f003 0310 	and.w	r3, r3, #16
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d003      	beq.n	8018ca6 <f_open+0x2e6>
					res = FR_NO_FILE;
 8018c9e:	2304      	movs	r3, #4
 8018ca0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018ca4:	e00d      	b.n	8018cc2 <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018ca6:	7dfb      	ldrb	r3, [r7, #23]
 8018ca8:	f003 0302 	and.w	r3, r3, #2
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d008      	beq.n	8018cc2 <f_open+0x302>
 8018cb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018cb4:	f003 0301 	and.w	r3, r3, #1
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d002      	beq.n	8018cc2 <f_open+0x302>
						res = FR_DENIED;
 8018cbc:	2307      	movs	r3, #7
 8018cbe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8018cc2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d126      	bne.n	8018d18 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018cca:	7dfb      	ldrb	r3, [r7, #23]
 8018ccc:	f003 0308 	and.w	r3, r3, #8
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d003      	beq.n	8018cdc <f_open+0x31c>
				mode |= FA_MODIFIED;
 8018cd4:	7dfb      	ldrb	r3, [r7, #23]
 8018cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cda:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018ce0:	69fb      	ldr	r3, [r7, #28]
 8018ce2:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8018ce4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018ce6:	69fb      	ldr	r3, [r7, #28]
 8018ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018cea:	7dfb      	ldrb	r3, [r7, #23]
 8018cec:	2b01      	cmp	r3, #1
 8018cee:	bf8c      	ite	hi
 8018cf0:	2301      	movhi	r3, #1
 8018cf2:	2300      	movls	r3, #0
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018cfc:	4611      	mov	r1, r2
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f7fc feb0 	bl	8015a64 <inc_lock>
 8018d04:	4602      	mov	r2, r0
 8018d06:	69fb      	ldr	r3, [r7, #28]
 8018d08:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d102      	bne.n	8018d18 <f_open+0x358>
 8018d12:	2302      	movs	r3, #2
 8018d14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018d18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	f040 80fe 	bne.w	8018f1e <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8018d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	2b04      	cmp	r3, #4
 8018d28:	d12d      	bne.n	8018d86 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8018d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8018d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8018d34:	4613      	mov	r3, r2
 8018d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018d3a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018d3e:	431a      	orrs	r2, r3
 8018d40:	69fb      	ldr	r3, [r7, #28]
 8018d42:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8018d44:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8018d46:	69fb      	ldr	r3, [r7, #28]
 8018d48:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8018d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d4c:	691b      	ldr	r3, [r3, #16]
 8018d4e:	3334      	adds	r3, #52	@ 0x34
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7fc fbbd 	bl	80154d0 <ld_dword>
 8018d56:	4602      	mov	r2, r0
 8018d58:	69fb      	ldr	r3, [r7, #28]
 8018d5a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d5e:	691b      	ldr	r3, [r3, #16]
 8018d60:	3338      	adds	r3, #56	@ 0x38
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7fc fbd7 	bl	8015516 <ld_qword>
 8018d68:	4602      	mov	r2, r0
 8018d6a:	460b      	mov	r3, r1
 8018d6c:	69f9      	ldr	r1, [r7, #28]
 8018d6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d74:	691b      	ldr	r3, [r3, #16]
 8018d76:	3321      	adds	r3, #33	@ 0x21
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	f003 0302 	and.w	r3, r3, #2
 8018d7e:	b2da      	uxtb	r2, r3
 8018d80:	69fb      	ldr	r3, [r7, #28]
 8018d82:	71da      	strb	r2, [r3, #7]
 8018d84:	e016      	b.n	8018db4 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018d8a:	4611      	mov	r1, r2
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7fd ff55 	bl	8016c3c <ld_clust>
 8018d92:	4602      	mov	r2, r0
 8018d94:	69fb      	ldr	r3, [r7, #28]
 8018d96:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018d9a:	331c      	adds	r3, #28
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fc fb97 	bl	80154d0 <ld_dword>
 8018da2:	4603      	mov	r3, r0
 8018da4:	2200      	movs	r2, #0
 8018da6:	60bb      	str	r3, [r7, #8]
 8018da8:	60fa      	str	r2, [r7, #12]
 8018daa:	69fb      	ldr	r3, [r7, #28]
 8018dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8018db0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018db4:	69fb      	ldr	r3, [r7, #28]
 8018db6:	2200      	movs	r2, #0
 8018db8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018dbc:	69fb      	ldr	r3, [r7, #28]
 8018dbe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dc2:	88da      	ldrh	r2, [r3, #6]
 8018dc4:	69fb      	ldr	r3, [r7, #28]
 8018dc6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018dc8:	69fb      	ldr	r3, [r7, #28]
 8018dca:	7dfa      	ldrb	r2, [r7, #23]
 8018dcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8018dd0:	69fb      	ldr	r3, [r7, #28]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8018dd8:	69fb      	ldr	r3, [r7, #28]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018dde:	69f9      	ldr	r1, [r7, #28]
 8018de0:	f04f 0200 	mov.w	r2, #0
 8018de4:	f04f 0300 	mov.w	r3, #0
 8018de8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018dec:	69fb      	ldr	r3, [r7, #28]
 8018dee:	3354      	adds	r3, #84	@ 0x54
 8018df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018df4:	2100      	movs	r1, #0
 8018df6:	4618      	mov	r0, r3
 8018df8:	f7fc fd58 	bl	80158ac <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018dfc:	7dfb      	ldrb	r3, [r7, #23]
 8018dfe:	f003 0320 	and.w	r3, r3, #32
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	f000 808b 	beq.w	8018f1e <f_open+0x55e>
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e0e:	4313      	orrs	r3, r2
 8018e10:	f000 8085 	beq.w	8018f1e <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018e14:	69fb      	ldr	r3, [r7, #28]
 8018e16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e1a:	69f9      	ldr	r1, [r7, #28]
 8018e1c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e22:	895b      	ldrh	r3, [r3, #10]
 8018e24:	025b      	lsls	r3, r3, #9
 8018e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018e28:	69fb      	ldr	r3, [r7, #28]
 8018e2a:	689b      	ldr	r3, [r3, #8]
 8018e2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018e30:	69fb      	ldr	r3, [r7, #28]
 8018e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018e36:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8018e3a:	e026      	b.n	8018e8a <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fc fffc 	bl	8015e40 <get_fat>
 8018e48:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8018e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8018e50:	2b01      	cmp	r3, #1
 8018e52:	d802      	bhi.n	8018e5a <f_open+0x49a>
 8018e54:	2302      	movs	r3, #2
 8018e56:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8018e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e62:	d102      	bne.n	8018e6a <f_open+0x4aa>
 8018e64:	2301      	movs	r3, #1
 8018e66:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018e6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	469a      	mov	sl, r3
 8018e70:	4693      	mov	fp, r2
 8018e72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018e76:	ebb2 010a 	subs.w	r1, r2, sl
 8018e7a:	6039      	str	r1, [r7, #0]
 8018e7c:	eb63 030b 	sbc.w	r3, r3, fp
 8018e80:	607b      	str	r3, [r7, #4]
 8018e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e86:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8018e8a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d109      	bne.n	8018ea6 <f_open+0x4e6>
 8018e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e94:	2200      	movs	r2, #0
 8018e96:	4698      	mov	r8, r3
 8018e98:	4691      	mov	r9, r2
 8018e9a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018e9e:	4590      	cmp	r8, r2
 8018ea0:	eb79 0303 	sbcs.w	r3, r9, r3
 8018ea4:	d3ca      	bcc.n	8018e3c <f_open+0x47c>
				}
				fp->clust = clst;
 8018ea6:	69fb      	ldr	r3, [r7, #28]
 8018ea8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8018eac:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018eae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d133      	bne.n	8018f1e <f_open+0x55e>
 8018eb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018eba:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8018ebe:	2500      	movs	r5, #0
 8018ec0:	ea54 0305 	orrs.w	r3, r4, r5
 8018ec4:	d02b      	beq.n	8018f1e <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ec8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fc ff97 	bl	8015e00 <clust2sect>
 8018ed2:	67b8      	str	r0, [r7, #120]	@ 0x78
 8018ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d103      	bne.n	8018ee2 <f_open+0x522>
						res = FR_INT_ERR;
 8018eda:	2302      	movs	r3, #2
 8018edc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018ee0:	e01d      	b.n	8018f1e <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018ee2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8018ee6:	f04f 0200 	mov.w	r2, #0
 8018eea:	f04f 0300 	mov.w	r3, #0
 8018eee:	0a42      	lsrs	r2, r0, #9
 8018ef0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8018ef4:	0a4b      	lsrs	r3, r1, #9
 8018ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018ef8:	441a      	add	r2, r3
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f00:	7858      	ldrb	r0, [r3, #1]
 8018f02:	69fb      	ldr	r3, [r7, #28]
 8018f04:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8018f08:	69fb      	ldr	r3, [r7, #28]
 8018f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	f7fc fa69 	bl	80153e4 <disk_read>
 8018f12:	4603      	mov	r3, r0
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d002      	beq.n	8018f1e <f_open+0x55e>
 8018f18:	2301      	movs	r3, #1
 8018f1a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018f1e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d002      	beq.n	8018f2c <f_open+0x56c>
 8018f26:	69fb      	ldr	r3, [r7, #28]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018f2c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	3798      	adds	r7, #152	@ 0x98
 8018f34:	46bd      	mov	sp, r7
 8018f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08018f3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f3e:	b08d      	sub	sp, #52	@ 0x34
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	60b9      	str	r1, [r7, #8]
 8018f46:	607a      	str	r2, [r7, #4]
 8018f48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018f4e:	683b      	ldr	r3, [r7, #0]
 8018f50:	2200      	movs	r2, #0
 8018f52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f107 0210 	add.w	r2, r7, #16
 8018f5a:	4611      	mov	r1, r2
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7ff fcb3 	bl	80188c8 <validate>
 8018f62:	4603      	mov	r3, r0
 8018f64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d108      	bne.n	8018f82 <f_write+0x48>
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d002      	beq.n	8018f88 <f_write+0x4e>
 8018f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f86:	e187      	b.n	8019298 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018f8e:	f003 0302 	and.w	r3, r3, #2
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d101      	bne.n	8018f9a <f_write+0x60>
 8018f96:	2307      	movs	r3, #7
 8018f98:	e17e      	b.n	8019298 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	781b      	ldrb	r3, [r3, #0]
 8018f9e:	2b04      	cmp	r3, #4
 8018fa0:	f000 816a 	beq.w	8019278 <f_write+0x33e>
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	18d1      	adds	r1, r2, r3
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	4299      	cmp	r1, r3
 8018fb8:	f080 815e 	bcs.w	8019278 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018fc2:	4613      	mov	r3, r2
 8018fc4:	43db      	mvns	r3, r3
 8018fc6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018fc8:	e156      	b.n	8019278 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018fd0:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8018fd4:	2500      	movs	r5, #0
 8018fd6:	ea54 0305 	orrs.w	r3, r4, r5
 8018fda:	f040 80fb 	bne.w	80191d4 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8018fe4:	f04f 0200 	mov.w	r2, #0
 8018fe8:	f04f 0300 	mov.w	r3, #0
 8018fec:	0a42      	lsrs	r2, r0, #9
 8018fee:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8018ff2:	0a4b      	lsrs	r3, r1, #9
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	895b      	ldrh	r3, [r3, #10]
 8018ff8:	3b01      	subs	r3, #1
 8018ffa:	4013      	ands	r3, r2
 8018ffc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018ffe:	69bb      	ldr	r3, [r7, #24]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d146      	bne.n	8019092 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801900a:	4313      	orrs	r3, r2
 801900c:	d10c      	bne.n	8019028 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	689b      	ldr	r3, [r3, #8]
 8019012:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019016:	2b00      	cmp	r3, #0
 8019018:	d11a      	bne.n	8019050 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	2100      	movs	r1, #0
 801901e:	4618      	mov	r0, r3
 8019020:	f7fd fb10 	bl	8016644 <create_chain>
 8019024:	62b8      	str	r0, [r7, #40]	@ 0x28
 8019026:	e013      	b.n	8019050 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801902c:	2b00      	cmp	r3, #0
 801902e:	d007      	beq.n	8019040 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8019036:	68f8      	ldr	r0, [r7, #12]
 8019038:	f7fd fc05 	bl	8016846 <clmt_clust>
 801903c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801903e:	e007      	b.n	8019050 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019040:	68fa      	ldr	r2, [r7, #12]
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019046:	4619      	mov	r1, r3
 8019048:	4610      	mov	r0, r2
 801904a:	f7fd fafb 	bl	8016644 <create_chain>
 801904e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019052:	2b00      	cmp	r3, #0
 8019054:	f000 8115 	beq.w	8019282 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801905a:	2b01      	cmp	r3, #1
 801905c:	d105      	bne.n	801906a <f_write+0x130>
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	2202      	movs	r2, #2
 8019062:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8019066:	2302      	movs	r3, #2
 8019068:	e116      	b.n	8019298 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801906a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019070:	d105      	bne.n	801907e <f_write+0x144>
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	2201      	movs	r2, #1
 8019076:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801907a:	2301      	movs	r3, #1
 801907c:	e10c      	b.n	8019298 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019082:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d102      	bne.n	8019092 <f_write+0x158>
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019090:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019098:	b25b      	sxtb	r3, r3
 801909a:	2b00      	cmp	r3, #0
 801909c:	da1b      	bge.n	80190d6 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801909e:	693b      	ldr	r3, [r7, #16]
 80190a0:	7858      	ldrb	r0, [r3, #1]
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80190ac:	2301      	movs	r3, #1
 80190ae:	f7fc f9b9 	bl	8015424 <disk_write>
 80190b2:	4603      	mov	r3, r0
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d005      	beq.n	80190c4 <f_write+0x18a>
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	2201      	movs	r2, #1
 80190bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80190c0:	2301      	movs	r3, #1
 80190c2:	e0e9      	b.n	8019298 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80190ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80190ce:	b2da      	uxtb	r2, r3
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80190d6:	693a      	ldr	r2, [r7, #16]
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190dc:	4619      	mov	r1, r3
 80190de:	4610      	mov	r0, r2
 80190e0:	f7fc fe8e 	bl	8015e00 <clust2sect>
 80190e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d105      	bne.n	80190f8 <f_write+0x1be>
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	2202      	movs	r2, #2
 80190f0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80190f4:	2302      	movs	r3, #2
 80190f6:	e0cf      	b.n	8019298 <f_write+0x35e>
			sect += csect;
 80190f8:	697a      	ldr	r2, [r7, #20]
 80190fa:	69bb      	ldr	r3, [r7, #24]
 80190fc:	4413      	add	r3, r2
 80190fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	0a5b      	lsrs	r3, r3, #9
 8019104:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019106:	6a3b      	ldr	r3, [r7, #32]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d03f      	beq.n	801918c <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801910c:	69ba      	ldr	r2, [r7, #24]
 801910e:	6a3b      	ldr	r3, [r7, #32]
 8019110:	4413      	add	r3, r2
 8019112:	693a      	ldr	r2, [r7, #16]
 8019114:	8952      	ldrh	r2, [r2, #10]
 8019116:	4293      	cmp	r3, r2
 8019118:	d905      	bls.n	8019126 <f_write+0x1ec>
					cc = fs->csize - csect;
 801911a:	693b      	ldr	r3, [r7, #16]
 801911c:	895b      	ldrh	r3, [r3, #10]
 801911e:	461a      	mov	r2, r3
 8019120:	69bb      	ldr	r3, [r7, #24]
 8019122:	1ad3      	subs	r3, r2, r3
 8019124:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	7858      	ldrb	r0, [r3, #1]
 801912a:	6a3b      	ldr	r3, [r7, #32]
 801912c:	697a      	ldr	r2, [r7, #20]
 801912e:	69f9      	ldr	r1, [r7, #28]
 8019130:	f7fc f978 	bl	8015424 <disk_write>
 8019134:	4603      	mov	r3, r0
 8019136:	2b00      	cmp	r3, #0
 8019138:	d005      	beq.n	8019146 <f_write+0x20c>
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	2201      	movs	r2, #1
 801913e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8019142:	2301      	movs	r3, #1
 8019144:	e0a8      	b.n	8019298 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801914a:	697b      	ldr	r3, [r7, #20]
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	6a3a      	ldr	r2, [r7, #32]
 8019150:	429a      	cmp	r2, r3
 8019152:	d917      	bls.n	8019184 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	1ad3      	subs	r3, r2, r3
 8019162:	025b      	lsls	r3, r3, #9
 8019164:	69fa      	ldr	r2, [r7, #28]
 8019166:	4413      	add	r3, r2
 8019168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801916c:	4619      	mov	r1, r3
 801916e:	f7fc fb7c 	bl	801586a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801917c:	b2da      	uxtb	r2, r3
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019184:	6a3b      	ldr	r3, [r7, #32]
 8019186:	025b      	lsls	r3, r3, #9
 8019188:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801918a:	e04a      	b.n	8019222 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019190:	697a      	ldr	r2, [r7, #20]
 8019192:	429a      	cmp	r2, r3
 8019194:	d01b      	beq.n	80191ce <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80191a2:	4290      	cmp	r0, r2
 80191a4:	eb71 0303 	sbcs.w	r3, r1, r3
 80191a8:	d211      	bcs.n	80191ce <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80191aa:	693b      	ldr	r3, [r7, #16]
 80191ac:	7858      	ldrb	r0, [r3, #1]
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80191b4:	2301      	movs	r3, #1
 80191b6:	697a      	ldr	r2, [r7, #20]
 80191b8:	f7fc f914 	bl	80153e4 <disk_read>
 80191bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d005      	beq.n	80191ce <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	2201      	movs	r2, #1
 80191c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80191ca:	2301      	movs	r3, #1
 80191cc:	e064      	b.n	8019298 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	697a      	ldr	r2, [r7, #20]
 80191d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80191da:	4613      	mov	r3, r2
 80191dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80191e0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80191e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80191e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d901      	bls.n	80191f2 <f_write+0x2b8>
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80191fe:	4613      	mov	r3, r2
 8019200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019204:	440b      	add	r3, r1
 8019206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019208:	69f9      	ldr	r1, [r7, #28]
 801920a:	4618      	mov	r0, r3
 801920c:	f7fc fb2d 	bl	801586a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019216:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801921a:	b2da      	uxtb	r2, r3
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019222:	69fa      	ldr	r2, [r7, #28]
 8019224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019226:	4413      	add	r3, r2
 8019228:	61fb      	str	r3, [r7, #28]
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8019230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019232:	2000      	movs	r0, #0
 8019234:	4688      	mov	r8, r1
 8019236:	4681      	mov	r9, r0
 8019238:	eb12 0a08 	adds.w	sl, r2, r8
 801923c:	eb43 0b09 	adc.w	fp, r3, r9
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801924c:	68f9      	ldr	r1, [r7, #12]
 801924e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8019252:	4282      	cmp	r2, r0
 8019254:	eb73 0601 	sbcs.w	r6, r3, r1
 8019258:	d201      	bcs.n	801925e <f_write+0x324>
 801925a:	4602      	mov	r2, r0
 801925c:	460b      	mov	r3, r1
 801925e:	68f9      	ldr	r1, [r7, #12]
 8019260:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	681a      	ldr	r2, [r3, #0]
 8019268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801926a:	441a      	add	r2, r3
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	601a      	str	r2, [r3, #0]
 8019270:	687a      	ldr	r2, [r7, #4]
 8019272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019274:	1ad3      	subs	r3, r2, r3
 8019276:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	2b00      	cmp	r3, #0
 801927c:	f47f aea5 	bne.w	8018fca <f_write+0x90>
 8019280:	e000      	b.n	8019284 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019282:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801928a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801928e:	b2da      	uxtb	r2, r3
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8019296:	2300      	movs	r3, #0
}
 8019298:	4618      	mov	r0, r3
 801929a:	3734      	adds	r7, #52	@ 0x34
 801929c:	46bd      	mov	sp, r7
 801929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80192a2:	b580      	push	{r7, lr}
 80192a4:	b09a      	sub	sp, #104	@ 0x68
 80192a6:	af00      	add	r7, sp, #0
 80192a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80192b0:	4611      	mov	r1, r2
 80192b2:	4618      	mov	r0, r3
 80192b4:	f7ff fb08 	bl	80188c8 <validate>
 80192b8:	4603      	mov	r3, r0
 80192ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80192be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	f040 8105 	bne.w	80194d2 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80192ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f000 80fd 	beq.w	80194d2 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80192de:	b25b      	sxtb	r3, r3
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	da17      	bge.n	8019314 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80192e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80192e6:	7858      	ldrb	r0, [r3, #1]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80192f2:	2301      	movs	r3, #1
 80192f4:	f7fc f896 	bl	8015424 <disk_write>
 80192f8:	4603      	mov	r3, r0
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d001      	beq.n	8019302 <f_sync+0x60>
 80192fe:	2301      	movs	r3, #1
 8019300:	e0e9      	b.n	80194d6 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801930c:	b2da      	uxtb	r2, r3
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019314:	f7fb fd32 	bl	8014d7c <get_fattime>
 8019318:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801931a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	2b04      	cmp	r3, #4
 8019320:	f040 808c 	bne.w	801943c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	4618      	mov	r0, r3
 8019328:	f7fd f878 	bl	801641c <fill_first_frag>
 801932c:	4603      	mov	r3, r0
 801932e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8019332:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019336:	2b00      	cmp	r3, #0
 8019338:	d10a      	bne.n	8019350 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019340:	f04f 32ff 	mov.w	r2, #4294967295
 8019344:	4619      	mov	r1, r3
 8019346:	f7fd f898 	bl	801647a <fill_last_frag>
 801934a:	4603      	mov	r3, r0
 801934c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 8019350:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019354:	2b00      	cmp	r3, #0
 8019356:	f040 80bc 	bne.w	80194d2 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	f107 0308 	add.w	r3, r7, #8
 8019360:	4611      	mov	r1, r2
 8019362:	4618      	mov	r0, r3
 8019364:	f7fd ffba 	bl	80172dc <load_obj_dir>
 8019368:	4603      	mov	r3, r0
 801936a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 801936e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019372:	2b00      	cmp	r3, #0
 8019374:	f040 80ad 	bne.w	80194d2 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8019378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801937a:	691b      	ldr	r3, [r3, #16]
 801937c:	3304      	adds	r3, #4
 801937e:	781a      	ldrb	r2, [r3, #0]
 8019380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019382:	691b      	ldr	r3, [r3, #16]
 8019384:	3304      	adds	r3, #4
 8019386:	f042 0220 	orr.w	r2, r2, #32
 801938a:	b2d2      	uxtb	r2, r2
 801938c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	79da      	ldrb	r2, [r3, #7]
 8019392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019394:	691b      	ldr	r3, [r3, #16]
 8019396:	3321      	adds	r3, #33	@ 0x21
 8019398:	f042 0201 	orr.w	r2, r2, #1
 801939c:	b2d2      	uxtb	r2, r2
 801939e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80193a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193a2:	691b      	ldr	r3, [r3, #16]
 80193a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	4619      	mov	r1, r3
 80193ae:	4610      	mov	r0, r2
 80193b0:	f7fc f9a7 	bl	8015702 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80193b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193b6:	691b      	ldr	r3, [r3, #16]
 80193b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80193c2:	4608      	mov	r0, r1
 80193c4:	f7fc f9c9 	bl	801575a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80193c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193ca:	691b      	ldr	r3, [r3, #16]
 80193cc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80193d6:	4608      	mov	r0, r1
 80193d8:	f7fc f9bf 	bl	801575a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80193dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193de:	691b      	ldr	r3, [r3, #16]
 80193e0:	330c      	adds	r3, #12
 80193e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7fc f98c 	bl	8015702 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80193ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193ec:	691b      	ldr	r3, [r3, #16]
 80193ee:	3315      	adds	r3, #21
 80193f0:	2200      	movs	r2, #0
 80193f2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80193f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193f6:	691b      	ldr	r3, [r3, #16]
 80193f8:	3310      	adds	r3, #16
 80193fa:	2100      	movs	r1, #0
 80193fc:	4618      	mov	r0, r3
 80193fe:	f7fc f980 	bl	8015702 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8019402:	f107 0308 	add.w	r3, r7, #8
 8019406:	4618      	mov	r0, r3
 8019408:	f7fd ff9e 	bl	8017348 <store_xdir>
 801940c:	4603      	mov	r3, r0
 801940e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8019412:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019416:	2b00      	cmp	r3, #0
 8019418:	d15b      	bne.n	80194d2 <f_sync+0x230>
							res = sync_fs(fs);
 801941a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801941c:	4618      	mov	r0, r3
 801941e:	f7fc fc81 	bl	8015d24 <sync_fs>
 8019422:	4603      	mov	r3, r0
 8019424:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801942e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019432:	b2da      	uxtb	r2, r3
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801943a:	e04a      	b.n	80194d2 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801943c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019442:	4619      	mov	r1, r3
 8019444:	4610      	mov	r0, r2
 8019446:	f7fc fc3f 	bl	8015cc8 <move_window>
 801944a:	4603      	mov	r3, r0
 801944c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8019450:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019454:	2b00      	cmp	r3, #0
 8019456:	d13c      	bne.n	80194d2 <f_sync+0x230>
					dir = fp->dir_ptr;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801945c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801945e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019460:	330b      	adds	r3, #11
 8019462:	781a      	ldrb	r2, [r3, #0]
 8019464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019466:	330b      	adds	r3, #11
 8019468:	f042 0220 	orr.w	r2, r2, #32
 801946c:	b2d2      	uxtb	r2, r2
 801946e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	6818      	ldr	r0, [r3, #0]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	689b      	ldr	r3, [r3, #8]
 8019478:	461a      	mov	r2, r3
 801947a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801947c:	f7fd fbfd 	bl	8016c7a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019482:	f103 001c 	add.w	r0, r3, #28
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801948c:	4613      	mov	r3, r2
 801948e:	4619      	mov	r1, r3
 8019490:	f7fc f937 	bl	8015702 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019496:	3316      	adds	r3, #22
 8019498:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801949a:	4618      	mov	r0, r3
 801949c:	f7fc f931 	bl	8015702 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80194a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80194a2:	3312      	adds	r3, #18
 80194a4:	2100      	movs	r1, #0
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7fc f910 	bl	80156cc <st_word>
					fs->wflag = 1;
 80194ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80194ae:	2201      	movs	r2, #1
 80194b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80194b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7fc fc35 	bl	8015d24 <sync_fs>
 80194ba:	4603      	mov	r3, r0
 80194bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80194c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80194ca:	b2da      	uxtb	r2, r3
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80194d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3768      	adds	r7, #104	@ 0x68
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}

080194de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80194de:	b580      	push	{r7, lr}
 80194e0:	b084      	sub	sp, #16
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80194e6:	6878      	ldr	r0, [r7, #4]
 80194e8:	f7ff fedb 	bl	80192a2 <f_sync>
 80194ec:	4603      	mov	r3, r0
 80194ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80194f0:	7bfb      	ldrb	r3, [r7, #15]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d118      	bne.n	8019528 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f107 0208 	add.w	r2, r7, #8
 80194fc:	4611      	mov	r1, r2
 80194fe:	4618      	mov	r0, r3
 8019500:	f7ff f9e2 	bl	80188c8 <validate>
 8019504:	4603      	mov	r3, r0
 8019506:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019508:	7bfb      	ldrb	r3, [r7, #15]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d10c      	bne.n	8019528 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019512:	4618      	mov	r0, r3
 8019514:	f7fc fb34 	bl	8015b80 <dec_lock>
 8019518:	4603      	mov	r3, r0
 801951a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801951c:	7bfb      	ldrb	r3, [r7, #15]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d102      	bne.n	8019528 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2200      	movs	r2, #0
 8019526:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019528:	7bfb      	ldrb	r3, [r7, #15]
}
 801952a:	4618      	mov	r0, r3
 801952c:	3710      	adds	r7, #16
 801952e:	46bd      	mov	sp, r7
 8019530:	bd80      	pop	{r7, pc}
	...

08019534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019534:	b480      	push	{r7}
 8019536:	b087      	sub	sp, #28
 8019538:	af00      	add	r7, sp, #0
 801953a:	60f8      	str	r0, [r7, #12]
 801953c:	60b9      	str	r1, [r7, #8]
 801953e:	4613      	mov	r3, r2
 8019540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019542:	2301      	movs	r3, #1
 8019544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019546:	2300      	movs	r3, #0
 8019548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801954a:	4b1f      	ldr	r3, [pc, #124]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 801954c:	7a5b      	ldrb	r3, [r3, #9]
 801954e:	b2db      	uxtb	r3, r3
 8019550:	2b00      	cmp	r3, #0
 8019552:	d131      	bne.n	80195b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019554:	4b1c      	ldr	r3, [pc, #112]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 8019556:	7a5b      	ldrb	r3, [r3, #9]
 8019558:	b2db      	uxtb	r3, r3
 801955a:	461a      	mov	r2, r3
 801955c:	4b1a      	ldr	r3, [pc, #104]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 801955e:	2100      	movs	r1, #0
 8019560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019562:	4b19      	ldr	r3, [pc, #100]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 8019564:	7a5b      	ldrb	r3, [r3, #9]
 8019566:	b2db      	uxtb	r3, r3
 8019568:	4a17      	ldr	r2, [pc, #92]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 801956a:	009b      	lsls	r3, r3, #2
 801956c:	4413      	add	r3, r2
 801956e:	68fa      	ldr	r2, [r7, #12]
 8019570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019572:	4b15      	ldr	r3, [pc, #84]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 8019574:	7a5b      	ldrb	r3, [r3, #9]
 8019576:	b2db      	uxtb	r3, r3
 8019578:	461a      	mov	r2, r3
 801957a:	4b13      	ldr	r3, [pc, #76]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 801957c:	4413      	add	r3, r2
 801957e:	79fa      	ldrb	r2, [r7, #7]
 8019580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019582:	4b11      	ldr	r3, [pc, #68]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 8019584:	7a5b      	ldrb	r3, [r3, #9]
 8019586:	b2db      	uxtb	r3, r3
 8019588:	1c5a      	adds	r2, r3, #1
 801958a:	b2d1      	uxtb	r1, r2
 801958c:	4a0e      	ldr	r2, [pc, #56]	@ (80195c8 <FATFS_LinkDriverEx+0x94>)
 801958e:	7251      	strb	r1, [r2, #9]
 8019590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019592:	7dbb      	ldrb	r3, [r7, #22]
 8019594:	3330      	adds	r3, #48	@ 0x30
 8019596:	b2da      	uxtb	r2, r3
 8019598:	68bb      	ldr	r3, [r7, #8]
 801959a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801959c:	68bb      	ldr	r3, [r7, #8]
 801959e:	3301      	adds	r3, #1
 80195a0:	223a      	movs	r2, #58	@ 0x3a
 80195a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	3302      	adds	r3, #2
 80195a8:	222f      	movs	r2, #47	@ 0x2f
 80195aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	3303      	adds	r3, #3
 80195b0:	2200      	movs	r2, #0
 80195b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80195b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	371c      	adds	r7, #28
 80195be:	46bd      	mov	sp, r7
 80195c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c4:	4770      	bx	lr
 80195c6:	bf00      	nop
 80195c8:	24001670 	.word	0x24001670

080195cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b082      	sub	sp, #8
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
 80195d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80195d6:	2200      	movs	r2, #0
 80195d8:	6839      	ldr	r1, [r7, #0]
 80195da:	6878      	ldr	r0, [r7, #4]
 80195dc:	f7ff ffaa 	bl	8019534 <FATFS_LinkDriverEx>
 80195e0:	4603      	mov	r3, r0
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3708      	adds	r7, #8
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
	...

080195ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80195ec:	b480      	push	{r7}
 80195ee:	b085      	sub	sp, #20
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	4603      	mov	r3, r0
 80195f4:	6039      	str	r1, [r7, #0]
 80195f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80195f8:	88fb      	ldrh	r3, [r7, #6]
 80195fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80195fc:	d802      	bhi.n	8019604 <ff_convert+0x18>
		c = chr;
 80195fe:	88fb      	ldrh	r3, [r7, #6]
 8019600:	81fb      	strh	r3, [r7, #14]
 8019602:	e025      	b.n	8019650 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d00b      	beq.n	8019622 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801960a:	88fb      	ldrh	r3, [r7, #6]
 801960c:	2bff      	cmp	r3, #255	@ 0xff
 801960e:	d805      	bhi.n	801961c <ff_convert+0x30>
 8019610:	88fb      	ldrh	r3, [r7, #6]
 8019612:	3b80      	subs	r3, #128	@ 0x80
 8019614:	4a12      	ldr	r2, [pc, #72]	@ (8019660 <ff_convert+0x74>)
 8019616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801961a:	e000      	b.n	801961e <ff_convert+0x32>
 801961c:	2300      	movs	r3, #0
 801961e:	81fb      	strh	r3, [r7, #14]
 8019620:	e016      	b.n	8019650 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019622:	2300      	movs	r3, #0
 8019624:	81fb      	strh	r3, [r7, #14]
 8019626:	e009      	b.n	801963c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019628:	89fb      	ldrh	r3, [r7, #14]
 801962a:	4a0d      	ldr	r2, [pc, #52]	@ (8019660 <ff_convert+0x74>)
 801962c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019630:	88fa      	ldrh	r2, [r7, #6]
 8019632:	429a      	cmp	r2, r3
 8019634:	d006      	beq.n	8019644 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019636:	89fb      	ldrh	r3, [r7, #14]
 8019638:	3301      	adds	r3, #1
 801963a:	81fb      	strh	r3, [r7, #14]
 801963c:	89fb      	ldrh	r3, [r7, #14]
 801963e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019640:	d9f2      	bls.n	8019628 <ff_convert+0x3c>
 8019642:	e000      	b.n	8019646 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019644:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019646:	89fb      	ldrh	r3, [r7, #14]
 8019648:	3380      	adds	r3, #128	@ 0x80
 801964a:	b29b      	uxth	r3, r3
 801964c:	b2db      	uxtb	r3, r3
 801964e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019650:	89fb      	ldrh	r3, [r7, #14]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3714      	adds	r7, #20
 8019656:	46bd      	mov	sp, r7
 8019658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965c:	4770      	bx	lr
 801965e:	bf00      	nop
 8019660:	0801b33c 	.word	0x0801b33c

08019664 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8019664:	b480      	push	{r7}
 8019666:	b087      	sub	sp, #28
 8019668:	af00      	add	r7, sp, #0
 801966a:	4603      	mov	r3, r0
 801966c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801966e:	88fb      	ldrh	r3, [r7, #6]
 8019670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019674:	d201      	bcs.n	801967a <ff_wtoupper+0x16>
 8019676:	4b3e      	ldr	r3, [pc, #248]	@ (8019770 <ff_wtoupper+0x10c>)
 8019678:	e000      	b.n	801967c <ff_wtoupper+0x18>
 801967a:	4b3e      	ldr	r3, [pc, #248]	@ (8019774 <ff_wtoupper+0x110>)
 801967c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	1c9a      	adds	r2, r3, #2
 8019682:	617a      	str	r2, [r7, #20]
 8019684:	881b      	ldrh	r3, [r3, #0]
 8019686:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019688:	8a7b      	ldrh	r3, [r7, #18]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d068      	beq.n	8019760 <ff_wtoupper+0xfc>
 801968e:	88fa      	ldrh	r2, [r7, #6]
 8019690:	8a7b      	ldrh	r3, [r7, #18]
 8019692:	429a      	cmp	r2, r3
 8019694:	d364      	bcc.n	8019760 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	1c9a      	adds	r2, r3, #2
 801969a:	617a      	str	r2, [r7, #20]
 801969c:	881b      	ldrh	r3, [r3, #0]
 801969e:	823b      	strh	r3, [r7, #16]
 80196a0:	8a3b      	ldrh	r3, [r7, #16]
 80196a2:	0a1b      	lsrs	r3, r3, #8
 80196a4:	81fb      	strh	r3, [r7, #14]
 80196a6:	8a3b      	ldrh	r3, [r7, #16]
 80196a8:	b2db      	uxtb	r3, r3
 80196aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80196ac:	88fa      	ldrh	r2, [r7, #6]
 80196ae:	8a79      	ldrh	r1, [r7, #18]
 80196b0:	8a3b      	ldrh	r3, [r7, #16]
 80196b2:	440b      	add	r3, r1
 80196b4:	429a      	cmp	r2, r3
 80196b6:	da49      	bge.n	801974c <ff_wtoupper+0xe8>
			switch (cmd) {
 80196b8:	89fb      	ldrh	r3, [r7, #14]
 80196ba:	2b08      	cmp	r3, #8
 80196bc:	d84f      	bhi.n	801975e <ff_wtoupper+0xfa>
 80196be:	a201      	add	r2, pc, #4	@ (adr r2, 80196c4 <ff_wtoupper+0x60>)
 80196c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196c4:	080196e9 	.word	0x080196e9
 80196c8:	080196fb 	.word	0x080196fb
 80196cc:	08019711 	.word	0x08019711
 80196d0:	08019719 	.word	0x08019719
 80196d4:	08019721 	.word	0x08019721
 80196d8:	08019729 	.word	0x08019729
 80196dc:	08019731 	.word	0x08019731
 80196e0:	08019739 	.word	0x08019739
 80196e4:	08019741 	.word	0x08019741
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80196e8:	88fa      	ldrh	r2, [r7, #6]
 80196ea:	8a7b      	ldrh	r3, [r7, #18]
 80196ec:	1ad3      	subs	r3, r2, r3
 80196ee:	005b      	lsls	r3, r3, #1
 80196f0:	697a      	ldr	r2, [r7, #20]
 80196f2:	4413      	add	r3, r2
 80196f4:	881b      	ldrh	r3, [r3, #0]
 80196f6:	80fb      	strh	r3, [r7, #6]
 80196f8:	e027      	b.n	801974a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80196fa:	88fa      	ldrh	r2, [r7, #6]
 80196fc:	8a7b      	ldrh	r3, [r7, #18]
 80196fe:	1ad3      	subs	r3, r2, r3
 8019700:	b29b      	uxth	r3, r3
 8019702:	f003 0301 	and.w	r3, r3, #1
 8019706:	b29b      	uxth	r3, r3
 8019708:	88fa      	ldrh	r2, [r7, #6]
 801970a:	1ad3      	subs	r3, r2, r3
 801970c:	80fb      	strh	r3, [r7, #6]
 801970e:	e01c      	b.n	801974a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019710:	88fb      	ldrh	r3, [r7, #6]
 8019712:	3b10      	subs	r3, #16
 8019714:	80fb      	strh	r3, [r7, #6]
 8019716:	e018      	b.n	801974a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019718:	88fb      	ldrh	r3, [r7, #6]
 801971a:	3b20      	subs	r3, #32
 801971c:	80fb      	strh	r3, [r7, #6]
 801971e:	e014      	b.n	801974a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019720:	88fb      	ldrh	r3, [r7, #6]
 8019722:	3b30      	subs	r3, #48	@ 0x30
 8019724:	80fb      	strh	r3, [r7, #6]
 8019726:	e010      	b.n	801974a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019728:	88fb      	ldrh	r3, [r7, #6]
 801972a:	3b1a      	subs	r3, #26
 801972c:	80fb      	strh	r3, [r7, #6]
 801972e:	e00c      	b.n	801974a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019730:	88fb      	ldrh	r3, [r7, #6]
 8019732:	3308      	adds	r3, #8
 8019734:	80fb      	strh	r3, [r7, #6]
 8019736:	e008      	b.n	801974a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019738:	88fb      	ldrh	r3, [r7, #6]
 801973a:	3b50      	subs	r3, #80	@ 0x50
 801973c:	80fb      	strh	r3, [r7, #6]
 801973e:	e004      	b.n	801974a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019740:	88fb      	ldrh	r3, [r7, #6]
 8019742:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8019746:	80fb      	strh	r3, [r7, #6]
 8019748:	bf00      	nop
			}
			break;
 801974a:	e008      	b.n	801975e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801974c:	89fb      	ldrh	r3, [r7, #14]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d195      	bne.n	801967e <ff_wtoupper+0x1a>
 8019752:	8a3b      	ldrh	r3, [r7, #16]
 8019754:	005b      	lsls	r3, r3, #1
 8019756:	697a      	ldr	r2, [r7, #20]
 8019758:	4413      	add	r3, r2
 801975a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801975c:	e78f      	b.n	801967e <ff_wtoupper+0x1a>
			break;
 801975e:	bf00      	nop
	}

	return chr;
 8019760:	88fb      	ldrh	r3, [r7, #6]
}
 8019762:	4618      	mov	r0, r3
 8019764:	371c      	adds	r7, #28
 8019766:	46bd      	mov	sp, r7
 8019768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976c:	4770      	bx	lr
 801976e:	bf00      	nop
 8019770:	0801b43c 	.word	0x0801b43c
 8019774:	0801b630 	.word	0x0801b630

08019778 <std>:
 8019778:	2300      	movs	r3, #0
 801977a:	b510      	push	{r4, lr}
 801977c:	4604      	mov	r4, r0
 801977e:	e9c0 3300 	strd	r3, r3, [r0]
 8019782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019786:	6083      	str	r3, [r0, #8]
 8019788:	8181      	strh	r1, [r0, #12]
 801978a:	6643      	str	r3, [r0, #100]	@ 0x64
 801978c:	81c2      	strh	r2, [r0, #14]
 801978e:	6183      	str	r3, [r0, #24]
 8019790:	4619      	mov	r1, r3
 8019792:	2208      	movs	r2, #8
 8019794:	305c      	adds	r0, #92	@ 0x5c
 8019796:	f000 f926 	bl	80199e6 <memset>
 801979a:	4b0d      	ldr	r3, [pc, #52]	@ (80197d0 <std+0x58>)
 801979c:	6263      	str	r3, [r4, #36]	@ 0x24
 801979e:	4b0d      	ldr	r3, [pc, #52]	@ (80197d4 <std+0x5c>)
 80197a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80197a2:	4b0d      	ldr	r3, [pc, #52]	@ (80197d8 <std+0x60>)
 80197a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80197a6:	4b0d      	ldr	r3, [pc, #52]	@ (80197dc <std+0x64>)
 80197a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80197aa:	4b0d      	ldr	r3, [pc, #52]	@ (80197e0 <std+0x68>)
 80197ac:	6224      	str	r4, [r4, #32]
 80197ae:	429c      	cmp	r4, r3
 80197b0:	d006      	beq.n	80197c0 <std+0x48>
 80197b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80197b6:	4294      	cmp	r4, r2
 80197b8:	d002      	beq.n	80197c0 <std+0x48>
 80197ba:	33d0      	adds	r3, #208	@ 0xd0
 80197bc:	429c      	cmp	r4, r3
 80197be:	d105      	bne.n	80197cc <std+0x54>
 80197c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80197c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197c8:	f000 b986 	b.w	8019ad8 <__retarget_lock_init_recursive>
 80197cc:	bd10      	pop	{r4, pc}
 80197ce:	bf00      	nop
 80197d0:	08019961 	.word	0x08019961
 80197d4:	08019983 	.word	0x08019983
 80197d8:	080199bb 	.word	0x080199bb
 80197dc:	080199df 	.word	0x080199df
 80197e0:	2400167c 	.word	0x2400167c

080197e4 <stdio_exit_handler>:
 80197e4:	4a02      	ldr	r2, [pc, #8]	@ (80197f0 <stdio_exit_handler+0xc>)
 80197e6:	4903      	ldr	r1, [pc, #12]	@ (80197f4 <stdio_exit_handler+0x10>)
 80197e8:	4803      	ldr	r0, [pc, #12]	@ (80197f8 <stdio_exit_handler+0x14>)
 80197ea:	f000 b869 	b.w	80198c0 <_fwalk_sglue>
 80197ee:	bf00      	nop
 80197f0:	24000238 	.word	0x24000238
 80197f4:	0801a645 	.word	0x0801a645
 80197f8:	24000248 	.word	0x24000248

080197fc <cleanup_stdio>:
 80197fc:	6841      	ldr	r1, [r0, #4]
 80197fe:	4b0c      	ldr	r3, [pc, #48]	@ (8019830 <cleanup_stdio+0x34>)
 8019800:	4299      	cmp	r1, r3
 8019802:	b510      	push	{r4, lr}
 8019804:	4604      	mov	r4, r0
 8019806:	d001      	beq.n	801980c <cleanup_stdio+0x10>
 8019808:	f000 ff1c 	bl	801a644 <_fflush_r>
 801980c:	68a1      	ldr	r1, [r4, #8]
 801980e:	4b09      	ldr	r3, [pc, #36]	@ (8019834 <cleanup_stdio+0x38>)
 8019810:	4299      	cmp	r1, r3
 8019812:	d002      	beq.n	801981a <cleanup_stdio+0x1e>
 8019814:	4620      	mov	r0, r4
 8019816:	f000 ff15 	bl	801a644 <_fflush_r>
 801981a:	68e1      	ldr	r1, [r4, #12]
 801981c:	4b06      	ldr	r3, [pc, #24]	@ (8019838 <cleanup_stdio+0x3c>)
 801981e:	4299      	cmp	r1, r3
 8019820:	d004      	beq.n	801982c <cleanup_stdio+0x30>
 8019822:	4620      	mov	r0, r4
 8019824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019828:	f000 bf0c 	b.w	801a644 <_fflush_r>
 801982c:	bd10      	pop	{r4, pc}
 801982e:	bf00      	nop
 8019830:	2400167c 	.word	0x2400167c
 8019834:	240016e4 	.word	0x240016e4
 8019838:	2400174c 	.word	0x2400174c

0801983c <global_stdio_init.part.0>:
 801983c:	b510      	push	{r4, lr}
 801983e:	4b0b      	ldr	r3, [pc, #44]	@ (801986c <global_stdio_init.part.0+0x30>)
 8019840:	4c0b      	ldr	r4, [pc, #44]	@ (8019870 <global_stdio_init.part.0+0x34>)
 8019842:	4a0c      	ldr	r2, [pc, #48]	@ (8019874 <global_stdio_init.part.0+0x38>)
 8019844:	601a      	str	r2, [r3, #0]
 8019846:	4620      	mov	r0, r4
 8019848:	2200      	movs	r2, #0
 801984a:	2104      	movs	r1, #4
 801984c:	f7ff ff94 	bl	8019778 <std>
 8019850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019854:	2201      	movs	r2, #1
 8019856:	2109      	movs	r1, #9
 8019858:	f7ff ff8e 	bl	8019778 <std>
 801985c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019860:	2202      	movs	r2, #2
 8019862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019866:	2112      	movs	r1, #18
 8019868:	f7ff bf86 	b.w	8019778 <std>
 801986c:	240017b4 	.word	0x240017b4
 8019870:	2400167c 	.word	0x2400167c
 8019874:	080197e5 	.word	0x080197e5

08019878 <__sfp_lock_acquire>:
 8019878:	4801      	ldr	r0, [pc, #4]	@ (8019880 <__sfp_lock_acquire+0x8>)
 801987a:	f000 b92e 	b.w	8019ada <__retarget_lock_acquire_recursive>
 801987e:	bf00      	nop
 8019880:	240017bd 	.word	0x240017bd

08019884 <__sfp_lock_release>:
 8019884:	4801      	ldr	r0, [pc, #4]	@ (801988c <__sfp_lock_release+0x8>)
 8019886:	f000 b929 	b.w	8019adc <__retarget_lock_release_recursive>
 801988a:	bf00      	nop
 801988c:	240017bd 	.word	0x240017bd

08019890 <__sinit>:
 8019890:	b510      	push	{r4, lr}
 8019892:	4604      	mov	r4, r0
 8019894:	f7ff fff0 	bl	8019878 <__sfp_lock_acquire>
 8019898:	6a23      	ldr	r3, [r4, #32]
 801989a:	b11b      	cbz	r3, 80198a4 <__sinit+0x14>
 801989c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198a0:	f7ff bff0 	b.w	8019884 <__sfp_lock_release>
 80198a4:	4b04      	ldr	r3, [pc, #16]	@ (80198b8 <__sinit+0x28>)
 80198a6:	6223      	str	r3, [r4, #32]
 80198a8:	4b04      	ldr	r3, [pc, #16]	@ (80198bc <__sinit+0x2c>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d1f5      	bne.n	801989c <__sinit+0xc>
 80198b0:	f7ff ffc4 	bl	801983c <global_stdio_init.part.0>
 80198b4:	e7f2      	b.n	801989c <__sinit+0xc>
 80198b6:	bf00      	nop
 80198b8:	080197fd 	.word	0x080197fd
 80198bc:	240017b4 	.word	0x240017b4

080198c0 <_fwalk_sglue>:
 80198c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198c4:	4607      	mov	r7, r0
 80198c6:	4688      	mov	r8, r1
 80198c8:	4614      	mov	r4, r2
 80198ca:	2600      	movs	r6, #0
 80198cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198d0:	f1b9 0901 	subs.w	r9, r9, #1
 80198d4:	d505      	bpl.n	80198e2 <_fwalk_sglue+0x22>
 80198d6:	6824      	ldr	r4, [r4, #0]
 80198d8:	2c00      	cmp	r4, #0
 80198da:	d1f7      	bne.n	80198cc <_fwalk_sglue+0xc>
 80198dc:	4630      	mov	r0, r6
 80198de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198e2:	89ab      	ldrh	r3, [r5, #12]
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	d907      	bls.n	80198f8 <_fwalk_sglue+0x38>
 80198e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198ec:	3301      	adds	r3, #1
 80198ee:	d003      	beq.n	80198f8 <_fwalk_sglue+0x38>
 80198f0:	4629      	mov	r1, r5
 80198f2:	4638      	mov	r0, r7
 80198f4:	47c0      	blx	r8
 80198f6:	4306      	orrs	r6, r0
 80198f8:	3568      	adds	r5, #104	@ 0x68
 80198fa:	e7e9      	b.n	80198d0 <_fwalk_sglue+0x10>

080198fc <iprintf>:
 80198fc:	b40f      	push	{r0, r1, r2, r3}
 80198fe:	b507      	push	{r0, r1, r2, lr}
 8019900:	4906      	ldr	r1, [pc, #24]	@ (801991c <iprintf+0x20>)
 8019902:	ab04      	add	r3, sp, #16
 8019904:	6808      	ldr	r0, [r1, #0]
 8019906:	f853 2b04 	ldr.w	r2, [r3], #4
 801990a:	6881      	ldr	r1, [r0, #8]
 801990c:	9301      	str	r3, [sp, #4]
 801990e:	f000 fb6f 	bl	8019ff0 <_vfiprintf_r>
 8019912:	b003      	add	sp, #12
 8019914:	f85d eb04 	ldr.w	lr, [sp], #4
 8019918:	b004      	add	sp, #16
 801991a:	4770      	bx	lr
 801991c:	24000244 	.word	0x24000244

08019920 <siprintf>:
 8019920:	b40e      	push	{r1, r2, r3}
 8019922:	b500      	push	{lr}
 8019924:	b09c      	sub	sp, #112	@ 0x70
 8019926:	ab1d      	add	r3, sp, #116	@ 0x74
 8019928:	9002      	str	r0, [sp, #8]
 801992a:	9006      	str	r0, [sp, #24]
 801992c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019930:	4809      	ldr	r0, [pc, #36]	@ (8019958 <siprintf+0x38>)
 8019932:	9107      	str	r1, [sp, #28]
 8019934:	9104      	str	r1, [sp, #16]
 8019936:	4909      	ldr	r1, [pc, #36]	@ (801995c <siprintf+0x3c>)
 8019938:	f853 2b04 	ldr.w	r2, [r3], #4
 801993c:	9105      	str	r1, [sp, #20]
 801993e:	6800      	ldr	r0, [r0, #0]
 8019940:	9301      	str	r3, [sp, #4]
 8019942:	a902      	add	r1, sp, #8
 8019944:	f000 fa2e 	bl	8019da4 <_svfiprintf_r>
 8019948:	9b02      	ldr	r3, [sp, #8]
 801994a:	2200      	movs	r2, #0
 801994c:	701a      	strb	r2, [r3, #0]
 801994e:	b01c      	add	sp, #112	@ 0x70
 8019950:	f85d eb04 	ldr.w	lr, [sp], #4
 8019954:	b003      	add	sp, #12
 8019956:	4770      	bx	lr
 8019958:	24000244 	.word	0x24000244
 801995c:	ffff0208 	.word	0xffff0208

08019960 <__sread>:
 8019960:	b510      	push	{r4, lr}
 8019962:	460c      	mov	r4, r1
 8019964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019968:	f000 f868 	bl	8019a3c <_read_r>
 801996c:	2800      	cmp	r0, #0
 801996e:	bfab      	itete	ge
 8019970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019972:	89a3      	ldrhlt	r3, [r4, #12]
 8019974:	181b      	addge	r3, r3, r0
 8019976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801997a:	bfac      	ite	ge
 801997c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801997e:	81a3      	strhlt	r3, [r4, #12]
 8019980:	bd10      	pop	{r4, pc}

08019982 <__swrite>:
 8019982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019986:	461f      	mov	r7, r3
 8019988:	898b      	ldrh	r3, [r1, #12]
 801998a:	05db      	lsls	r3, r3, #23
 801998c:	4605      	mov	r5, r0
 801998e:	460c      	mov	r4, r1
 8019990:	4616      	mov	r6, r2
 8019992:	d505      	bpl.n	80199a0 <__swrite+0x1e>
 8019994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019998:	2302      	movs	r3, #2
 801999a:	2200      	movs	r2, #0
 801999c:	f000 f83c 	bl	8019a18 <_lseek_r>
 80199a0:	89a3      	ldrh	r3, [r4, #12]
 80199a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80199aa:	81a3      	strh	r3, [r4, #12]
 80199ac:	4632      	mov	r2, r6
 80199ae:	463b      	mov	r3, r7
 80199b0:	4628      	mov	r0, r5
 80199b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199b6:	f000 b853 	b.w	8019a60 <_write_r>

080199ba <__sseek>:
 80199ba:	b510      	push	{r4, lr}
 80199bc:	460c      	mov	r4, r1
 80199be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199c2:	f000 f829 	bl	8019a18 <_lseek_r>
 80199c6:	1c43      	adds	r3, r0, #1
 80199c8:	89a3      	ldrh	r3, [r4, #12]
 80199ca:	bf15      	itete	ne
 80199cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80199ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80199d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80199d6:	81a3      	strheq	r3, [r4, #12]
 80199d8:	bf18      	it	ne
 80199da:	81a3      	strhne	r3, [r4, #12]
 80199dc:	bd10      	pop	{r4, pc}

080199de <__sclose>:
 80199de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199e2:	f000 b809 	b.w	80199f8 <_close_r>

080199e6 <memset>:
 80199e6:	4402      	add	r2, r0
 80199e8:	4603      	mov	r3, r0
 80199ea:	4293      	cmp	r3, r2
 80199ec:	d100      	bne.n	80199f0 <memset+0xa>
 80199ee:	4770      	bx	lr
 80199f0:	f803 1b01 	strb.w	r1, [r3], #1
 80199f4:	e7f9      	b.n	80199ea <memset+0x4>
	...

080199f8 <_close_r>:
 80199f8:	b538      	push	{r3, r4, r5, lr}
 80199fa:	4d06      	ldr	r5, [pc, #24]	@ (8019a14 <_close_r+0x1c>)
 80199fc:	2300      	movs	r3, #0
 80199fe:	4604      	mov	r4, r0
 8019a00:	4608      	mov	r0, r1
 8019a02:	602b      	str	r3, [r5, #0]
 8019a04:	f7ea fba7 	bl	8004156 <_close>
 8019a08:	1c43      	adds	r3, r0, #1
 8019a0a:	d102      	bne.n	8019a12 <_close_r+0x1a>
 8019a0c:	682b      	ldr	r3, [r5, #0]
 8019a0e:	b103      	cbz	r3, 8019a12 <_close_r+0x1a>
 8019a10:	6023      	str	r3, [r4, #0]
 8019a12:	bd38      	pop	{r3, r4, r5, pc}
 8019a14:	240017b8 	.word	0x240017b8

08019a18 <_lseek_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4d07      	ldr	r5, [pc, #28]	@ (8019a38 <_lseek_r+0x20>)
 8019a1c:	4604      	mov	r4, r0
 8019a1e:	4608      	mov	r0, r1
 8019a20:	4611      	mov	r1, r2
 8019a22:	2200      	movs	r2, #0
 8019a24:	602a      	str	r2, [r5, #0]
 8019a26:	461a      	mov	r2, r3
 8019a28:	f7ea fbbc 	bl	80041a4 <_lseek>
 8019a2c:	1c43      	adds	r3, r0, #1
 8019a2e:	d102      	bne.n	8019a36 <_lseek_r+0x1e>
 8019a30:	682b      	ldr	r3, [r5, #0]
 8019a32:	b103      	cbz	r3, 8019a36 <_lseek_r+0x1e>
 8019a34:	6023      	str	r3, [r4, #0]
 8019a36:	bd38      	pop	{r3, r4, r5, pc}
 8019a38:	240017b8 	.word	0x240017b8

08019a3c <_read_r>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	4d07      	ldr	r5, [pc, #28]	@ (8019a5c <_read_r+0x20>)
 8019a40:	4604      	mov	r4, r0
 8019a42:	4608      	mov	r0, r1
 8019a44:	4611      	mov	r1, r2
 8019a46:	2200      	movs	r2, #0
 8019a48:	602a      	str	r2, [r5, #0]
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	f7ea fb4a 	bl	80040e4 <_read>
 8019a50:	1c43      	adds	r3, r0, #1
 8019a52:	d102      	bne.n	8019a5a <_read_r+0x1e>
 8019a54:	682b      	ldr	r3, [r5, #0]
 8019a56:	b103      	cbz	r3, 8019a5a <_read_r+0x1e>
 8019a58:	6023      	str	r3, [r4, #0]
 8019a5a:	bd38      	pop	{r3, r4, r5, pc}
 8019a5c:	240017b8 	.word	0x240017b8

08019a60 <_write_r>:
 8019a60:	b538      	push	{r3, r4, r5, lr}
 8019a62:	4d07      	ldr	r5, [pc, #28]	@ (8019a80 <_write_r+0x20>)
 8019a64:	4604      	mov	r4, r0
 8019a66:	4608      	mov	r0, r1
 8019a68:	4611      	mov	r1, r2
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	602a      	str	r2, [r5, #0]
 8019a6e:	461a      	mov	r2, r3
 8019a70:	f7ea fb55 	bl	800411e <_write>
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	d102      	bne.n	8019a7e <_write_r+0x1e>
 8019a78:	682b      	ldr	r3, [r5, #0]
 8019a7a:	b103      	cbz	r3, 8019a7e <_write_r+0x1e>
 8019a7c:	6023      	str	r3, [r4, #0]
 8019a7e:	bd38      	pop	{r3, r4, r5, pc}
 8019a80:	240017b8 	.word	0x240017b8

08019a84 <__errno>:
 8019a84:	4b01      	ldr	r3, [pc, #4]	@ (8019a8c <__errno+0x8>)
 8019a86:	6818      	ldr	r0, [r3, #0]
 8019a88:	4770      	bx	lr
 8019a8a:	bf00      	nop
 8019a8c:	24000244 	.word	0x24000244

08019a90 <__libc_init_array>:
 8019a90:	b570      	push	{r4, r5, r6, lr}
 8019a92:	4d0d      	ldr	r5, [pc, #52]	@ (8019ac8 <__libc_init_array+0x38>)
 8019a94:	4c0d      	ldr	r4, [pc, #52]	@ (8019acc <__libc_init_array+0x3c>)
 8019a96:	1b64      	subs	r4, r4, r5
 8019a98:	10a4      	asrs	r4, r4, #2
 8019a9a:	2600      	movs	r6, #0
 8019a9c:	42a6      	cmp	r6, r4
 8019a9e:	d109      	bne.n	8019ab4 <__libc_init_array+0x24>
 8019aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8019ad0 <__libc_init_array+0x40>)
 8019aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8019ad4 <__libc_init_array+0x44>)
 8019aa4:	f000 ff6e 	bl	801a984 <_init>
 8019aa8:	1b64      	subs	r4, r4, r5
 8019aaa:	10a4      	asrs	r4, r4, #2
 8019aac:	2600      	movs	r6, #0
 8019aae:	42a6      	cmp	r6, r4
 8019ab0:	d105      	bne.n	8019abe <__libc_init_array+0x2e>
 8019ab2:	bd70      	pop	{r4, r5, r6, pc}
 8019ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ab8:	4798      	blx	r3
 8019aba:	3601      	adds	r6, #1
 8019abc:	e7ee      	b.n	8019a9c <__libc_init_array+0xc>
 8019abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ac2:	4798      	blx	r3
 8019ac4:	3601      	adds	r6, #1
 8019ac6:	e7f2      	b.n	8019aae <__libc_init_array+0x1e>
 8019ac8:	0801b728 	.word	0x0801b728
 8019acc:	0801b728 	.word	0x0801b728
 8019ad0:	0801b728 	.word	0x0801b728
 8019ad4:	0801b72c 	.word	0x0801b72c

08019ad8 <__retarget_lock_init_recursive>:
 8019ad8:	4770      	bx	lr

08019ada <__retarget_lock_acquire_recursive>:
 8019ada:	4770      	bx	lr

08019adc <__retarget_lock_release_recursive>:
 8019adc:	4770      	bx	lr

08019ade <memcpy>:
 8019ade:	440a      	add	r2, r1
 8019ae0:	4291      	cmp	r1, r2
 8019ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8019ae6:	d100      	bne.n	8019aea <memcpy+0xc>
 8019ae8:	4770      	bx	lr
 8019aea:	b510      	push	{r4, lr}
 8019aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019af4:	4291      	cmp	r1, r2
 8019af6:	d1f9      	bne.n	8019aec <memcpy+0xe>
 8019af8:	bd10      	pop	{r4, pc}
	...

08019afc <_free_r>:
 8019afc:	b538      	push	{r3, r4, r5, lr}
 8019afe:	4605      	mov	r5, r0
 8019b00:	2900      	cmp	r1, #0
 8019b02:	d041      	beq.n	8019b88 <_free_r+0x8c>
 8019b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b08:	1f0c      	subs	r4, r1, #4
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	bfb8      	it	lt
 8019b0e:	18e4      	addlt	r4, r4, r3
 8019b10:	f000 f8e0 	bl	8019cd4 <__malloc_lock>
 8019b14:	4a1d      	ldr	r2, [pc, #116]	@ (8019b8c <_free_r+0x90>)
 8019b16:	6813      	ldr	r3, [r2, #0]
 8019b18:	b933      	cbnz	r3, 8019b28 <_free_r+0x2c>
 8019b1a:	6063      	str	r3, [r4, #4]
 8019b1c:	6014      	str	r4, [r2, #0]
 8019b1e:	4628      	mov	r0, r5
 8019b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b24:	f000 b8dc 	b.w	8019ce0 <__malloc_unlock>
 8019b28:	42a3      	cmp	r3, r4
 8019b2a:	d908      	bls.n	8019b3e <_free_r+0x42>
 8019b2c:	6820      	ldr	r0, [r4, #0]
 8019b2e:	1821      	adds	r1, r4, r0
 8019b30:	428b      	cmp	r3, r1
 8019b32:	bf01      	itttt	eq
 8019b34:	6819      	ldreq	r1, [r3, #0]
 8019b36:	685b      	ldreq	r3, [r3, #4]
 8019b38:	1809      	addeq	r1, r1, r0
 8019b3a:	6021      	streq	r1, [r4, #0]
 8019b3c:	e7ed      	b.n	8019b1a <_free_r+0x1e>
 8019b3e:	461a      	mov	r2, r3
 8019b40:	685b      	ldr	r3, [r3, #4]
 8019b42:	b10b      	cbz	r3, 8019b48 <_free_r+0x4c>
 8019b44:	42a3      	cmp	r3, r4
 8019b46:	d9fa      	bls.n	8019b3e <_free_r+0x42>
 8019b48:	6811      	ldr	r1, [r2, #0]
 8019b4a:	1850      	adds	r0, r2, r1
 8019b4c:	42a0      	cmp	r0, r4
 8019b4e:	d10b      	bne.n	8019b68 <_free_r+0x6c>
 8019b50:	6820      	ldr	r0, [r4, #0]
 8019b52:	4401      	add	r1, r0
 8019b54:	1850      	adds	r0, r2, r1
 8019b56:	4283      	cmp	r3, r0
 8019b58:	6011      	str	r1, [r2, #0]
 8019b5a:	d1e0      	bne.n	8019b1e <_free_r+0x22>
 8019b5c:	6818      	ldr	r0, [r3, #0]
 8019b5e:	685b      	ldr	r3, [r3, #4]
 8019b60:	6053      	str	r3, [r2, #4]
 8019b62:	4408      	add	r0, r1
 8019b64:	6010      	str	r0, [r2, #0]
 8019b66:	e7da      	b.n	8019b1e <_free_r+0x22>
 8019b68:	d902      	bls.n	8019b70 <_free_r+0x74>
 8019b6a:	230c      	movs	r3, #12
 8019b6c:	602b      	str	r3, [r5, #0]
 8019b6e:	e7d6      	b.n	8019b1e <_free_r+0x22>
 8019b70:	6820      	ldr	r0, [r4, #0]
 8019b72:	1821      	adds	r1, r4, r0
 8019b74:	428b      	cmp	r3, r1
 8019b76:	bf04      	itt	eq
 8019b78:	6819      	ldreq	r1, [r3, #0]
 8019b7a:	685b      	ldreq	r3, [r3, #4]
 8019b7c:	6063      	str	r3, [r4, #4]
 8019b7e:	bf04      	itt	eq
 8019b80:	1809      	addeq	r1, r1, r0
 8019b82:	6021      	streq	r1, [r4, #0]
 8019b84:	6054      	str	r4, [r2, #4]
 8019b86:	e7ca      	b.n	8019b1e <_free_r+0x22>
 8019b88:	bd38      	pop	{r3, r4, r5, pc}
 8019b8a:	bf00      	nop
 8019b8c:	240017c4 	.word	0x240017c4

08019b90 <sbrk_aligned>:
 8019b90:	b570      	push	{r4, r5, r6, lr}
 8019b92:	4e0f      	ldr	r6, [pc, #60]	@ (8019bd0 <sbrk_aligned+0x40>)
 8019b94:	460c      	mov	r4, r1
 8019b96:	6831      	ldr	r1, [r6, #0]
 8019b98:	4605      	mov	r5, r0
 8019b9a:	b911      	cbnz	r1, 8019ba2 <sbrk_aligned+0x12>
 8019b9c:	f000 fe28 	bl	801a7f0 <_sbrk_r>
 8019ba0:	6030      	str	r0, [r6, #0]
 8019ba2:	4621      	mov	r1, r4
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	f000 fe23 	bl	801a7f0 <_sbrk_r>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	d103      	bne.n	8019bb6 <sbrk_aligned+0x26>
 8019bae:	f04f 34ff 	mov.w	r4, #4294967295
 8019bb2:	4620      	mov	r0, r4
 8019bb4:	bd70      	pop	{r4, r5, r6, pc}
 8019bb6:	1cc4      	adds	r4, r0, #3
 8019bb8:	f024 0403 	bic.w	r4, r4, #3
 8019bbc:	42a0      	cmp	r0, r4
 8019bbe:	d0f8      	beq.n	8019bb2 <sbrk_aligned+0x22>
 8019bc0:	1a21      	subs	r1, r4, r0
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	f000 fe14 	bl	801a7f0 <_sbrk_r>
 8019bc8:	3001      	adds	r0, #1
 8019bca:	d1f2      	bne.n	8019bb2 <sbrk_aligned+0x22>
 8019bcc:	e7ef      	b.n	8019bae <sbrk_aligned+0x1e>
 8019bce:	bf00      	nop
 8019bd0:	240017c0 	.word	0x240017c0

08019bd4 <_malloc_r>:
 8019bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bd8:	1ccd      	adds	r5, r1, #3
 8019bda:	f025 0503 	bic.w	r5, r5, #3
 8019bde:	3508      	adds	r5, #8
 8019be0:	2d0c      	cmp	r5, #12
 8019be2:	bf38      	it	cc
 8019be4:	250c      	movcc	r5, #12
 8019be6:	2d00      	cmp	r5, #0
 8019be8:	4606      	mov	r6, r0
 8019bea:	db01      	blt.n	8019bf0 <_malloc_r+0x1c>
 8019bec:	42a9      	cmp	r1, r5
 8019bee:	d904      	bls.n	8019bfa <_malloc_r+0x26>
 8019bf0:	230c      	movs	r3, #12
 8019bf2:	6033      	str	r3, [r6, #0]
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019cd0 <_malloc_r+0xfc>
 8019bfe:	f000 f869 	bl	8019cd4 <__malloc_lock>
 8019c02:	f8d8 3000 	ldr.w	r3, [r8]
 8019c06:	461c      	mov	r4, r3
 8019c08:	bb44      	cbnz	r4, 8019c5c <_malloc_r+0x88>
 8019c0a:	4629      	mov	r1, r5
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	f7ff ffbf 	bl	8019b90 <sbrk_aligned>
 8019c12:	1c43      	adds	r3, r0, #1
 8019c14:	4604      	mov	r4, r0
 8019c16:	d158      	bne.n	8019cca <_malloc_r+0xf6>
 8019c18:	f8d8 4000 	ldr.w	r4, [r8]
 8019c1c:	4627      	mov	r7, r4
 8019c1e:	2f00      	cmp	r7, #0
 8019c20:	d143      	bne.n	8019caa <_malloc_r+0xd6>
 8019c22:	2c00      	cmp	r4, #0
 8019c24:	d04b      	beq.n	8019cbe <_malloc_r+0xea>
 8019c26:	6823      	ldr	r3, [r4, #0]
 8019c28:	4639      	mov	r1, r7
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	eb04 0903 	add.w	r9, r4, r3
 8019c30:	f000 fdde 	bl	801a7f0 <_sbrk_r>
 8019c34:	4581      	cmp	r9, r0
 8019c36:	d142      	bne.n	8019cbe <_malloc_r+0xea>
 8019c38:	6821      	ldr	r1, [r4, #0]
 8019c3a:	1a6d      	subs	r5, r5, r1
 8019c3c:	4629      	mov	r1, r5
 8019c3e:	4630      	mov	r0, r6
 8019c40:	f7ff ffa6 	bl	8019b90 <sbrk_aligned>
 8019c44:	3001      	adds	r0, #1
 8019c46:	d03a      	beq.n	8019cbe <_malloc_r+0xea>
 8019c48:	6823      	ldr	r3, [r4, #0]
 8019c4a:	442b      	add	r3, r5
 8019c4c:	6023      	str	r3, [r4, #0]
 8019c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8019c52:	685a      	ldr	r2, [r3, #4]
 8019c54:	bb62      	cbnz	r2, 8019cb0 <_malloc_r+0xdc>
 8019c56:	f8c8 7000 	str.w	r7, [r8]
 8019c5a:	e00f      	b.n	8019c7c <_malloc_r+0xa8>
 8019c5c:	6822      	ldr	r2, [r4, #0]
 8019c5e:	1b52      	subs	r2, r2, r5
 8019c60:	d420      	bmi.n	8019ca4 <_malloc_r+0xd0>
 8019c62:	2a0b      	cmp	r2, #11
 8019c64:	d917      	bls.n	8019c96 <_malloc_r+0xc2>
 8019c66:	1961      	adds	r1, r4, r5
 8019c68:	42a3      	cmp	r3, r4
 8019c6a:	6025      	str	r5, [r4, #0]
 8019c6c:	bf18      	it	ne
 8019c6e:	6059      	strne	r1, [r3, #4]
 8019c70:	6863      	ldr	r3, [r4, #4]
 8019c72:	bf08      	it	eq
 8019c74:	f8c8 1000 	streq.w	r1, [r8]
 8019c78:	5162      	str	r2, [r4, r5]
 8019c7a:	604b      	str	r3, [r1, #4]
 8019c7c:	4630      	mov	r0, r6
 8019c7e:	f000 f82f 	bl	8019ce0 <__malloc_unlock>
 8019c82:	f104 000b 	add.w	r0, r4, #11
 8019c86:	1d23      	adds	r3, r4, #4
 8019c88:	f020 0007 	bic.w	r0, r0, #7
 8019c8c:	1ac2      	subs	r2, r0, r3
 8019c8e:	bf1c      	itt	ne
 8019c90:	1a1b      	subne	r3, r3, r0
 8019c92:	50a3      	strne	r3, [r4, r2]
 8019c94:	e7af      	b.n	8019bf6 <_malloc_r+0x22>
 8019c96:	6862      	ldr	r2, [r4, #4]
 8019c98:	42a3      	cmp	r3, r4
 8019c9a:	bf0c      	ite	eq
 8019c9c:	f8c8 2000 	streq.w	r2, [r8]
 8019ca0:	605a      	strne	r2, [r3, #4]
 8019ca2:	e7eb      	b.n	8019c7c <_malloc_r+0xa8>
 8019ca4:	4623      	mov	r3, r4
 8019ca6:	6864      	ldr	r4, [r4, #4]
 8019ca8:	e7ae      	b.n	8019c08 <_malloc_r+0x34>
 8019caa:	463c      	mov	r4, r7
 8019cac:	687f      	ldr	r7, [r7, #4]
 8019cae:	e7b6      	b.n	8019c1e <_malloc_r+0x4a>
 8019cb0:	461a      	mov	r2, r3
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	42a3      	cmp	r3, r4
 8019cb6:	d1fb      	bne.n	8019cb0 <_malloc_r+0xdc>
 8019cb8:	2300      	movs	r3, #0
 8019cba:	6053      	str	r3, [r2, #4]
 8019cbc:	e7de      	b.n	8019c7c <_malloc_r+0xa8>
 8019cbe:	230c      	movs	r3, #12
 8019cc0:	6033      	str	r3, [r6, #0]
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	f000 f80c 	bl	8019ce0 <__malloc_unlock>
 8019cc8:	e794      	b.n	8019bf4 <_malloc_r+0x20>
 8019cca:	6005      	str	r5, [r0, #0]
 8019ccc:	e7d6      	b.n	8019c7c <_malloc_r+0xa8>
 8019cce:	bf00      	nop
 8019cd0:	240017c4 	.word	0x240017c4

08019cd4 <__malloc_lock>:
 8019cd4:	4801      	ldr	r0, [pc, #4]	@ (8019cdc <__malloc_lock+0x8>)
 8019cd6:	f7ff bf00 	b.w	8019ada <__retarget_lock_acquire_recursive>
 8019cda:	bf00      	nop
 8019cdc:	240017bc 	.word	0x240017bc

08019ce0 <__malloc_unlock>:
 8019ce0:	4801      	ldr	r0, [pc, #4]	@ (8019ce8 <__malloc_unlock+0x8>)
 8019ce2:	f7ff befb 	b.w	8019adc <__retarget_lock_release_recursive>
 8019ce6:	bf00      	nop
 8019ce8:	240017bc 	.word	0x240017bc

08019cec <__ssputs_r>:
 8019cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cf0:	688e      	ldr	r6, [r1, #8]
 8019cf2:	461f      	mov	r7, r3
 8019cf4:	42be      	cmp	r6, r7
 8019cf6:	680b      	ldr	r3, [r1, #0]
 8019cf8:	4682      	mov	sl, r0
 8019cfa:	460c      	mov	r4, r1
 8019cfc:	4690      	mov	r8, r2
 8019cfe:	d82d      	bhi.n	8019d5c <__ssputs_r+0x70>
 8019d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019d08:	d026      	beq.n	8019d58 <__ssputs_r+0x6c>
 8019d0a:	6965      	ldr	r5, [r4, #20]
 8019d0c:	6909      	ldr	r1, [r1, #16]
 8019d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d12:	eba3 0901 	sub.w	r9, r3, r1
 8019d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d1a:	1c7b      	adds	r3, r7, #1
 8019d1c:	444b      	add	r3, r9
 8019d1e:	106d      	asrs	r5, r5, #1
 8019d20:	429d      	cmp	r5, r3
 8019d22:	bf38      	it	cc
 8019d24:	461d      	movcc	r5, r3
 8019d26:	0553      	lsls	r3, r2, #21
 8019d28:	d527      	bpl.n	8019d7a <__ssputs_r+0x8e>
 8019d2a:	4629      	mov	r1, r5
 8019d2c:	f7ff ff52 	bl	8019bd4 <_malloc_r>
 8019d30:	4606      	mov	r6, r0
 8019d32:	b360      	cbz	r0, 8019d8e <__ssputs_r+0xa2>
 8019d34:	6921      	ldr	r1, [r4, #16]
 8019d36:	464a      	mov	r2, r9
 8019d38:	f7ff fed1 	bl	8019ade <memcpy>
 8019d3c:	89a3      	ldrh	r3, [r4, #12]
 8019d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d46:	81a3      	strh	r3, [r4, #12]
 8019d48:	6126      	str	r6, [r4, #16]
 8019d4a:	6165      	str	r5, [r4, #20]
 8019d4c:	444e      	add	r6, r9
 8019d4e:	eba5 0509 	sub.w	r5, r5, r9
 8019d52:	6026      	str	r6, [r4, #0]
 8019d54:	60a5      	str	r5, [r4, #8]
 8019d56:	463e      	mov	r6, r7
 8019d58:	42be      	cmp	r6, r7
 8019d5a:	d900      	bls.n	8019d5e <__ssputs_r+0x72>
 8019d5c:	463e      	mov	r6, r7
 8019d5e:	6820      	ldr	r0, [r4, #0]
 8019d60:	4632      	mov	r2, r6
 8019d62:	4641      	mov	r1, r8
 8019d64:	f000 fd2a 	bl	801a7bc <memmove>
 8019d68:	68a3      	ldr	r3, [r4, #8]
 8019d6a:	1b9b      	subs	r3, r3, r6
 8019d6c:	60a3      	str	r3, [r4, #8]
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	4433      	add	r3, r6
 8019d72:	6023      	str	r3, [r4, #0]
 8019d74:	2000      	movs	r0, #0
 8019d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d7a:	462a      	mov	r2, r5
 8019d7c:	f000 fd48 	bl	801a810 <_realloc_r>
 8019d80:	4606      	mov	r6, r0
 8019d82:	2800      	cmp	r0, #0
 8019d84:	d1e0      	bne.n	8019d48 <__ssputs_r+0x5c>
 8019d86:	6921      	ldr	r1, [r4, #16]
 8019d88:	4650      	mov	r0, sl
 8019d8a:	f7ff feb7 	bl	8019afc <_free_r>
 8019d8e:	230c      	movs	r3, #12
 8019d90:	f8ca 3000 	str.w	r3, [sl]
 8019d94:	89a3      	ldrh	r3, [r4, #12]
 8019d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d9a:	81a3      	strh	r3, [r4, #12]
 8019d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019da0:	e7e9      	b.n	8019d76 <__ssputs_r+0x8a>
	...

08019da4 <_svfiprintf_r>:
 8019da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	4698      	mov	r8, r3
 8019daa:	898b      	ldrh	r3, [r1, #12]
 8019dac:	061b      	lsls	r3, r3, #24
 8019dae:	b09d      	sub	sp, #116	@ 0x74
 8019db0:	4607      	mov	r7, r0
 8019db2:	460d      	mov	r5, r1
 8019db4:	4614      	mov	r4, r2
 8019db6:	d510      	bpl.n	8019dda <_svfiprintf_r+0x36>
 8019db8:	690b      	ldr	r3, [r1, #16]
 8019dba:	b973      	cbnz	r3, 8019dda <_svfiprintf_r+0x36>
 8019dbc:	2140      	movs	r1, #64	@ 0x40
 8019dbe:	f7ff ff09 	bl	8019bd4 <_malloc_r>
 8019dc2:	6028      	str	r0, [r5, #0]
 8019dc4:	6128      	str	r0, [r5, #16]
 8019dc6:	b930      	cbnz	r0, 8019dd6 <_svfiprintf_r+0x32>
 8019dc8:	230c      	movs	r3, #12
 8019dca:	603b      	str	r3, [r7, #0]
 8019dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8019dd0:	b01d      	add	sp, #116	@ 0x74
 8019dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd6:	2340      	movs	r3, #64	@ 0x40
 8019dd8:	616b      	str	r3, [r5, #20]
 8019dda:	2300      	movs	r3, #0
 8019ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dde:	2320      	movs	r3, #32
 8019de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019de8:	2330      	movs	r3, #48	@ 0x30
 8019dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019f88 <_svfiprintf_r+0x1e4>
 8019dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019df2:	f04f 0901 	mov.w	r9, #1
 8019df6:	4623      	mov	r3, r4
 8019df8:	469a      	mov	sl, r3
 8019dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019dfe:	b10a      	cbz	r2, 8019e04 <_svfiprintf_r+0x60>
 8019e00:	2a25      	cmp	r2, #37	@ 0x25
 8019e02:	d1f9      	bne.n	8019df8 <_svfiprintf_r+0x54>
 8019e04:	ebba 0b04 	subs.w	fp, sl, r4
 8019e08:	d00b      	beq.n	8019e22 <_svfiprintf_r+0x7e>
 8019e0a:	465b      	mov	r3, fp
 8019e0c:	4622      	mov	r2, r4
 8019e0e:	4629      	mov	r1, r5
 8019e10:	4638      	mov	r0, r7
 8019e12:	f7ff ff6b 	bl	8019cec <__ssputs_r>
 8019e16:	3001      	adds	r0, #1
 8019e18:	f000 80a7 	beq.w	8019f6a <_svfiprintf_r+0x1c6>
 8019e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e1e:	445a      	add	r2, fp
 8019e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e22:	f89a 3000 	ldrb.w	r3, [sl]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	f000 809f 	beq.w	8019f6a <_svfiprintf_r+0x1c6>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8019e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e36:	f10a 0a01 	add.w	sl, sl, #1
 8019e3a:	9304      	str	r3, [sp, #16]
 8019e3c:	9307      	str	r3, [sp, #28]
 8019e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e44:	4654      	mov	r4, sl
 8019e46:	2205      	movs	r2, #5
 8019e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e4c:	484e      	ldr	r0, [pc, #312]	@ (8019f88 <_svfiprintf_r+0x1e4>)
 8019e4e:	f7e6 fa47 	bl	80002e0 <memchr>
 8019e52:	9a04      	ldr	r2, [sp, #16]
 8019e54:	b9d8      	cbnz	r0, 8019e8e <_svfiprintf_r+0xea>
 8019e56:	06d0      	lsls	r0, r2, #27
 8019e58:	bf44      	itt	mi
 8019e5a:	2320      	movmi	r3, #32
 8019e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e60:	0711      	lsls	r1, r2, #28
 8019e62:	bf44      	itt	mi
 8019e64:	232b      	movmi	r3, #43	@ 0x2b
 8019e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8019e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e70:	d015      	beq.n	8019e9e <_svfiprintf_r+0xfa>
 8019e72:	9a07      	ldr	r2, [sp, #28]
 8019e74:	4654      	mov	r4, sl
 8019e76:	2000      	movs	r0, #0
 8019e78:	f04f 0c0a 	mov.w	ip, #10
 8019e7c:	4621      	mov	r1, r4
 8019e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e82:	3b30      	subs	r3, #48	@ 0x30
 8019e84:	2b09      	cmp	r3, #9
 8019e86:	d94b      	bls.n	8019f20 <_svfiprintf_r+0x17c>
 8019e88:	b1b0      	cbz	r0, 8019eb8 <_svfiprintf_r+0x114>
 8019e8a:	9207      	str	r2, [sp, #28]
 8019e8c:	e014      	b.n	8019eb8 <_svfiprintf_r+0x114>
 8019e8e:	eba0 0308 	sub.w	r3, r0, r8
 8019e92:	fa09 f303 	lsl.w	r3, r9, r3
 8019e96:	4313      	orrs	r3, r2
 8019e98:	9304      	str	r3, [sp, #16]
 8019e9a:	46a2      	mov	sl, r4
 8019e9c:	e7d2      	b.n	8019e44 <_svfiprintf_r+0xa0>
 8019e9e:	9b03      	ldr	r3, [sp, #12]
 8019ea0:	1d19      	adds	r1, r3, #4
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	9103      	str	r1, [sp, #12]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	bfbb      	ittet	lt
 8019eaa:	425b      	neglt	r3, r3
 8019eac:	f042 0202 	orrlt.w	r2, r2, #2
 8019eb0:	9307      	strge	r3, [sp, #28]
 8019eb2:	9307      	strlt	r3, [sp, #28]
 8019eb4:	bfb8      	it	lt
 8019eb6:	9204      	strlt	r2, [sp, #16]
 8019eb8:	7823      	ldrb	r3, [r4, #0]
 8019eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ebc:	d10a      	bne.n	8019ed4 <_svfiprintf_r+0x130>
 8019ebe:	7863      	ldrb	r3, [r4, #1]
 8019ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ec2:	d132      	bne.n	8019f2a <_svfiprintf_r+0x186>
 8019ec4:	9b03      	ldr	r3, [sp, #12]
 8019ec6:	1d1a      	adds	r2, r3, #4
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	9203      	str	r2, [sp, #12]
 8019ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ed0:	3402      	adds	r4, #2
 8019ed2:	9305      	str	r3, [sp, #20]
 8019ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019f98 <_svfiprintf_r+0x1f4>
 8019ed8:	7821      	ldrb	r1, [r4, #0]
 8019eda:	2203      	movs	r2, #3
 8019edc:	4650      	mov	r0, sl
 8019ede:	f7e6 f9ff 	bl	80002e0 <memchr>
 8019ee2:	b138      	cbz	r0, 8019ef4 <_svfiprintf_r+0x150>
 8019ee4:	9b04      	ldr	r3, [sp, #16]
 8019ee6:	eba0 000a 	sub.w	r0, r0, sl
 8019eea:	2240      	movs	r2, #64	@ 0x40
 8019eec:	4082      	lsls	r2, r0
 8019eee:	4313      	orrs	r3, r2
 8019ef0:	3401      	adds	r4, #1
 8019ef2:	9304      	str	r3, [sp, #16]
 8019ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ef8:	4824      	ldr	r0, [pc, #144]	@ (8019f8c <_svfiprintf_r+0x1e8>)
 8019efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019efe:	2206      	movs	r2, #6
 8019f00:	f7e6 f9ee 	bl	80002e0 <memchr>
 8019f04:	2800      	cmp	r0, #0
 8019f06:	d036      	beq.n	8019f76 <_svfiprintf_r+0x1d2>
 8019f08:	4b21      	ldr	r3, [pc, #132]	@ (8019f90 <_svfiprintf_r+0x1ec>)
 8019f0a:	bb1b      	cbnz	r3, 8019f54 <_svfiprintf_r+0x1b0>
 8019f0c:	9b03      	ldr	r3, [sp, #12]
 8019f0e:	3307      	adds	r3, #7
 8019f10:	f023 0307 	bic.w	r3, r3, #7
 8019f14:	3308      	adds	r3, #8
 8019f16:	9303      	str	r3, [sp, #12]
 8019f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f1a:	4433      	add	r3, r6
 8019f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f1e:	e76a      	b.n	8019df6 <_svfiprintf_r+0x52>
 8019f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f24:	460c      	mov	r4, r1
 8019f26:	2001      	movs	r0, #1
 8019f28:	e7a8      	b.n	8019e7c <_svfiprintf_r+0xd8>
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	3401      	adds	r4, #1
 8019f2e:	9305      	str	r3, [sp, #20]
 8019f30:	4619      	mov	r1, r3
 8019f32:	f04f 0c0a 	mov.w	ip, #10
 8019f36:	4620      	mov	r0, r4
 8019f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f3c:	3a30      	subs	r2, #48	@ 0x30
 8019f3e:	2a09      	cmp	r2, #9
 8019f40:	d903      	bls.n	8019f4a <_svfiprintf_r+0x1a6>
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d0c6      	beq.n	8019ed4 <_svfiprintf_r+0x130>
 8019f46:	9105      	str	r1, [sp, #20]
 8019f48:	e7c4      	b.n	8019ed4 <_svfiprintf_r+0x130>
 8019f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f4e:	4604      	mov	r4, r0
 8019f50:	2301      	movs	r3, #1
 8019f52:	e7f0      	b.n	8019f36 <_svfiprintf_r+0x192>
 8019f54:	ab03      	add	r3, sp, #12
 8019f56:	9300      	str	r3, [sp, #0]
 8019f58:	462a      	mov	r2, r5
 8019f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8019f94 <_svfiprintf_r+0x1f0>)
 8019f5c:	a904      	add	r1, sp, #16
 8019f5e:	4638      	mov	r0, r7
 8019f60:	f3af 8000 	nop.w
 8019f64:	1c42      	adds	r2, r0, #1
 8019f66:	4606      	mov	r6, r0
 8019f68:	d1d6      	bne.n	8019f18 <_svfiprintf_r+0x174>
 8019f6a:	89ab      	ldrh	r3, [r5, #12]
 8019f6c:	065b      	lsls	r3, r3, #25
 8019f6e:	f53f af2d 	bmi.w	8019dcc <_svfiprintf_r+0x28>
 8019f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f74:	e72c      	b.n	8019dd0 <_svfiprintf_r+0x2c>
 8019f76:	ab03      	add	r3, sp, #12
 8019f78:	9300      	str	r3, [sp, #0]
 8019f7a:	462a      	mov	r2, r5
 8019f7c:	4b05      	ldr	r3, [pc, #20]	@ (8019f94 <_svfiprintf_r+0x1f0>)
 8019f7e:	a904      	add	r1, sp, #16
 8019f80:	4638      	mov	r0, r7
 8019f82:	f000 f9bb 	bl	801a2fc <_printf_i>
 8019f86:	e7ed      	b.n	8019f64 <_svfiprintf_r+0x1c0>
 8019f88:	0801b6ec 	.word	0x0801b6ec
 8019f8c:	0801b6f6 	.word	0x0801b6f6
 8019f90:	00000000 	.word	0x00000000
 8019f94:	08019ced 	.word	0x08019ced
 8019f98:	0801b6f2 	.word	0x0801b6f2

08019f9c <__sfputc_r>:
 8019f9c:	6893      	ldr	r3, [r2, #8]
 8019f9e:	3b01      	subs	r3, #1
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	b410      	push	{r4}
 8019fa4:	6093      	str	r3, [r2, #8]
 8019fa6:	da08      	bge.n	8019fba <__sfputc_r+0x1e>
 8019fa8:	6994      	ldr	r4, [r2, #24]
 8019faa:	42a3      	cmp	r3, r4
 8019fac:	db01      	blt.n	8019fb2 <__sfputc_r+0x16>
 8019fae:	290a      	cmp	r1, #10
 8019fb0:	d103      	bne.n	8019fba <__sfputc_r+0x1e>
 8019fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fb6:	f000 bb6d 	b.w	801a694 <__swbuf_r>
 8019fba:	6813      	ldr	r3, [r2, #0]
 8019fbc:	1c58      	adds	r0, r3, #1
 8019fbe:	6010      	str	r0, [r2, #0]
 8019fc0:	7019      	strb	r1, [r3, #0]
 8019fc2:	4608      	mov	r0, r1
 8019fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fc8:	4770      	bx	lr

08019fca <__sfputs_r>:
 8019fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fcc:	4606      	mov	r6, r0
 8019fce:	460f      	mov	r7, r1
 8019fd0:	4614      	mov	r4, r2
 8019fd2:	18d5      	adds	r5, r2, r3
 8019fd4:	42ac      	cmp	r4, r5
 8019fd6:	d101      	bne.n	8019fdc <__sfputs_r+0x12>
 8019fd8:	2000      	movs	r0, #0
 8019fda:	e007      	b.n	8019fec <__sfputs_r+0x22>
 8019fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fe0:	463a      	mov	r2, r7
 8019fe2:	4630      	mov	r0, r6
 8019fe4:	f7ff ffda 	bl	8019f9c <__sfputc_r>
 8019fe8:	1c43      	adds	r3, r0, #1
 8019fea:	d1f3      	bne.n	8019fd4 <__sfputs_r+0xa>
 8019fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ff0 <_vfiprintf_r>:
 8019ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff4:	460d      	mov	r5, r1
 8019ff6:	b09d      	sub	sp, #116	@ 0x74
 8019ff8:	4614      	mov	r4, r2
 8019ffa:	4698      	mov	r8, r3
 8019ffc:	4606      	mov	r6, r0
 8019ffe:	b118      	cbz	r0, 801a008 <_vfiprintf_r+0x18>
 801a000:	6a03      	ldr	r3, [r0, #32]
 801a002:	b90b      	cbnz	r3, 801a008 <_vfiprintf_r+0x18>
 801a004:	f7ff fc44 	bl	8019890 <__sinit>
 801a008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a00a:	07d9      	lsls	r1, r3, #31
 801a00c:	d405      	bmi.n	801a01a <_vfiprintf_r+0x2a>
 801a00e:	89ab      	ldrh	r3, [r5, #12]
 801a010:	059a      	lsls	r2, r3, #22
 801a012:	d402      	bmi.n	801a01a <_vfiprintf_r+0x2a>
 801a014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a016:	f7ff fd60 	bl	8019ada <__retarget_lock_acquire_recursive>
 801a01a:	89ab      	ldrh	r3, [r5, #12]
 801a01c:	071b      	lsls	r3, r3, #28
 801a01e:	d501      	bpl.n	801a024 <_vfiprintf_r+0x34>
 801a020:	692b      	ldr	r3, [r5, #16]
 801a022:	b99b      	cbnz	r3, 801a04c <_vfiprintf_r+0x5c>
 801a024:	4629      	mov	r1, r5
 801a026:	4630      	mov	r0, r6
 801a028:	f000 fb72 	bl	801a710 <__swsetup_r>
 801a02c:	b170      	cbz	r0, 801a04c <_vfiprintf_r+0x5c>
 801a02e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a030:	07dc      	lsls	r4, r3, #31
 801a032:	d504      	bpl.n	801a03e <_vfiprintf_r+0x4e>
 801a034:	f04f 30ff 	mov.w	r0, #4294967295
 801a038:	b01d      	add	sp, #116	@ 0x74
 801a03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a03e:	89ab      	ldrh	r3, [r5, #12]
 801a040:	0598      	lsls	r0, r3, #22
 801a042:	d4f7      	bmi.n	801a034 <_vfiprintf_r+0x44>
 801a044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a046:	f7ff fd49 	bl	8019adc <__retarget_lock_release_recursive>
 801a04a:	e7f3      	b.n	801a034 <_vfiprintf_r+0x44>
 801a04c:	2300      	movs	r3, #0
 801a04e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a050:	2320      	movs	r3, #32
 801a052:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a056:	f8cd 800c 	str.w	r8, [sp, #12]
 801a05a:	2330      	movs	r3, #48	@ 0x30
 801a05c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a20c <_vfiprintf_r+0x21c>
 801a060:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a064:	f04f 0901 	mov.w	r9, #1
 801a068:	4623      	mov	r3, r4
 801a06a:	469a      	mov	sl, r3
 801a06c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a070:	b10a      	cbz	r2, 801a076 <_vfiprintf_r+0x86>
 801a072:	2a25      	cmp	r2, #37	@ 0x25
 801a074:	d1f9      	bne.n	801a06a <_vfiprintf_r+0x7a>
 801a076:	ebba 0b04 	subs.w	fp, sl, r4
 801a07a:	d00b      	beq.n	801a094 <_vfiprintf_r+0xa4>
 801a07c:	465b      	mov	r3, fp
 801a07e:	4622      	mov	r2, r4
 801a080:	4629      	mov	r1, r5
 801a082:	4630      	mov	r0, r6
 801a084:	f7ff ffa1 	bl	8019fca <__sfputs_r>
 801a088:	3001      	adds	r0, #1
 801a08a:	f000 80a7 	beq.w	801a1dc <_vfiprintf_r+0x1ec>
 801a08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a090:	445a      	add	r2, fp
 801a092:	9209      	str	r2, [sp, #36]	@ 0x24
 801a094:	f89a 3000 	ldrb.w	r3, [sl]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	f000 809f 	beq.w	801a1dc <_vfiprintf_r+0x1ec>
 801a09e:	2300      	movs	r3, #0
 801a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0a8:	f10a 0a01 	add.w	sl, sl, #1
 801a0ac:	9304      	str	r3, [sp, #16]
 801a0ae:	9307      	str	r3, [sp, #28]
 801a0b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a0b4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a0b6:	4654      	mov	r4, sl
 801a0b8:	2205      	movs	r2, #5
 801a0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0be:	4853      	ldr	r0, [pc, #332]	@ (801a20c <_vfiprintf_r+0x21c>)
 801a0c0:	f7e6 f90e 	bl	80002e0 <memchr>
 801a0c4:	9a04      	ldr	r2, [sp, #16]
 801a0c6:	b9d8      	cbnz	r0, 801a100 <_vfiprintf_r+0x110>
 801a0c8:	06d1      	lsls	r1, r2, #27
 801a0ca:	bf44      	itt	mi
 801a0cc:	2320      	movmi	r3, #32
 801a0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0d2:	0713      	lsls	r3, r2, #28
 801a0d4:	bf44      	itt	mi
 801a0d6:	232b      	movmi	r3, #43	@ 0x2b
 801a0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a0e0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0e2:	d015      	beq.n	801a110 <_vfiprintf_r+0x120>
 801a0e4:	9a07      	ldr	r2, [sp, #28]
 801a0e6:	4654      	mov	r4, sl
 801a0e8:	2000      	movs	r0, #0
 801a0ea:	f04f 0c0a 	mov.w	ip, #10
 801a0ee:	4621      	mov	r1, r4
 801a0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0f4:	3b30      	subs	r3, #48	@ 0x30
 801a0f6:	2b09      	cmp	r3, #9
 801a0f8:	d94b      	bls.n	801a192 <_vfiprintf_r+0x1a2>
 801a0fa:	b1b0      	cbz	r0, 801a12a <_vfiprintf_r+0x13a>
 801a0fc:	9207      	str	r2, [sp, #28]
 801a0fe:	e014      	b.n	801a12a <_vfiprintf_r+0x13a>
 801a100:	eba0 0308 	sub.w	r3, r0, r8
 801a104:	fa09 f303 	lsl.w	r3, r9, r3
 801a108:	4313      	orrs	r3, r2
 801a10a:	9304      	str	r3, [sp, #16]
 801a10c:	46a2      	mov	sl, r4
 801a10e:	e7d2      	b.n	801a0b6 <_vfiprintf_r+0xc6>
 801a110:	9b03      	ldr	r3, [sp, #12]
 801a112:	1d19      	adds	r1, r3, #4
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	9103      	str	r1, [sp, #12]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	bfbb      	ittet	lt
 801a11c:	425b      	neglt	r3, r3
 801a11e:	f042 0202 	orrlt.w	r2, r2, #2
 801a122:	9307      	strge	r3, [sp, #28]
 801a124:	9307      	strlt	r3, [sp, #28]
 801a126:	bfb8      	it	lt
 801a128:	9204      	strlt	r2, [sp, #16]
 801a12a:	7823      	ldrb	r3, [r4, #0]
 801a12c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a12e:	d10a      	bne.n	801a146 <_vfiprintf_r+0x156>
 801a130:	7863      	ldrb	r3, [r4, #1]
 801a132:	2b2a      	cmp	r3, #42	@ 0x2a
 801a134:	d132      	bne.n	801a19c <_vfiprintf_r+0x1ac>
 801a136:	9b03      	ldr	r3, [sp, #12]
 801a138:	1d1a      	adds	r2, r3, #4
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	9203      	str	r2, [sp, #12]
 801a13e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a142:	3402      	adds	r4, #2
 801a144:	9305      	str	r3, [sp, #20]
 801a146:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a21c <_vfiprintf_r+0x22c>
 801a14a:	7821      	ldrb	r1, [r4, #0]
 801a14c:	2203      	movs	r2, #3
 801a14e:	4650      	mov	r0, sl
 801a150:	f7e6 f8c6 	bl	80002e0 <memchr>
 801a154:	b138      	cbz	r0, 801a166 <_vfiprintf_r+0x176>
 801a156:	9b04      	ldr	r3, [sp, #16]
 801a158:	eba0 000a 	sub.w	r0, r0, sl
 801a15c:	2240      	movs	r2, #64	@ 0x40
 801a15e:	4082      	lsls	r2, r0
 801a160:	4313      	orrs	r3, r2
 801a162:	3401      	adds	r4, #1
 801a164:	9304      	str	r3, [sp, #16]
 801a166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a16a:	4829      	ldr	r0, [pc, #164]	@ (801a210 <_vfiprintf_r+0x220>)
 801a16c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a170:	2206      	movs	r2, #6
 801a172:	f7e6 f8b5 	bl	80002e0 <memchr>
 801a176:	2800      	cmp	r0, #0
 801a178:	d03f      	beq.n	801a1fa <_vfiprintf_r+0x20a>
 801a17a:	4b26      	ldr	r3, [pc, #152]	@ (801a214 <_vfiprintf_r+0x224>)
 801a17c:	bb1b      	cbnz	r3, 801a1c6 <_vfiprintf_r+0x1d6>
 801a17e:	9b03      	ldr	r3, [sp, #12]
 801a180:	3307      	adds	r3, #7
 801a182:	f023 0307 	bic.w	r3, r3, #7
 801a186:	3308      	adds	r3, #8
 801a188:	9303      	str	r3, [sp, #12]
 801a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a18c:	443b      	add	r3, r7
 801a18e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a190:	e76a      	b.n	801a068 <_vfiprintf_r+0x78>
 801a192:	fb0c 3202 	mla	r2, ip, r2, r3
 801a196:	460c      	mov	r4, r1
 801a198:	2001      	movs	r0, #1
 801a19a:	e7a8      	b.n	801a0ee <_vfiprintf_r+0xfe>
 801a19c:	2300      	movs	r3, #0
 801a19e:	3401      	adds	r4, #1
 801a1a0:	9305      	str	r3, [sp, #20]
 801a1a2:	4619      	mov	r1, r3
 801a1a4:	f04f 0c0a 	mov.w	ip, #10
 801a1a8:	4620      	mov	r0, r4
 801a1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1ae:	3a30      	subs	r2, #48	@ 0x30
 801a1b0:	2a09      	cmp	r2, #9
 801a1b2:	d903      	bls.n	801a1bc <_vfiprintf_r+0x1cc>
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d0c6      	beq.n	801a146 <_vfiprintf_r+0x156>
 801a1b8:	9105      	str	r1, [sp, #20]
 801a1ba:	e7c4      	b.n	801a146 <_vfiprintf_r+0x156>
 801a1bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	e7f0      	b.n	801a1a8 <_vfiprintf_r+0x1b8>
 801a1c6:	ab03      	add	r3, sp, #12
 801a1c8:	9300      	str	r3, [sp, #0]
 801a1ca:	462a      	mov	r2, r5
 801a1cc:	4b12      	ldr	r3, [pc, #72]	@ (801a218 <_vfiprintf_r+0x228>)
 801a1ce:	a904      	add	r1, sp, #16
 801a1d0:	4630      	mov	r0, r6
 801a1d2:	f3af 8000 	nop.w
 801a1d6:	4607      	mov	r7, r0
 801a1d8:	1c78      	adds	r0, r7, #1
 801a1da:	d1d6      	bne.n	801a18a <_vfiprintf_r+0x19a>
 801a1dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a1de:	07d9      	lsls	r1, r3, #31
 801a1e0:	d405      	bmi.n	801a1ee <_vfiprintf_r+0x1fe>
 801a1e2:	89ab      	ldrh	r3, [r5, #12]
 801a1e4:	059a      	lsls	r2, r3, #22
 801a1e6:	d402      	bmi.n	801a1ee <_vfiprintf_r+0x1fe>
 801a1e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a1ea:	f7ff fc77 	bl	8019adc <__retarget_lock_release_recursive>
 801a1ee:	89ab      	ldrh	r3, [r5, #12]
 801a1f0:	065b      	lsls	r3, r3, #25
 801a1f2:	f53f af1f 	bmi.w	801a034 <_vfiprintf_r+0x44>
 801a1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a1f8:	e71e      	b.n	801a038 <_vfiprintf_r+0x48>
 801a1fa:	ab03      	add	r3, sp, #12
 801a1fc:	9300      	str	r3, [sp, #0]
 801a1fe:	462a      	mov	r2, r5
 801a200:	4b05      	ldr	r3, [pc, #20]	@ (801a218 <_vfiprintf_r+0x228>)
 801a202:	a904      	add	r1, sp, #16
 801a204:	4630      	mov	r0, r6
 801a206:	f000 f879 	bl	801a2fc <_printf_i>
 801a20a:	e7e4      	b.n	801a1d6 <_vfiprintf_r+0x1e6>
 801a20c:	0801b6ec 	.word	0x0801b6ec
 801a210:	0801b6f6 	.word	0x0801b6f6
 801a214:	00000000 	.word	0x00000000
 801a218:	08019fcb 	.word	0x08019fcb
 801a21c:	0801b6f2 	.word	0x0801b6f2

0801a220 <_printf_common>:
 801a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a224:	4616      	mov	r6, r2
 801a226:	4698      	mov	r8, r3
 801a228:	688a      	ldr	r2, [r1, #8]
 801a22a:	690b      	ldr	r3, [r1, #16]
 801a22c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a230:	4293      	cmp	r3, r2
 801a232:	bfb8      	it	lt
 801a234:	4613      	movlt	r3, r2
 801a236:	6033      	str	r3, [r6, #0]
 801a238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a23c:	4607      	mov	r7, r0
 801a23e:	460c      	mov	r4, r1
 801a240:	b10a      	cbz	r2, 801a246 <_printf_common+0x26>
 801a242:	3301      	adds	r3, #1
 801a244:	6033      	str	r3, [r6, #0]
 801a246:	6823      	ldr	r3, [r4, #0]
 801a248:	0699      	lsls	r1, r3, #26
 801a24a:	bf42      	ittt	mi
 801a24c:	6833      	ldrmi	r3, [r6, #0]
 801a24e:	3302      	addmi	r3, #2
 801a250:	6033      	strmi	r3, [r6, #0]
 801a252:	6825      	ldr	r5, [r4, #0]
 801a254:	f015 0506 	ands.w	r5, r5, #6
 801a258:	d106      	bne.n	801a268 <_printf_common+0x48>
 801a25a:	f104 0a19 	add.w	sl, r4, #25
 801a25e:	68e3      	ldr	r3, [r4, #12]
 801a260:	6832      	ldr	r2, [r6, #0]
 801a262:	1a9b      	subs	r3, r3, r2
 801a264:	42ab      	cmp	r3, r5
 801a266:	dc26      	bgt.n	801a2b6 <_printf_common+0x96>
 801a268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a26c:	6822      	ldr	r2, [r4, #0]
 801a26e:	3b00      	subs	r3, #0
 801a270:	bf18      	it	ne
 801a272:	2301      	movne	r3, #1
 801a274:	0692      	lsls	r2, r2, #26
 801a276:	d42b      	bmi.n	801a2d0 <_printf_common+0xb0>
 801a278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a27c:	4641      	mov	r1, r8
 801a27e:	4638      	mov	r0, r7
 801a280:	47c8      	blx	r9
 801a282:	3001      	adds	r0, #1
 801a284:	d01e      	beq.n	801a2c4 <_printf_common+0xa4>
 801a286:	6823      	ldr	r3, [r4, #0]
 801a288:	6922      	ldr	r2, [r4, #16]
 801a28a:	f003 0306 	and.w	r3, r3, #6
 801a28e:	2b04      	cmp	r3, #4
 801a290:	bf02      	ittt	eq
 801a292:	68e5      	ldreq	r5, [r4, #12]
 801a294:	6833      	ldreq	r3, [r6, #0]
 801a296:	1aed      	subeq	r5, r5, r3
 801a298:	68a3      	ldr	r3, [r4, #8]
 801a29a:	bf0c      	ite	eq
 801a29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2a0:	2500      	movne	r5, #0
 801a2a2:	4293      	cmp	r3, r2
 801a2a4:	bfc4      	itt	gt
 801a2a6:	1a9b      	subgt	r3, r3, r2
 801a2a8:	18ed      	addgt	r5, r5, r3
 801a2aa:	2600      	movs	r6, #0
 801a2ac:	341a      	adds	r4, #26
 801a2ae:	42b5      	cmp	r5, r6
 801a2b0:	d11a      	bne.n	801a2e8 <_printf_common+0xc8>
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	e008      	b.n	801a2c8 <_printf_common+0xa8>
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	4652      	mov	r2, sl
 801a2ba:	4641      	mov	r1, r8
 801a2bc:	4638      	mov	r0, r7
 801a2be:	47c8      	blx	r9
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	d103      	bne.n	801a2cc <_printf_common+0xac>
 801a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2cc:	3501      	adds	r5, #1
 801a2ce:	e7c6      	b.n	801a25e <_printf_common+0x3e>
 801a2d0:	18e1      	adds	r1, r4, r3
 801a2d2:	1c5a      	adds	r2, r3, #1
 801a2d4:	2030      	movs	r0, #48	@ 0x30
 801a2d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a2da:	4422      	add	r2, r4
 801a2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a2e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a2e4:	3302      	adds	r3, #2
 801a2e6:	e7c7      	b.n	801a278 <_printf_common+0x58>
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	4622      	mov	r2, r4
 801a2ec:	4641      	mov	r1, r8
 801a2ee:	4638      	mov	r0, r7
 801a2f0:	47c8      	blx	r9
 801a2f2:	3001      	adds	r0, #1
 801a2f4:	d0e6      	beq.n	801a2c4 <_printf_common+0xa4>
 801a2f6:	3601      	adds	r6, #1
 801a2f8:	e7d9      	b.n	801a2ae <_printf_common+0x8e>
	...

0801a2fc <_printf_i>:
 801a2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a300:	7e0f      	ldrb	r7, [r1, #24]
 801a302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a304:	2f78      	cmp	r7, #120	@ 0x78
 801a306:	4691      	mov	r9, r2
 801a308:	4680      	mov	r8, r0
 801a30a:	460c      	mov	r4, r1
 801a30c:	469a      	mov	sl, r3
 801a30e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a312:	d807      	bhi.n	801a324 <_printf_i+0x28>
 801a314:	2f62      	cmp	r7, #98	@ 0x62
 801a316:	d80a      	bhi.n	801a32e <_printf_i+0x32>
 801a318:	2f00      	cmp	r7, #0
 801a31a:	f000 80d2 	beq.w	801a4c2 <_printf_i+0x1c6>
 801a31e:	2f58      	cmp	r7, #88	@ 0x58
 801a320:	f000 80b9 	beq.w	801a496 <_printf_i+0x19a>
 801a324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a32c:	e03a      	b.n	801a3a4 <_printf_i+0xa8>
 801a32e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a332:	2b15      	cmp	r3, #21
 801a334:	d8f6      	bhi.n	801a324 <_printf_i+0x28>
 801a336:	a101      	add	r1, pc, #4	@ (adr r1, 801a33c <_printf_i+0x40>)
 801a338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a33c:	0801a395 	.word	0x0801a395
 801a340:	0801a3a9 	.word	0x0801a3a9
 801a344:	0801a325 	.word	0x0801a325
 801a348:	0801a325 	.word	0x0801a325
 801a34c:	0801a325 	.word	0x0801a325
 801a350:	0801a325 	.word	0x0801a325
 801a354:	0801a3a9 	.word	0x0801a3a9
 801a358:	0801a325 	.word	0x0801a325
 801a35c:	0801a325 	.word	0x0801a325
 801a360:	0801a325 	.word	0x0801a325
 801a364:	0801a325 	.word	0x0801a325
 801a368:	0801a4a9 	.word	0x0801a4a9
 801a36c:	0801a3d3 	.word	0x0801a3d3
 801a370:	0801a463 	.word	0x0801a463
 801a374:	0801a325 	.word	0x0801a325
 801a378:	0801a325 	.word	0x0801a325
 801a37c:	0801a4cb 	.word	0x0801a4cb
 801a380:	0801a325 	.word	0x0801a325
 801a384:	0801a3d3 	.word	0x0801a3d3
 801a388:	0801a325 	.word	0x0801a325
 801a38c:	0801a325 	.word	0x0801a325
 801a390:	0801a46b 	.word	0x0801a46b
 801a394:	6833      	ldr	r3, [r6, #0]
 801a396:	1d1a      	adds	r2, r3, #4
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	6032      	str	r2, [r6, #0]
 801a39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a3a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	e09d      	b.n	801a4e4 <_printf_i+0x1e8>
 801a3a8:	6833      	ldr	r3, [r6, #0]
 801a3aa:	6820      	ldr	r0, [r4, #0]
 801a3ac:	1d19      	adds	r1, r3, #4
 801a3ae:	6031      	str	r1, [r6, #0]
 801a3b0:	0606      	lsls	r6, r0, #24
 801a3b2:	d501      	bpl.n	801a3b8 <_printf_i+0xbc>
 801a3b4:	681d      	ldr	r5, [r3, #0]
 801a3b6:	e003      	b.n	801a3c0 <_printf_i+0xc4>
 801a3b8:	0645      	lsls	r5, r0, #25
 801a3ba:	d5fb      	bpl.n	801a3b4 <_printf_i+0xb8>
 801a3bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a3c0:	2d00      	cmp	r5, #0
 801a3c2:	da03      	bge.n	801a3cc <_printf_i+0xd0>
 801a3c4:	232d      	movs	r3, #45	@ 0x2d
 801a3c6:	426d      	negs	r5, r5
 801a3c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a3cc:	4859      	ldr	r0, [pc, #356]	@ (801a534 <_printf_i+0x238>)
 801a3ce:	230a      	movs	r3, #10
 801a3d0:	e011      	b.n	801a3f6 <_printf_i+0xfa>
 801a3d2:	6821      	ldr	r1, [r4, #0]
 801a3d4:	6833      	ldr	r3, [r6, #0]
 801a3d6:	0608      	lsls	r0, r1, #24
 801a3d8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a3dc:	d402      	bmi.n	801a3e4 <_printf_i+0xe8>
 801a3de:	0649      	lsls	r1, r1, #25
 801a3e0:	bf48      	it	mi
 801a3e2:	b2ad      	uxthmi	r5, r5
 801a3e4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a3e6:	4853      	ldr	r0, [pc, #332]	@ (801a534 <_printf_i+0x238>)
 801a3e8:	6033      	str	r3, [r6, #0]
 801a3ea:	bf14      	ite	ne
 801a3ec:	230a      	movne	r3, #10
 801a3ee:	2308      	moveq	r3, #8
 801a3f0:	2100      	movs	r1, #0
 801a3f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a3f6:	6866      	ldr	r6, [r4, #4]
 801a3f8:	60a6      	str	r6, [r4, #8]
 801a3fa:	2e00      	cmp	r6, #0
 801a3fc:	bfa2      	ittt	ge
 801a3fe:	6821      	ldrge	r1, [r4, #0]
 801a400:	f021 0104 	bicge.w	r1, r1, #4
 801a404:	6021      	strge	r1, [r4, #0]
 801a406:	b90d      	cbnz	r5, 801a40c <_printf_i+0x110>
 801a408:	2e00      	cmp	r6, #0
 801a40a:	d04b      	beq.n	801a4a4 <_printf_i+0x1a8>
 801a40c:	4616      	mov	r6, r2
 801a40e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a412:	fb03 5711 	mls	r7, r3, r1, r5
 801a416:	5dc7      	ldrb	r7, [r0, r7]
 801a418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a41c:	462f      	mov	r7, r5
 801a41e:	42bb      	cmp	r3, r7
 801a420:	460d      	mov	r5, r1
 801a422:	d9f4      	bls.n	801a40e <_printf_i+0x112>
 801a424:	2b08      	cmp	r3, #8
 801a426:	d10b      	bne.n	801a440 <_printf_i+0x144>
 801a428:	6823      	ldr	r3, [r4, #0]
 801a42a:	07df      	lsls	r7, r3, #31
 801a42c:	d508      	bpl.n	801a440 <_printf_i+0x144>
 801a42e:	6923      	ldr	r3, [r4, #16]
 801a430:	6861      	ldr	r1, [r4, #4]
 801a432:	4299      	cmp	r1, r3
 801a434:	bfde      	ittt	le
 801a436:	2330      	movle	r3, #48	@ 0x30
 801a438:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a43c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a440:	1b92      	subs	r2, r2, r6
 801a442:	6122      	str	r2, [r4, #16]
 801a444:	f8cd a000 	str.w	sl, [sp]
 801a448:	464b      	mov	r3, r9
 801a44a:	aa03      	add	r2, sp, #12
 801a44c:	4621      	mov	r1, r4
 801a44e:	4640      	mov	r0, r8
 801a450:	f7ff fee6 	bl	801a220 <_printf_common>
 801a454:	3001      	adds	r0, #1
 801a456:	d14a      	bne.n	801a4ee <_printf_i+0x1f2>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	b004      	add	sp, #16
 801a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	f043 0320 	orr.w	r3, r3, #32
 801a468:	6023      	str	r3, [r4, #0]
 801a46a:	4833      	ldr	r0, [pc, #204]	@ (801a538 <_printf_i+0x23c>)
 801a46c:	2778      	movs	r7, #120	@ 0x78
 801a46e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a472:	6823      	ldr	r3, [r4, #0]
 801a474:	6831      	ldr	r1, [r6, #0]
 801a476:	061f      	lsls	r7, r3, #24
 801a478:	f851 5b04 	ldr.w	r5, [r1], #4
 801a47c:	d402      	bmi.n	801a484 <_printf_i+0x188>
 801a47e:	065f      	lsls	r7, r3, #25
 801a480:	bf48      	it	mi
 801a482:	b2ad      	uxthmi	r5, r5
 801a484:	6031      	str	r1, [r6, #0]
 801a486:	07d9      	lsls	r1, r3, #31
 801a488:	bf44      	itt	mi
 801a48a:	f043 0320 	orrmi.w	r3, r3, #32
 801a48e:	6023      	strmi	r3, [r4, #0]
 801a490:	b11d      	cbz	r5, 801a49a <_printf_i+0x19e>
 801a492:	2310      	movs	r3, #16
 801a494:	e7ac      	b.n	801a3f0 <_printf_i+0xf4>
 801a496:	4827      	ldr	r0, [pc, #156]	@ (801a534 <_printf_i+0x238>)
 801a498:	e7e9      	b.n	801a46e <_printf_i+0x172>
 801a49a:	6823      	ldr	r3, [r4, #0]
 801a49c:	f023 0320 	bic.w	r3, r3, #32
 801a4a0:	6023      	str	r3, [r4, #0]
 801a4a2:	e7f6      	b.n	801a492 <_printf_i+0x196>
 801a4a4:	4616      	mov	r6, r2
 801a4a6:	e7bd      	b.n	801a424 <_printf_i+0x128>
 801a4a8:	6833      	ldr	r3, [r6, #0]
 801a4aa:	6825      	ldr	r5, [r4, #0]
 801a4ac:	6961      	ldr	r1, [r4, #20]
 801a4ae:	1d18      	adds	r0, r3, #4
 801a4b0:	6030      	str	r0, [r6, #0]
 801a4b2:	062e      	lsls	r6, r5, #24
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	d501      	bpl.n	801a4bc <_printf_i+0x1c0>
 801a4b8:	6019      	str	r1, [r3, #0]
 801a4ba:	e002      	b.n	801a4c2 <_printf_i+0x1c6>
 801a4bc:	0668      	lsls	r0, r5, #25
 801a4be:	d5fb      	bpl.n	801a4b8 <_printf_i+0x1bc>
 801a4c0:	8019      	strh	r1, [r3, #0]
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	6123      	str	r3, [r4, #16]
 801a4c6:	4616      	mov	r6, r2
 801a4c8:	e7bc      	b.n	801a444 <_printf_i+0x148>
 801a4ca:	6833      	ldr	r3, [r6, #0]
 801a4cc:	1d1a      	adds	r2, r3, #4
 801a4ce:	6032      	str	r2, [r6, #0]
 801a4d0:	681e      	ldr	r6, [r3, #0]
 801a4d2:	6862      	ldr	r2, [r4, #4]
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	4630      	mov	r0, r6
 801a4d8:	f7e5 ff02 	bl	80002e0 <memchr>
 801a4dc:	b108      	cbz	r0, 801a4e2 <_printf_i+0x1e6>
 801a4de:	1b80      	subs	r0, r0, r6
 801a4e0:	6060      	str	r0, [r4, #4]
 801a4e2:	6863      	ldr	r3, [r4, #4]
 801a4e4:	6123      	str	r3, [r4, #16]
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4ec:	e7aa      	b.n	801a444 <_printf_i+0x148>
 801a4ee:	6923      	ldr	r3, [r4, #16]
 801a4f0:	4632      	mov	r2, r6
 801a4f2:	4649      	mov	r1, r9
 801a4f4:	4640      	mov	r0, r8
 801a4f6:	47d0      	blx	sl
 801a4f8:	3001      	adds	r0, #1
 801a4fa:	d0ad      	beq.n	801a458 <_printf_i+0x15c>
 801a4fc:	6823      	ldr	r3, [r4, #0]
 801a4fe:	079b      	lsls	r3, r3, #30
 801a500:	d413      	bmi.n	801a52a <_printf_i+0x22e>
 801a502:	68e0      	ldr	r0, [r4, #12]
 801a504:	9b03      	ldr	r3, [sp, #12]
 801a506:	4298      	cmp	r0, r3
 801a508:	bfb8      	it	lt
 801a50a:	4618      	movlt	r0, r3
 801a50c:	e7a6      	b.n	801a45c <_printf_i+0x160>
 801a50e:	2301      	movs	r3, #1
 801a510:	4632      	mov	r2, r6
 801a512:	4649      	mov	r1, r9
 801a514:	4640      	mov	r0, r8
 801a516:	47d0      	blx	sl
 801a518:	3001      	adds	r0, #1
 801a51a:	d09d      	beq.n	801a458 <_printf_i+0x15c>
 801a51c:	3501      	adds	r5, #1
 801a51e:	68e3      	ldr	r3, [r4, #12]
 801a520:	9903      	ldr	r1, [sp, #12]
 801a522:	1a5b      	subs	r3, r3, r1
 801a524:	42ab      	cmp	r3, r5
 801a526:	dcf2      	bgt.n	801a50e <_printf_i+0x212>
 801a528:	e7eb      	b.n	801a502 <_printf_i+0x206>
 801a52a:	2500      	movs	r5, #0
 801a52c:	f104 0619 	add.w	r6, r4, #25
 801a530:	e7f5      	b.n	801a51e <_printf_i+0x222>
 801a532:	bf00      	nop
 801a534:	0801b6fd 	.word	0x0801b6fd
 801a538:	0801b70e 	.word	0x0801b70e

0801a53c <__sflush_r>:
 801a53c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a544:	0716      	lsls	r6, r2, #28
 801a546:	4605      	mov	r5, r0
 801a548:	460c      	mov	r4, r1
 801a54a:	d454      	bmi.n	801a5f6 <__sflush_r+0xba>
 801a54c:	684b      	ldr	r3, [r1, #4]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	dc02      	bgt.n	801a558 <__sflush_r+0x1c>
 801a552:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a554:	2b00      	cmp	r3, #0
 801a556:	dd48      	ble.n	801a5ea <__sflush_r+0xae>
 801a558:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a55a:	2e00      	cmp	r6, #0
 801a55c:	d045      	beq.n	801a5ea <__sflush_r+0xae>
 801a55e:	2300      	movs	r3, #0
 801a560:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a564:	682f      	ldr	r7, [r5, #0]
 801a566:	6a21      	ldr	r1, [r4, #32]
 801a568:	602b      	str	r3, [r5, #0]
 801a56a:	d030      	beq.n	801a5ce <__sflush_r+0x92>
 801a56c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a56e:	89a3      	ldrh	r3, [r4, #12]
 801a570:	0759      	lsls	r1, r3, #29
 801a572:	d505      	bpl.n	801a580 <__sflush_r+0x44>
 801a574:	6863      	ldr	r3, [r4, #4]
 801a576:	1ad2      	subs	r2, r2, r3
 801a578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a57a:	b10b      	cbz	r3, 801a580 <__sflush_r+0x44>
 801a57c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a57e:	1ad2      	subs	r2, r2, r3
 801a580:	2300      	movs	r3, #0
 801a582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a584:	6a21      	ldr	r1, [r4, #32]
 801a586:	4628      	mov	r0, r5
 801a588:	47b0      	blx	r6
 801a58a:	1c43      	adds	r3, r0, #1
 801a58c:	89a3      	ldrh	r3, [r4, #12]
 801a58e:	d106      	bne.n	801a59e <__sflush_r+0x62>
 801a590:	6829      	ldr	r1, [r5, #0]
 801a592:	291d      	cmp	r1, #29
 801a594:	d82b      	bhi.n	801a5ee <__sflush_r+0xb2>
 801a596:	4a2a      	ldr	r2, [pc, #168]	@ (801a640 <__sflush_r+0x104>)
 801a598:	410a      	asrs	r2, r1
 801a59a:	07d6      	lsls	r6, r2, #31
 801a59c:	d427      	bmi.n	801a5ee <__sflush_r+0xb2>
 801a59e:	2200      	movs	r2, #0
 801a5a0:	6062      	str	r2, [r4, #4]
 801a5a2:	04d9      	lsls	r1, r3, #19
 801a5a4:	6922      	ldr	r2, [r4, #16]
 801a5a6:	6022      	str	r2, [r4, #0]
 801a5a8:	d504      	bpl.n	801a5b4 <__sflush_r+0x78>
 801a5aa:	1c42      	adds	r2, r0, #1
 801a5ac:	d101      	bne.n	801a5b2 <__sflush_r+0x76>
 801a5ae:	682b      	ldr	r3, [r5, #0]
 801a5b0:	b903      	cbnz	r3, 801a5b4 <__sflush_r+0x78>
 801a5b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a5b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a5b6:	602f      	str	r7, [r5, #0]
 801a5b8:	b1b9      	cbz	r1, 801a5ea <__sflush_r+0xae>
 801a5ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a5be:	4299      	cmp	r1, r3
 801a5c0:	d002      	beq.n	801a5c8 <__sflush_r+0x8c>
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	f7ff fa9a 	bl	8019afc <_free_r>
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801a5cc:	e00d      	b.n	801a5ea <__sflush_r+0xae>
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	47b0      	blx	r6
 801a5d4:	4602      	mov	r2, r0
 801a5d6:	1c50      	adds	r0, r2, #1
 801a5d8:	d1c9      	bne.n	801a56e <__sflush_r+0x32>
 801a5da:	682b      	ldr	r3, [r5, #0]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d0c6      	beq.n	801a56e <__sflush_r+0x32>
 801a5e0:	2b1d      	cmp	r3, #29
 801a5e2:	d001      	beq.n	801a5e8 <__sflush_r+0xac>
 801a5e4:	2b16      	cmp	r3, #22
 801a5e6:	d11e      	bne.n	801a626 <__sflush_r+0xea>
 801a5e8:	602f      	str	r7, [r5, #0]
 801a5ea:	2000      	movs	r0, #0
 801a5ec:	e022      	b.n	801a634 <__sflush_r+0xf8>
 801a5ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a5f2:	b21b      	sxth	r3, r3
 801a5f4:	e01b      	b.n	801a62e <__sflush_r+0xf2>
 801a5f6:	690f      	ldr	r7, [r1, #16]
 801a5f8:	2f00      	cmp	r7, #0
 801a5fa:	d0f6      	beq.n	801a5ea <__sflush_r+0xae>
 801a5fc:	0793      	lsls	r3, r2, #30
 801a5fe:	680e      	ldr	r6, [r1, #0]
 801a600:	bf08      	it	eq
 801a602:	694b      	ldreq	r3, [r1, #20]
 801a604:	600f      	str	r7, [r1, #0]
 801a606:	bf18      	it	ne
 801a608:	2300      	movne	r3, #0
 801a60a:	eba6 0807 	sub.w	r8, r6, r7
 801a60e:	608b      	str	r3, [r1, #8]
 801a610:	f1b8 0f00 	cmp.w	r8, #0
 801a614:	dde9      	ble.n	801a5ea <__sflush_r+0xae>
 801a616:	6a21      	ldr	r1, [r4, #32]
 801a618:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a61a:	4643      	mov	r3, r8
 801a61c:	463a      	mov	r2, r7
 801a61e:	4628      	mov	r0, r5
 801a620:	47b0      	blx	r6
 801a622:	2800      	cmp	r0, #0
 801a624:	dc08      	bgt.n	801a638 <__sflush_r+0xfc>
 801a626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a62e:	81a3      	strh	r3, [r4, #12]
 801a630:	f04f 30ff 	mov.w	r0, #4294967295
 801a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a638:	4407      	add	r7, r0
 801a63a:	eba8 0800 	sub.w	r8, r8, r0
 801a63e:	e7e7      	b.n	801a610 <__sflush_r+0xd4>
 801a640:	dfbffffe 	.word	0xdfbffffe

0801a644 <_fflush_r>:
 801a644:	b538      	push	{r3, r4, r5, lr}
 801a646:	690b      	ldr	r3, [r1, #16]
 801a648:	4605      	mov	r5, r0
 801a64a:	460c      	mov	r4, r1
 801a64c:	b913      	cbnz	r3, 801a654 <_fflush_r+0x10>
 801a64e:	2500      	movs	r5, #0
 801a650:	4628      	mov	r0, r5
 801a652:	bd38      	pop	{r3, r4, r5, pc}
 801a654:	b118      	cbz	r0, 801a65e <_fflush_r+0x1a>
 801a656:	6a03      	ldr	r3, [r0, #32]
 801a658:	b90b      	cbnz	r3, 801a65e <_fflush_r+0x1a>
 801a65a:	f7ff f919 	bl	8019890 <__sinit>
 801a65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d0f3      	beq.n	801a64e <_fflush_r+0xa>
 801a666:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a668:	07d0      	lsls	r0, r2, #31
 801a66a:	d404      	bmi.n	801a676 <_fflush_r+0x32>
 801a66c:	0599      	lsls	r1, r3, #22
 801a66e:	d402      	bmi.n	801a676 <_fflush_r+0x32>
 801a670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a672:	f7ff fa32 	bl	8019ada <__retarget_lock_acquire_recursive>
 801a676:	4628      	mov	r0, r5
 801a678:	4621      	mov	r1, r4
 801a67a:	f7ff ff5f 	bl	801a53c <__sflush_r>
 801a67e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a680:	07da      	lsls	r2, r3, #31
 801a682:	4605      	mov	r5, r0
 801a684:	d4e4      	bmi.n	801a650 <_fflush_r+0xc>
 801a686:	89a3      	ldrh	r3, [r4, #12]
 801a688:	059b      	lsls	r3, r3, #22
 801a68a:	d4e1      	bmi.n	801a650 <_fflush_r+0xc>
 801a68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a68e:	f7ff fa25 	bl	8019adc <__retarget_lock_release_recursive>
 801a692:	e7dd      	b.n	801a650 <_fflush_r+0xc>

0801a694 <__swbuf_r>:
 801a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a696:	460e      	mov	r6, r1
 801a698:	4614      	mov	r4, r2
 801a69a:	4605      	mov	r5, r0
 801a69c:	b118      	cbz	r0, 801a6a6 <__swbuf_r+0x12>
 801a69e:	6a03      	ldr	r3, [r0, #32]
 801a6a0:	b90b      	cbnz	r3, 801a6a6 <__swbuf_r+0x12>
 801a6a2:	f7ff f8f5 	bl	8019890 <__sinit>
 801a6a6:	69a3      	ldr	r3, [r4, #24]
 801a6a8:	60a3      	str	r3, [r4, #8]
 801a6aa:	89a3      	ldrh	r3, [r4, #12]
 801a6ac:	071a      	lsls	r2, r3, #28
 801a6ae:	d501      	bpl.n	801a6b4 <__swbuf_r+0x20>
 801a6b0:	6923      	ldr	r3, [r4, #16]
 801a6b2:	b943      	cbnz	r3, 801a6c6 <__swbuf_r+0x32>
 801a6b4:	4621      	mov	r1, r4
 801a6b6:	4628      	mov	r0, r5
 801a6b8:	f000 f82a 	bl	801a710 <__swsetup_r>
 801a6bc:	b118      	cbz	r0, 801a6c6 <__swbuf_r+0x32>
 801a6be:	f04f 37ff 	mov.w	r7, #4294967295
 801a6c2:	4638      	mov	r0, r7
 801a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6c6:	6823      	ldr	r3, [r4, #0]
 801a6c8:	6922      	ldr	r2, [r4, #16]
 801a6ca:	1a98      	subs	r0, r3, r2
 801a6cc:	6963      	ldr	r3, [r4, #20]
 801a6ce:	b2f6      	uxtb	r6, r6
 801a6d0:	4283      	cmp	r3, r0
 801a6d2:	4637      	mov	r7, r6
 801a6d4:	dc05      	bgt.n	801a6e2 <__swbuf_r+0x4e>
 801a6d6:	4621      	mov	r1, r4
 801a6d8:	4628      	mov	r0, r5
 801a6da:	f7ff ffb3 	bl	801a644 <_fflush_r>
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	d1ed      	bne.n	801a6be <__swbuf_r+0x2a>
 801a6e2:	68a3      	ldr	r3, [r4, #8]
 801a6e4:	3b01      	subs	r3, #1
 801a6e6:	60a3      	str	r3, [r4, #8]
 801a6e8:	6823      	ldr	r3, [r4, #0]
 801a6ea:	1c5a      	adds	r2, r3, #1
 801a6ec:	6022      	str	r2, [r4, #0]
 801a6ee:	701e      	strb	r6, [r3, #0]
 801a6f0:	6962      	ldr	r2, [r4, #20]
 801a6f2:	1c43      	adds	r3, r0, #1
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d004      	beq.n	801a702 <__swbuf_r+0x6e>
 801a6f8:	89a3      	ldrh	r3, [r4, #12]
 801a6fa:	07db      	lsls	r3, r3, #31
 801a6fc:	d5e1      	bpl.n	801a6c2 <__swbuf_r+0x2e>
 801a6fe:	2e0a      	cmp	r6, #10
 801a700:	d1df      	bne.n	801a6c2 <__swbuf_r+0x2e>
 801a702:	4621      	mov	r1, r4
 801a704:	4628      	mov	r0, r5
 801a706:	f7ff ff9d 	bl	801a644 <_fflush_r>
 801a70a:	2800      	cmp	r0, #0
 801a70c:	d0d9      	beq.n	801a6c2 <__swbuf_r+0x2e>
 801a70e:	e7d6      	b.n	801a6be <__swbuf_r+0x2a>

0801a710 <__swsetup_r>:
 801a710:	b538      	push	{r3, r4, r5, lr}
 801a712:	4b29      	ldr	r3, [pc, #164]	@ (801a7b8 <__swsetup_r+0xa8>)
 801a714:	4605      	mov	r5, r0
 801a716:	6818      	ldr	r0, [r3, #0]
 801a718:	460c      	mov	r4, r1
 801a71a:	b118      	cbz	r0, 801a724 <__swsetup_r+0x14>
 801a71c:	6a03      	ldr	r3, [r0, #32]
 801a71e:	b90b      	cbnz	r3, 801a724 <__swsetup_r+0x14>
 801a720:	f7ff f8b6 	bl	8019890 <__sinit>
 801a724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a728:	0719      	lsls	r1, r3, #28
 801a72a:	d422      	bmi.n	801a772 <__swsetup_r+0x62>
 801a72c:	06da      	lsls	r2, r3, #27
 801a72e:	d407      	bmi.n	801a740 <__swsetup_r+0x30>
 801a730:	2209      	movs	r2, #9
 801a732:	602a      	str	r2, [r5, #0]
 801a734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a738:	81a3      	strh	r3, [r4, #12]
 801a73a:	f04f 30ff 	mov.w	r0, #4294967295
 801a73e:	e033      	b.n	801a7a8 <__swsetup_r+0x98>
 801a740:	0758      	lsls	r0, r3, #29
 801a742:	d512      	bpl.n	801a76a <__swsetup_r+0x5a>
 801a744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a746:	b141      	cbz	r1, 801a75a <__swsetup_r+0x4a>
 801a748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a74c:	4299      	cmp	r1, r3
 801a74e:	d002      	beq.n	801a756 <__swsetup_r+0x46>
 801a750:	4628      	mov	r0, r5
 801a752:	f7ff f9d3 	bl	8019afc <_free_r>
 801a756:	2300      	movs	r3, #0
 801a758:	6363      	str	r3, [r4, #52]	@ 0x34
 801a75a:	89a3      	ldrh	r3, [r4, #12]
 801a75c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a760:	81a3      	strh	r3, [r4, #12]
 801a762:	2300      	movs	r3, #0
 801a764:	6063      	str	r3, [r4, #4]
 801a766:	6923      	ldr	r3, [r4, #16]
 801a768:	6023      	str	r3, [r4, #0]
 801a76a:	89a3      	ldrh	r3, [r4, #12]
 801a76c:	f043 0308 	orr.w	r3, r3, #8
 801a770:	81a3      	strh	r3, [r4, #12]
 801a772:	6923      	ldr	r3, [r4, #16]
 801a774:	b94b      	cbnz	r3, 801a78a <__swsetup_r+0x7a>
 801a776:	89a3      	ldrh	r3, [r4, #12]
 801a778:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a780:	d003      	beq.n	801a78a <__swsetup_r+0x7a>
 801a782:	4621      	mov	r1, r4
 801a784:	4628      	mov	r0, r5
 801a786:	f000 f897 	bl	801a8b8 <__smakebuf_r>
 801a78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a78e:	f013 0201 	ands.w	r2, r3, #1
 801a792:	d00a      	beq.n	801a7aa <__swsetup_r+0x9a>
 801a794:	2200      	movs	r2, #0
 801a796:	60a2      	str	r2, [r4, #8]
 801a798:	6962      	ldr	r2, [r4, #20]
 801a79a:	4252      	negs	r2, r2
 801a79c:	61a2      	str	r2, [r4, #24]
 801a79e:	6922      	ldr	r2, [r4, #16]
 801a7a0:	b942      	cbnz	r2, 801a7b4 <__swsetup_r+0xa4>
 801a7a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a7a6:	d1c5      	bne.n	801a734 <__swsetup_r+0x24>
 801a7a8:	bd38      	pop	{r3, r4, r5, pc}
 801a7aa:	0799      	lsls	r1, r3, #30
 801a7ac:	bf58      	it	pl
 801a7ae:	6962      	ldrpl	r2, [r4, #20]
 801a7b0:	60a2      	str	r2, [r4, #8]
 801a7b2:	e7f4      	b.n	801a79e <__swsetup_r+0x8e>
 801a7b4:	2000      	movs	r0, #0
 801a7b6:	e7f7      	b.n	801a7a8 <__swsetup_r+0x98>
 801a7b8:	24000244 	.word	0x24000244

0801a7bc <memmove>:
 801a7bc:	4288      	cmp	r0, r1
 801a7be:	b510      	push	{r4, lr}
 801a7c0:	eb01 0402 	add.w	r4, r1, r2
 801a7c4:	d902      	bls.n	801a7cc <memmove+0x10>
 801a7c6:	4284      	cmp	r4, r0
 801a7c8:	4623      	mov	r3, r4
 801a7ca:	d807      	bhi.n	801a7dc <memmove+0x20>
 801a7cc:	1e43      	subs	r3, r0, #1
 801a7ce:	42a1      	cmp	r1, r4
 801a7d0:	d008      	beq.n	801a7e4 <memmove+0x28>
 801a7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a7da:	e7f8      	b.n	801a7ce <memmove+0x12>
 801a7dc:	4402      	add	r2, r0
 801a7de:	4601      	mov	r1, r0
 801a7e0:	428a      	cmp	r2, r1
 801a7e2:	d100      	bne.n	801a7e6 <memmove+0x2a>
 801a7e4:	bd10      	pop	{r4, pc}
 801a7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a7ee:	e7f7      	b.n	801a7e0 <memmove+0x24>

0801a7f0 <_sbrk_r>:
 801a7f0:	b538      	push	{r3, r4, r5, lr}
 801a7f2:	4d06      	ldr	r5, [pc, #24]	@ (801a80c <_sbrk_r+0x1c>)
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	4604      	mov	r4, r0
 801a7f8:	4608      	mov	r0, r1
 801a7fa:	602b      	str	r3, [r5, #0]
 801a7fc:	f7e9 fce0 	bl	80041c0 <_sbrk>
 801a800:	1c43      	adds	r3, r0, #1
 801a802:	d102      	bne.n	801a80a <_sbrk_r+0x1a>
 801a804:	682b      	ldr	r3, [r5, #0]
 801a806:	b103      	cbz	r3, 801a80a <_sbrk_r+0x1a>
 801a808:	6023      	str	r3, [r4, #0]
 801a80a:	bd38      	pop	{r3, r4, r5, pc}
 801a80c:	240017b8 	.word	0x240017b8

0801a810 <_realloc_r>:
 801a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a814:	4680      	mov	r8, r0
 801a816:	4615      	mov	r5, r2
 801a818:	460c      	mov	r4, r1
 801a81a:	b921      	cbnz	r1, 801a826 <_realloc_r+0x16>
 801a81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a820:	4611      	mov	r1, r2
 801a822:	f7ff b9d7 	b.w	8019bd4 <_malloc_r>
 801a826:	b92a      	cbnz	r2, 801a834 <_realloc_r+0x24>
 801a828:	f7ff f968 	bl	8019afc <_free_r>
 801a82c:	2400      	movs	r4, #0
 801a82e:	4620      	mov	r0, r4
 801a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a834:	f000 f89e 	bl	801a974 <_malloc_usable_size_r>
 801a838:	4285      	cmp	r5, r0
 801a83a:	4606      	mov	r6, r0
 801a83c:	d802      	bhi.n	801a844 <_realloc_r+0x34>
 801a83e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a842:	d8f4      	bhi.n	801a82e <_realloc_r+0x1e>
 801a844:	4629      	mov	r1, r5
 801a846:	4640      	mov	r0, r8
 801a848:	f7ff f9c4 	bl	8019bd4 <_malloc_r>
 801a84c:	4607      	mov	r7, r0
 801a84e:	2800      	cmp	r0, #0
 801a850:	d0ec      	beq.n	801a82c <_realloc_r+0x1c>
 801a852:	42b5      	cmp	r5, r6
 801a854:	462a      	mov	r2, r5
 801a856:	4621      	mov	r1, r4
 801a858:	bf28      	it	cs
 801a85a:	4632      	movcs	r2, r6
 801a85c:	f7ff f93f 	bl	8019ade <memcpy>
 801a860:	4621      	mov	r1, r4
 801a862:	4640      	mov	r0, r8
 801a864:	f7ff f94a 	bl	8019afc <_free_r>
 801a868:	463c      	mov	r4, r7
 801a86a:	e7e0      	b.n	801a82e <_realloc_r+0x1e>

0801a86c <__swhatbuf_r>:
 801a86c:	b570      	push	{r4, r5, r6, lr}
 801a86e:	460c      	mov	r4, r1
 801a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a874:	2900      	cmp	r1, #0
 801a876:	b096      	sub	sp, #88	@ 0x58
 801a878:	4615      	mov	r5, r2
 801a87a:	461e      	mov	r6, r3
 801a87c:	da0d      	bge.n	801a89a <__swhatbuf_r+0x2e>
 801a87e:	89a3      	ldrh	r3, [r4, #12]
 801a880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a884:	f04f 0100 	mov.w	r1, #0
 801a888:	bf14      	ite	ne
 801a88a:	2340      	movne	r3, #64	@ 0x40
 801a88c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a890:	2000      	movs	r0, #0
 801a892:	6031      	str	r1, [r6, #0]
 801a894:	602b      	str	r3, [r5, #0]
 801a896:	b016      	add	sp, #88	@ 0x58
 801a898:	bd70      	pop	{r4, r5, r6, pc}
 801a89a:	466a      	mov	r2, sp
 801a89c:	f000 f848 	bl	801a930 <_fstat_r>
 801a8a0:	2800      	cmp	r0, #0
 801a8a2:	dbec      	blt.n	801a87e <__swhatbuf_r+0x12>
 801a8a4:	9901      	ldr	r1, [sp, #4]
 801a8a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a8aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a8ae:	4259      	negs	r1, r3
 801a8b0:	4159      	adcs	r1, r3
 801a8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a8b6:	e7eb      	b.n	801a890 <__swhatbuf_r+0x24>

0801a8b8 <__smakebuf_r>:
 801a8b8:	898b      	ldrh	r3, [r1, #12]
 801a8ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a8bc:	079d      	lsls	r5, r3, #30
 801a8be:	4606      	mov	r6, r0
 801a8c0:	460c      	mov	r4, r1
 801a8c2:	d507      	bpl.n	801a8d4 <__smakebuf_r+0x1c>
 801a8c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a8c8:	6023      	str	r3, [r4, #0]
 801a8ca:	6123      	str	r3, [r4, #16]
 801a8cc:	2301      	movs	r3, #1
 801a8ce:	6163      	str	r3, [r4, #20]
 801a8d0:	b003      	add	sp, #12
 801a8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8d4:	ab01      	add	r3, sp, #4
 801a8d6:	466a      	mov	r2, sp
 801a8d8:	f7ff ffc8 	bl	801a86c <__swhatbuf_r>
 801a8dc:	9f00      	ldr	r7, [sp, #0]
 801a8de:	4605      	mov	r5, r0
 801a8e0:	4639      	mov	r1, r7
 801a8e2:	4630      	mov	r0, r6
 801a8e4:	f7ff f976 	bl	8019bd4 <_malloc_r>
 801a8e8:	b948      	cbnz	r0, 801a8fe <__smakebuf_r+0x46>
 801a8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8ee:	059a      	lsls	r2, r3, #22
 801a8f0:	d4ee      	bmi.n	801a8d0 <__smakebuf_r+0x18>
 801a8f2:	f023 0303 	bic.w	r3, r3, #3
 801a8f6:	f043 0302 	orr.w	r3, r3, #2
 801a8fa:	81a3      	strh	r3, [r4, #12]
 801a8fc:	e7e2      	b.n	801a8c4 <__smakebuf_r+0xc>
 801a8fe:	89a3      	ldrh	r3, [r4, #12]
 801a900:	6020      	str	r0, [r4, #0]
 801a902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a906:	81a3      	strh	r3, [r4, #12]
 801a908:	9b01      	ldr	r3, [sp, #4]
 801a90a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a90e:	b15b      	cbz	r3, 801a928 <__smakebuf_r+0x70>
 801a910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a914:	4630      	mov	r0, r6
 801a916:	f000 f81d 	bl	801a954 <_isatty_r>
 801a91a:	b128      	cbz	r0, 801a928 <__smakebuf_r+0x70>
 801a91c:	89a3      	ldrh	r3, [r4, #12]
 801a91e:	f023 0303 	bic.w	r3, r3, #3
 801a922:	f043 0301 	orr.w	r3, r3, #1
 801a926:	81a3      	strh	r3, [r4, #12]
 801a928:	89a3      	ldrh	r3, [r4, #12]
 801a92a:	431d      	orrs	r5, r3
 801a92c:	81a5      	strh	r5, [r4, #12]
 801a92e:	e7cf      	b.n	801a8d0 <__smakebuf_r+0x18>

0801a930 <_fstat_r>:
 801a930:	b538      	push	{r3, r4, r5, lr}
 801a932:	4d07      	ldr	r5, [pc, #28]	@ (801a950 <_fstat_r+0x20>)
 801a934:	2300      	movs	r3, #0
 801a936:	4604      	mov	r4, r0
 801a938:	4608      	mov	r0, r1
 801a93a:	4611      	mov	r1, r2
 801a93c:	602b      	str	r3, [r5, #0]
 801a93e:	f7e9 fc16 	bl	800416e <_fstat>
 801a942:	1c43      	adds	r3, r0, #1
 801a944:	d102      	bne.n	801a94c <_fstat_r+0x1c>
 801a946:	682b      	ldr	r3, [r5, #0]
 801a948:	b103      	cbz	r3, 801a94c <_fstat_r+0x1c>
 801a94a:	6023      	str	r3, [r4, #0]
 801a94c:	bd38      	pop	{r3, r4, r5, pc}
 801a94e:	bf00      	nop
 801a950:	240017b8 	.word	0x240017b8

0801a954 <_isatty_r>:
 801a954:	b538      	push	{r3, r4, r5, lr}
 801a956:	4d06      	ldr	r5, [pc, #24]	@ (801a970 <_isatty_r+0x1c>)
 801a958:	2300      	movs	r3, #0
 801a95a:	4604      	mov	r4, r0
 801a95c:	4608      	mov	r0, r1
 801a95e:	602b      	str	r3, [r5, #0]
 801a960:	f7e9 fc15 	bl	800418e <_isatty>
 801a964:	1c43      	adds	r3, r0, #1
 801a966:	d102      	bne.n	801a96e <_isatty_r+0x1a>
 801a968:	682b      	ldr	r3, [r5, #0]
 801a96a:	b103      	cbz	r3, 801a96e <_isatty_r+0x1a>
 801a96c:	6023      	str	r3, [r4, #0]
 801a96e:	bd38      	pop	{r3, r4, r5, pc}
 801a970:	240017b8 	.word	0x240017b8

0801a974 <_malloc_usable_size_r>:
 801a974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a978:	1f18      	subs	r0, r3, #4
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	bfbc      	itt	lt
 801a97e:	580b      	ldrlt	r3, [r1, r0]
 801a980:	18c0      	addlt	r0, r0, r3
 801a982:	4770      	bx	lr

0801a984 <_init>:
 801a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a986:	bf00      	nop
 801a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a98a:	bc08      	pop	{r3}
 801a98c:	469e      	mov	lr, r3
 801a98e:	4770      	bx	lr

0801a990 <_fini>:
 801a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a992:	bf00      	nop
 801a994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a996:	bc08      	pop	{r3}
 801a998:	469e      	mov	lr, r3
 801a99a:	4770      	bx	lr
