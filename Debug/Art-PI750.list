
Art-PI750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a68c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0801a92c  0801a92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b6b0  0801b6b0  0001c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b6b8  0801b6b8  0001c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b6bc  0801b6bc  0001c6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000294  24000000  0801b6c0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001528  240002a0  0801b954  0001d2a0  2**5
                  ALLOC
  8 .sdram_section 00000000  c0000000  c0000000  00026401  2**0
                  CONTENTS
  9 ._user_heap_stack 00001e00  240017c8  240017c8  0001d7c8  2**0
                  ALLOC
 10 .dma_buffer   00008000  30000000  30000000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .i2c_buffer   00000401  38000000  38000000  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00026401  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031052  00000000  00000000  0002642f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006403  00000000  00000000  00057481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  0005d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ce6  00000000  00000000  0005fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042447  00000000  00000000  00061ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a27f  00000000  00000000  000a3f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b56c  00000000  00000000  000de1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00269718  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a620  00000000  00000000  0026975c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00273d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a914 	.word	0x0801a914

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	0801a914 	.word	0x0801a914

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_ADC3_Init+0xc0>)
 800068a:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <MX_ADC3_Init+0xc4>)
 800068c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_14B;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_ADC3_Init+0xc0>)
 8000690:	2204      	movs	r2, #4
 8000692:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <MX_ADC3_Init+0xc0>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_ADC3_Init+0xc0>)
 800069c:	2204      	movs	r2, #4
 800069e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO2;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006ba:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_2;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006e6:	4812      	ldr	r0, [pc, #72]	@ (8000730 <MX_ADC3_Init+0xc0>)
 80006e8:	f004 fe02 	bl	80052f0 <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80006f2:	f002 fd4f 	bl	8003194 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f6:	2301      	movs	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	2306      	movs	r3, #6
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000702:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000706:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000708:	2304      	movs	r3, #4
 800070a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_ADC3_Init+0xc0>)
 800071a:	f005 fb87 	bl	8005e2c <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000724:	f002 fd36 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	240002bc 	.word	0x240002bc
 8000734:	58026000 	.word	0x58026000

08000738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0b4      	sub	sp, #208	@ 0xd0
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	22c0      	movs	r2, #192	@ 0xc0
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f019 f914 	bl	8019976 <memset>
  if(adcHandle->Instance==ADC3)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a4a      	ldr	r2, [pc, #296]	@ (800087c <HAL_ADC_MspInit+0x144>)
 8000754:	4293      	cmp	r3, r2
 8000756:	f040 808c 	bne.w	8000872 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800075a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000766:	2305      	movs	r3, #5
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 30;
 800076a:	231e      	movs	r3, #30
 800076c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000776:	2303      	movs	r3, #3
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800077a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800078a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800078e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4618      	mov	r0, r3
 8000798:	f00c ffc0 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80007a2:	f002 fcf7 	bl	8003194 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007a6:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a34      	ldr	r2, [pc, #208]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <HAL_ADC_MspInit+0x148>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80007e2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80007e6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80007ea:	f004 fb3d 	bl	8004e68 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream7;
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 80007f0:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <HAL_ADC_MspInit+0x150>)
 80007f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 80007f6:	2273      	movs	r2, #115	@ 0x73
 80007f8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800080c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000814:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800081c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000820:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000824:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000828:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800082c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000830:	2204      	movs	r2, #4
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000836:	2201      	movs	r2, #1
 8000838:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000842:	2200      	movs	r2, #0
 8000844:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 8000848:	f006 fab2 	bl	8006db0 <HAL_DMA_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8000852:	f002 fc9f 	bl	8003194 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 800085a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <HAL_ADC_MspInit+0x14c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	207f      	movs	r0, #127	@ 0x7f
 8000868:	f006 fa6d 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800086c:	207f      	movs	r0, #127	@ 0x7f
 800086e:	f006 fa84 	bl	8006d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000872:	bf00      	nop
 8000874:	37d0      	adds	r7, #208	@ 0xd0
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	58026000 	.word	0x58026000
 8000880:	58024400 	.word	0x58024400
 8000884:	2400034c 	.word	0x2400034c
 8000888:	400204b8 	.word	0x400204b8

0800088c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_BDMA_Init+0x5c>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <MX_BDMA_Init+0x5c>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_BDMA_Init+0x5c>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2080      	movs	r0, #128	@ 0x80
 80008b6:	f006 fa46 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80008ba:	2080      	movs	r0, #128	@ 0x80
 80008bc:	f006 fa5d 	bl	8006d7a <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2081      	movs	r0, #129	@ 0x81
 80008c6:	f006 fa3e 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80008ca:	2081      	movs	r0, #129	@ 0x81
 80008cc:	f006 fa55 	bl	8006d7a <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2082      	movs	r0, #130	@ 0x82
 80008d6:	f006 fa36 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80008da:	2082      	movs	r0, #130	@ 0x82
 80008dc:	f006 fa4d 	bl	8006d7a <HAL_NVIC_EnableIRQ>

}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream7
  */
void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <MX_DMA_Init+0xd8>)
 80008f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008f8:	4a32      	ldr	r2, [pc, #200]	@ (80009c4 <MX_DMA_Init+0xd8>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000902:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <MX_DMA_Init+0xd8>)
 8000904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <MX_DMA_Init+0xd8>)
 8000912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000916:	4a2b      	ldr	r2, [pc, #172]	@ (80009c4 <MX_DMA_Init+0xd8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000920:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <MX_DMA_Init+0xd8>)
 8000922:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream7 on DMA1_Stream7 */
  hdma_memtomem_dma1_stream7.Instance = DMA1_Stream7;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000930:	4a26      	ldr	r2, [pc, #152]	@ (80009cc <MX_DMA_Init+0xe0>)
 8000932:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream7.Init.Request = DMA_REQUEST_MEM2MEM;
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream7.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_DMA_Init+0xdc>)
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream7.Init.PeriphInc = DMA_PINC_ENABLE;
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000946:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream7.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_DMA_Init+0xdc>)
 800094a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800094e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream7.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000952:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000956:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream7.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_DMA_Init+0xdc>)
 800095a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800095e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream7.Init.Mode = DMA_NORMAL;
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream7.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000968:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800096c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream7.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000970:	2204      	movs	r2, #4
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma1_stream7.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000976:	2203      	movs	r2, #3
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma1_stream7.Init.MemBurst = DMA_MBURST_INC4;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_DMA_Init+0xdc>)
 800097c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma1_stream7.Init.PeriphBurst = DMA_PBURST_INC4;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_DMA_Init+0xdc>)
 8000984:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000988:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream7) != HAL_OK)
 800098a:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <MX_DMA_Init+0xdc>)
 800098c:	f006 fa10 	bl	8006db0 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_DMA_Init+0xae>
  {
    Error_Handler();
 8000996:	f002 fbfd 	bl	8003194 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	202f      	movs	r0, #47	@ 0x2f
 80009a0:	f006 f9d1 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009a4:	202f      	movs	r0, #47	@ 0x2f
 80009a6:	f006 f9e8 	bl	8006d7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2046      	movs	r0, #70	@ 0x46
 80009b0:	f006 f9c9 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009b4:	2046      	movs	r0, #70	@ 0x46
 80009b6:	f006 f9e0 	bl	8006d7a <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	58024400 	.word	0x58024400
 80009c8:	240003c4 	.word	0x240003c4
 80009cc:	400200b8 	.word	0x400200b8

080009d0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ea:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <MX_FMC_Init+0x10c>)
 80009ec:	4a3c      	ldr	r2, [pc, #240]	@ (8000ae0 <MX_FMC_Init+0x110>)
 80009ee:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	@ (8000adc <MX_FMC_Init+0x10c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <MX_FMC_Init+0x10c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80009fc:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <MX_FMC_Init+0x10c>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a0a:	2240      	movs	r2, #64	@ 0x40
 8000a0c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a0e:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a14:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a16:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a22:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a24:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000a40:	2306      	movs	r3, #6
 8000a42:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RPDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RCDDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4821      	ldr	r0, [pc, #132]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a58:	f011 fb36 	bl	80120c8 <HAL_SDRAM_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000a62:	f002 fb97 	bl	8003194 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 3: Configure a clock configuration enable command */
   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	60bb      	str	r3, [r7, #8]
   Command.AutoRefreshNumber      = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
   Command.ModeRegisterDefinition = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4817      	ldr	r0, [pc, #92]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a80:	f011 fb96 	bl	80121b0 <HAL_SDRAM_SendCommand>
   HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000a84:	2001      	movs	r0, #1
 8000a86:	f004 f99b 	bl	8004dc0 <HAL_Delay>
   /* Step 5: Configure a PALL (precharge all) command */
   Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	607b      	str	r3, [r7, #4]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a94:	4619      	mov	r1, r3
 8000a96:	4811      	ldr	r0, [pc, #68]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000a98:	f011 fb8a 	bl	80121b0 <HAL_SDRAM_SendCommand>
   /* Step 6: Configure an Auto Refresh command */
   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000aae:	f011 fb7f 	bl	80121b0 <HAL_SDRAM_SendCommand>
   /* Step 7: Program the external memory mode register */
   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	607b      	str	r3, [r7, #4]
   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000ab6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000aba:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000ac6:	f011 fb73 	bl	80121b0 <HAL_SDRAM_SendCommand>
   /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
   /* Set the device refresh rate
    * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
            = [(64ms/8192) * 100MHz] - 20 = 782.25 - 20 ~ 761 */
   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 761);
 8000aca:	f240 21f9 	movw	r1, #761	@ 0x2f9
 8000ace:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_FMC_Init+0x10c>)
 8000ad0:	f011 fba3 	bl	801221a <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2400043c 	.word	0x2400043c
 8000ae0:	52004140 	.word	0x52004140

08000ae4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0b8      	sub	sp, #224	@ 0xe0
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000afa:	4b5b      	ldr	r3, [pc, #364]	@ (8000c68 <HAL_FMC_MspInit+0x184>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 80ae 	bne.w	8000c60 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000b04:	4b58      	ldr	r3, [pc, #352]	@ (8000c68 <HAL_FMC_MspInit+0x184>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	22c0      	movs	r2, #192	@ 0xc0
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f018 ff2f 	bl	8019976 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000b18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8000b24:	2301      	movs	r3, #1
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00c fdf5 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000b38:	f002 fb2c 	bl	8003194 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c6c <HAL_FMC_MspInit+0x188>)
 8000b3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b42:	4a4a      	ldr	r2, [pc, #296]	@ (8000c6c <HAL_FMC_MspInit+0x188>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000b4c:	4b47      	ldr	r3, [pc, #284]	@ (8000c6c <HAL_FMC_MspInit+0x188>)
 8000b4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000b5a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b74:	230c      	movs	r3, #12
 8000b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b7e:	4619      	mov	r1, r3
 8000b80:	483b      	ldr	r0, [pc, #236]	@ (8000c70 <HAL_FMC_MspInit+0x18c>)
 8000b82:	f008 fdbf 	bl	8009704 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000b86:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000baa:	4619      	mov	r1, r3
 8000bac:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <HAL_FMC_MspInit+0x190>)
 8000bae:	f008 fda9 	bl	8009704 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000bb2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000bb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4827      	ldr	r0, [pc, #156]	@ (8000c78 <HAL_FMC_MspInit+0x194>)
 8000bda:	f008 fd93 	bl	8009704 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000bde:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000be2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfe:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c02:	4619      	mov	r1, r3
 8000c04:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <HAL_FMC_MspInit+0x198>)
 8000c06:	f008 fd7d 	bl	8009704 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c22:	230c      	movs	r3, #12
 8000c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4814      	ldr	r0, [pc, #80]	@ (8000c80 <HAL_FMC_MspInit+0x19c>)
 8000c30:	f008 fd68 	bl	8009704 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c34:	2320      	movs	r3, #32
 8000c36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c52:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <HAL_FMC_MspInit+0x1a0>)
 8000c5a:	f008 fd53 	bl	8009704 <HAL_GPIO_Init>
 8000c5e:	e000      	b.n	8000c62 <HAL_FMC_MspInit+0x17e>
    return;
 8000c60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c62:	37e0      	adds	r7, #224	@ 0xe0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24000484 	.word	0x24000484
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58021000 	.word	0x58021000
 8000c74:	58021800 	.word	0x58021800
 8000c78:	58020c00 	.word	0x58020c00
 8000c7c:	58021400 	.word	0x58021400
 8000c80:	58020800 	.word	0x58020800
 8000c84:	58021c00 	.word	0x58021c00

08000c88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c90:	f7ff ff28 	bl	8000ae4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_GPIO_Init>:
     PJ2   ------> LTDC_R3
     PJ3   ------> LTDC_R4
     PJ4   ------> LTDC_R5
*/
void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	@ 0x40
 8000ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cb2:	4bc0      	ldr	r3, [pc, #768]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	4abe      	ldr	r2, [pc, #760]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc2:	4bbc      	ldr	r3, [pc, #752]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cd0:	4bb8      	ldr	r3, [pc, #736]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4ab7      	ldr	r2, [pc, #732]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4bb4      	ldr	r3, [pc, #720]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4bb1      	ldr	r3, [pc, #708]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4aaf      	ldr	r2, [pc, #700]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4bad      	ldr	r3, [pc, #692]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4ba9      	ldr	r3, [pc, #676]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4aa8      	ldr	r2, [pc, #672]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4ba5      	ldr	r3, [pc, #660]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4ba2      	ldr	r3, [pc, #648]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4aa0      	ldr	r2, [pc, #640]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b9e      	ldr	r3, [pc, #632]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d48:	4b9a      	ldr	r3, [pc, #616]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a99      	ldr	r2, [pc, #612]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b96      	ldr	r3, [pc, #600]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b93      	ldr	r3, [pc, #588]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a91      	ldr	r2, [pc, #580]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b8b      	ldr	r3, [pc, #556]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a8a      	ldr	r2, [pc, #552]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b87      	ldr	r3, [pc, #540]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da2:	4b84      	ldr	r3, [pc, #528]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	4a82      	ldr	r2, [pc, #520]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db2:	4b80      	ldr	r3, [pc, #512]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a7b      	ldr	r2, [pc, #492]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000dc8:	f043 0320 	orr.w	r3, r3, #32
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b78      	ldr	r3, [pc, #480]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b75      	ldr	r3, [pc, #468]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a73      	ldr	r2, [pc, #460]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b71      	ldr	r3, [pc, #452]	@ (8000fb4 <MX_GPIO_Init+0x318>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TS_RST_Pin|SDwrt_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000e02:	486d      	ldr	r0, [pc, #436]	@ (8000fb8 <MX_GPIO_Init+0x31c>)
 8000e04:	f008 fe46 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Enable9_Pin|DMAxfr_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000e0e:	486b      	ldr	r0, [pc, #428]	@ (8000fbc <MX_GPIO_Init+0x320>)
 8000e10:	f008 fe40 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUEled_GPIO_Port, BLUEled_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1a:	4869      	ldr	r0, [pc, #420]	@ (8000fc0 <MX_GPIO_Init+0x324>)
 8000e1c:	f008 fe3a 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|LED7_Pin|LED5_Pin|LED4_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f641 018c 	movw	r1, #6284	@ 0x188c
 8000e26:	4867      	ldr	r0, [pc, #412]	@ (8000fc4 <MX_GPIO_Init+0x328>)
 8000e28:	f008 fe34 	bl	8009a94 <HAL_GPIO_WritePin>
                          |LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2132      	movs	r1, #50	@ 0x32
 8000e30:	4865      	ldr	r0, [pc, #404]	@ (8000fc8 <MX_GPIO_Init+0x32c>)
 8000e32:	f008 fe2f 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, ADCCplt_Pin|Trigger_Pin|Tim8Cplt_Pin_Pin|Tim1Cplt_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000e3c:	4863      	ldr	r0, [pc, #396]	@ (8000fcc <MX_GPIO_Init+0x330>)
 8000e3e:	f008 fe29 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2101      	movs	r1, #1
 8000e46:	4862      	ldr	r0, [pc, #392]	@ (8000fd0 <MX_GPIO_Init+0x334>)
 8000e48:	f008 fe24 	bl	8009a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK2 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e4c:	237e      	movs	r3, #126	@ 0x7e
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	485b      	ldr	r0, [pc, #364]	@ (8000fd4 <MX_GPIO_Init+0x338>)
 8000e68:	f008 fc4c 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	484e      	ldr	r0, [pc, #312]	@ (8000fb8 <MX_GPIO_Init+0x31c>)
 8000e80:	f008 fc40 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TS_RST_Pin|SDwrt_Pin;
 8000e84:	f242 0308 	movw	r3, #8200	@ 0x2008
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4846      	ldr	r0, [pc, #280]	@ (8000fb8 <MX_GPIO_Init+0x31c>)
 8000e9e:	f008 fc31 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000eb2:	2309      	movs	r3, #9
 8000eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4844      	ldr	r0, [pc, #272]	@ (8000fd0 <MX_GPIO_Init+0x334>)
 8000ebe:	f008 fc21 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IIC_INT_Pin;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TS_IIC_INT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4839      	ldr	r0, [pc, #228]	@ (8000fbc <MX_GPIO_Init+0x320>)
 8000ed8:	f008 fc14 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable9_Pin;
 8000edc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(Enable9_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4831      	ldr	r0, [pc, #196]	@ (8000fbc <MX_GPIO_Init+0x320>)
 8000ef6:	f008 fc05 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ12 PJ13 PJ11 PJ10
                           PJ9 PJ0 PJ8 PJ7
                           PJ6 PJ1 PJ2 PJ3
                           PJ4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10
 8000efa:	f643 73df 	movw	r3, #16351	@ 0x3fdf
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_7
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f0c:	230e      	movs	r3, #14
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	4830      	ldr	r0, [pc, #192]	@ (8000fd8 <MX_GPIO_Init+0x33c>)
 8000f18:	f008 fbf4 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUEled_Pin;
 8000f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(BLUEled_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	4822      	ldr	r0, [pc, #136]	@ (8000fc0 <MX_GPIO_Init+0x324>)
 8000f36:	f008 fbe5 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED8_Pin|LED7_Pin|LED5_Pin|LED4_Pin;
 8000f3a:	f641 0384 	movw	r3, #6276	@ 0x1884
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <MX_GPIO_Init+0x328>)
 8000f54:	f008 fbd6 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMAxfr_Pin;
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DMAxfr_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <MX_GPIO_Init+0x320>)
 8000f70:	f008 fbc8 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f74:	2340      	movs	r3, #64	@ 0x40
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f84:	230a      	movs	r3, #10
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <MX_GPIO_Init+0x320>)
 8000f90:	f008 fbb8 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f94:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa6:	230e      	movs	r3, #14
 8000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	e014      	b.n	8000fdc <MX_GPIO_Init+0x340>
 8000fb2:	bf00      	nop
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020c00 	.word	0x58020c00
 8000fbc:	58021800 	.word	0x58021800
 8000fc0:	58022000 	.word	0x58022000
 8000fc4:	58020000 	.word	0x58020000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58021c00 	.word	0x58021c00
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58022800 	.word	0x58022800
 8000fd8:	58022400 	.word	0x58022400
 8000fdc:	484e      	ldr	r0, [pc, #312]	@ (8001118 <MX_GPIO_Init+0x47c>)
 8000fde:	f008 fb91 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fea:	2302      	movs	r3, #2
 8000fec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4849      	ldr	r0, [pc, #292]	@ (800111c <MX_GPIO_Init+0x480>)
 8000ff6:	f008 fb85 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800100a:	2309      	movs	r3, #9
 800100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4842      	ldr	r0, [pc, #264]	@ (8001120 <MX_GPIO_Init+0x484>)
 8001016:	f008 fb75 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 800101a:	2332      	movs	r3, #50	@ 0x32
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	483c      	ldr	r0, [pc, #240]	@ (8001124 <MX_GPIO_Init+0x488>)
 8001032:	f008 fb67 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = JOYstick2_Pin|JOYstick1_Pin;
 8001036:	230c      	movs	r3, #12
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4837      	ldr	r0, [pc, #220]	@ (8001128 <MX_GPIO_Init+0x48c>)
 800104a:	f008 fb5b 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TimeSet_Pin;
 800104e:	2310      	movs	r3, #16
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TimeSet_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4831      	ldr	r0, [pc, #196]	@ (8001128 <MX_GPIO_Init+0x48c>)
 8001062:	f008 fb4f 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	482a      	ldr	r0, [pc, #168]	@ (800112c <MX_GPIO_Init+0x490>)
 8001084:	f008 fb3e 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = ADCCplt_Pin|Trigger_Pin|Tim8Cplt_Pin_Pin|Tim1Cplt_Pin;
 8001088:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4821      	ldr	r0, [pc, #132]	@ (8001128 <MX_GPIO_Init+0x48c>)
 80010a2:	f008 fb2f 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOYstickPB_Pin;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(JOYstickPB_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b8:	4619      	mov	r1, r3
 80010ba:	481d      	ldr	r0, [pc, #116]	@ (8001130 <MX_GPIO_Init+0x494>)
 80010bc:	f008 fb22 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOYstick3_Pin|JOYstick4_Pin;
 80010c0:	2306      	movs	r3, #6
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4816      	ldr	r0, [pc, #88]	@ (800112c <MX_GPIO_Init+0x490>)
 80010d4:	f008 fb16 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80010d8:	2308      	movs	r3, #8
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010e0:	2302      	movs	r3, #2
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4810      	ldr	r0, [pc, #64]	@ (8001130 <MX_GPIO_Init+0x494>)
 80010f0:	f008 fb08 	bl	8009704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SensorPWRenable_Pin;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SensorPWRenable_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4808      	ldr	r0, [pc, #32]	@ (800112c <MX_GPIO_Init+0x490>)
 800110c:	f008 fafa 	bl	8009704 <HAL_GPIO_Init>

}
 8001110:	bf00      	nop
 8001112:	3740      	adds	r7, #64	@ 0x40
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	58022000 	.word	0x58022000
 800111c:	58021800 	.word	0x58021800
 8001120:	58021400 	.word	0x58021400
 8001124:	58020800 	.word	0x58020800
 8001128:	58021c00 	.word	0x58021c00
 800112c:	58020400 	.word	0x58020400
 8001130:	58020000 	.word	0x58020000

08001134 <MX_GPIO2Init>:

/* USER CODE BEGIN 2 */
void MX_GPIO2Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
//
//   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
//   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
//   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_tx;
DMA_HandleTypeDef hdma_i2c4_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <MX_I2C1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <MX_I2C1_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001180:	f008 fcbc 	bl	8009afc <HAL_I2C_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800118a:	f002 f803 	bl	8003194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <MX_I2C1_Init+0x74>)
 8001192:	f00a ff87 	bl	800c0a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800119c:	f001 fffa 	bl	8003194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_I2C1_Init+0x74>)
 80011a4:	f00a ffc9 	bl	800c13a <HAL_I2CEx_ConfigDigitalFilter>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f001 fff1 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	24000488 	.word	0x24000488
 80011bc:	40005400 	.word	0x40005400
 80011c0:	00c0eaff 	.word	0x00c0eaff

080011c4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <MX_I2C4_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <MX_I2C4_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011d4:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_I2C4_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_I2C4_Init+0x74>)
 8001200:	f008 fc7c 	bl	8009afc <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800120a:	f001 ffc3 	bl	8003194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <MX_I2C4_Init+0x74>)
 8001212:	f00a ff47 	bl	800c0a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800121c:	f001 ffba 	bl	8003194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_I2C4_Init+0x74>)
 8001224:	f00a ff89 	bl	800c13a <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800122e:	f001 ffb1 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2400050c 	.word	0x2400050c
 800123c:	58001c00 	.word	0x58001c00
 8001240:	10707dbc 	.word	0x10707dbc

08001244 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0c0      	sub	sp, #256	@ 0x100
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800125c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	22c0      	movs	r2, #192	@ 0xc0
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f018 fb7f 	bl	8019976 <memset>
  if(i2cHandle->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a8d      	ldr	r2, [pc, #564]	@ (80014b4 <HAL_I2C_MspInit+0x270>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d146      	bne.n	8001310 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001282:	f04f 0208 	mov.w	r2, #8
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fa3f 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_MspInit+0x64>
    {
      Error_Handler();
 80012a4:	f001 ff76 	bl	8003194 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b83      	ldr	r3, [pc, #524]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	4a82      	ldr	r2, [pc, #520]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b8:	4b7f      	ldr	r3, [pc, #508]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c0      	movs	r3, #192	@ 0xc0
 80012c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012de:	2304      	movs	r3, #4
 80012e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80012e8:	4619      	mov	r1, r3
 80012ea:	4874      	ldr	r0, [pc, #464]	@ (80014bc <HAL_I2C_MspInit+0x278>)
 80012ec:	f008 fa0a 	bl	8009704 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	4b71      	ldr	r3, [pc, #452]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80012f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f6:	4a70      	ldr	r2, [pc, #448]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001300:	4b6d      	ldr	r3, [pc, #436]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 8001302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800130e:	e0cb      	b.n	80014a8 <HAL_I2C_MspInit+0x264>
  else if(i2cHandle->Instance==I2C4)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a6a      	ldr	r2, [pc, #424]	@ (80014c0 <HAL_I2C_MspInit+0x27c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 80c6 	bne.w	80014a8 <HAL_I2C_MspInit+0x264>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800131c:	f04f 0210 	mov.w	r2, #16
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_HSI;
 8001328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800132c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f00c f9f1 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_I2C_MspInit+0x100>
      Error_Handler();
 8001340:	f001 ff28 	bl	8003194 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001344:	4b5c      	ldr	r3, [pc, #368]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	4a5b      	ldr	r2, [pc, #364]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001354:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001362:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001366:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800137c:	2304      	movs	r3, #4
 800137e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001382:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001386:	4619      	mov	r1, r3
 8001388:	484e      	ldr	r0, [pc, #312]	@ (80014c4 <HAL_I2C_MspInit+0x280>)
 800138a:	f008 f9bb 	bl	8009704 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800138e:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 8001390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 8001396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800139e:	4b46      	ldr	r3, [pc, #280]	@ (80014b8 <HAL_I2C_MspInit+0x274>)
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = BDMA_Channel0;
 80013ac:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013ae:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <HAL_I2C_MspInit+0x288>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 80013b2:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013b4:	220e      	movs	r2, #14
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b8:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013ba:	2240      	movs	r2, #64	@ 0x40
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b42      	ldr	r3, [pc, #264]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013cc:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80013d8:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013de:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80013e4:	4838      	ldr	r0, [pc, #224]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 80013e6:	f005 fce3 	bl	8006db0 <HAL_DMA_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 80013f0:	f001 fed0 	bl	8003194 <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 80013f4:	230e      	movs	r3, #14
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    pSyncConfig.SyncEnable = DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
    pSyncConfig.EventEnable = ENABLE;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
    pSyncConfig.RequestNumber = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c4_tx, &pSyncConfig) != HAL_OK)
 8001412:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001416:	4619      	mov	r1, r3
 8001418:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 800141a:	f008 f85b 	bl	80094d4 <HAL_DMAEx_ConfigMuxSync>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_I2C_MspInit+0x1e4>
      Error_Handler();
 8001424:	f001 feb6 	bl	8003194 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
 800142e:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_I2C_MspInit+0x284>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c4_rx.Instance = BDMA_Channel1;
 8001434:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001436:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <HAL_I2C_MspInit+0x290>)
 8001438:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 800143c:	220d      	movs	r2, #13
 800143e:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001446:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144c:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 800144e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001452:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800146c:	4818      	ldr	r0, [pc, #96]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 800146e:	f005 fc9f 	bl	8006db0 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_MspInit+0x238>
      Error_Handler();
 8001478:	f001 fe8c 	bl	8003194 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001480:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001482:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <HAL_I2C_MspInit+0x28c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	205f      	movs	r0, #95	@ 0x5f
 800148e:	f005 fc5a 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001492:	205f      	movs	r0, #95	@ 0x5f
 8001494:	f005 fc71 	bl	8006d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2060      	movs	r0, #96	@ 0x60
 800149e:	f005 fc52 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80014a2:	2060      	movs	r0, #96	@ 0x60
 80014a4:	f005 fc69 	bl	8006d7a <HAL_NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020400 	.word	0x58020400
 80014c0:	58001c00 	.word	0x58001c00
 80014c4:	58021c00 	.word	0x58021c00
 80014c8:	24000590 	.word	0x24000590
 80014cc:	58025408 	.word	0x58025408
 80014d0:	24000608 	.word	0x24000608
 80014d4:	5802541c 	.word	0x5802541c

080014d8 <RTC_Set>:
/* USER CODE BEGIN 0 */

int RTC_Set(
		uint8_t year, uint8_t month, uint8_t day,
		uint8_t hour, uint8_t min)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4603      	mov	r3, r0
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	460b      	mov	r3, r1
 80014f0:	717b      	strb	r3, [r7, #5]
 80014f2:	4613      	mov	r3, r2
 80014f4:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef res;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	memset(&time, 0, sizeof(time));
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2214      	movs	r2, #20
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f018 fa39 	bl	8019976 <memset>
	memset(&date, 0, sizeof(date));
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2204      	movs	r2, #4
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f018 fa32 	bl	8019976 <memset>

	date.WeekDay = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	733b      	strb	r3, [r7, #12]
	date.Year = year;
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	73fb      	strb	r3, [r7, #15]
	date.Month = month;
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	737b      	strb	r3, [r7, #13]
	date.Date = day;
 800151e:	797b      	ldrb	r3, [r7, #5]
 8001520:	73bb      	strb	r3, [r7, #14]

	res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	4814      	ldr	r0, [pc, #80]	@ (800157c <RTC_Set+0xa4>)
 800152c:	f00e ff70 	bl	8010410 <HAL_RTC_SetDate>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(res != HAL_OK) {
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <RTC_Set+0x6a>
		Error_Handler();
 800153e:	f001 fe29 	bl	8003194 <Error_Handler>
	}

	time.Hours = hour;
 8001542:	793b      	ldrb	r3, [r7, #4]
 8001544:	743b      	strb	r3, [r7, #16]
	time.Minutes = min;
 8001546:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800154a:	747b      	strb	r3, [r7, #17]
	time.Seconds = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	74bb      	strb	r3, [r7, #18]

	res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <RTC_Set+0xa4>)
 800155a:	f00e fe5f 	bl	801021c <HAL_RTC_SetTime>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(res != HAL_OK) {
 8001564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <RTC_Set+0x98>
		Error_Handler();
 800156c:	f001 fe12 	bl	8003194 <Error_Handler>
	}

	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	372c      	adds	r7, #44	@ 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	24000bf4 	.word	0x24000bf4

08001580 <JOYstickPOS>:
//=========================================================================================================================

//volatile uint8_t keyval=0;

uint8_t JOYstickPOS()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	uint8_t	keyval=0;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
	keyval = HAL_GPIO_ReadPin (JOYstickPB_GPIO_Port,JOYstickPB_Pin)<<4 ;
 800158a:	2140      	movs	r1, #64	@ 0x40
 800158c:	481b      	ldr	r0, [pc, #108]	@ (80015fc <JOYstickPOS+0x7c>)
 800158e:	f008 fa69 	bl	8009a64 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOB, JOYstick4_Pin)<<3 ;
 8001598:	2102      	movs	r1, #2
 800159a:	4819      	ldr	r0, [pc, #100]	@ (8001600 <JOYstickPOS+0x80>)
 800159c:	f008 fa62 	bl	8009a64 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4413      	add	r3, r2
 80015aa:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOB, JOYstick3_Pin)<<2 ;
 80015ac:	2104      	movs	r1, #4
 80015ae:	4814      	ldr	r0, [pc, #80]	@ (8001600 <JOYstickPOS+0x80>)
 80015b0:	f008 fa58 	bl	8009a64 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4413      	add	r3, r2
 80015be:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOH, JOYstick2_Pin)<<1 ;
 80015c0:	2104      	movs	r1, #4
 80015c2:	4810      	ldr	r0, [pc, #64]	@ (8001604 <JOYstickPOS+0x84>)
 80015c4:	f008 fa4e 	bl	8009a64 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4413      	add	r3, r2
 80015d2:	71fb      	strb	r3, [r7, #7]
	keyval +=		HAL_GPIO_ReadPin (GPIOH, JOYstick1_Pin) ;
 80015d4:	2108      	movs	r1, #8
 80015d6:	480b      	ldr	r0, [pc, #44]	@ (8001604 <JOYstickPOS+0x84>)
 80015d8:	f008 fa44 	bl	8009a64 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4413      	add	r3, r2
 80015e4:	71fb      	strb	r3, [r7, #7]
	keyval = (~keyval) & 0x1f;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	71fb      	strb	r3, [r7, #7]

	return keyval;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	58020000 	.word	0x58020000
 8001600:	58020400 	.word	0x58020400
 8001604:	58021c00 	.word	0x58021c00

08001608 <ledDisp>:
void ledDisp(uint8_t Localval)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	if(0x01 & Localval)
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <ledDisp+0x22>
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	4843      	ldr	r0, [pc, #268]	@ (8001730 <ledDisp+0x128>)
 8001624:	f008 fa36 	bl	8009a94 <HAL_GPIO_WritePin>
 8001628:	e004      	b.n	8001634 <ledDisp+0x2c>
	else
		HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2110      	movs	r1, #16
 800162e:	4840      	ldr	r0, [pc, #256]	@ (8001730 <ledDisp+0x128>)
 8001630:	f008 fa30 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x02 & Localval)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <ledDisp+0x44>
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2120      	movs	r1, #32
 8001644:	483a      	ldr	r0, [pc, #232]	@ (8001730 <ledDisp+0x128>)
 8001646:	f008 fa25 	bl	8009a94 <HAL_GPIO_WritePin>
 800164a:	e004      	b.n	8001656 <ledDisp+0x4e>
	else
		HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	4837      	ldr	r0, [pc, #220]	@ (8001730 <ledDisp+0x128>)
 8001652:	f008 fa1f 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x04 & Localval)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <ledDisp+0x66>
		HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2102      	movs	r1, #2
 8001666:	4832      	ldr	r0, [pc, #200]	@ (8001730 <ledDisp+0x128>)
 8001668:	f008 fa14 	bl	8009a94 <HAL_GPIO_WritePin>
 800166c:	e004      	b.n	8001678 <ledDisp+0x70>
	else
		HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	482f      	ldr	r0, [pc, #188]	@ (8001730 <ledDisp+0x128>)
 8001674:	f008 fa0e 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x08 & Localval)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <ledDisp+0x88>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	482a      	ldr	r0, [pc, #168]	@ (8001734 <ledDisp+0x12c>)
 800168a:	f008 fa03 	bl	8009a94 <HAL_GPIO_WritePin>
 800168e:	e004      	b.n	800169a <ledDisp+0x92>
	else
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	4827      	ldr	r0, [pc, #156]	@ (8001734 <ledDisp+0x12c>)
 8001696:	f008 f9fd 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x10 & Localval)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <ledDisp+0xaa>
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2104      	movs	r1, #4
 80016aa:	4822      	ldr	r0, [pc, #136]	@ (8001734 <ledDisp+0x12c>)
 80016ac:	f008 f9f2 	bl	8009a94 <HAL_GPIO_WritePin>
 80016b0:	e004      	b.n	80016bc <ledDisp+0xb4>
	else
		HAL_GPIO_WritePin(GPIOA, LED5_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2104      	movs	r1, #4
 80016b6:	481f      	ldr	r0, [pc, #124]	@ (8001734 <ledDisp+0x12c>)
 80016b8:	f008 f9ec 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x20 & Localval)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <ledDisp+0xcc>
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2108      	movs	r1, #8
 80016cc:	4819      	ldr	r0, [pc, #100]	@ (8001734 <ledDisp+0x12c>)
 80016ce:	f008 f9e1 	bl	8009a94 <HAL_GPIO_WritePin>
 80016d2:	e004      	b.n	80016de <ledDisp+0xd6>
	else
		HAL_GPIO_WritePin(GPIOA, LED6_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2108      	movs	r1, #8
 80016d8:	4816      	ldr	r0, [pc, #88]	@ (8001734 <ledDisp+0x12c>)
 80016da:	f008 f9db 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x40 & Localval)
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <ledDisp+0xf0>
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f0:	4810      	ldr	r0, [pc, #64]	@ (8001734 <ledDisp+0x12c>)
 80016f2:	f008 f9cf 	bl	8009a94 <HAL_GPIO_WritePin>
 80016f6:	e005      	b.n	8001704 <ledDisp+0xfc>
	else
		HAL_GPIO_WritePin(GPIOA, LED7_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <ledDisp+0x12c>)
 8001700:	f008 f9c8 	bl	8009a94 <HAL_GPIO_WritePin>
	if(0x80 & Localval)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da06      	bge.n	800171a <ledDisp+0x112>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001712:	4808      	ldr	r0, [pc, #32]	@ (8001734 <ledDisp+0x12c>)
 8001714:	f008 f9be 	bl	8009a94 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);

}
 8001718:	e005      	b.n	8001726 <ledDisp+0x11e>
		HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <ledDisp+0x12c>)
 8001722:	f008 f9b7 	bl	8009a94 <HAL_GPIO_WritePin>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	58020800 	.word	0x58020800
 8001734:	58020000 	.word	0x58020000

08001738 <setTime>:
void setTime()
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b08c      	sub	sp, #48	@ 0x30
 800173c:	af02      	add	r7, sp, #8
	int8_t Jsp=0,TimeItem=0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int8_t TimeArray[12];
	RTC_DateTypeDef FILEdate;
	RTC_TimeTypeDef FILEtime;
	HAL_StatusTypeDef res;

	ssd1306_Clear();
 800174a:	f002 fb21 	bl	8003d90 <ssd1306_Clear>

	res = HAL_RTC_GetTime(&hrtc, &FILEtime, RTC_FORMAT_BIN);
 800174e:	463b      	mov	r3, r7
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	48cf      	ldr	r0, [pc, #828]	@ (8001a94 <setTime+0x35c>)
 8001756:	f00e fdff 	bl	8010358 <HAL_RTC_GetTime>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if(res != HAL_OK) {
 8001760:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <setTime+0x34>
		Error_Handler();
 8001768:	f001 fd14 	bl	8003194 <Error_Handler>
	}

	res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	48c7      	ldr	r0, [pc, #796]	@ (8001a94 <setTime+0x35c>)
 8001776:	f00e fed3 	bl	8010520 <HAL_RTC_GetDate>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if(res != HAL_OK) {
 8001780:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <setTime+0x54>
		Error_Handler();
 8001788:	f001 fd04 	bl	8003194 <Error_Handler>
	}
    TimeArray[0] =(FILEdate.Year  /10) %10;
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	4ac2      	ldr	r2, [pc, #776]	@ (8001a98 <setTime+0x360>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4bbf      	ldr	r3, [pc, #764]	@ (8001a98 <setTime+0x360>)
 800179a:	fba3 1302 	umull	r1, r3, r3, r2
 800179e:	08d9      	lsrs	r1, r3, #3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	763b      	strb	r3, [r7, #24]
    TimeArray[1] =(FILEdate.Year - TimeArray[0])%10;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	461a      	mov	r2, r3
 80017b4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80017b8:	1ad2      	subs	r2, r2, r3
 80017ba:	4bb8      	ldr	r3, [pc, #736]	@ (8001a9c <setTime+0x364>)
 80017bc:	fb83 1302 	smull	r1, r3, r3, r2
 80017c0:	1099      	asrs	r1, r3, #2
 80017c2:	17d3      	asrs	r3, r2, #31
 80017c4:	1ac9      	subs	r1, r1, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	1ad1      	subs	r1, r2, r3
 80017d0:	b24b      	sxtb	r3, r1
 80017d2:	767b      	strb	r3, [r7, #25]

    TimeArray[2] =(FILEdate.Month /10)%10;
 80017d4:	7d7b      	ldrb	r3, [r7, #21]
 80017d6:	4ab0      	ldr	r2, [pc, #704]	@ (8001a98 <setTime+0x360>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4bad      	ldr	r3, [pc, #692]	@ (8001a98 <setTime+0x360>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	08d9      	lsrs	r1, r3, #3
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	76bb      	strb	r3, [r7, #26]
    TimeArray[3] =(FILEdate.Month - TimeArray[2])%10;
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001800:	1ad2      	subs	r2, r2, r3
 8001802:	4ba6      	ldr	r3, [pc, #664]	@ (8001a9c <setTime+0x364>)
 8001804:	fb83 1302 	smull	r1, r3, r3, r2
 8001808:	1099      	asrs	r1, r3, #2
 800180a:	17d3      	asrs	r3, r2, #31
 800180c:	1ac9      	subs	r1, r1, r3
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	1ad1      	subs	r1, r2, r3
 8001818:	b24b      	sxtb	r3, r1
 800181a:	76fb      	strb	r3, [r7, #27]

    TimeArray[4] =(FILEdate.Date /10)%10;
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	4a9e      	ldr	r2, [pc, #632]	@ (8001a98 <setTime+0x360>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b9b      	ldr	r3, [pc, #620]	@ (8001a98 <setTime+0x360>)
 800182a:	fba3 1302 	umull	r1, r3, r3, r2
 800182e:	08d9      	lsrs	r1, r3, #3
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	b25b      	sxtb	r3, r3
 800183e:	773b      	strb	r3, [r7, #28]
    TimeArray[5] =(FILEdate.Date - TimeArray[4])%10;
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	461a      	mov	r2, r3
 8001844:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001848:	1ad2      	subs	r2, r2, r3
 800184a:	4b94      	ldr	r3, [pc, #592]	@ (8001a9c <setTime+0x364>)
 800184c:	fb83 1302 	smull	r1, r3, r3, r2
 8001850:	1099      	asrs	r1, r3, #2
 8001852:	17d3      	asrs	r3, r2, #31
 8001854:	1ac9      	subs	r1, r1, r3
 8001856:	460b      	mov	r3, r1
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	b24b      	sxtb	r3, r1
 8001862:	777b      	strb	r3, [r7, #29]

    TimeArray[6] =(FILEtime.Hours /10)%10;
 8001864:	783b      	ldrb	r3, [r7, #0]
 8001866:	4a8c      	ldr	r2, [pc, #560]	@ (8001a98 <setTime+0x360>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b89      	ldr	r3, [pc, #548]	@ (8001a98 <setTime+0x360>)
 8001872:	fba3 1302 	umull	r1, r3, r3, r2
 8001876:	08d9      	lsrs	r1, r3, #3
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	b25b      	sxtb	r3, r3
 8001886:	77bb      	strb	r3, [r7, #30]
    TimeArray[7] =(FILEtime.Hours - TimeArray[6])%10;
 8001888:	783b      	ldrb	r3, [r7, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001890:	1ad2      	subs	r2, r2, r3
 8001892:	4b82      	ldr	r3, [pc, #520]	@ (8001a9c <setTime+0x364>)
 8001894:	fb83 1302 	smull	r1, r3, r3, r2
 8001898:	1099      	asrs	r1, r3, #2
 800189a:	17d3      	asrs	r3, r2, #31
 800189c:	1ac9      	subs	r1, r1, r3
 800189e:	460b      	mov	r3, r1
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	1ad1      	subs	r1, r2, r3
 80018a8:	b24b      	sxtb	r3, r1
 80018aa:	77fb      	strb	r3, [r7, #31]

    TimeArray[8] =(FILEtime.Minutes /10)%10;
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001a98 <setTime+0x360>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b77      	ldr	r3, [pc, #476]	@ (8001a98 <setTime+0x360>)
 80018ba:	fba3 1302 	umull	r1, r3, r3, r2
 80018be:	08d9      	lsrs	r1, r3, #3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f887 3020 	strb.w	r3, [r7, #32]
    TimeArray[9] =(FILEtime.Minutes - TimeArray[8])%10;
 80018d2:	787b      	ldrb	r3, [r7, #1]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <setTime+0x364>)
 80018de:	fb83 1302 	smull	r1, r3, r3, r2
 80018e2:	1099      	asrs	r1, r3, #2
 80018e4:	17d3      	asrs	r3, r2, #31
 80018e6:	1ac9      	subs	r1, r1, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	1ad1      	subs	r1, r2, r3
 80018f2:	b24b      	sxtb	r3, r1
 80018f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21


	while (1)
	{
		sprintf(rtext, "%4d / %2d / %2d",
				2000+TimeArray[0]*10+TimeArray[1],
 80018f8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800190a:	f997 2019 	ldrsb.w	r2, [r7, #25]
		sprintf(rtext, "%4d / %2d / %2d",
 800190e:	441a      	add	r2, r3
				TimeArray[2]*10+TimeArray[3],
 8001910:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001914:	4619      	mov	r1, r3
 8001916:	460b      	mov	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4619      	mov	r1, r3
 8001920:	f997 301b 	ldrsb.w	r3, [r7, #27]
		sprintf(rtext, "%4d / %2d / %2d",
 8001924:	4419      	add	r1, r3
				TimeArray[4]*10+TimeArray[5]);
 8001926:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800192a:	4618      	mov	r0, r3
 800192c:	4603      	mov	r3, r0
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4403      	add	r3, r0
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f997 301d 	ldrsb.w	r3, [r7, #29]
		sprintf(rtext, "%4d / %2d / %2d",
 800193a:	4403      	add	r3, r0
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	4957      	ldr	r1, [pc, #348]	@ (8001aa0 <setTime+0x368>)
 8001942:	4858      	ldr	r0, [pc, #352]	@ (8001aa4 <setTime+0x36c>)
 8001944:	f017 ffb4 	bl	80198b0 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 8001948:	2100      	movs	r1, #0
 800194a:	2002      	movs	r0, #2
 800194c:	f002 fa08 	bl	8003d60 <ssd1306_SetCursor>
 8001950:	4b55      	ldr	r3, [pc, #340]	@ (8001aa8 <setTime+0x370>)
 8001952:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001956:	4853      	ldr	r0, [pc, #332]	@ (8001aa4 <setTime+0x36c>)
 8001958:	f002 f9dc 	bl	8003d14 <ssd1306_WriteString>
 800195c:	f001 ff7c 	bl	8003858 <ssd1306_UpdateScreen>
		sprintf(rtext," %2d:%2d",
				TimeArray[6]*10+TimeArray[7],
 8001960:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001964:	461a      	mov	r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	461a      	mov	r2, r3
 8001970:	f997 301f 	ldrsb.w	r3, [r7, #31]
		sprintf(rtext," %2d:%2d",
 8001974:	441a      	add	r2, r3
				TimeArray[8]*10+TimeArray[9]);
 8001976:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800197a:	4619      	mov	r1, r3
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4619      	mov	r1, r3
 8001986:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
		sprintf(rtext," %2d:%2d",
 800198a:	440b      	add	r3, r1
 800198c:	4947      	ldr	r1, [pc, #284]	@ (8001aac <setTime+0x374>)
 800198e:	4845      	ldr	r0, [pc, #276]	@ (8001aa4 <setTime+0x36c>)
 8001990:	f017 ff8e 	bl	80198b0 <siprintf>
		LCD_ShowString(2, FontH*2, 6,8 , White, rtext);
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <setTime+0x378>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	4619      	mov	r1, r3
 800199e:	2002      	movs	r0, #2
 80019a0:	f002 f9de 	bl	8003d60 <ssd1306_SetCursor>
 80019a4:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <setTime+0x370>)
 80019a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019aa:	483e      	ldr	r0, [pc, #248]	@ (8001aa4 <setTime+0x36c>)
 80019ac:	f002 f9b2 	bl	8003d14 <ssd1306_WriteString>
 80019b0:	f001 ff52 	bl	8003858 <ssd1306_UpdateScreen>
		Jsp = JOYstickPOS();
 80019b4:	f7ff fde4 	bl	8001580 <JOYstickPOS>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		HAL_Delay(25);
 80019be:	2019      	movs	r0, #25
 80019c0:	f003 f9fe 	bl	8004dc0 <HAL_Delay>
		switch (Jsp){
 80019c4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80019c8:	3b01      	subs	r3, #1
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d894      	bhi.n	80018f8 <setTime+0x1c0>
 80019ce:	a201      	add	r2, pc, #4	@ (adr r2, 80019d4 <setTime+0x29c>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	08001a15 	.word	0x08001a15
 80019d8:	08001af9 	.word	0x08001af9
 80019dc:	080018f9 	.word	0x080018f9
 80019e0:	08001a35 	.word	0x08001a35
 80019e4:	080018f9 	.word	0x080018f9
 80019e8:	080018f9 	.word	0x080018f9
 80019ec:	080018f9 	.word	0x080018f9
 80019f0:	08001ab9 	.word	0x08001ab9
 80019f4:	080018f9 	.word	0x080018f9
 80019f8:	080018f9 	.word	0x080018f9
 80019fc:	080018f9 	.word	0x080018f9
 8001a00:	080018f9 	.word	0x080018f9
 8001a04:	080018f9 	.word	0x080018f9
 8001a08:	080018f9 	.word	0x080018f9
 8001a0c:	080018f9 	.word	0x080018f9
 8001a10:	08001a55 	.word	0x08001a55
		case (1):{   //R
			if (TimeItem == 9) {TimeItem = 0;} else TimeItem++ ;
 8001a14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d103      	bne.n	8001a24 <setTime+0x2ec>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a22:	e0b2      	b.n	8001b8a <setTime+0x452>
			if (TimeItem == 9) {TimeItem = 0;} else TimeItem++ ;
 8001a24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a32:	e0aa      	b.n	8001b8a <setTime+0x452>
		}
		case (4):{  //L
			if (TimeItem>0) {TimeItem-- ;}
 8001a34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd07      	ble.n	8001a4c <setTime+0x314>
 8001a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			else MenuItem =9;
			break;
 8001a4a:	e09e      	b.n	8001b8a <setTime+0x452>
			else MenuItem =9;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <setTime+0x37c>)
 8001a4e:	2209      	movs	r2, #9
 8001a50:	701a      	strb	r2, [r3, #0]
			break;
 8001a52:	e09a      	b.n	8001b8a <setTime+0x452>
		}
		case (16):{ //UP
			TimeArray[TimeItem] == 9 ? TimeArray[TimeItem]=0: TimeArray[TimeItem]++;
 8001a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a58:	3328      	adds	r3, #40	@ 0x28
 8001a5a:	443b      	add	r3, r7
 8001a5c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d107      	bne.n	8001a74 <setTime+0x33c>
 8001a64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a68:	3328      	adds	r3, #40	@ 0x28
 8001a6a:	443b      	add	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001a72:	e08a      	b.n	8001b8a <setTime+0x452>
			TimeArray[TimeItem] == 9 ? TimeArray[TimeItem]=0: TimeArray[TimeItem]++;
 8001a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a78:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001a7c:	443a      	add	r2, r7
 8001a7e:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	3201      	adds	r2, #1
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	b252      	sxtb	r2, r2
 8001a8a:	3328      	adds	r3, #40	@ 0x28
 8001a8c:	443b      	add	r3, r7
 8001a8e:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001a92:	e07a      	b.n	8001b8a <setTime+0x452>
 8001a94:	24000bf4 	.word	0x24000bf4
 8001a98:	cccccccd 	.word	0xcccccccd
 8001a9c:	66666667 	.word	0x66666667
 8001aa0:	0801a92c 	.word	0x0801a92c
 8001aa4:	24000008 	.word	0x24000008
 8001aa8:	24000000 	.word	0x24000000
 8001aac:	0801a93c 	.word	0x0801a93c
 8001ab0:	240008d8 	.word	0x240008d8
 8001ab4:	240008de 	.word	0x240008de
		}
		case (8):{ //DN
			TimeArray[TimeItem] == 0 ? TimeArray[TimeItem]=9 :TimeArray[TimeItem]--;
 8001ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001abc:	3328      	adds	r3, #40	@ 0x28
 8001abe:	443b      	add	r3, r7
 8001ac0:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <setTime+0x3a0>
 8001ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001acc:	3328      	adds	r3, #40	@ 0x28
 8001ace:	443b      	add	r3, r7
 8001ad0:	2209      	movs	r2, #9
 8001ad2:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001ad6:	e058      	b.n	8001b8a <setTime+0x452>
			TimeArray[TimeItem] == 0 ? TimeArray[TimeItem]=9 :TimeArray[TimeItem]--;
 8001ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001adc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8001ae0:	443a      	add	r2, r7
 8001ae2:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	b252      	sxtb	r2, r2
 8001aee:	3328      	adds	r3, #40	@ 0x28
 8001af0:	443b      	add	r3, r7
 8001af2:	f803 2c10 	strb.w	r2, [r3, #-16]
			break;
 8001af6:	e048      	b.n	8001b8a <setTime+0x452>
		}
		case (2):{
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001af8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2d8      	uxtb	r0, r3
					TimeArray[2]*10+TimeArray[3],
 8001b12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b26:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2d9      	uxtb	r1, r3
					TimeArray[4]*10+TimeArray[5],
 8001b2c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001b40:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b42:	4413      	add	r3, r2
 8001b44:	b2dc      	uxtb	r4, r3
					TimeArray[6]*10+TimeArray[7],
 8001b46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b5a:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b2dd      	uxtb	r5, r3
					TimeArray[8]*10+TimeArray[9]);
 8001b60:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8001b74:	b2db      	uxtb	r3, r3
			RTC_Set(TimeArray[0]*10+TimeArray[1],
 8001b76:	4413      	add	r3, r2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	4622      	mov	r2, r4
 8001b80:	f7ff fcaa 	bl	80014d8 <RTC_Set>

			ssd1306_Clear();
 8001b84:	f002 f904 	bl	8003d90 <ssd1306_Clear>

			return;
 8001b88:	e000      	b.n	8001b8c <setTime+0x454>
		sprintf(rtext, "%4d / %2d / %2d",
 8001b8a:	e6b5      	b.n	80018f8 <setTime+0x1c0>

		}

	}

}
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop

08001b94 <ProcessBlock>:
	return m;
}

//=========================================================================================================================
void ProcessBlock()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8001b9a:	af00      	add	r7, sp, #0
	uint32_t hist[128];
	uint32_t sharp[128];
	memset(hist,0,128*sizeof(uint32_t));
 8001b9c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f017 fee5 	bl	8019976 <memset>
	memset(sharp,0,128*sizeof(uint32_t));
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f017 fede 	bl	8019976 <memset>
	uint32_t CS = CurrentSlot %SLOTS ? (CurrentSlot-2) %SLOTS : CurrentSlot %SLOTS ;
 8001bba:	4b8d      	ldr	r3, [pc, #564]	@ (8001df0 <ProcessBlock+0x25c>)
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8001df4 <ProcessBlock+0x260>)
 8001bc0:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc4:	0a9a      	lsrs	r2, r3, #10
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	1aca      	subs	r2, r1, r3
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d00d      	beq.n	8001bf0 <ProcessBlock+0x5c>
 8001bd4:	4b86      	ldr	r3, [pc, #536]	@ (8001df0 <ProcessBlock+0x25c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	1e99      	subs	r1, r3, #2
 8001bda:	4b86      	ldr	r3, [pc, #536]	@ (8001df4 <ProcessBlock+0x260>)
 8001bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8001be0:	0a9b      	lsrs	r3, r3, #10
 8001be2:	461a      	mov	r2, r3
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	1ad2      	subs	r2, r2, r3
 8001be8:	01d3      	lsls	r3, r2, #7
 8001bea:	461a      	mov	r2, r3
 8001bec:	1a8b      	subs	r3, r1, r2
 8001bee:	e00b      	b.n	8001c08 <ProcessBlock+0x74>
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <ProcessBlock+0x25c>)
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8001df4 <ProcessBlock+0x260>)
 8001bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	1ad2      	subs	r2, r2, r3
 8001c02:	01d3      	lsls	r3, r2, #7
 8001c04:	461a      	mov	r2, r3
 8001c06:	1a8b      	subs	r3, r1, r2
 8001c08:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	uint16_t *linptr = (uint16_t *)(SDRAMAREA+((CS%SLOTS)*(Npixels*2)));
 8001c0c:	f8d7 1414 	ldr.w	r1, [r7, #1044]	@ 0x414
 8001c10:	4b78      	ldr	r3, [pc, #480]	@ (8001df4 <ProcessBlock+0x260>)
 8001c12:	fba3 2301 	umull	r2, r3, r3, r1
 8001c16:	0a9a      	lsrs	r2, r3, #10
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	f502 3340 	add.w	r3, r2, #196608	@ 0x30000
 8001c26:	039b      	lsls	r3, r3, #14
 8001c28:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	uint32_t norm =0;//,zero=0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
	uint32_t pindex;
	uint32_t partialdiff;//,oldp;

	for (int i=0 ; i < Npixels ;i++){
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001c38:	e076      	b.n	8001d28 <ProcessBlock+0x194>
		pindex = linptr[i];
 8001c3a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001c44:	4413      	add	r3, r2
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

		pindex = pindex>>9; //segments of 128(of 65536)
 8001c4c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
		if (pindex > 127) pindex = 127;
 8001c56:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001c5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c5c:	d902      	bls.n	8001c64 <ProcessBlock+0xd0>
 8001c5e:	237f      	movs	r3, #127	@ 0x7f
 8001c60:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
		hist[pindex]++;
 8001c64:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c68:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001c6c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	1c59      	adds	r1, r3, #1
 8001c76:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c7a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001c7e:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if (norm < hist[pindex])
 8001c86:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001c8a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001c8e:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	f8d7 2424 	ldr.w	r2, [r7, #1060]	@ 0x424
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d209      	bcs.n	8001cb2 <ProcessBlock+0x11e>
			  norm = hist[pindex]; //find local max
 8001c9e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001ca2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001ca6:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424

		partialdiff = abs((int32_t)linptr[i] - (int32_t)linptr[i+1]);
 8001cb2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001cbc:	4413      	add	r3, r2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001cce:	4413      	add	r3, r2
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	1acb      	subs	r3, r1, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bfb8      	it	lt
 8001cd8:	425b      	neglt	r3, r3
 8001cda:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		if (partialdiff > sharp[i/(Npixels>>7)] )
 8001cde:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da00      	bge.n	8001ce8 <ProcessBlock+0x154>
 8001ce6:	333f      	adds	r3, #63	@ 0x3f
 8001ce8:	119b      	asrs	r3, r3, #6
 8001cea:	461a      	mov	r2, r3
 8001cec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001cf0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d90e      	bls.n	8001d1e <ProcessBlock+0x18a>
			sharp[i/(Npixels>>7)] = partialdiff;
 8001d00:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da00      	bge.n	8001d0a <ProcessBlock+0x176>
 8001d08:	333f      	adds	r3, #63	@ 0x3f
 8001d0a:	119b      	asrs	r3, r3, #6
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d12:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001d16:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001d1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for (int i=0 ; i < Npixels ;i++){
 8001d1e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001d28:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d30:	db83      	blt.n	8001c3a <ProcessBlock+0xa6>
	}
	ssd1306_Clear();
 8001d32:	f002 f82d 	bl	8003d90 <ssd1306_Clear>

	for (int i=0 ;i<128;i++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8001d3c:	e04c      	b.n	8001dd8 <ProcessBlock+0x244>
		if (hist[i] != 0)
 8001d3e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d42:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d46:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d022      	beq.n	8001d98 <ProcessBlock+0x204>
		{
			uint32_t v= hist[i]*48/norm;
 8001d52:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d56:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d5a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
			ssd1306_DrawVerticalLine(i, (int16_t)48-v ,(int16_t) v);
 8001d78:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001d7c:	b218      	sxth	r0, r3
 8001d7e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8001d90:	b212      	sxth	r2, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f001 fe00 	bl	8003998 <ssd1306_DrawVerticalLine>
		}
		uint32_t w = sharp[i]>>10;
 8001d98:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001d9c:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8001da0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	0a9b      	lsrs	r3, r3, #10
 8001daa:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
		ssd1306_DrawVerticalLine(i, (int16_t)64-w ,(int16_t) w);
 8001dae:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001db2:	b218      	sxth	r0, r3
 8001db4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8001dc6:	b212      	sxth	r2, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f001 fde5 	bl	8003998 <ssd1306_DrawVerticalLine>
	for (int i=0 ;i<128;i++){
 8001dce:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8001dd8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dde:	ddae      	ble.n	8001d3e <ProcessBlock+0x1aa>

	}

	ssd1306_UpdateScreen();
 8001de0:	f001 fd3a 	bl	8003858 <ssd1306_UpdateScreen>


	//	printf("norm %d , Zeros %d\n",norm,zero);


}
 8001de4:	bf00      	nop
 8001de6:	f507 6785 	add.w	r7, r7, #1064	@ 0x428
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	24000b7c 	.word	0x24000b7c
 8001df4:	88888889 	.word	0x88888889

08001df8 <Histo>:
//=========================================================================================================================
void Histo()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	ssd1306_Clear();
 8001dfc:	f001 ffc8 	bl	8003d90 <ssd1306_Clear>
	//HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET); //Clear Error light
	TransferComplete7=0;
 8001e00:	4b44      	ldr	r3, [pc, #272]	@ (8001f14 <Histo+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
	TransferCompleteelse=0;
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <Histo+0x120>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4843      	ldr	r0, [pc, #268]	@ (8001f1c <Histo+0x124>)
 8001e10:	f010 fd1c 	bl	801284c <HAL_TIM_PWM_Stop>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <Histo+0x26>
 8001e1a:	f001 f9bb 	bl	8003194 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 8001e1e:	2104      	movs	r1, #4
 8001e20:	483e      	ldr	r0, [pc, #248]	@ (8001f1c <Histo+0x124>)
 8001e22:	f010 fd13 	bl	801284c <HAL_TIM_PWM_Stop>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <Histo+0x38>
 8001e2c:	f001 f9b2 	bl	8003194 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 8001e30:	2108      	movs	r1, #8
 8001e32:	483a      	ldr	r0, [pc, #232]	@ (8001f1c <Histo+0x124>)
 8001e34:	f010 fd0a 	bl	801284c <HAL_TIM_PWM_Stop>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <Histo+0x4a>
 8001e3e:	f001 f9a9 	bl	8003194 <Error_Handler>
//			HAL_TIM_Base_Stop(&htim1);
//			HAL_TIM_Base_Stop_IT(&htim1);

	htim1.Init.Period = (Exposure*TIMEDenom/TIMENumer)-1;
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <Histo+0x128>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4a36      	ldr	r2, [pc, #216]	@ (8001f24 <Histo+0x12c>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4a32      	ldr	r2, [pc, #200]	@ (8001f1c <Histo+0x124>)
 8001e54:	60d3      	str	r3, [r2, #12]
	htim1.Init.RepetitionCounter = NumLines-1;
 8001e56:	4b34      	ldr	r3, [pc, #208]	@ (8001f28 <Histo+0x130>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f1c <Histo+0x124>)
 8001e5e:	6153      	str	r3, [r2, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)Error_Handler();
 8001e60:	482e      	ldr	r0, [pc, #184]	@ (8001f1c <Histo+0x124>)
 8001e62:	f010 fa03 	bl	801226c <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <Histo+0x78>
 8001e6c:	f001 f992 	bl	8003194 <Error_Handler>

	Sequence=SEQ_Running;
 8001e70:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <Histo+0x134>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
	CurrentSlot=0;
 8001e76:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <Histo+0x138>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
	LastWrittenSlot=0;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <Histo+0x13c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 8001e82:	482d      	ldr	r0, [pc, #180]	@ (8001f38 <Histo+0x140>)
 8001e84:	f010 fa56 	bl	8012334 <HAL_TIM_Base_Start>
 8001e88:	482c      	ldr	r0, [pc, #176]	@ (8001f3c <Histo+0x144>)
 8001e8a:	f010 fa53 	bl	8012334 <HAL_TIM_Base_Start>
 8001e8e:	482c      	ldr	r0, [pc, #176]	@ (8001f40 <Histo+0x148>)
 8001e90:	f010 fa50 	bl	8012334 <HAL_TIM_Base_Start>

	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))Error_Handler();
 8001e94:	2100      	movs	r1, #0
 8001e96:	4821      	ldr	r0, [pc, #132]	@ (8001f1c <Histo+0x124>)
 8001e98:	f010 fbca 	bl	8012630 <HAL_TIM_PWM_Start>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <Histo+0xae>
 8001ea2:	f001 f977 	bl	8003194 <Error_Handler>
	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))Error_Handler();
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	481c      	ldr	r0, [pc, #112]	@ (8001f1c <Histo+0x124>)
 8001eaa:	f010 fbc1 	bl	8012630 <HAL_TIM_PWM_Start>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <Histo+0xc0>
 8001eb4:	f001 f96e 	bl	8003194 <Error_Handler>
	if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3))Error_Handler();
 8001eb8:	2108      	movs	r1, #8
 8001eba:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <Histo+0x124>)
 8001ebc:	f010 fbb8 	bl	8012630 <HAL_TIM_PWM_Start>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <Histo+0xd2>
 8001ec6:	f001 f965 	bl	8003194 <Error_Handler>
//	HAL_TIM_Base_Start(&htim1);
//	HAL_TIM_Base_Start_IT(&htim1);

	HAL_Delay(80);
 8001eca:	2050      	movs	r0, #80	@ 0x50
 8001ecc:	f002 ff78 	bl	8004dc0 <HAL_Delay>
	oldState = GPIO_PIN_SET;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <Histo+0x14c>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
	{
		while(RunState != HALT && (SEQ_Complete != Sequence)){
 8001ed6:	e010      	b.n	8001efa <Histo+0x102>
			if (CurrentSlot >2)ProcessBlock();
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <Histo+0x138>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <Histo+0xec>
 8001ee0:	f7ff fe58 	bl	8001b94 <ProcessBlock>
			if (0 != JOYstickPOS()){
 8001ee4:	f7ff fb4c 	bl	8001580 <JOYstickPOS>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <Histo+0x102>
				RunState = HALT;
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <Histo+0x150>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
				Sequence=SEQ_Complete;
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <Histo+0x134>)
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	701a      	strb	r2, [r3, #0]
		while(RunState != HALT && (SEQ_Complete != Sequence)){
 8001efa:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <Histo+0x150>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d003      	beq.n	8001f0a <Histo+0x112>
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <Histo+0x134>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d1e6      	bne.n	8001ed8 <Histo+0xe0>
			}
		}

	}
	TrialEnd();
 8001f0a:	f000 f9b3 	bl	8002274 <TrialEnd>

}//complete
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000b64 	.word	0x24000b64
 8001f18:	24000b68 	.word	0x24000b68
 8001f1c:	24000ccc 	.word	0x24000ccc
 8001f20:	24000b24 	.word	0x24000b24
 8001f24:	cccccccd 	.word	0xcccccccd
 8001f28:	24000b28 	.word	0x24000b28
 8001f2c:	240008da 	.word	0x240008da
 8001f30:	24000b7c 	.word	0x24000b7c
 8001f34:	24000b80 	.word	0x24000b80
 8001f38:	24000d88 	.word	0x24000d88
 8001f3c:	24000e44 	.word	0x24000e44
 8001f40:	24000f00 	.word	0x24000f00
 8001f44:	240008d9 	.word	0x240008d9
 8001f48:	24000208 	.word	0x24000208

08001f4c <TrialStart>:

//----------------------------------------------------------------------------
void TrialStart()
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af06      	add	r7, sp, #24
	if( SDstate == SDnotopen)
 8001f52:	4ba3      	ldr	r3, [pc, #652]	@ (80021e0 <TrialStart+0x294>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 813e 	bne.w	80021d8 <TrialStart+0x28c>
	{
		ssd1306_Clear();
 8001f5c:	f001 ff18 	bl	8003d90 <ssd1306_Clear>
//		IRQCNT_HAL_UART_TxCpltCallback=0;
		IRQCNT_HAL_ADC_ConvCpltCallback=0;
 8001f60:	4ba0      	ldr	r3, [pc, #640]	@ (80021e4 <TrialStart+0x298>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
//		IRQCNT_HAL_TIM_TriggerCallback1=0;
//		IRQCNT_HAL_TIM_TriggerCallback2=0;
//		IRQCNT_HAL_TIM_TriggerCallback3=0;
//		IRQCNT_HAL_TIM_TriggerCallback8=0;
//		HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET); //Clear Error light
		TransferComplete7=0;
 8001f66:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <TrialStart+0x29c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
		TransferCompleteelse=0;
 8001f6c:	4b9f      	ldr	r3, [pc, #636]	@ (80021ec <TrialStart+0x2a0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
		DACval=0;BuffDiffMax=0;
 8001f72:	4b9f      	ldr	r3, [pc, #636]	@ (80021f0 <TrialStart+0x2a4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	4b9e      	ldr	r3, [pc, #632]	@ (80021f4 <TrialStart+0x2a8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
#ifdef DISK
		f_err_code = f_mount( &FATFS_Obj, (TCHAR const*)SDPath,0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	499d      	ldr	r1, [pc, #628]	@ (80021f8 <TrialStart+0x2ac>)
 8001f82:	489e      	ldr	r0, [pc, #632]	@ (80021fc <TrialStart+0x2b0>)
 8001f84:	f016 fc9e 	bl	80188c4 <f_mount>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002200 <TrialStart+0x2b4>)
 8001f8e:	701a      	strb	r2, [r3, #0]
		if (f_err_code != FR_OK )
 8001f90:	4b9b      	ldr	r3, [pc, #620]	@ (8002200 <TrialStart+0x2b4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <TrialStart+0x5c>
		{
			printf("Diskerror%d /n",f_err_code);
 8001f98:	4b99      	ldr	r3, [pc, #612]	@ (8002200 <TrialStart+0x2b4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4899      	ldr	r0, [pc, #612]	@ (8002204 <TrialStart+0x2b8>)
 8001fa0:	f017 fc74 	bl	801988c <iprintf>
			{
				Error_Handler();
 8001fa4:	f001 f8f6 	bl	8003194 <Error_Handler>
			}
		}
#endif
		HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 8001fa8:	4897      	ldr	r0, [pc, #604]	@ (8002208 <TrialStart+0x2bc>)
 8001faa:	f010 f9c3 	bl	8012334 <HAL_TIM_Base_Start>
 8001fae:	4897      	ldr	r0, [pc, #604]	@ (800220c <TrialStart+0x2c0>)
 8001fb0:	f010 f9c0 	bl	8012334 <HAL_TIM_Base_Start>
 8001fb4:	4896      	ldr	r0, [pc, #600]	@ (8002210 <TrialStart+0x2c4>)
 8001fb6:	f010 f9bd 	bl	8012334 <HAL_TIM_Base_Start>

				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4895      	ldr	r0, [pc, #596]	@ (8002214 <TrialStart+0x2c8>)
 8001fbe:	f010 fc45 	bl	801284c <HAL_TIM_PWM_Stop>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <TrialStart+0x80>
 8001fc8:	f001 f8e4 	bl	8003194 <Error_Handler>
				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4891      	ldr	r0, [pc, #580]	@ (8002214 <TrialStart+0x2c8>)
 8001fd0:	f010 fc3c 	bl	801284c <HAL_TIM_PWM_Stop>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <TrialStart+0x92>
 8001fda:	f001 f8db 	bl	8003194 <Error_Handler>
				if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 8001fde:	2108      	movs	r1, #8
 8001fe0:	488c      	ldr	r0, [pc, #560]	@ (8002214 <TrialStart+0x2c8>)
 8001fe2:	f010 fc33 	bl	801284c <HAL_TIM_PWM_Stop>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <TrialStart+0xa4>
 8001fec:	f001 f8d2 	bl	8003194 <Error_Handler>
//				HAL_TIM_Base_Stop(&htim1);
//				HAL_TIM_Base_Stop_IT(&htim1);

		htim1.Init.Period = (Exposure*TIMEDenom/TIMENumer)-1;
 8001ff0:	4b89      	ldr	r3, [pc, #548]	@ (8002218 <TrialStart+0x2cc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4a89      	ldr	r2, [pc, #548]	@ (800221c <TrialStart+0x2d0>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4a84      	ldr	r2, [pc, #528]	@ (8002214 <TrialStart+0x2c8>)
 8002002:	60d3      	str	r3, [r2, #12]
		htim1.Init.RepetitionCounter = NumLines-1;
 8002004:	4b86      	ldr	r3, [pc, #536]	@ (8002220 <TrialStart+0x2d4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3b01      	subs	r3, #1
 800200a:	4a82      	ldr	r2, [pc, #520]	@ (8002214 <TrialStart+0x2c8>)
 800200c:	6153      	str	r3, [r2, #20]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK)Error_Handler();
 800200e:	4881      	ldr	r0, [pc, #516]	@ (8002214 <TrialStart+0x2c8>)
 8002010:	f010 f92c 	bl	801226c <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <TrialStart+0xd2>
 800201a:	f001 f8bb 	bl	8003194 <Error_Handler>


		RTC_DateTypeDef FILEdate;
		HAL_StatusTypeDef res;

		res = HAL_RTC_GetTime(&hrtc, &Filetime, RTC_FORMAT_BIN);
 800201e:	2200      	movs	r2, #0
 8002020:	4980      	ldr	r1, [pc, #512]	@ (8002224 <TrialStart+0x2d8>)
 8002022:	4881      	ldr	r0, [pc, #516]	@ (8002228 <TrialStart+0x2dc>)
 8002024:	f00e f998 	bl	8010358 <HAL_RTC_GetTime>
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
		if(res != HAL_OK) Error_Handler();
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <TrialStart+0xea>
 8002032:	f001 f8af 	bl	8003194 <Error_Handler>


		res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	487a      	ldr	r0, [pc, #488]	@ (8002228 <TrialStart+0x2dc>)
 800203e:	f00e fa6f 	bl	8010520 <HAL_RTC_GetDate>
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
		if(res != HAL_OK) Error_Handler();
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <TrialStart+0x104>
 800204c:	f001 f8a2 	bl	8003194 <Error_Handler>


		HAL_Delay(800);
 8002050:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002054:	f002 feb4 	bl	8004dc0 <HAL_Delay>

		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
				FILEdate.Year,
 8002058:	78fb      	ldrb	r3, [r7, #3]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800205a:	461e      	mov	r6, r3
				FILEdate.Month,
 800205c:	787b      	ldrb	r3, [r7, #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800205e:	469c      	mov	ip, r3
				FILEdate.Date,
 8002060:	78bb      	ldrb	r3, [r7, #2]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002062:	4619      	mov	r1, r3
				Filetime.Hours,
 8002064:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <TrialStart+0x2d8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002068:	4618      	mov	r0, r3
				Filetime.Minutes,
 800206a:	4b6e      	ldr	r3, [pc, #440]	@ (8002224 <TrialStart+0x2d8>)
 800206c:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 800206e:	461c      	mov	r4, r3
				Filetime.Seconds,
 8002070:	4b6c      	ldr	r3, [pc, #432]	@ (8002224 <TrialStart+0x2d8>)
 8002072:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002074:	461d      	mov	r5, r3
				SelectNEStateValue[SelectNEState]/1000);
 8002076:	4b6d      	ldr	r3, [pc, #436]	@ (800222c <TrialStart+0x2e0>)
 8002078:	f993 3000 	ldrsb.w	r3, [r3]
 800207c:	461a      	mov	r2, r3
 800207e:	4b6c      	ldr	r3, [pc, #432]	@ (8002230 <TrialStart+0x2e4>)
 8002080:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		sprintf((char *)rtext,"0:%02d%02d%02d%02d%02d%02d_%02d.pgm",
 8002084:	4a6b      	ldr	r2, [pc, #428]	@ (8002234 <TrialStart+0x2e8>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	099b      	lsrs	r3, r3, #6
 800208c:	b29b      	uxth	r3, r3
 800208e:	9304      	str	r3, [sp, #16]
 8002090:	9503      	str	r5, [sp, #12]
 8002092:	9402      	str	r4, [sp, #8]
 8002094:	9001      	str	r0, [sp, #4]
 8002096:	9100      	str	r1, [sp, #0]
 8002098:	4663      	mov	r3, ip
 800209a:	4632      	mov	r2, r6
 800209c:	4966      	ldr	r1, [pc, #408]	@ (8002238 <TrialStart+0x2ec>)
 800209e:	4867      	ldr	r0, [pc, #412]	@ (800223c <TrialStart+0x2f0>)
 80020a0:	f017 fc06 	bl	80198b0 <siprintf>
#ifdef DISK
		f_err_code = f_open(&fp,( char *)rtext,FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80020a4:	220b      	movs	r2, #11
 80020a6:	4965      	ldr	r1, [pc, #404]	@ (800223c <TrialStart+0x2f0>)
 80020a8:	4865      	ldr	r0, [pc, #404]	@ (8002240 <TrialStart+0x2f4>)
 80020aa:	f016 fc51 	bl	8018950 <f_open>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <TrialStart+0x2b4>)
 80020b4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(800);
 80020b6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80020ba:	f002 fe81 	bl	8004dc0 <HAL_Delay>
		if (f_err_code != 		FR_OK	){
 80020be:	4b50      	ldr	r3, [pc, #320]	@ (8002200 <TrialStart+0x2b4>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <TrialStart+0x19c>
			LCD_ShowString(2, 0, 6,8, White, "FC Error");
 80020c6:	2100      	movs	r1, #0
 80020c8:	2002      	movs	r0, #2
 80020ca:	f001 fe49 	bl	8003d60 <ssd1306_SetCursor>
 80020ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002244 <TrialStart+0x2f8>)
 80020d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020d4:	485c      	ldr	r0, [pc, #368]	@ (8002248 <TrialStart+0x2fc>)
 80020d6:	f001 fe1d 	bl	8003d14 <ssd1306_WriteString>
 80020da:	f001 fbbd 	bl	8003858 <ssd1306_UpdateScreen>
			f_close(&fp);
 80020de:	4858      	ldr	r0, [pc, #352]	@ (8002240 <TrialStart+0x2f4>)
 80020e0:	f017 f9c5 	bl	801946e <f_close>
			Error_Handler();
 80020e4:	f001 f856 	bl	8003194 <Error_Handler>
//			f_close(&fp);
//			Error_Handler();
//		}

#endif
		secStart=((uint32_t)Filetime.Hours*3600)+((uint32_t)Filetime.Minutes*60)+(uint32_t)Filetime.Seconds;
 80020e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <TrialStart+0x2d8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002224 <TrialStart+0x2d8>)
 80020f8:	785b      	ldrb	r3, [r3, #1]
 80020fa:	4619      	mov	r1, r3
 80020fc:	460b      	mov	r3, r1
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a5b      	subs	r3, r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	4a47      	ldr	r2, [pc, #284]	@ (8002224 <TrialStart+0x2d8>)
 8002108:	7892      	ldrb	r2, [r2, #2]
 800210a:	4413      	add	r3, r2
 800210c:	4a4f      	ldr	r2, [pc, #316]	@ (800224c <TrialStart+0x300>)
 800210e:	6013      	str	r3, [r2, #0]
		LCD_ShowString(2, FontH, 6, 8, White,rtext);
 8002110:	4b4f      	ldr	r3, [pc, #316]	@ (8002250 <TrialStart+0x304>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	2002      	movs	r0, #2
 8002118:	f001 fe22 	bl	8003d60 <ssd1306_SetCursor>
 800211c:	4b49      	ldr	r3, [pc, #292]	@ (8002244 <TrialStart+0x2f8>)
 800211e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002122:	4846      	ldr	r0, [pc, #280]	@ (800223c <TrialStart+0x2f0>)
 8002124:	f001 fdf6 	bl	8003d14 <ssd1306_WriteString>
 8002128:	f001 fb96 	bl	8003858 <ssd1306_UpdateScreen>

		SDstate=SDopen;
 800212c:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <TrialStart+0x294>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
		sprintf((char *)rtext,"Run %d %d  ",SelectNEStateValue[SelectNEState],SelectNLStateValue[SelectNLState]);
 8002132:	4b3e      	ldr	r3, [pc, #248]	@ (800222c <TrialStart+0x2e0>)
 8002134:	f993 3000 	ldrsb.w	r3, [r3]
 8002138:	461a      	mov	r2, r3
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <TrialStart+0x2e4>)
 800213c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002140:	4619      	mov	r1, r3
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <TrialStart+0x308>)
 8002144:	f993 3000 	ldrsb.w	r3, [r3]
 8002148:	461a      	mov	r2, r3
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <TrialStart+0x30c>)
 800214c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002150:	460a      	mov	r2, r1
 8002152:	4942      	ldr	r1, [pc, #264]	@ (800225c <TrialStart+0x310>)
 8002154:	4839      	ldr	r0, [pc, #228]	@ (800223c <TrialStart+0x2f0>)
 8002156:	f017 fbab 	bl	80198b0 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 800215a:	2100      	movs	r1, #0
 800215c:	2002      	movs	r0, #2
 800215e:	f001 fdff 	bl	8003d60 <ssd1306_SetCursor>
 8002162:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <TrialStart+0x2f8>)
 8002164:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002168:	4834      	ldr	r0, [pc, #208]	@ (800223c <TrialStart+0x2f0>)
 800216a:	f001 fdd3 	bl	8003d14 <ssd1306_WriteString>
 800216e:	f001 fb73 	bl	8003858 <ssd1306_UpdateScreen>
		NumberOfWrites =0;
 8002172:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <TrialStart+0x314>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
		Sequence=SEQ_Running;
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <TrialStart+0x318>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]

		CurrentSlot=0;
 800217e:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <TrialStart+0x31c>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
		LastWrittenSlot=0;
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <TrialStart+0x320>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start(&htim2);HAL_TIM_Base_Start(&htim3);HAL_TIM_Base_Start(&htim8);
 800218a:	481f      	ldr	r0, [pc, #124]	@ (8002208 <TrialStart+0x2bc>)
 800218c:	f010 f8d2 	bl	8012334 <HAL_TIM_Base_Start>
 8002190:	481e      	ldr	r0, [pc, #120]	@ (800220c <TrialStart+0x2c0>)
 8002192:	f010 f8cf 	bl	8012334 <HAL_TIM_Base_Start>
 8002196:	481e      	ldr	r0, [pc, #120]	@ (8002210 <TrialStart+0x2c4>)
 8002198:	f010 f8cc 	bl	8012334 <HAL_TIM_Base_Start>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1))Error_Handler();
 800219c:	2100      	movs	r1, #0
 800219e:	481d      	ldr	r0, [pc, #116]	@ (8002214 <TrialStart+0x2c8>)
 80021a0:	f010 fa46 	bl	8012630 <HAL_TIM_PWM_Start>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <TrialStart+0x262>
 80021aa:	f000 fff3 	bl	8003194 <Error_Handler>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))Error_Handler();
 80021ae:	2104      	movs	r1, #4
 80021b0:	4818      	ldr	r0, [pc, #96]	@ (8002214 <TrialStart+0x2c8>)
 80021b2:	f010 fa3d 	bl	8012630 <HAL_TIM_PWM_Start>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <TrialStart+0x274>
 80021bc:	f000 ffea 	bl	8003194 <Error_Handler>
			if (HAL_OK !=   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3))Error_Handler();
 80021c0:	2108      	movs	r1, #8
 80021c2:	4814      	ldr	r0, [pc, #80]	@ (8002214 <TrialStart+0x2c8>)
 80021c4:	f010 fa34 	bl	8012630 <HAL_TIM_PWM_Start>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <TrialStart+0x286>
 80021ce:	f000 ffe1 	bl	8003194 <Error_Handler>
//			HAL_TIM_Base_Start(&htim1);
//			HAL_TIM_Base_Start_IT(&htim1);

		oldState = GPIO_PIN_SET;
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <TrialStart+0x324>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
	}
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e0:	240008dc 	.word	0x240008dc
 80021e4:	24000b58 	.word	0x24000b58
 80021e8:	24000b64 	.word	0x24000b64
 80021ec:	24000b68 	.word	0x24000b68
 80021f0:	240008e0 	.word	0x240008e0
 80021f4:	24000b78 	.word	0x24000b78
 80021f8:	24000fc4 	.word	0x24000fc4
 80021fc:	240008e8 	.word	0x240008e8
 8002200:	240008e4 	.word	0x240008e4
 8002204:	0801a948 	.word	0x0801a948
 8002208:	24000d88 	.word	0x24000d88
 800220c:	24000e44 	.word	0x24000e44
 8002210:	24000f00 	.word	0x24000f00
 8002214:	24000ccc 	.word	0x24000ccc
 8002218:	24000b24 	.word	0x24000b24
 800221c:	cccccccd 	.word	0xcccccccd
 8002220:	24000b28 	.word	0x24000b28
 8002224:	24000b40 	.word	0x24000b40
 8002228:	24000bf4 	.word	0x24000bf4
 800222c:	24000209 	.word	0x24000209
 8002230:	2400020c 	.word	0x2400020c
 8002234:	10624dd3 	.word	0x10624dd3
 8002238:	0801a958 	.word	0x0801a958
 800223c:	24000008 	.word	0x24000008
 8002240:	24000680 	.word	0x24000680
 8002244:	24000000 	.word	0x24000000
 8002248:	0801a97c 	.word	0x0801a97c
 800224c:	24000b54 	.word	0x24000b54
 8002250:	240008d8 	.word	0x240008d8
 8002254:	24000218 	.word	0x24000218
 8002258:	2400021c 	.word	0x2400021c
 800225c:	0801a988 	.word	0x0801a988
 8002260:	24000b84 	.word	0x24000b84
 8002264:	240008da 	.word	0x240008da
 8002268:	24000b7c 	.word	0x24000b7c
 800226c:	24000b80 	.word	0x24000b80
 8002270:	240008d9 	.word	0x240008d9

08002274 <TrialEnd>:
//=========================================================================================================================
void TrialEnd()
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	if (SDstate == SDopen)
 8002278:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <TrialEnd+0x60>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <TrialEnd+0x12>
	{
#ifdef DISK
		f_close(&fp);
 8002280:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <TrialEnd+0x64>)
 8002282:	f017 f8f4 	bl	801946e <f_close>
#endif
	}

			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))Error_Handler(); //reload Exposure& Length
 8002286:	2100      	movs	r1, #0
 8002288:	4814      	ldr	r0, [pc, #80]	@ (80022dc <TrialEnd+0x68>)
 800228a:	f010 fadf 	bl	801284c <HAL_TIM_PWM_Stop>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <TrialEnd+0x24>
 8002294:	f000 ff7e 	bl	8003194 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))Error_Handler(); //reload Exposure& Length
 8002298:	2104      	movs	r1, #4
 800229a:	4810      	ldr	r0, [pc, #64]	@ (80022dc <TrialEnd+0x68>)
 800229c:	f010 fad6 	bl	801284c <HAL_TIM_PWM_Stop>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <TrialEnd+0x36>
 80022a6:	f000 ff75 	bl	8003194 <Error_Handler>
			if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))Error_Handler(); //reload Exposure& Length
 80022aa:	2108      	movs	r1, #8
 80022ac:	480b      	ldr	r0, [pc, #44]	@ (80022dc <TrialEnd+0x68>)
 80022ae:	f010 facd 	bl	801284c <HAL_TIM_PWM_Stop>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <TrialEnd+0x48>
 80022b8:	f000 ff6c 	bl	8003194 <Error_Handler>
			HAL_TIM_Base_Stop(&htim2);HAL_TIM_Base_Stop(&htim3);HAL_TIM_Base_Stop(&htim8);
 80022bc:	4808      	ldr	r0, [pc, #32]	@ (80022e0 <TrialEnd+0x6c>)
 80022be:	f010 f8a9 	bl	8012414 <HAL_TIM_Base_Stop>
 80022c2:	4808      	ldr	r0, [pc, #32]	@ (80022e4 <TrialEnd+0x70>)
 80022c4:	f010 f8a6 	bl	8012414 <HAL_TIM_Base_Stop>
 80022c8:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <TrialEnd+0x74>)
 80022ca:	f010 f8a3 	bl	8012414 <HAL_TIM_Base_Stop>
//			HAL_TIM_Base_Stop(&htim1);
//			HAL_TIM_Base_Stop_IT(&htim1);



}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	240008dc 	.word	0x240008dc
 80022d8:	24000680 	.word	0x24000680
 80022dc:	24000ccc 	.word	0x24000ccc
 80022e0:	24000d88 	.word	0x24000d88
 80022e4:	24000e44 	.word	0x24000e44
 80022e8:	24000f00 	.word	0x24000f00

080022ec <TrialComplete>:
//=========================================================================================================================
void TrialComplete()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
	if (SDstate == SDopen)
 80022f2:	4b63      	ldr	r3, [pc, #396]	@ (8002480 <TrialComplete+0x194>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 80b4 	bne.w	8002464 <TrialComplete+0x178>
	{
		{

			FRESULT res;
			//			SD_WriteStartTime;
			BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 80022fc:	4b61      	ldr	r3, [pc, #388]	@ (8002484 <TrialComplete+0x198>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <TrialComplete+0x19c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	4a61      	ldr	r2, [pc, #388]	@ (800248c <TrialComplete+0x1a0>)
 8002308:	6013      	str	r3, [r2, #0]

			while ((CurrentSlot)> (LastWrittenSlot) && (RunState != HALT))
 800230a:	e05d      	b.n	80023c8 <TrialComplete+0xdc>
			{
#ifdef DISK

				res = f_write ( &fp,														/* Pointer to the file object */
						(const void*) (SDRAMAREA+((LastWrittenSlot%SLOTS)*(Npixels*2))),	/* Pointer to the data to be written */
 800230c:	4b5e      	ldr	r3, [pc, #376]	@ (8002488 <TrialComplete+0x19c>)
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	4b5f      	ldr	r3, [pc, #380]	@ (8002490 <TrialComplete+0x1a4>)
 8002312:	fba3 2301 	umull	r2, r3, r3, r1
 8002316:	0a9a      	lsrs	r2, r3, #10
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	01db      	lsls	r3, r3, #7
 8002320:	1aca      	subs	r2, r1, r3
 8002322:	f502 3340 	add.w	r3, r2, #196608	@ 0x30000
 8002326:	039b      	lsls	r3, r3, #14
				res = f_write ( &fp,														/* Pointer to the file object */
 8002328:	4619      	mov	r1, r3
 800232a:	4b5a      	ldr	r3, [pc, #360]	@ (8002494 <TrialComplete+0x1a8>)
 800232c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002330:	4859      	ldr	r0, [pc, #356]	@ (8002498 <TrialComplete+0x1ac>)
 8002332:	f016 fdca 	bl	8018eca <f_write>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
						(Npixels*2),														/* Number of bytes to write */
						(void *)&BytesWritten										/* Pointer to number of bytes written */
				);
				if (res  != FR_OK || (BytesWritten !=(Npixels*2))	){
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <TrialComplete+0x5e>
 8002340:	4b54      	ldr	r3, [pc, #336]	@ (8002494 <TrialComplete+0x1a8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002348:	d010      	beq.n	800236c <TrialComplete+0x80>
					LCD_ShowString(2, 0, 6,8,White, "FW Error");
 800234a:	2100      	movs	r1, #0
 800234c:	2002      	movs	r0, #2
 800234e:	f001 fd07 	bl	8003d60 <ssd1306_SetCursor>
 8002352:	4b52      	ldr	r3, [pc, #328]	@ (800249c <TrialComplete+0x1b0>)
 8002354:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002358:	4851      	ldr	r0, [pc, #324]	@ (80024a0 <TrialComplete+0x1b4>)
 800235a:	f001 fcdb 	bl	8003d14 <ssd1306_WriteString>
 800235e:	f001 fa7b 	bl	8003858 <ssd1306_UpdateScreen>
					f_close(&fp);
 8002362:	484d      	ldr	r0, [pc, #308]	@ (8002498 <TrialComplete+0x1ac>)
 8002364:	f017 f883 	bl	801946e <f_close>
					Error_Handler();
 8002368:	f000 ff14 	bl	8003194 <Error_Handler>
				}
#endif
				LastWrittenSlot++;
 800236c:	4b46      	ldr	r3, [pc, #280]	@ (8002488 <TrialComplete+0x19c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a45      	ldr	r2, [pc, #276]	@ (8002488 <TrialComplete+0x19c>)
 8002374:	6013      	str	r3, [r2, #0]
				//				SD_WriteStartTime;
				pixelPlace=((LastWrittenSlot <<7) / NumLines);
 8002376:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <TrialComplete+0x19c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	01da      	lsls	r2, r3, #7
 800237c:	4b49      	ldr	r3, [pc, #292]	@ (80024a4 <TrialComplete+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <TrialComplete+0x1bc>)
 8002386:	6013      	str	r3, [r2, #0]
				if (pixelPlaceOld != pixelPlace){
 8002388:	4b48      	ldr	r3, [pc, #288]	@ (80024ac <TrialComplete+0x1c0>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <TrialComplete+0x1bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d011      	beq.n	80023b8 <TrialComplete+0xcc>
					ssd1306_DrawPixel(pixelPlace, 62);
 8002394:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <TrialComplete+0x1bc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	213e      	movs	r1, #62	@ 0x3e
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fa85 	bl	80038ac <ssd1306_DrawPixel>
					HAL_GPIO_TogglePin(BLUEled_GPIO_Port, BLUEled_Pin);
 80023a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a6:	4842      	ldr	r0, [pc, #264]	@ (80024b0 <TrialComplete+0x1c4>)
 80023a8:	f007 fb8d 	bl	8009ac6 <HAL_GPIO_TogglePin>
					ssd1306_UpdateScreen();
 80023ac:	f001 fa54 	bl	8003858 <ssd1306_UpdateScreen>
					pixelPlaceOld = pixelPlace;
 80023b0:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <TrialComplete+0x1bc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <TrialComplete+0x1c0>)
 80023b6:	6013      	str	r3, [r2, #0]
				}
				if (0 != JOYstickPOS()){
 80023b8:	f7ff f8e2 	bl	8001580 <JOYstickPOS>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <TrialComplete+0xdc>
					RunState = HALT;
 80023c2:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <TrialComplete+0x1c8>)
 80023c4:	2203      	movs	r2, #3
 80023c6:	701a      	strb	r2, [r3, #0]
			while ((CurrentSlot)> (LastWrittenSlot) && (RunState != HALT))
 80023c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <TrialComplete+0x198>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <TrialComplete+0x19c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d903      	bls.n	80023dc <TrialComplete+0xf0>
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <TrialComplete+0x1c8>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d197      	bne.n	800230c <TrialComplete+0x20>
				}

			}
		}
		TrialEnd();
 80023dc:	f7ff ff4a 	bl	8002274 <TrialEnd>
		HAL_StatusTypeDef res = HAL_RTC_GetTime(&hrtc, &timeEnd, RTC_FORMAT_BIN);
 80023e0:	2200      	movs	r2, #0
 80023e2:	4935      	ldr	r1, [pc, #212]	@ (80024b8 <TrialComplete+0x1cc>)
 80023e4:	4835      	ldr	r0, [pc, #212]	@ (80024bc <TrialComplete+0x1d0>)
 80023e6:	f00d ffb7 	bl	8010358 <HAL_RTC_GetTime>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73bb      	strb	r3, [r7, #14]
		if(res != HAL_OK) {
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <TrialComplete+0x10c>
			Error_Handler();
 80023f4:	f000 fece 	bl	8003194 <Error_Handler>
		}

		uint32_t sec = ((uint32_t)timeEnd.Hours*3600)+((uint32_t)timeEnd.Minutes*60)+((uint32_t)timeEnd.Seconds) -(secStart);
 80023f8:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <TrialComplete+0x1cc>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <TrialComplete+0x1cc>)
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	4619      	mov	r1, r3
 800240c:	460b      	mov	r3, r1
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a5b      	subs	r3, r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <TrialComplete+0x1cc>)
 8002418:	7892      	ldrb	r2, [r2, #2]
 800241a:	441a      	add	r2, r3
 800241c:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <TrialComplete+0x1d4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	60bb      	str	r3, [r7, #8]
		sprintf(( char *)rtext,"Time %ld sec          ",sec);
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	4927      	ldr	r1, [pc, #156]	@ (80024c4 <TrialComplete+0x1d8>)
 8002428:	4827      	ldr	r0, [pc, #156]	@ (80024c8 <TrialComplete+0x1dc>)
 800242a:	f017 fa41 	bl	80198b0 <siprintf>
		LCD_ShowString(2, 2*FontH,6,8,White,rtext);
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <TrialComplete+0x1e0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	2002      	movs	r0, #2
 800243a:	f001 fc91 	bl	8003d60 <ssd1306_SetCursor>
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <TrialComplete+0x1b0>)
 8002440:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002444:	4820      	ldr	r0, [pc, #128]	@ (80024c8 <TrialComplete+0x1dc>)
 8002446:	f001 fc65 	bl	8003d14 <ssd1306_WriteString>
 800244a:	f001 fa05 	bl	8003858 <ssd1306_UpdateScreen>
		SDstate= SDnotopen;
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <TrialComplete+0x194>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
		RTC_DateTypeDef FILEdate;
		res = HAL_RTC_GetDate(&hrtc, &FILEdate, RTC_FORMAT_BIN);
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	4818      	ldr	r0, [pc, #96]	@ (80024bc <TrialComplete+0x1d0>)
 800245c:	f00e f860 	bl	8010520 <HAL_RTC_GetDate>
 8002460:	4603      	mov	r3, r0
 8002462:	73bb      	strb	r3, [r7, #14]

	}//complete
	Sequence=SEQ_Ready;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <TrialComplete+0x1e4>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800246a:	2064      	movs	r0, #100	@ 0x64
 800246c:	f002 fca8 	bl	8004dc0 <HAL_Delay>
	ledDisp(0);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff f8c9 	bl	8001608 <ledDisp>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	240008dc 	.word	0x240008dc
 8002484:	24000b7c 	.word	0x24000b7c
 8002488:	24000b80 	.word	0x24000b80
 800248c:	24000b74 	.word	0x24000b74
 8002490:	88888889 	.word	0x88888889
 8002494:	24000b20 	.word	0x24000b20
 8002498:	24000680 	.word	0x24000680
 800249c:	24000000 	.word	0x24000000
 80024a0:	0801a994 	.word	0x0801a994
 80024a4:	24000b28 	.word	0x24000b28
 80024a8:	24000b70 	.word	0x24000b70
 80024ac:	24000b6c 	.word	0x24000b6c
 80024b0:	58022000 	.word	0x58022000
 80024b4:	24000208 	.word	0x24000208
 80024b8:	24000b2c 	.word	0x24000b2c
 80024bc:	24000bf4 	.word	0x24000bf4
 80024c0:	24000b54 	.word	0x24000b54
 80024c4:	0801a9a0 	.word	0x0801a9a0
 80024c8:	24000008 	.word	0x24000008
 80024cc:	240008d8 	.word	0x240008d8
 80024d0:	240008da 	.word	0x240008da

080024d4 <TrialOngoing>:

//=========================================================================================================================
void TrialOngoing (){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

	if (SDstate == SDopen){
 80024da:	4b58      	ldr	r3, [pc, #352]	@ (800263c <TrialOngoing+0x168>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	f040 809a 	bne.w	8002618 <TrialOngoing+0x144>
		FRESULT res;
		BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 80024e4:	4b56      	ldr	r3, [pc, #344]	@ (8002640 <TrialOngoing+0x16c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b56      	ldr	r3, [pc, #344]	@ (8002644 <TrialOngoing+0x170>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	4a56      	ldr	r2, [pc, #344]	@ (8002648 <TrialOngoing+0x174>)
 80024f0:	6013      	str	r3, [r2, #0]
		//		SD_WriteStartTime;



		while ((CurrentSlot)> (LastWrittenSlot) ){
 80024f2:	e08a      	b.n	800260a <TrialOngoing+0x136>

#ifdef DISK
			if(LastWrittenSlot == 0 ){
 80024f4:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <TrialOngoing+0x170>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <TrialOngoing+0x44>
				sprintf((char *)SDRAMAREA,"P5 %5d %5d 65535 ", Npixels,SelectNLStateValue[SelectNLState] );
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <TrialOngoing+0x178>)
 80024fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002502:	461a      	mov	r2, r3
 8002504:	4b52      	ldr	r3, [pc, #328]	@ (8002650 <TrialOngoing+0x17c>)
 8002506:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800250a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800250e:	4951      	ldr	r1, [pc, #324]	@ (8002654 <TrialOngoing+0x180>)
 8002510:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8002514:	f017 f9cc 	bl	80198b0 <siprintf>
			}
			res = f_write ( &fp,														/* Pointer to the file object */
					(const void*) (SDRAMAREA+((LastWrittenSlot%SLOTS)*(Npixels*2))),	/* Pointer to the data to be written */
 8002518:	4b4a      	ldr	r3, [pc, #296]	@ (8002644 <TrialOngoing+0x170>)
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	4b4e      	ldr	r3, [pc, #312]	@ (8002658 <TrialOngoing+0x184>)
 800251e:	fba3 2301 	umull	r2, r3, r3, r1
 8002522:	0a9a      	lsrs	r2, r3, #10
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	01db      	lsls	r3, r3, #7
 800252c:	1aca      	subs	r2, r1, r3
 800252e:	f502 3340 	add.w	r3, r2, #196608	@ 0x30000
 8002532:	039b      	lsls	r3, r3, #14
			res = f_write ( &fp,														/* Pointer to the file object */
 8002534:	4619      	mov	r1, r3
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <TrialOngoing+0x188>)
 8002538:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800253c:	4848      	ldr	r0, [pc, #288]	@ (8002660 <TrialOngoing+0x18c>)
 800253e:	f016 fcc4 	bl	8018eca <f_write>
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
					(Npixels*2),														/* Number of bytes to write */
					(void *)&BytesWritten										/* Pointer to number of bytes written */
			);
			BuffDiff=(CurrentSlot)-(LastWrittenSlot);
 8002546:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <TrialOngoing+0x16c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <TrialOngoing+0x170>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a3d      	ldr	r2, [pc, #244]	@ (8002648 <TrialOngoing+0x174>)
 8002552:	6013      	str	r3, [r2, #0]
			if(BuffDiff > BuffDiffMax)(BuffDiffMax=BuffDiff);
 8002554:	4b3c      	ldr	r3, [pc, #240]	@ (8002648 <TrialOngoing+0x174>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b42      	ldr	r3, [pc, #264]	@ (8002664 <TrialOngoing+0x190>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d903      	bls.n	8002568 <TrialOngoing+0x94>
 8002560:	4b39      	ldr	r3, [pc, #228]	@ (8002648 <TrialOngoing+0x174>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3f      	ldr	r2, [pc, #252]	@ (8002664 <TrialOngoing+0x190>)
 8002566:	6013      	str	r3, [r2, #0]
			LastWrittenSlot++;
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <TrialOngoing+0x170>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a35      	ldr	r2, [pc, #212]	@ (8002644 <TrialOngoing+0x170>)
 8002570:	6013      	str	r3, [r2, #0]
			NumberOfWrites++;
 8002572:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <TrialOngoing+0x194>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <TrialOngoing+0x194>)
 800257a:	6013      	str	r3, [r2, #0]


			if (res  != FR_OK	 || (BytesWritten !=(Npixels*2))	){
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <TrialOngoing+0xb8>
 8002582:	4b36      	ldr	r3, [pc, #216]	@ (800265c <TrialOngoing+0x188>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800258a:	d010      	beq.n	80025ae <TrialOngoing+0xda>
				LCD_ShowString(2, 0,6,8,White, "FW Error");
 800258c:	2100      	movs	r1, #0
 800258e:	2002      	movs	r0, #2
 8002590:	f001 fbe6 	bl	8003d60 <ssd1306_SetCursor>
 8002594:	4b35      	ldr	r3, [pc, #212]	@ (800266c <TrialOngoing+0x198>)
 8002596:	e893 0006 	ldmia.w	r3, {r1, r2}
 800259a:	4835      	ldr	r0, [pc, #212]	@ (8002670 <TrialOngoing+0x19c>)
 800259c:	f001 fbba 	bl	8003d14 <ssd1306_WriteString>
 80025a0:	f001 f95a 	bl	8003858 <ssd1306_UpdateScreen>
				f_close(&fp);
 80025a4:	482e      	ldr	r0, [pc, #184]	@ (8002660 <TrialOngoing+0x18c>)
 80025a6:	f016 ff62 	bl	801946e <f_close>
				Error_Handler();
 80025aa:	f000 fdf3 	bl	8003194 <Error_Handler>

			}
#endif
			//			SD_WriteStartTime;
			pixelPlace=((LastWrittenSlot <<7) / NumLines);
 80025ae:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <TrialOngoing+0x170>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	01da      	lsls	r2, r3, #7
 80025b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <TrialOngoing+0x1a0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <TrialOngoing+0x1a4>)
 80025be:	6013      	str	r3, [r2, #0]
			if (pixelPlaceOld != pixelPlace){
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <TrialOngoing+0x1a8>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <TrialOngoing+0x1a4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d013      	beq.n	80025f4 <TrialOngoing+0x120>
//				ssd1306_DrawPixel(pixelPlace, 63);
//				ssd1306_DrawPixel(((CurrentSlot <<7) / NumLines), 61);
				HAL_GPIO_TogglePin(BLUEled_GPIO_Port, BLUEled_Pin);
 80025cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025d0:	482b      	ldr	r0, [pc, #172]	@ (8002680 <TrialOngoing+0x1ac>)
 80025d2:	f007 fa78 	bl	8009ac6 <HAL_GPIO_TogglePin>
				if (BuffDiff>SLOTS) {
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <TrialOngoing+0x174>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 80025de:	d905      	bls.n	80025ec <TrialOngoing+0x118>
//					HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_RESET); //error
					RunState = HALT;
 80025e0:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <TrialOngoing+0x1b0>)
 80025e2:	2203      	movs	r2, #3
 80025e4:	701a      	strb	r2, [r3, #0]
					Sequence=SEQ_Complete;
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <TrialOngoing+0x1b4>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	701a      	strb	r2, [r3, #0]

				}
				//if (pixelPlace % 8 == 0)ssd1306_UpdateScreen();
//				ledDisp(1<<((LastWrittenSlot/(NumLines>>3))));
				pixelPlaceOld = pixelPlace;
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <TrialOngoing+0x1a4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a22      	ldr	r2, [pc, #136]	@ (800267c <TrialOngoing+0x1a8>)
 80025f2:	6013      	str	r3, [r2, #0]
			}
			ledDisp(((LastWrittenSlot/(NumLines>>8))));
 80025f4:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <TrialOngoing+0x170>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <TrialOngoing+0x1a0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe ffff 	bl	8001608 <ledDisp>
		while ((CurrentSlot)> (LastWrittenSlot) ){
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <TrialOngoing+0x16c>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <TrialOngoing+0x170>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	f63f af6e 	bhi.w	80024f4 <TrialOngoing+0x20>

		}
	}
	ADCstate = ADC_idle;
 8002618:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <TrialOngoing+0x1b8>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
	if (0 != JOYstickPOS()){
 800261e:	f7fe ffaf 	bl	8001580 <JOYstickPOS>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <TrialOngoing+0x160>
		RunState = HALT;
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <TrialOngoing+0x1b0>)
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
		Sequence=SEQ_Complete;
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <TrialOngoing+0x1b4>)
 8002630:	2203      	movs	r2, #3
 8002632:	701a      	strb	r2, [r3, #0]
	}
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	240008dc 	.word	0x240008dc
 8002640:	24000b7c 	.word	0x24000b7c
 8002644:	24000b80 	.word	0x24000b80
 8002648:	24000b74 	.word	0x24000b74
 800264c:	24000218 	.word	0x24000218
 8002650:	2400021c 	.word	0x2400021c
 8002654:	0801a9b8 	.word	0x0801a9b8
 8002658:	88888889 	.word	0x88888889
 800265c:	24000b20 	.word	0x24000b20
 8002660:	24000680 	.word	0x24000680
 8002664:	24000b78 	.word	0x24000b78
 8002668:	24000b84 	.word	0x24000b84
 800266c:	24000000 	.word	0x24000000
 8002670:	0801a994 	.word	0x0801a994
 8002674:	24000b28 	.word	0x24000b28
 8002678:	24000b70 	.word	0x24000b70
 800267c:	24000b6c 	.word	0x24000b6c
 8002680:	58022000 	.word	0x58022000
 8002684:	24000208 	.word	0x24000208
 8002688:	240008da 	.word	0x240008da
 800268c:	240008db 	.word	0x240008db

08002690 <RunMenu>:
//__-------___________________________________________________________________________________________

void RunMenu()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
	uint8_t Jsp=0,i=0;
 8002696:	2300      	movs	r3, #0
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	2300      	movs	r3, #0
 800269c:	71fb      	strb	r3, [r7, #7]
	ssd1306_Clear();
 800269e:	f001 fb77 	bl	8003d90 <ssd1306_Clear>
	sprintf(rtext,"RunType:  %c",RunType[SelectRT]);
 80026a2:	4baf      	ldr	r3, [pc, #700]	@ (8002960 <RunMenu+0x2d0>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4bae      	ldr	r3, [pc, #696]	@ (8002964 <RunMenu+0x2d4>)
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	461a      	mov	r2, r3
 80026ae:	49ae      	ldr	r1, [pc, #696]	@ (8002968 <RunMenu+0x2d8>)
 80026b0:	48ae      	ldr	r0, [pc, #696]	@ (800296c <RunMenu+0x2dc>)
 80026b2:	f017 f8fd 	bl	80198b0 <siprintf>
	LCD_ShowString(2, 0, 6,8 , White, rtext);
 80026b6:	2100      	movs	r1, #0
 80026b8:	2002      	movs	r0, #2
 80026ba:	f001 fb51 	bl	8003d60 <ssd1306_SetCursor>
 80026be:	4bac      	ldr	r3, [pc, #688]	@ (8002970 <RunMenu+0x2e0>)
 80026c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026c4:	48a9      	ldr	r0, [pc, #676]	@ (800296c <RunMenu+0x2dc>)
 80026c6:	f001 fb25 	bl	8003d14 <ssd1306_WriteString>
 80026ca:	f001 f8c5 	bl	8003858 <ssd1306_UpdateScreen>
	sprintf(rtext,"Exposure: %d",(SelectNEStateValue[SelectNEState]));
 80026ce:	4ba9      	ldr	r3, [pc, #676]	@ (8002974 <RunMenu+0x2e4>)
 80026d0:	f993 3000 	ldrsb.w	r3, [r3]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4ba8      	ldr	r3, [pc, #672]	@ (8002978 <RunMenu+0x2e8>)
 80026d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026dc:	461a      	mov	r2, r3
 80026de:	49a7      	ldr	r1, [pc, #668]	@ (800297c <RunMenu+0x2ec>)
 80026e0:	48a2      	ldr	r0, [pc, #648]	@ (800296c <RunMenu+0x2dc>)
 80026e2:	f017 f8e5 	bl	80198b0 <siprintf>
	LCD_ShowString(2, FontH, 6,8 , White, rtext);
 80026e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002980 <RunMenu+0x2f0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	2002      	movs	r0, #2
 80026ee:	f001 fb37 	bl	8003d60 <ssd1306_SetCursor>
 80026f2:	4b9f      	ldr	r3, [pc, #636]	@ (8002970 <RunMenu+0x2e0>)
 80026f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026f8:	489c      	ldr	r0, [pc, #624]	@ (800296c <RunMenu+0x2dc>)
 80026fa:	f001 fb0b 	bl	8003d14 <ssd1306_WriteString>
 80026fe:	f001 f8ab 	bl	8003858 <ssd1306_UpdateScreen>
	sprintf(rtext,"Length:   %d",SelectNLStateValue[SelectNLState]);
 8002702:	4ba0      	ldr	r3, [pc, #640]	@ (8002984 <RunMenu+0x2f4>)
 8002704:	f993 3000 	ldrsb.w	r3, [r3]
 8002708:	461a      	mov	r2, r3
 800270a:	4b9f      	ldr	r3, [pc, #636]	@ (8002988 <RunMenu+0x2f8>)
 800270c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002710:	461a      	mov	r2, r3
 8002712:	499e      	ldr	r1, [pc, #632]	@ (800298c <RunMenu+0x2fc>)
 8002714:	4895      	ldr	r0, [pc, #596]	@ (800296c <RunMenu+0x2dc>)
 8002716:	f017 f8cb 	bl	80198b0 <siprintf>
	LCD_ShowString(2, 2*FontH, 6,8 , White, rtext);
 800271a:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <RunMenu+0x2f0>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	2002      	movs	r0, #2
 8002726:	f001 fb1b 	bl	8003d60 <ssd1306_SetCursor>
 800272a:	4b91      	ldr	r3, [pc, #580]	@ (8002970 <RunMenu+0x2e0>)
 800272c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002730:	488e      	ldr	r0, [pc, #568]	@ (800296c <RunMenu+0x2dc>)
 8002732:	f001 faef 	bl	8003d14 <ssd1306_WriteString>
 8002736:	f001 f88f 	bl	8003858 <ssd1306_UpdateScreen>
	ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 800273a:	4b95      	ldr	r3, [pc, #596]	@ (8002990 <RunMenu+0x300>)
 800273c:	f993 3000 	ldrsb.w	r3, [r3]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4a8f      	ldr	r2, [pc, #572]	@ (8002980 <RunMenu+0x2f0>)
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	fb13 f302 	smulbb	r3, r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	b21b      	sxth	r3, r3
 800274e:	4a8c      	ldr	r2, [pc, #560]	@ (8002980 <RunMenu+0x2f0>)
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	b212      	sxth	r2, r2
 8002754:	4619      	mov	r1, r3
 8002756:	207f      	movs	r0, #127	@ 0x7f
 8002758:	f001 f91e 	bl	8003998 <ssd1306_DrawVerticalLine>
	while (RunState == HALT)
 800275c:	e1cc      	b.n	8002af8 <RunMenu+0x468>
	{
		if (i ==0) i=1;
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <RunMenu+0xd8>
 8002764:	2301      	movs	r3, #1
 8002766:	71fb      	strb	r3, [r7, #7]
	//ledDisp(i);15
		i<<=1;
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
		Jsp = JOYstickPOS();
 800276e:	f7fe ff07 	bl	8001580 <JOYstickPOS>
 8002772:	4603      	mov	r3, r0
 8002774:	71bb      	strb	r3, [r7, #6]

		{
		HAL_Delay(25);
 8002776:	2019      	movs	r0, #25
 8002778:	f002 fb22 	bl	8004dc0 <HAL_Delay>
		switch (Jsp){
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	3b01      	subs	r3, #1
 8002780:	2b0f      	cmp	r3, #15
 8002782:	f200 816d 	bhi.w	8002a60 <RunMenu+0x3d0>
 8002786:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <RunMenu+0xfc>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027cd 	.word	0x080027cd
 8002790:	08002a39 	.word	0x08002a39
 8002794:	08002a61 	.word	0x08002a61
 8002798:	0800286b 	.word	0x0800286b
 800279c:	08002a61 	.word	0x08002a61
 80027a0:	08002a61 	.word	0x08002a61
 80027a4:	08002a61 	.word	0x08002a61
 80027a8:	080029bb 	.word	0x080029bb
 80027ac:	08002a61 	.word	0x08002a61
 80027b0:	08002a61 	.word	0x08002a61
 80027b4:	08002a61 	.word	0x08002a61
 80027b8:	08002a61 	.word	0x08002a61
 80027bc:	08002a61 	.word	0x08002a61
 80027c0:	08002a61 	.word	0x08002a61
 80027c4:	08002a61 	.word	0x08002a61
 80027c8:	08002909 	.word	0x08002909
		case (1):{   //R
			ssd1306_SetColor(Black);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 ff99 	bl	8003704 <ssd1306_SetColor>
			ssd1306_DrawVerticalLine(127,0,4*FontH);     //Cursur blank
 80027d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002980 <RunMenu+0x2f0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	b21b      	sxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	2100      	movs	r1, #0
 80027e0:	207f      	movs	r0, #127	@ 0x7f
 80027e2:	f001 f8d9 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126,0,4*FontH);     //Cursur blank
 80027e6:	4b66      	ldr	r3, [pc, #408]	@ (8002980 <RunMenu+0x2f0>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	207e      	movs	r0, #126	@ 0x7e
 80027f6:	f001 f8cf 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_SetColor(White);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f000 ff82 	bl	8003704 <ssd1306_SetColor>
			if (MenuItem == 2) {MenuItem = 0;} else MenuItem++ ;
 8002800:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <RunMenu+0x300>)
 8002802:	f993 3000 	ldrsb.w	r3, [r3]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <RunMenu+0x182>
 800280a:	4b61      	ldr	r3, [pc, #388]	@ (8002990 <RunMenu+0x300>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e008      	b.n	8002824 <RunMenu+0x194>
 8002812:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <RunMenu+0x300>)
 8002814:	f993 3000 	ldrsb.w	r3, [r3]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3301      	adds	r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	b25a      	sxtb	r2, r3
 8002820:	4b5b      	ldr	r3, [pc, #364]	@ (8002990 <RunMenu+0x300>)
 8002822:	701a      	strb	r2, [r3, #0]
			ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 8002824:	4b5a      	ldr	r3, [pc, #360]	@ (8002990 <RunMenu+0x300>)
 8002826:	f993 3000 	ldrsb.w	r3, [r3]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4a54      	ldr	r2, [pc, #336]	@ (8002980 <RunMenu+0x2f0>)
 800282e:	7812      	ldrb	r2, [r2, #0]
 8002830:	fb13 f302 	smulbb	r3, r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	b21b      	sxth	r3, r3
 8002838:	4a51      	ldr	r2, [pc, #324]	@ (8002980 <RunMenu+0x2f0>)
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	b212      	sxth	r2, r2
 800283e:	4619      	mov	r1, r3
 8002840:	207f      	movs	r0, #127	@ 0x7f
 8002842:	f001 f8a9 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, MenuItem*FontH,FontH);
 8002846:	4b52      	ldr	r3, [pc, #328]	@ (8002990 <RunMenu+0x300>)
 8002848:	f993 3000 	ldrsb.w	r3, [r3]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <RunMenu+0x2f0>)
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	fb13 f302 	smulbb	r3, r3, r2
 8002856:	b29b      	uxth	r3, r3
 8002858:	b21b      	sxth	r3, r3
 800285a:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <RunMenu+0x2f0>)
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	b212      	sxth	r2, r2
 8002860:	4619      	mov	r1, r3
 8002862:	207e      	movs	r0, #126	@ 0x7e
 8002864:	f001 f898 	bl	8003998 <ssd1306_DrawVerticalLine>
			break;
 8002868:	e0fa      	b.n	8002a60 <RunMenu+0x3d0>
		}
		case (4):{  //L
			ssd1306_SetColor(Black);
 800286a:	2000      	movs	r0, #0
 800286c:	f000 ff4a 	bl	8003704 <ssd1306_SetColor>
			ssd1306_DrawVerticalLine(127, 0,4*FontH);
 8002870:	4b43      	ldr	r3, [pc, #268]	@ (8002980 <RunMenu+0x2f0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21b      	sxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	207f      	movs	r0, #127	@ 0x7f
 8002880:	f001 f88a 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, 0,4*FontH);
 8002884:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <RunMenu+0x2f0>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21b      	sxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	207e      	movs	r0, #126	@ 0x7e
 8002894:	f001 f880 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_SetColor(White);
 8002898:	2001      	movs	r0, #1
 800289a:	f000 ff33 	bl	8003704 <ssd1306_SetColor>
			if (MenuItem) {MenuItem-- ;}
 800289e:	4b3c      	ldr	r3, [pc, #240]	@ (8002990 <RunMenu+0x300>)
 80028a0:	f993 3000 	ldrsb.w	r3, [r3]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d009      	beq.n	80028bc <RunMenu+0x22c>
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <RunMenu+0x300>)
 80028aa:	f993 3000 	ldrsb.w	r3, [r3]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	4b36      	ldr	r3, [pc, #216]	@ (8002990 <RunMenu+0x300>)
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e002      	b.n	80028c2 <RunMenu+0x232>
			else MenuItem =2;
 80028bc:	4b34      	ldr	r3, [pc, #208]	@ (8002990 <RunMenu+0x300>)
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
			ssd1306_DrawVerticalLine(127, MenuItem*FontH,FontH);
 80028c2:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <RunMenu+0x300>)
 80028c4:	f993 3000 	ldrsb.w	r3, [r3]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002980 <RunMenu+0x2f0>)
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	fb13 f302 	smulbb	r3, r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <RunMenu+0x2f0>)
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	b212      	sxth	r2, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	207f      	movs	r0, #127	@ 0x7f
 80028e0:	f001 f85a 	bl	8003998 <ssd1306_DrawVerticalLine>
			ssd1306_DrawVerticalLine(126, MenuItem*FontH,FontH);
 80028e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <RunMenu+0x300>)
 80028e6:	f993 3000 	ldrsb.w	r3, [r3]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <RunMenu+0x2f0>)
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	fb13 f302 	smulbb	r3, r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <RunMenu+0x2f0>)
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	b212      	sxth	r2, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	207e      	movs	r0, #126	@ 0x7e
 8002902:	f001 f849 	bl	8003998 <ssd1306_DrawVerticalLine>
			break;
 8002906:	e0ab      	b.n	8002a60 <RunMenu+0x3d0>
		}
		case (16):{ //UP
			if (MenuItem == 0)
 8002908:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <RunMenu+0x300>)
 800290a:	f993 3000 	ldrsb.w	r3, [r3]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <RunMenu+0x2a0>
			{
				if (SelectRT == 2) {SelectRT = 0;} else SelectRT++ ;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <RunMenu+0x2d0>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d103      	bne.n	8002922 <RunMenu+0x292>
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <RunMenu+0x2d0>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
			}
			break;
 8002920:	e09e      	b.n	8002a60 <RunMenu+0x3d0>
				if (SelectRT == 2) {SelectRT = 0;} else SelectRT++ ;
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <RunMenu+0x2d0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <RunMenu+0x2d0>)
 800292c:	701a      	strb	r2, [r3, #0]
			break;
 800292e:	e097      	b.n	8002a60 <RunMenu+0x3d0>
			else if (MenuItem == 1)
 8002930:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <RunMenu+0x300>)
 8002932:	f993 3000 	ldrsb.w	r3, [r3]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d12c      	bne.n	8002994 <RunMenu+0x304>
				if (SelectNEState == 5) {SelectNEState = 0;} else SelectNEState++ ;
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <RunMenu+0x2e4>)
 800293c:	f993 3000 	ldrsb.w	r3, [r3]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d103      	bne.n	800294c <RunMenu+0x2bc>
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <RunMenu+0x2e4>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
			break;
 800294a:	e089      	b.n	8002a60 <RunMenu+0x3d0>
				if (SelectNEState == 5) {SelectNEState = 0;} else SelectNEState++ ;
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <RunMenu+0x2e4>)
 800294e:	f993 3000 	ldrsb.w	r3, [r3]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	b25a      	sxtb	r2, r3
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <RunMenu+0x2e4>)
 800295c:	701a      	strb	r2, [r3, #0]
			break;
 800295e:	e07f      	b.n	8002a60 <RunMenu+0x3d0>
 8002960:	24000227 	.word	0x24000227
 8002964:	24000224 	.word	0x24000224
 8002968:	0801a9cc 	.word	0x0801a9cc
 800296c:	24000008 	.word	0x24000008
 8002970:	24000000 	.word	0x24000000
 8002974:	24000209 	.word	0x24000209
 8002978:	2400020c 	.word	0x2400020c
 800297c:	0801a9dc 	.word	0x0801a9dc
 8002980:	240008d8 	.word	0x240008d8
 8002984:	24000218 	.word	0x24000218
 8002988:	2400021c 	.word	0x2400021c
 800298c:	0801a9ec 	.word	0x0801a9ec
 8002990:	240008de 	.word	0x240008de
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
 8002994:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <RunMenu+0x47c>)
 8002996:	f993 3000 	ldrsb.w	r3, [r3]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d103      	bne.n	80029a6 <RunMenu+0x316>
 800299e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <RunMenu+0x47c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
			break;
 80029a4:	e05c      	b.n	8002a60 <RunMenu+0x3d0>
				if (SelectNLState == 3) {SelectNLState = 0;} else SelectNLState++ ;
 80029a6:	4b59      	ldr	r3, [pc, #356]	@ (8002b0c <RunMenu+0x47c>)
 80029a8:	f993 3000 	ldrsb.w	r3, [r3]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	b25a      	sxtb	r2, r3
 80029b4:	4b55      	ldr	r3, [pc, #340]	@ (8002b0c <RunMenu+0x47c>)
 80029b6:	701a      	strb	r2, [r3, #0]
			break;
 80029b8:	e052      	b.n	8002a60 <RunMenu+0x3d0>
		}
		case (8):{ //DN
			if (MenuItem == 0)
 80029ba:	4b55      	ldr	r3, [pc, #340]	@ (8002b10 <RunMenu+0x480>)
 80029bc:	f993 3000 	ldrsb.w	r3, [r3]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10e      	bne.n	80029e2 <RunMenu+0x352>
			{
				if(SelectRT) {SelectRT--;} else SelectRT =2;
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <RunMenu+0x484>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <RunMenu+0x34a>
 80029cc:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <RunMenu+0x484>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b14 <RunMenu+0x484>)
 80029d6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
			}
			break;
 80029d8:	e042      	b.n	8002a60 <RunMenu+0x3d0>
				if(SelectRT) {SelectRT--;} else SelectRT =2;
 80029da:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <RunMenu+0x484>)
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
			break;
 80029e0:	e03e      	b.n	8002a60 <RunMenu+0x3d0>
			else if (MenuItem == 1)
 80029e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <RunMenu+0x480>)
 80029e4:	f993 3000 	ldrsb.w	r3, [r3]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d112      	bne.n	8002a12 <RunMenu+0x382>
				if (SelectNEState) { SelectNEState--;} else  SelectNEState =5;
 80029ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002b18 <RunMenu+0x488>)
 80029ee:	f993 3000 	ldrsb.w	r3, [r3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <RunMenu+0x37a>
 80029f6:	4b48      	ldr	r3, [pc, #288]	@ (8002b18 <RunMenu+0x488>)
 80029f8:	f993 3000 	ldrsb.w	r3, [r3]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	b25a      	sxtb	r2, r3
 8002a04:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <RunMenu+0x488>)
 8002a06:	701a      	strb	r2, [r3, #0]
			break;
 8002a08:	e02a      	b.n	8002a60 <RunMenu+0x3d0>
				if (SelectNEState) { SelectNEState--;} else  SelectNEState =5;
 8002a0a:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <RunMenu+0x488>)
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	701a      	strb	r2, [r3, #0]
			break;
 8002a10:	e026      	b.n	8002a60 <RunMenu+0x3d0>
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
 8002a12:	4b3e      	ldr	r3, [pc, #248]	@ (8002b0c <RunMenu+0x47c>)
 8002a14:	f993 3000 	ldrsb.w	r3, [r3]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <RunMenu+0x3a0>
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <RunMenu+0x47c>)
 8002a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	b25a      	sxtb	r2, r3
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <RunMenu+0x47c>)
 8002a2c:	701a      	strb	r2, [r3, #0]
			break;
 8002a2e:	e017      	b.n	8002a60 <RunMenu+0x3d0>
				if(SelectNLState) 	{SelectNLState--;}else SelectNLState=3;
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <RunMenu+0x47c>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	701a      	strb	r2, [r3, #0]
			break;
 8002a36:	e013      	b.n	8002a60 <RunMenu+0x3d0>
		}
		case (2):{
			if (SelectRT == 0 )
 8002a38:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <RunMenu+0x484>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <RunMenu+0x3b8>
				RunState = CONTINUOUS;
 8002a40:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <RunMenu+0x48c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
			else if (SelectRT == 1 )
				RunState = SINGLE;
			else
				RunState = HISTOGRAM;
			break;
 8002a46:	e00a      	b.n	8002a5e <RunMenu+0x3ce>
			else if (SelectRT == 1 )
 8002a48:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <RunMenu+0x484>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d103      	bne.n	8002a58 <RunMenu+0x3c8>
				RunState = SINGLE;
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <RunMenu+0x48c>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
			break;
 8002a56:	e002      	b.n	8002a5e <RunMenu+0x3ce>
				RunState = HISTOGRAM;
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <RunMenu+0x48c>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]
			break;
 8002a5e:	bf00      	nop
		}

		}
		sprintf(rtext,"RunType:  %c",RunType[SelectRT]);
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <RunMenu+0x484>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <RunMenu+0x490>)
 8002a68:	5c9b      	ldrb	r3, [r3, r2]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	492d      	ldr	r1, [pc, #180]	@ (8002b24 <RunMenu+0x494>)
 8002a6e:	482e      	ldr	r0, [pc, #184]	@ (8002b28 <RunMenu+0x498>)
 8002a70:	f016 ff1e 	bl	80198b0 <siprintf>
		LCD_ShowString(2, 0, 6,8 , White, rtext);
 8002a74:	2100      	movs	r1, #0
 8002a76:	2002      	movs	r0, #2
 8002a78:	f001 f972 	bl	8003d60 <ssd1306_SetCursor>
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <RunMenu+0x49c>)
 8002a7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a82:	4829      	ldr	r0, [pc, #164]	@ (8002b28 <RunMenu+0x498>)
 8002a84:	f001 f946 	bl	8003d14 <ssd1306_WriteString>
 8002a88:	f000 fee6 	bl	8003858 <ssd1306_UpdateScreen>
		sprintf(rtext,"Exposure: %d    ",(SelectNEStateValue[SelectNEState]));
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <RunMenu+0x488>)
 8002a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <RunMenu+0x4a0>)
 8002a96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4925      	ldr	r1, [pc, #148]	@ (8002b34 <RunMenu+0x4a4>)
 8002a9e:	4822      	ldr	r0, [pc, #136]	@ (8002b28 <RunMenu+0x498>)
 8002aa0:	f016 ff06 	bl	80198b0 <siprintf>
		LCD_ShowString(2, FontH, 6,8 , White, rtext);
 8002aa4:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <RunMenu+0x4a8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	2002      	movs	r0, #2
 8002aac:	f001 f958 	bl	8003d60 <ssd1306_SetCursor>
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <RunMenu+0x49c>)
 8002ab2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ab6:	481c      	ldr	r0, [pc, #112]	@ (8002b28 <RunMenu+0x498>)
 8002ab8:	f001 f92c 	bl	8003d14 <ssd1306_WriteString>
 8002abc:	f000 fecc 	bl	8003858 <ssd1306_UpdateScreen>
		sprintf(rtext,"Length:   %d    ",SelectNLStateValue[SelectNLState]);
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <RunMenu+0x47c>)
 8002ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <RunMenu+0x4ac>)
 8002aca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	491b      	ldr	r1, [pc, #108]	@ (8002b40 <RunMenu+0x4b0>)
 8002ad2:	4815      	ldr	r0, [pc, #84]	@ (8002b28 <RunMenu+0x498>)
 8002ad4:	f016 feec 	bl	80198b0 <siprintf>
		LCD_ShowString(2, 2*FontH, 6,8 , White, rtext);
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <RunMenu+0x4a8>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f001 f93c 	bl	8003d60 <ssd1306_SetCursor>
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <RunMenu+0x49c>)
 8002aea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aee:	480e      	ldr	r0, [pc, #56]	@ (8002b28 <RunMenu+0x498>)
 8002af0:	f001 f910 	bl	8003d14 <ssd1306_WriteString>
 8002af4:	f000 feb0 	bl	8003858 <ssd1306_UpdateScreen>
	while (RunState == HALT)
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <RunMenu+0x48c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	f43f ae2e 	beq.w	800275e <RunMenu+0xce>
	}
	}

}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	24000218 	.word	0x24000218
 8002b10:	240008de 	.word	0x240008de
 8002b14:	24000227 	.word	0x24000227
 8002b18:	24000209 	.word	0x24000209
 8002b1c:	24000208 	.word	0x24000208
 8002b20:	24000224 	.word	0x24000224
 8002b24:	0801a9cc 	.word	0x0801a9cc
 8002b28:	24000008 	.word	0x24000008
 8002b2c:	24000000 	.word	0x24000000
 8002b30:	2400020c 	.word	0x2400020c
 8002b34:	0801a9fc 	.word	0x0801a9fc
 8002b38:	240008d8 	.word	0x240008d8
 8002b3c:	2400021c 	.word	0x2400021c
 8002b40:	0801aa10 	.word	0x0801aa10

08002b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 FontH = Font_7x10.FontHeight;
 8002b4a:	4bbb      	ldr	r3, [pc, #748]	@ (8002e38 <main+0x2f4>)
 8002b4c:	785a      	ldrb	r2, [r3, #1]
 8002b4e:	4bbb      	ldr	r3, [pc, #748]	@ (8002e3c <main+0x2f8>)
 8002b50:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b52:	f002 f8a3 	bl	8004c9c <HAL_Init>
	//	uint8_t cState=2;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b56:	f000 f9b9 	bl	8002ecc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_I2C_RegisterCallback(&hi2c4,HAL_I2C_MEM_TX_COMPLETE_CB_ID,HAL_I2C_MemTxCpltCallback);
 8002b5a:	4ab9      	ldr	r2, [pc, #740]	@ (8002e40 <main+0x2fc>)
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	48b9      	ldr	r0, [pc, #740]	@ (8002e44 <main+0x300>)
 8002b60:	f007 f8a4 	bl	8009cac <HAL_I2C_RegisterCallback>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b64:	f7fe f89a 	bl	8000c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002b68:	f7fd fec0 	bl	80008ec <MX_DMA_Init>
  MX_MDMA_Init();
 8002b6c:	f000 fb1a 	bl	80031a4 <MX_MDMA_Init>
  MX_BDMA_Init();
 8002b70:	f7fd fe8c 	bl	800088c <MX_BDMA_Init>
  MX_TIM3_Init();
 8002b74:	f001 fd3e 	bl	80045f4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002b78:	f001 fdd6 	bl	8004728 <MX_TIM8_Init>
  MX_TIM1_Init();
 8002b7c:	f001 fba6 	bl	80042cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b80:	f001 fc84 	bl	800448c <MX_TIM2_Init>
  MX_FATFS_Init();
 8002b84:	f012 f8b0 	bl	8014ce8 <MX_FATFS_Init>
  MX_RTC_Init();
 8002b88:	f000 fc32 	bl	80033f0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8002b8c:	f000 fce6 	bl	800355c <MX_SDMMC1_SD_Init>
  MX_ADC3_Init();
 8002b90:	f7fd fd6e 	bl	8000670 <MX_ADC3_Init>
  MX_FMC_Init();
 8002b94:	f7fd ff1c 	bl	80009d0 <MX_FMC_Init>
  MX_I2C4_Init();
 8002b98:	f7fe fb14 	bl	80011c4 <MX_I2C4_Init>
  MX_I2C1_Init();
 8002b9c:	f7fe fad2 	bl	8001144 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   MX_RTC_InitAlt();
 8002ba0:	f000 fcb6 	bl	8003510 <MX_RTC_InitAlt>

  //	HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET);
	MX_GPIO2Init();  //pullups for keypad
 8002ba4:	f7fe fac6 	bl	8001134 <MX_GPIO2Init>

	for(int i=1; i<128; i++)
 8002ba8:	2301      	movs	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	e018      	b.n	8002be0 <main+0x9c>
	{
		int ret = HAL_I2C_IsDeviceReady(&hi2c4, (uint16_t)(i<<1), 3, 5);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	b299      	uxth	r1, r3
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	2203      	movs	r2, #3
 8002bba:	48a2      	ldr	r0, [pc, #648]	@ (8002e44 <main+0x300>)
 8002bbc:	f007 f9f6 	bl	8009fac <HAL_I2C_IsDeviceReady>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	603b      	str	r3, [r7, #0]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <main+0x96>
		{
			// HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
		}
		else if(ret == HAL_OK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <main+0x96>
		{
			sprintf(rtext, "0x%X", i);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	499d      	ldr	r1, [pc, #628]	@ (8002e48 <main+0x304>)
 8002bd4:	489d      	ldr	r0, [pc, #628]	@ (8002e4c <main+0x308>)
 8002bd6:	f016 fe6b 	bl	80198b0 <siprintf>
	for(int i=1; i<128; i++)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002be4:	dde3      	ble.n	8002bae <main+0x6a>
			//    HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
		}
	}
	HAL_I2C_RegisterCallback(&hi2c4,HAL_I2C_MEM_TX_COMPLETE_CB_ID,HAL_I2C_MemTxCpltCallback);
 8002be6:	4a96      	ldr	r2, [pc, #600]	@ (8002e40 <main+0x2fc>)
 8002be8:	2105      	movs	r1, #5
 8002bea:	4896      	ldr	r0, [pc, #600]	@ (8002e44 <main+0x300>)
 8002bec:	f007 f85e 	bl	8009cac <HAL_I2C_RegisterCallback>

	ssd1306_Init();
 8002bf0:	f000 fd98 	bl	8003724 <ssd1306_Init>
//	HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_SET);
	ledDisp(255);
 8002bf4:	20ff      	movs	r0, #255	@ 0xff
 8002bf6:	f7fe fd07 	bl	8001608 <ledDisp>
	sprintf(rtext," Hellow World");
 8002bfa:	4995      	ldr	r1, [pc, #596]	@ (8002e50 <main+0x30c>)
 8002bfc:	4893      	ldr	r0, [pc, #588]	@ (8002e4c <main+0x308>)
 8002bfe:	f016 fe57 	bl	80198b0 <siprintf>
	LCD_ShowString(2, 0, 6,8, White, rtext);
 8002c02:	2100      	movs	r1, #0
 8002c04:	2002      	movs	r0, #2
 8002c06:	f001 f8ab 	bl	8003d60 <ssd1306_SetCursor>
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e38 <main+0x2f4>)
 8002c0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c10:	488e      	ldr	r0, [pc, #568]	@ (8002e4c <main+0x308>)
 8002c12:	f001 f87f 	bl	8003d14 <ssd1306_WriteString>
 8002c16:	f000 fe1f 	bl	8003858 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 2*FontH, 6,8, White, rtext);
 8002c1a:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <main+0x2f8>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	2002      	movs	r0, #2
 8002c26:	f001 f89b 	bl	8003d60 <ssd1306_SetCursor>
 8002c2a:	4b83      	ldr	r3, [pc, #524]	@ (8002e38 <main+0x2f4>)
 8002c2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c30:	4886      	ldr	r0, [pc, #536]	@ (8002e4c <main+0x308>)
 8002c32:	f001 f86f 	bl	8003d14 <ssd1306_WriteString>
 8002c36:	f000 fe0f 	bl	8003858 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 4*FontH, 6,8, White, rtext);
 8002c3a:	4b80      	ldr	r3, [pc, #512]	@ (8002e3c <main+0x2f8>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	2002      	movs	r0, #2
 8002c46:	f001 f88b 	bl	8003d60 <ssd1306_SetCursor>
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <main+0x2f4>)
 8002c4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c50:	487e      	ldr	r0, [pc, #504]	@ (8002e4c <main+0x308>)
 8002c52:	f001 f85f 	bl	8003d14 <ssd1306_WriteString>
 8002c56:	f000 fdff 	bl	8003858 <ssd1306_UpdateScreen>
	LCD_ShowString(2, 6*FontH, 6,8, White, rtext);
 8002c5a:	4b78      	ldr	r3, [pc, #480]	@ (8002e3c <main+0x2f8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	0052      	lsls	r2, r2, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	2002      	movs	r0, #2
 8002c6c:	f001 f878 	bl	8003d60 <ssd1306_SetCursor>
 8002c70:	4b71      	ldr	r3, [pc, #452]	@ (8002e38 <main+0x2f4>)
 8002c72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c76:	4875      	ldr	r0, [pc, #468]	@ (8002e4c <main+0x308>)
 8002c78:	f001 f84c 	bl	8003d14 <ssd1306_WriteString>
 8002c7c:	f000 fdec 	bl	8003858 <ssd1306_UpdateScreen>
	ledDisp(0);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fcc1 	bl	8001608 <ledDisp>

	memTest();
 8002c86:	f000 fb9b 	bl	80033c0 <memTest>



#ifdef DISK
	if(BSP_SD_Init()!=0)
 8002c8a:	f012 f847 	bl	8014d1c <BSP_SD_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <main+0x156>
	{
		HAL_Delay(5);
 8002c94:	2005      	movs	r0, #5
 8002c96:	f002 f893 	bl	8004dc0 <HAL_Delay>
	}
	if(disk_initialize(0) != RES_OK)
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f012 fb42 	bl	8015324 <disk_initialize>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <main+0x168>
	{
		HAL_Delay(5);
 8002ca6:	2005      	movs	r0, #5
 8002ca8:	f002 f88a 	bl	8004dc0 <HAL_Delay>
	}
#endif
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)	Error_Handler();
 8002cac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4868      	ldr	r0, [pc, #416]	@ (8002e54 <main+0x310>)
 8002cb4:	f003 fed6 	bl	8006a64 <HAL_ADCEx_Calibration_Start>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <main+0x17e>
 8002cbe:	f000 fa69 	bl	8003194 <Error_Handler>

	HAL_ADC_RegisterCallback(&hadc3, HAL_ADC_CONVERSION_COMPLETE_CB_ID,HAL_ADC_ConvCpltCallback );
 8002cc2:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <main+0x314>)
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4863      	ldr	r0, [pc, #396]	@ (8002e54 <main+0x310>)
 8002cc8:	f002 fcee 	bl	80056a8 <HAL_ADC_RegisterCallback>
	HAL_ADC_RegisterCallback(&hadc3, HAL_ADC_CONVERSION_HALF_CB_ID,HAL_ADC_ConvHalfCpltCallback );
 8002ccc:	4a63      	ldr	r2, [pc, #396]	@ (8002e5c <main+0x318>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4860      	ldr	r0, [pc, #384]	@ (8002e54 <main+0x310>)
 8002cd2:	f002 fce9 	bl	80056a8 <HAL_ADC_RegisterCallback>

	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_stream7, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8002cd6:	4a62      	ldr	r2, [pc, #392]	@ (8002e60 <main+0x31c>)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4862      	ldr	r0, [pc, #392]	@ (8002e64 <main+0x320>)
 8002cdc:	f005 ff9e 	bl	8008c1c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_stream7, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8002ce0:	4a61      	ldr	r2, [pc, #388]	@ (8002e68 <main+0x324>)
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	485f      	ldr	r0, [pc, #380]	@ (8002e64 <main+0x320>)
 8002ce6:	f005 ff99 	bl	8008c1c <HAL_DMA_RegisterCallback>


	HAL_ADC_Start_DMA(&hadc3,(uint32_t *)dmaBuffer,DMABUFFLEN);
 8002cea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cee:	495f      	ldr	r1, [pc, #380]	@ (8002e6c <main+0x328>)
 8002cf0:	4858      	ldr	r0, [pc, #352]	@ (8002e54 <main+0x310>)
 8002cf2:	f002 fd75 	bl	80057e0 <HAL_ADC_Start_DMA>

	if (HAL_OK != HAL_TIM_Base_Start_IT(&htim1)) Error_Handler();
 8002cf6:	485e      	ldr	r0, [pc, #376]	@ (8002e70 <main+0x32c>)
 8002cf8:	f00f fbb4 	bl	8012464 <HAL_TIM_Base_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <main+0x1c2>
 8002d02:	f000 fa47 	bl	8003194 <Error_Handler>


	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2))Error_Handler();
 8002d06:	2104      	movs	r1, #4
 8002d08:	485a      	ldr	r0, [pc, #360]	@ (8002e74 <main+0x330>)
 8002d0a:	f00f fc91 	bl	8012630 <HAL_TIM_PWM_Start>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <main+0x1d4>
 8002d14:	f000 fa3e 	bl	8003194 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1))		Error_Handler();
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4856      	ldr	r0, [pc, #344]	@ (8002e74 <main+0x330>)
 8002d1c:	f00f fc88 	bl	8012630 <HAL_TIM_PWM_Start>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <main+0x1e6>
 8002d26:	f000 fa35 	bl	8003194 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1))		Error_Handler();
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4852      	ldr	r0, [pc, #328]	@ (8002e78 <main+0x334>)
 8002d2e:	f00f fc7f 	bl	8012630 <HAL_TIM_PWM_Start>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <main+0x1f8>
 8002d38:	f000 fa2c 	bl	8003194 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2))		Error_Handler();
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	484e      	ldr	r0, [pc, #312]	@ (8002e78 <main+0x334>)
 8002d40:	f00f fc76 	bl	8012630 <HAL_TIM_PWM_Start>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <main+0x20a>
 8002d4a:	f000 fa23 	bl	8003194 <Error_Handler>
	if (HAL_OK !=  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1))		Error_Handler();
 8002d4e:	2100      	movs	r1, #0
 8002d50:	484a      	ldr	r0, [pc, #296]	@ (8002e7c <main+0x338>)
 8002d52:	f00f fc6d 	bl	8012630 <HAL_TIM_PWM_Start>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <main+0x21c>
 8002d5c:	f000 fa1a 	bl	8003194 <Error_Handler>

	//RTC_Set(23, 5, 5, 11,28, 0,5) ;  //CLOCK INITILAIZE

	if (HAL_GPIO_ReadPin (GPIOH, TimeSet_Pin)==0) setTime();
 8002d60:	2110      	movs	r1, #16
 8002d62:	4847      	ldr	r0, [pc, #284]	@ (8002e80 <main+0x33c>)
 8002d64:	f006 fe7e 	bl	8009a64 <HAL_GPIO_ReadPin>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <main+0x22e>
 8002d6e:	f7fe fce3 	bl	8001738 <setTime>
#ifdef ONEPWR
	HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_SET);
 8002d72:	2201      	movs	r2, #1
 8002d74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d78:	4842      	ldr	r0, [pc, #264]	@ (8002e84 <main+0x340>)
 8002d7a:	f006 fe8b 	bl	8009a94 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002d7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d82:	f002 f81d 	bl	8004dc0 <HAL_Delay>
	HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal* 125 boards
 8002d86:	2200      	movs	r2, #0
 8002d88:	2101      	movs	r1, #1
 8002d8a:	483f      	ldr	r0, [pc, #252]	@ (8002e88 <main+0x344>)
 8002d8c:	f006 fe82 	bl	8009a94 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002d90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d94:	f002 f814 	bl	8004dc0 <HAL_Delay>
#endif
	HAL_Delay(500);
 8002d98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d9c:	f002 f810 	bl	8004dc0 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		RunMenu();
 8002da0:	f7ff fc76 	bl	8002690 <RunMenu>
//		RunState = HISTOGRAM;//}{ menu test debug

		Exposure = (SelectNEStateValue[SelectNEState]);
 8002da4:	4b39      	ldr	r3, [pc, #228]	@ (8002e8c <main+0x348>)
 8002da6:	f993 3000 	ldrsb.w	r3, [r3]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b38      	ldr	r3, [pc, #224]	@ (8002e90 <main+0x34c>)
 8002dae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b37      	ldr	r3, [pc, #220]	@ (8002e94 <main+0x350>)
 8002db6:	601a      	str	r2, [r3, #0]
		NumLines = SelectNLStateValue[SelectNLState];
 8002db8:	4b37      	ldr	r3, [pc, #220]	@ (8002e98 <main+0x354>)
 8002dba:	f993 3000 	ldrsb.w	r3, [r3]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <main+0x358>)
 8002dc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ea0 <main+0x35c>)
 8002dca:	601a      	str	r2, [r3, #0]
		//
		if (RunState == HISTOGRAM)
 8002dcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <main+0x360>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d102      	bne.n	8002dda <main+0x296>
			HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_SET);
			HAL_Delay(500);
			HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal
			HAL_Delay(500);
#endif
			Histo();
 8002dd4:	f7ff f810 	bl	8001df8 <Histo>
 8002dd8:	e072      	b.n	8002ec0 <main+0x37c>
			HAL_Delay(500);
			HAL_GPIO_WritePin(SensorPWRenable_GPIO_Port, SensorPWRenable_Pin, GPIO_PIN_RESET); //5v enable signal
			HAL_Delay(500);
#endif
			do{
				TrialStart();
 8002dda:	f7ff f8b7 	bl	8001f4c <TrialStart>
				while (1){

					if (SEQ_Complete == Sequence){  //================================================================
 8002dde:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <main+0x364>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d116      	bne.n	8002e14 <main+0x2d0>
						TrialComplete();
 8002de6:	f7ff fa81 	bl	80022ec <TrialComplete>
						sprintf(rtext," Complete          ");
 8002dea:	4930      	ldr	r1, [pc, #192]	@ (8002eac <main+0x368>)
 8002dec:	4817      	ldr	r0, [pc, #92]	@ (8002e4c <main+0x308>)
 8002dee:	f016 fd5f 	bl	80198b0 <siprintf>
						LCD_ShowString(2, 0, 6,8, White, rtext);
 8002df2:	2100      	movs	r1, #0
 8002df4:	2002      	movs	r0, #2
 8002df6:	f000 ffb3 	bl	8003d60 <ssd1306_SetCursor>
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <main+0x2f4>)
 8002dfc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e00:	4812      	ldr	r0, [pc, #72]	@ (8002e4c <main+0x308>)
 8002e02:	f000 ff87 	bl	8003d14 <ssd1306_WriteString>
 8002e06:	f000 fd27 	bl	8003858 <ssd1306_UpdateScreen>
						HAL_Delay(1000);
 8002e0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e0e:	f001 ffd7 	bl	8004dc0 <HAL_Delay>

						break;
 8002e12:	e051      	b.n	8002eb8 <main+0x374>
					}
					if (ADCstate == ADC_2half && Sequence==SEQ_ONgoing){//============================================
 8002e14:	4b26      	ldr	r3, [pc, #152]	@ (8002eb0 <main+0x36c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d105      	bne.n	8002e28 <main+0x2e4>
 8002e1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <main+0x364>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d101      	bne.n	8002e28 <main+0x2e4>
						TrialOngoing();
 8002e24:	f7ff fb56 	bl	80024d4 <TrialOngoing>
					}
					if (xferState == Ready){
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <main+0x370>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d1d6      	bne.n	8002dde <main+0x29a>
						xferState = NotReady;
 8002e30:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <main+0x370>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
					if (SEQ_Complete == Sequence){  //================================================================
 8002e36:	e7d2      	b.n	8002dde <main+0x29a>
 8002e38:	24000000 	.word	0x24000000
 8002e3c:	240008d8 	.word	0x240008d8
 8002e40:	08003e29 	.word	0x08003e29
 8002e44:	2400050c 	.word	0x2400050c
 8002e48:	0801aa24 	.word	0x0801aa24
 8002e4c:	24000008 	.word	0x24000008
 8002e50:	0801aa2c 	.word	0x0801aa2c
 8002e54:	240002bc 	.word	0x240002bc
 8002e58:	08002fe5 	.word	0x08002fe5
 8002e5c:	08005df1 	.word	0x08005df1
 8002e60:	08003109 	.word	0x08003109
 8002e64:	240003c4 	.word	0x240003c4
 8002e68:	0800315d 	.word	0x0800315d
 8002e6c:	30000000 	.word	0x30000000
 8002e70:	24000ccc 	.word	0x24000ccc
 8002e74:	24000d88 	.word	0x24000d88
 8002e78:	24000e44 	.word	0x24000e44
 8002e7c:	24000f00 	.word	0x24000f00
 8002e80:	58021c00 	.word	0x58021c00
 8002e84:	58021800 	.word	0x58021800
 8002e88:	58020400 	.word	0x58020400
 8002e8c:	24000209 	.word	0x24000209
 8002e90:	2400020c 	.word	0x2400020c
 8002e94:	24000b24 	.word	0x24000b24
 8002e98:	24000218 	.word	0x24000218
 8002e9c:	2400021c 	.word	0x2400021c
 8002ea0:	24000b28 	.word	0x24000b28
 8002ea4:	24000208 	.word	0x24000208
 8002ea8:	240008da 	.word	0x240008da
 8002eac:	0801aa3c 	.word	0x0801aa3c
 8002eb0:	240008db 	.word	0x240008db
 8002eb4:	240008dd 	.word	0x240008dd
					}

				}//******************************************************************************************************
			}while (RunState == CONTINUOUS);
 8002eb8:	4b03      	ldr	r3, [pc, #12]	@ (8002ec8 <main+0x384>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d08c      	beq.n	8002dda <main+0x296>
			HAL_Delay(250);
			HAL_GPIO_WritePin(Enable9_GPIO_Port, Enable9_Pin, GPIO_PIN_RESET);
			HAL_Delay(100);
#endif
		}
		RunState = HALT;
 8002ec0:	4b01      	ldr	r3, [pc, #4]	@ (8002ec8 <main+0x384>)
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	701a      	strb	r2, [r3, #0]
		RunMenu();
 8002ec6:	e76b      	b.n	8002da0 <main+0x25c>
 8002ec8:	24000208 	.word	0x24000208

08002ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b09c      	sub	sp, #112	@ 0x70
 8002ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed6:	224c      	movs	r2, #76	@ 0x4c
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f016 fd4b 	bl	8019976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f016 fd45 	bl	8019976 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002eec:	2002      	movs	r0, #2
 8002eee:	f009 fc0b 	bl	800c708 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <SystemClock_Config+0x10c>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	4a37      	ldr	r2, [pc, #220]	@ (8002fd8 <SystemClock_Config+0x10c>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002f02:	4b35      	ldr	r3, [pc, #212]	@ (8002fd8 <SystemClock_Config+0x10c>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <SystemClock_Config+0x110>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a32      	ldr	r2, [pc, #200]	@ (8002fdc <SystemClock_Config+0x110>)
 8002f12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <SystemClock_Config+0x110>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f24:	bf00      	nop
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <SystemClock_Config+0x110>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f32:	d1f8      	bne.n	8002f26 <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f34:	f009 fbd8 	bl	800c6e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f38:	f001 ff66 	bl	8004e08 <HAL_GetREVID>
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <SystemClock_Config+0x114>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <SystemClock_Config+0x114>)
 8002f42:	f023 0318 	bic.w	r3, r3, #24
 8002f46:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002f48:	2307      	movs	r3, #7
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f5a:	2340      	movs	r3, #64	@ 0x40
 8002f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f62:	2302      	movs	r3, #2
 8002f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002f66:	2305      	movs	r3, #5
 8002f68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002f6a:	23a0      	movs	r3, #160	@ 0xa0
 8002f6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8002f72:	2314      	movs	r3, #20
 8002f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f76:	2302      	movs	r3, #2
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f009 fbf6 	bl	800c77c <HAL_RCC_OscConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002f96:	f000 f8fd 	bl	8003194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f9a:	233f      	movs	r3, #63	@ 0x3f
 8002f9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002faa:	2340      	movs	r3, #64	@ 0x40
 8002fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8002fae:	2350      	movs	r3, #80	@ 0x50
 8002fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8002fb2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002fb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002fb8:	2340      	movs	r3, #64	@ 0x40
 8002fba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f00a f835 	bl	800d030 <HAL_RCC_ClockConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8002fcc:	f000 f8e2 	bl	8003194 <Error_Handler>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3770      	adds	r7, #112	@ 0x70
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58000400 	.word	0x58000400
 8002fdc:	58024800 	.word	0x58024800
 8002fe0:	58024400 	.word	0x58024400

08002fe4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
//HAL_ADC_ConvCpltCallback
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	if (Sequence!=SEQ_Ready){
 8002fec:	4b16      	ldr	r3, [pc, #88]	@ (8003048 <HAL_ADC_ConvCpltCallback+0x64>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d024      	beq.n	800303e <HAL_ADC_ConvCpltCallback+0x5a>
		//		CPLT_ADC_GPIO;
		xferState = Ready;
 8002ff4:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_ADC_ConvCpltCallback+0x68>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
		Sequence = SEQ_ONgoing;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_ADC_ConvCpltCallback+0x64>)
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
		//		dmaBuffer[1] = (uint32_t )CurrentSlot;
		//		dmaBuffer[2] = (uint32_t )CurrentSlot%SLOTS;
		//		dmaBuffer[3] = (uint32_t )0x0;
		////		dmaBuffer[4] = (uint32_t )0xffffffff;

		HAL_DMA_Start_IT(&hdma_memtomem_dma1_stream7,(uint32_t )dmaBuffer, (uint32_t )(SDRAMAREA+((CurrentSlot%SLOTS)*(Npixels*2))), 2*Npixels*2);
 8003000:	4813      	ldr	r0, [pc, #76]	@ (8003050 <HAL_ADC_ConvCpltCallback+0x6c>)
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <HAL_ADC_ConvCpltCallback+0x70>)
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_ADC_ConvCpltCallback+0x74>)
 8003008:	fba3 2301 	umull	r2, r3, r3, r1
 800300c:	0a9a      	lsrs	r2, r3, #10
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	01db      	lsls	r3, r3, #7
 8003016:	1aca      	subs	r2, r1, r3
 8003018:	f502 3340 	add.w	r3, r2, #196608	@ 0x30000
 800301c:	039a      	lsls	r2, r3, #14
 800301e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003022:	4601      	mov	r1, r0
 8003024:	480d      	ldr	r0, [pc, #52]	@ (800305c <HAL_ADC_ConvCpltCallback+0x78>)
 8003026:	f004 fa1f 	bl	8007468 <HAL_DMA_Start_IT>
		CurrentSlot+=2;
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_ADC_ConvCpltCallback+0x70>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3302      	adds	r3, #2
 8003030:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <HAL_ADC_ConvCpltCallback+0x70>)
 8003032:	6013      	str	r3, [r2, #0]

		IRQCNT_HAL_ADC_ConvCpltCallback++;
 8003034:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_ADC_ConvCpltCallback+0x7c>)
 800303c:	6013      	str	r3, [r2, #0]
		//		CPLT_ADC_GPIO;
	}
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	240008da 	.word	0x240008da
 800304c:	240008dd 	.word	0x240008dd
 8003050:	30000000 	.word	0x30000000
 8003054:	24000b7c 	.word	0x24000b7c
 8003058:	88888889 	.word	0x88888889
 800305c:	240003c4 	.word	0x240003c4
 8003060:	24000b58 	.word	0x24000b58

08003064 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d126      	bne.n	80030c2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		//		CPLT_TIM1pe_GPIO;
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1))		Error_Handler();
 8003074:	2100      	movs	r1, #0
 8003076:	4815      	ldr	r0, [pc, #84]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003078:	f00f fbe8 	bl	801284c <HAL_TIM_PWM_Stop>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_TIM_PeriodElapsedCallback+0x22>
 8003082:	f000 f887 	bl	8003194 <Error_Handler>
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))		Error_Handler();
 8003086:	2104      	movs	r1, #4
 8003088:	4810      	ldr	r0, [pc, #64]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800308a:	f00f fbdf 	bl	801284c <HAL_TIM_PWM_Stop>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_TIM_PeriodElapsedCallback+0x34>
 8003094:	f000 f87e 	bl	8003194 <Error_Handler>
		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3))		Error_Handler();
 8003098:	2108      	movs	r1, #8
 800309a:	480c      	ldr	r0, [pc, #48]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800309c:	f00f fbd6 	bl	801284c <HAL_TIM_PWM_Stop>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_TIM_PeriodElapsedCallback+0x46>
 80030a6:	f000 f875 	bl	8003194 <Error_Handler>
//		if (HAL_OK !=  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1))	Error_Handler();
		if (Sequence!=SEQ_Ready)
 80030aa:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_TIM_PeriodElapsedCallback+0x54>
			Sequence=SEQ_Complete;
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80030b4:	2203      	movs	r2, #3
 80030b6:	701a      	strb	r2, [r3, #0]
		IRQCNT_HAL_TIM_PeriodElapsedCallback1++;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80030c0:	6013      	str	r3, [r2, #0]
		//		CPLT_TIM1pe_GPIO;
	}
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	24000ccc 	.word	0x24000ccc
 80030d0:	240008da 	.word	0x240008da
 80030d4:	24000b5c 	.word	0x24000b5c

080030d8 <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_TIM_TriggerCallback+0x28>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_TriggerCallback+0x1a>
	{
		//		TRIGGER_TIM1_GPIO;
		IRQCNT_HAL_TIM_TriggerCallback1++;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_TIM_TriggerCallback+0x2c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <HAL_TIM_TriggerCallback+0x2c>)
 80030f0:	6013      	str	r3, [r2, #0]
		//		TRIGGER_TIM1_GPIO;
	}

}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	24000ccc 	.word	0x24000ccc
 8003104:	24000b60 	.word	0x24000b60

08003108 <TransferComplete>:
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	if (hdma == &hdma_memtomem_dma1_stream7){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <TransferComplete+0x40>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10c      	bne.n	8003132 <TransferComplete+0x2a>
		//CurrentSlot++;
		if (SEQ_ONgoing == Sequence)
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <TransferComplete+0x44>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d102      	bne.n	8003126 <TransferComplete+0x1e>
		{
			//			DMA_XFR_CPLT_GPIO;
			ADCstate=ADC_2half;
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <TransferComplete+0x48>)
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]

			//			DMA_XFR_CPLT_GPIO;
		}
		TransferComplete7++;
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <TransferComplete+0x4c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <TransferComplete+0x4c>)
 800312e:	6013      	str	r3, [r2, #0]
	}else{
		TransferCompleteelse++;
	}
}
 8003130:	e004      	b.n	800313c <TransferComplete+0x34>
		TransferCompleteelse++;
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <TransferComplete+0x50>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	4a07      	ldr	r2, [pc, #28]	@ (8003158 <TransferComplete+0x50>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	240003c4 	.word	0x240003c4
 800314c:	240008da 	.word	0x240008da
 8003150:	240008db 	.word	0x240008db
 8003154:	24000b64 	.word	0x24000b64
 8003158:	24000b68 	.word	0x24000b68

0800315c <TransferError>:
void TransferError(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	ledDisp(0xE0);
 8003164:	20e0      	movs	r0, #224	@ 0xe0
 8003166:	f7fe fa4f 	bl	8001608 <ledDisp>
	HAL_Delay(1500);
 800316a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800316e:	f001 fe27 	bl	8004dc0 <HAL_Delay>
	if (SDstate == SDopen)
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <TransferError+0x30>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <TransferError+0x24>
	{
#ifdef DISK
		f_close(&fp);
 800317a:	4805      	ldr	r0, [pc, #20]	@ (8003190 <TransferError+0x34>)
 800317c:	f016 f977 	bl	801946e <f_close>
#endif
	}

	Error_Handler();
 8003180:	f000 f808 	bl	8003194 <Error_Handler>
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	240008dc 	.word	0x240008dc
 8003190:	24000680 	.word	0x24000680

08003194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i
}
 800319a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
//	HAL_GPIO_WritePin(REDled_GPIO_Port, REDled_Pin, GPIO_PIN_RESET);
	__disable_irq();
	while (1)
	{
		ledDisp(0xf0);
 800319c:	20f0      	movs	r0, #240	@ 0xf0
 800319e:	f7fe fa33 	bl	8001608 <ledDisp>
 80031a2:	e7fb      	b.n	800319c <Error_Handler+0x8>

080031a4 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sdmmc1_command_end_0
  */
void MX_MDMA_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80031aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003264 <MX_MDMA_Init+0xc0>)
 80031ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003264 <MX_MDMA_Init+0xc0>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80031ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003264 <MX_MDMA_Init+0xc0>)
 80031bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_command_end_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_command_end_0.Instance = MDMA_Channel0;
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031ca:	4a28      	ldr	r2, [pc, #160]	@ (800326c <MX_MDMA_Init+0xc8>)
 80031cc:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Request = MDMA_REQUEST_SDMMC1_COMMAND_END;
 80031ce:	4b26      	ldr	r3, [pc, #152]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031d0:	221f      	movs	r2, #31
 80031d2:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80031d4:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Priority = MDMA_PRIORITY_LOW;
 80031da:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80031e0:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031e8:	f240 2202 	movw	r2, #514	@ 0x202
 80031ec:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031f0:	f640 0208 	movw	r2, #2056	@ 0x808
 80031f4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031f8:	2220      	movs	r2, #32
 80031fa:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <MX_MDMA_Init+0xc4>)
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003202:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <MX_MDMA_Init+0xc4>)
 8003204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.BufferTransferLength = 1;
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <MX_MDMA_Init+0xc4>)
 800320c:	2201      	movs	r2, #1
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003210:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <MX_MDMA_Init+0xc4>)
 8003212:	2200      	movs	r2, #0
 8003214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <MX_MDMA_Init+0xc4>)
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.SourceBlockAddressOffset = 0;
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <MX_MDMA_Init+0xc4>)
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_command_end_0.Init.DestBlockAddressOffset = 0;
 8003222:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <MX_MDMA_Init+0xc4>)
 8003224:	2200      	movs	r2, #0
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_command_end_0) != HAL_OK)
 8003228:	480f      	ldr	r0, [pc, #60]	@ (8003268 <MX_MDMA_Init+0xc4>)
 800322a:	f008 ffd2 	bl	800c1d2 <HAL_MDMA_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_MDMA_Init+0x94>
  {
    Error_Handler();
 8003234:	f7ff ffae 	bl	8003194 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_command_end_0, 0, 0) != HAL_OK)
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	480a      	ldr	r0, [pc, #40]	@ (8003268 <MX_MDMA_Init+0xc4>)
 800323e:	f009 f814 	bl	800c26a <HAL_MDMA_ConfigPostRequestMask>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_MDMA_Init+0xa8>
  {
    Error_Handler();
 8003248:	f7ff ffa4 	bl	8003194 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	207a      	movs	r0, #122	@ 0x7a
 8003252:	f003 fd78 	bl	8006d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8003256:	207a      	movs	r0, #122	@ 0x7a
 8003258:	f003 fd8f 	bl	8006d7a <HAL_NVIC_EnableIRQ>

}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	58024400 	.word	0x58024400
 8003268:	24000b88 	.word	0x24000b88
 800326c:	52000040 	.word	0x52000040

08003270 <memTestDataBus>:
 *              A non-zero result is the first pattern that failed.
 *
 **********************************************************************/
datum
memTestDataBus(volatile datum * address)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]


    /*
     * Perform a walking 1's test at the given address.
     */
    for (pattern = 1; pattern != 0; pattern <<= 1)
 8003278:	2301      	movs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e00c      	b.n	8003298 <memTestDataBus+0x28>
    {
        /*
         * Write the test pattern.
         */
        *address = pattern;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	601a      	str	r2, [r3, #0]

        /*
         * Read it back (immediately is okay for this test).
         */
        if (*address != pattern) 
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	429a      	cmp	r2, r3
 800328c:	d001      	beq.n	8003292 <memTestDataBus+0x22>
        {
            return (pattern);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e006      	b.n	80032a0 <memTestDataBus+0x30>
    for (pattern = 1; pattern != 0; pattern <<= 1)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ef      	bne.n	800327e <memTestDataBus+0xe>
        }
    }

    return (0);
 800329e:	2300      	movs	r3, #0

}   /* memTestDataBus() */
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <memTestAddressBus>:
 *              additional information about the problem.
 *
 **********************************************************************/
datum * 
memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    unsigned long addressMask = (nBytes/sizeof(datum) - 1);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3b01      	subs	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
    unsigned long offset;
    unsigned long testOffset;

    datum pattern     = (datum) 0xAAAAAAAA;
 80032be:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80032c2:	613b      	str	r3, [r7, #16]
    datum antipattern = (datum) 0x55555555;
 80032c4:	f04f 3355 	mov.w	r3, #1431655765	@ 0x55555555
 80032c8:	60fb      	str	r3, [r7, #12]


    /*
     * Write the default pattern at each of the power-of-two offsets.
     */
    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 80032ca:	2301      	movs	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e008      	b.n	80032e2 <memTestAddressBus+0x36>
    {
        baseAddress[offset] = pattern;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	601a      	str	r2, [r3, #0]
    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f1      	bne.n	80032d0 <memTestAddressBus+0x24>
    }

    /* 
     * Check for address bits stuck high.
     */
    testOffset = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
    baseAddress[testOffset] = antipattern;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 80032fc:	2301      	movs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e00f      	b.n	8003322 <memTestAddressBus+0x76>
    {
        if (baseAddress[offset] != pattern)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	429a      	cmp	r2, r3
 8003310:	d004      	beq.n	800331c <memTestAddressBus+0x70>
        {
            return ((datum *) &baseAddress[offset]);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	e04b      	b.n	80033b4 <memTestAddressBus+0x108>
    for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <memTestAddressBus+0x56>
        }
    }

    baseAddress[testOffset] = pattern;
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	601a      	str	r2, [r3, #0]

    /*
     * Check for address bits stuck low or shorted.
     */
    for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
 8003338:	2301      	movs	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e034      	b.n	80033a8 <memTestAddressBus+0xfc>
    {
        baseAddress[testOffset] = antipattern;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	601a      	str	r2, [r3, #0]

		if (baseAddress[0] != pattern)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d004      	beq.n	800335e <memTestAddressBus+0xb2>
		{
			return ((datum *) &baseAddress[testOffset]);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	e02a      	b.n	80033b4 <memTestAddressBus+0x108>
		}

        for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e013      	b.n	800338c <memTestAddressBus+0xe0>
        {
            if ((baseAddress[offset] != pattern) && (offset != testOffset))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d008      	beq.n	8003386 <memTestAddressBus+0xda>
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	429a      	cmp	r2, r3
 800337a:	d004      	beq.n	8003386 <memTestAddressBus+0xda>
            {
                return ((datum *) &baseAddress[testOffset]);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	e016      	b.n	80033b4 <memTestAddressBus+0x108>
        for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e6      	bne.n	8003364 <memTestAddressBus+0xb8>
            }
        }

        baseAddress[testOffset] = pattern;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	601a      	str	r2, [r3, #0]
    for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1c5      	bne.n	800333e <memTestAddressBus+0x92>
    }

    return (NULL);
 80033b2:	2300      	movs	r3, #0

}   /* memTestAddressBus() */
 80033b4:	4618      	mov	r0, r3
 80033b6:	3724      	adds	r7, #36	@ 0x24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <memTest>:

}   /* memTestDevice() */

int
memTest(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
#define BASE_ADDRESS  (volatile datum *) 0xc0000000
#define NUM_BYTES     (32* 1024* 1024)

    if ((memTestDataBus(BASE_ADDRESS) != 0) ||
 80033c4:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 80033c8:	f7ff ff52 	bl	8003270 <memTestDataBus>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <memTest+0x24>
        (memTestAddressBus(BASE_ADDRESS, NUM_BYTES) != NULL) )//||
 80033d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033d6:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 80033da:	f7ff ff67 	bl	80032ac <memTestAddressBus>
 80033de:	4603      	mov	r3, r0
    if ((memTestDataBus(BASE_ADDRESS) != 0) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <memTest+0x2a>
       // (memTestDevice(BASE_ADDRESS, NUM_BYTES) != NULL))
    {
        return (-1);
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	e000      	b.n	80033ec <memTest+0x2c>
    }
    else
    {
        return (0);
 80033ea:	2300      	movs	r3, #0
    }

}   /* memTest() */
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003404:	2300      	movs	r3, #0
 8003406:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003408:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <MX_RTC_Init+0xb4>)
 800340a:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <MX_RTC_Init+0xb8>)
 800340c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800340e:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003414:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003416:	227f      	movs	r2, #127	@ 0x7f
 8003418:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <MX_RTC_Init+0xb4>)
 800341c:	22ff      	movs	r2, #255	@ 0xff
 800341e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003426:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800342c:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <MX_RTC_Init+0xb4>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003432:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003438:	481a      	ldr	r0, [pc, #104]	@ (80034a4 <MX_RTC_Init+0xb4>)
 800343a:	f00c fe6d 	bl	8010118 <HAL_RTC_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003444:	f7ff fea6 	bl	8003194 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8003448:	2313      	movs	r3, #19
 800344a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 800344c:	2330      	movs	r3, #48	@ 0x30
 800344e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003450:	2300      	movs	r3, #0
 8003452:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8003458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800345c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2201      	movs	r2, #1
 8003462:	4619      	mov	r1, r3
 8003464:	480f      	ldr	r0, [pc, #60]	@ (80034a4 <MX_RTC_Init+0xb4>)
 8003466:	f00c fed9 	bl	801021c <HAL_RTC_SetTime>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003470:	f7ff fe90 	bl	8003194 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003474:	2307      	movs	r3, #7
 8003476:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8003478:	2311      	movs	r3, #17
 800347a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 800347c:	2302      	movs	r3, #2
 800347e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8003480:	2323      	movs	r3, #35	@ 0x23
 8003482:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003484:	463b      	mov	r3, r7
 8003486:	2201      	movs	r2, #1
 8003488:	4619      	mov	r1, r3
 800348a:	4806      	ldr	r0, [pc, #24]	@ (80034a4 <MX_RTC_Init+0xb4>)
 800348c:	f00c ffc0 	bl	8010410 <HAL_RTC_SetDate>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003496:	f7ff fe7d 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	24000bf4 	.word	0x24000bf4
 80034a8:	58004000 	.word	0x58004000

080034ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0b2      	sub	sp, #200	@ 0xc8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	22c0      	movs	r2, #192	@ 0xc0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f016 fa5a 	bl	8019976 <memset>
  if(rtcHandle->Instance==RTC)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <HAL_RTC_MspInit+0x5c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d119      	bne.n	8003500 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00a f919 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80034f0:	f7ff fe50 	bl	8003194 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RTC_MspInit+0x60>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f8:	4a04      	ldr	r2, [pc, #16]	@ (800350c <HAL_RTC_MspInit+0x60>)
 80034fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034fe:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003500:	bf00      	nop
 8003502:	37c8      	adds	r7, #200	@ 0xc8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58004000 	.word	0x58004000
 800350c:	58024400 	.word	0x58024400

08003510 <MX_RTC_InitAlt>:
  }
}

/* USER CODE BEGIN 1 */
void MX_RTC_InitAlt(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
	hrtc.Instance = RTC;
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <MX_RTC_InitAlt+0x48>)
 8003518:	601a      	str	r2, [r3, #0]
 hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800351a:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 800351c:	2200      	movs	r2, #0
 800351e:	605a      	str	r2, [r3, #4]
 hrtc.Init.AsynchPrediv = 127;
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 8003522:	227f      	movs	r2, #127	@ 0x7f
 8003524:	609a      	str	r2, [r3, #8]
 hrtc.Init.SynchPrediv = 255;
 8003526:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 8003528:	22ff      	movs	r2, #255	@ 0xff
 800352a:	60da      	str	r2, [r3, #12]
 hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800352c:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
 hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003532:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
 hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 800353a:	2200      	movs	r2, #0
 800353c:	61da      	str	r2, [r3, #28]
// hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800353e:	4805      	ldr	r0, [pc, #20]	@ (8003554 <MX_RTC_InitAlt+0x44>)
 8003540:	f00c fdea 	bl	8010118 <HAL_RTC_Init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_RTC_InitAlt+0x3e>
 {
   Error_Handler();
 800354a:	f7ff fe23 	bl	8003194 <Error_Handler>
 }
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	24000bf4 	.word	0x24000bf4
 8003558:	58004000 	.word	0x58004000

0800355c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 8003562:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <MX_SDMMC1_SD_Init+0x38>)
 8003564:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 8003568:	2200      	movs	r2, #0
 800356a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 8003574:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003578:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 800357c:	2200      	movs	r2, #0
 800357e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <MX_SDMMC1_SD_Init+0x34>)
 8003582:	2202      	movs	r2, #2
 8003584:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	24000c18 	.word	0x24000c18
 8003594:	52007000 	.word	0x52007000

08003598 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0bc      	sub	sp, #240	@ 0xf0
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b0:	f107 0318 	add.w	r3, r7, #24
 80035b4:	22c0      	movs	r2, #192	@ 0xc0
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f016 f9dc 	bl	8019976 <memset>
  if(sdHandle->Instance==SDMMC1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3c      	ldr	r2, [pc, #240]	@ (80036b4 <HAL_SD_MspInit+0x11c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d171      	bne.n	80036ac <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80035c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d8:	f107 0318 	add.w	r3, r7, #24
 80035dc:	4618      	mov	r0, r3
 80035de:	f00a f89d 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80035e8:	f7ff fdd4 	bl	8003194 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80035ec:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 80035ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035f2:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80035fc:	4b2e      	ldr	r3, [pc, #184]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 80035fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 800360c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003610:	4a29      	ldr	r2, [pc, #164]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800361a:	4b27      	ldr	r3, [pc, #156]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 800361c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003628:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a22      	ldr	r2, [pc, #136]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <HAL_SD_MspInit+0x120>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8003646:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800364a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365a:	2303      	movs	r3, #3
 800365c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003660:	230c      	movs	r3, #12
 8003662:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003666:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800366a:	4619      	mov	r1, r3
 800366c:	4813      	ldr	r0, [pc, #76]	@ (80036bc <HAL_SD_MspInit+0x124>)
 800366e:	f006 f849 	bl	8009704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003672:	2304      	movs	r3, #4
 8003674:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800368a:	230c      	movs	r3, #12
 800368c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003694:	4619      	mov	r1, r3
 8003696:	480a      	ldr	r0, [pc, #40]	@ (80036c0 <HAL_SD_MspInit+0x128>)
 8003698:	f006 f834 	bl	8009704 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	2031      	movs	r0, #49	@ 0x31
 80036a2:	f003 fb50 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80036a6:	2031      	movs	r0, #49	@ 0x31
 80036a8:	f003 fb67 	bl	8006d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80036ac:	bf00      	nop
 80036ae:	37f0      	adds	r7, #240	@ 0xf0
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	52007000 	.word	0x52007000
 80036b8:	58024400 	.word	0x58024400
 80036bc:	58020800 	.word	0x58020800
 80036c0:	58020c00 	.word	0x58020c00

080036c4 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	2340      	movs	r3, #64	@ 0x40
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80036e8:	2380      	movs	r3, #128	@ 0x80
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 80036f8:	2340      	movs	r3, #64	@ 0x40
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 800370e:	4a04      	ldr	r2, [pc, #16]	@ (8003720 <ssd1306_SetColor+0x1c>)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	7153      	strb	r3, [r2, #5]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	24000cbc 	.word	0x24000cbc

08003724 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8003728:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372c:	2205      	movs	r2, #5
 800372e:	2178      	movs	r1, #120	@ 0x78
 8003730:	4846      	ldr	r0, [pc, #280]	@ (800384c <ssd1306_Init+0x128>)
 8003732:	f006 fc3b 	bl	8009fac <HAL_I2C_IsDeviceReady>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 800373c:	4b44      	ldr	r3, [pc, #272]	@ (8003850 <ssd1306_Init+0x12c>)
 800373e:	2200      	movs	r2, #0
 8003740:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8003742:	2300      	movs	r3, #0
 8003744:	e07f      	b.n	8003846 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 8003746:	2064      	movs	r0, #100	@ 0x64
 8003748:	f001 fb3a 	bl	8004dc0 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 800374c:	20ae      	movs	r0, #174	@ 0xae
 800374e:	f000 fb2b 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8003752:	20d5      	movs	r0, #213	@ 0xd5
 8003754:	f000 fb28 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8003758:	20f0      	movs	r0, #240	@ 0xf0
 800375a:	f000 fb25 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 800375e:	20a8      	movs	r0, #168	@ 0xa8
 8003760:	f000 fb22 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8003764:	f7ff ffb6 	bl	80036d4 <height>
 8003768:	4603      	mov	r3, r0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fb19 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8003776:	20d3      	movs	r0, #211	@ 0xd3
 8003778:	f000 fb16 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800377c:	2000      	movs	r0, #0
 800377e:	f000 fb13 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8003782:	2040      	movs	r0, #64	@ 0x40
 8003784:	f000 fb10 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8003788:	208d      	movs	r0, #141	@ 0x8d
 800378a:	f000 fb0d 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 800378e:	2014      	movs	r0, #20
 8003790:	f000 fb0a 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8003794:	2020      	movs	r0, #32
 8003796:	f000 fb07 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800379a:	2000      	movs	r0, #0
 800379c:	f000 fb04 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 80037a0:	20a0      	movs	r0, #160	@ 0xa0
 80037a2:	f000 fb01 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 80037a6:	20c0      	movs	r0, #192	@ 0xc0
 80037a8:	f000 fafe 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80037ac:	20da      	movs	r0, #218	@ 0xda
 80037ae:	f000 fafb 	bl	8003da8 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 80037b2:	4b28      	ldr	r3, [pc, #160]	@ (8003854 <ssd1306_Init+0x130>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80037ba:	2012      	movs	r0, #18
 80037bc:	f000 faf4 	bl	8003da8 <ssd1306_WriteCommand>
 80037c0:	e006      	b.n	80037d0 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80037c2:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <ssd1306_Init+0x130>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80037ca:	2002      	movs	r0, #2
 80037cc:	f000 faec 	bl	8003da8 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 80037d0:	2081      	movs	r0, #129	@ 0x81
 80037d2:	f000 fae9 	bl	8003da8 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 80037d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003854 <ssd1306_Init+0x130>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80037de:	20cf      	movs	r0, #207	@ 0xcf
 80037e0:	f000 fae2 	bl	8003da8 <ssd1306_WriteCommand>
 80037e4:	e006      	b.n	80037f4 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80037e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <ssd1306_Init+0x130>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d102      	bne.n	80037f4 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80037ee:	208f      	movs	r0, #143	@ 0x8f
 80037f0:	f000 fada 	bl	8003da8 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 80037f4:	20d9      	movs	r0, #217	@ 0xd9
 80037f6:	f000 fad7 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80037fa:	20f1      	movs	r0, #241	@ 0xf1
 80037fc:	f000 fad4 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8003800:	20db      	movs	r0, #219	@ 0xdb
 8003802:	f000 fad1 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8003806:	2040      	movs	r0, #64	@ 0x40
 8003808:	f000 face 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800380c:	20a4      	movs	r0, #164	@ 0xa4
 800380e:	f000 facb 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8003812:	20a6      	movs	r0, #166	@ 0xa6
 8003814:	f000 fac8 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8003818:	202e      	movs	r0, #46	@ 0x2e
 800381a:	f000 fac5 	bl	8003da8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800381e:	20af      	movs	r0, #175	@ 0xaf
 8003820:	f000 fac2 	bl	8003da8 <ssd1306_WriteCommand>
//	ssd1306_WriteCommand(0xA7);
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <ssd1306_Init+0x12c>)
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800382a:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <ssd1306_Init+0x12c>)
 800382c:	2200      	movs	r2, #0
 800382e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = White;
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <ssd1306_Init+0x12c>)
 8003832:	2201      	movs	r2, #1
 8003834:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8003836:	f000 faab 	bl	8003d90 <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800383a:	f000 f80d 	bl	8003858 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 800383e:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <ssd1306_Init+0x12c>)
 8003840:	2201      	movs	r2, #1
 8003842:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8003844:	2301      	movs	r3, #1
//    SSD1306.CurrentX = 0;
//    SSD1306.CurrentY = 0;
//
//    SSD1306.Initialized = 1;
//    return 1;
}
 8003846:	4618      	mov	r0, r3
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2400050c 	.word	0x2400050c
 8003850:	24000cbc 	.word	0x24000cbc
 8003854:	24000cc4 	.word	0x24000cc4

08003858 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	71fb      	strb	r3, [r7, #7]
 8003862:	e019      	b.n	8003898 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	3b50      	subs	r3, #80	@ 0x50
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fa9c 	bl	8003da8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8003870:	2000      	movs	r0, #0
 8003872:	f000 fa99 	bl	8003da8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8003876:	2010      	movs	r0, #16
 8003878:	f000 fa96 	bl	8003da8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	01db      	lsls	r3, r3, #7
 8003880:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <ssd1306_UpdateScreen+0x50>)
 8003882:	189c      	adds	r4, r3, r2
 8003884:	f7ff ff1e 	bl	80036c4 <width>
 8003888:	4603      	mov	r3, r0
 800388a:	4619      	mov	r1, r3
 800388c:	4620      	mov	r0, r4
 800388e:	f000 faad 	bl	8003dec <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	3301      	adds	r3, #1
 8003896:	71fb      	strb	r3, [r7, #7]
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	2b07      	cmp	r3, #7
 800389c:	d9e2      	bls.n	8003864 <ssd1306_UpdateScreen+0xc>
	}
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	38000000 	.word	0x38000000

080038ac <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	460a      	mov	r2, r1
 80038b6:	71fb      	strb	r3, [r7, #7]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <ssd1306_DrawPixel+0xe4>)
 80038be:	795b      	ldrb	r3, [r3, #5]
 80038c0:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	f7ff ff0d 	bl	80036e4 <ssd1306_GetWidth>
 80038ca:	4603      	mov	r3, r0
 80038cc:	429c      	cmp	r4, r3
 80038ce:	d25a      	bcs.n	8003986 <ssd1306_DrawPixel+0xda>
 80038d0:	79bb      	ldrb	r3, [r7, #6]
 80038d2:	b29c      	uxth	r4, r3
 80038d4:	f7ff ff0e 	bl	80036f4 <ssd1306_GetHeight>
 80038d8:	4603      	mov	r3, r0
 80038da:	429c      	cmp	r4, r3
 80038dc:	d253      	bcs.n	8003986 <ssd1306_DrawPixel+0xda>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80038de:	4b2c      	ldr	r3, [pc, #176]	@ (8003990 <ssd1306_DrawPixel+0xe4>)
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d121      	bne.n	800393e <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 80038fa:	79fc      	ldrb	r4, [r7, #7]
 80038fc:	79bb      	ldrb	r3, [r7, #6]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	b2dd      	uxtb	r5, r3
 8003902:	462e      	mov	r6, r5
 8003904:	f7ff fede 	bl	80036c4 <width>
 8003908:	4603      	mov	r3, r0
 800390a:	4618      	mov	r0, r3
 800390c:	4603      	mov	r3, r0
 800390e:	fb06 f303 	mul.w	r3, r6, r3
 8003912:	4423      	add	r3, r4
 8003914:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <ssd1306_DrawPixel+0xe8>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	b25a      	sxtb	r2, r3
 800391a:	79bb      	ldrb	r3, [r7, #6]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	b25b      	sxtb	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b259      	sxtb	r1, r3
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	462b      	mov	r3, r5
 8003930:	fb00 f303 	mul.w	r3, r0, r3
 8003934:	4413      	add	r3, r2
 8003936:	b2c9      	uxtb	r1, r1
 8003938:	4a16      	ldr	r2, [pc, #88]	@ (8003994 <ssd1306_DrawPixel+0xe8>)
 800393a:	54d1      	strb	r1, [r2, r3]
 800393c:	e024      	b.n	8003988 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 800393e:	79fc      	ldrb	r4, [r7, #7]
 8003940:	79bb      	ldrb	r3, [r7, #6]
 8003942:	08db      	lsrs	r3, r3, #3
 8003944:	b2dd      	uxtb	r5, r3
 8003946:	462e      	mov	r6, r5
 8003948:	f7ff febc 	bl	80036c4 <width>
 800394c:	4603      	mov	r3, r0
 800394e:	4618      	mov	r0, r3
 8003950:	4603      	mov	r3, r0
 8003952:	fb06 f303 	mul.w	r3, r6, r3
 8003956:	4423      	add	r3, r4
 8003958:	4a0e      	ldr	r2, [pc, #56]	@ (8003994 <ssd1306_DrawPixel+0xe8>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	b25a      	sxtb	r2, r3
 800395e:	79bb      	ldrb	r3, [r7, #6]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	b25b      	sxtb	r3, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	b25b      	sxtb	r3, r3
 8003970:	4013      	ands	r3, r2
 8003972:	b259      	sxtb	r1, r3
 8003974:	79fa      	ldrb	r2, [r7, #7]
 8003976:	462b      	mov	r3, r5
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	4413      	add	r3, r2
 800397e:	b2c9      	uxtb	r1, r1
 8003980:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <ssd1306_DrawPixel+0xe8>)
 8003982:	54d1      	strb	r1, [r2, r3]
 8003984:	e000      	b.n	8003988 <ssd1306_DrawPixel+0xdc>
		return;
 8003986:	bf00      	nop
	}
}
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398e:	bf00      	nop
 8003990:	24000cbc 	.word	0x24000cbc
 8003994:	38000000 	.word	0x38000000

08003998 <ssd1306_DrawVerticalLine>:
    	}; break;
  }
}

void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	460b      	mov	r3, r1
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	807b      	strh	r3, [r7, #2]
  if (x < 0 || x >= width()) return;
 80039aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f2c0 8113 	blt.w	8003bda <ssd1306_DrawVerticalLine+0x242>
 80039b4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80039b8:	f7ff fe84 	bl	80036c4 <width>
 80039bc:	4603      	mov	r3, r0
 80039be:	429c      	cmp	r4, r3
 80039c0:	f280 810b 	bge.w	8003bda <ssd1306_DrawVerticalLine+0x242>

  if (y < 0)
 80039c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da06      	bge.n	80039da <ssd1306_DrawVerticalLine+0x42>
  {
    length += y;
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	807b      	strh	r3, [r7, #2]
    y = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	80bb      	strh	r3, [r7, #4]
  }

  if ( (y + length) > height())
 80039da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e2:	18d4      	adds	r4, r2, r3
 80039e4:	f7ff fe76 	bl	80036d4 <height>
 80039e8:	4603      	mov	r3, r0
 80039ea:	429c      	cmp	r4, r3
 80039ec:	dd07      	ble.n	80039fe <ssd1306_DrawVerticalLine+0x66>
  {
    length = (height() - y);
 80039ee:	f7ff fe71 	bl	80036d4 <height>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	88bb      	ldrh	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	807b      	strh	r3, [r7, #2]
  }

  if (length <= 0) return;
 80039fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f340 80eb 	ble.w	8003bde <ssd1306_DrawVerticalLine+0x246>


  uint8_t yOffset = y & 7;
 8003a08:	88bb      	ldrh	r3, [r7, #4]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	73fb      	strb	r3, [r7, #15]
  uint8_t drawBit;
  uint8_t *bufferPtr = SSD1306_Buffer;
 8003a12:	4b76      	ldr	r3, [pc, #472]	@ (8003bec <ssd1306_DrawVerticalLine+0x254>)
 8003a14:	613b      	str	r3, [r7, #16]

  bufferPtr += (y >> 3) * width();
 8003a16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a1a:	10db      	asrs	r3, r3, #3
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	461c      	mov	r4, r3
 8003a20:	f7ff fe50 	bl	80036c4 <width>
 8003a24:	4603      	mov	r3, r0
 8003a26:	fb04 f303 	mul.w	r3, r4, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  bufferPtr += x;
 8003a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  if (yOffset)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d056      	beq.n	8003af0 <ssd1306_DrawVerticalLine+0x158>
  {
    yOffset = 8 - yOffset;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	f1c3 0308 	rsb	r3, r3, #8
 8003a48:	73fb      	strb	r3, [r7, #15]
    drawBit = ~(0xFF >> (yOffset));
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	fa42 f303 	asr.w	r3, r2, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	75fb      	strb	r3, [r7, #23]

    if (length < yOffset)
 8003a58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	da0c      	bge.n	8003a7c <ssd1306_DrawVerticalLine+0xe4>
    {
      drawBit &= (0xFF >> (yOffset - length));
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	22ff      	movs	r2, #255	@ 0xff
 8003a6c:	fa42 f303 	asr.w	r3, r2, r3
 8003a70:	b25a      	sxtb	r2, r3
 8003a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	75fb      	strb	r3, [r7, #23]
    }

    switch (SSD1306.Color)
 8003a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf0 <ssd1306_DrawVerticalLine+0x258>)
 8003a7e:	795b      	ldrb	r3, [r3, #5]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d01a      	beq.n	8003aba <ssd1306_DrawVerticalLine+0x122>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	dc20      	bgt.n	8003aca <ssd1306_DrawVerticalLine+0x132>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d009      	beq.n	8003aa0 <ssd1306_DrawVerticalLine+0x108>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d11c      	bne.n	8003aca <ssd1306_DrawVerticalLine+0x132>
    {
      case White:   *bufferPtr |=  drawBit; break;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e014      	b.n	8003aca <ssd1306_DrawVerticalLine+0x132>
      case Black:   *bufferPtr &= ~drawBit; break;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25a      	sxtb	r2, r3
 8003aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e007      	b.n	8003aca <ssd1306_DrawVerticalLine+0x132>
      case Inverse: *bufferPtr ^=  drawBit; break;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	4053      	eors	r3, r2
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	bf00      	nop
    }

    if (length < yOffset) return;
 8003aca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f2c0 8086 	blt.w	8003be2 <ssd1306_DrawVerticalLine+0x24a>

    length -= yOffset;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	807b      	strh	r3, [r7, #2]
    bufferPtr += width();
 8003ae2:	f7ff fdef 	bl	80036c4 <width>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  if (length >= 8)
 8003af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	dd3c      	ble.n	8003b72 <ssd1306_DrawVerticalLine+0x1da>
  {
    switch (SSD1306.Color)
 8003af8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <ssd1306_DrawVerticalLine+0x258>)
 8003afa:	795b      	ldrb	r3, [r3, #5]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	dc02      	bgt.n	8003b06 <ssd1306_DrawVerticalLine+0x16e>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da03      	bge.n	8003b0c <ssd1306_DrawVerticalLine+0x174>
 8003b04:	e035      	b.n	8003b72 <ssd1306_DrawVerticalLine+0x1da>
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d01b      	beq.n	8003b42 <ssd1306_DrawVerticalLine+0x1aa>
 8003b0a:	e032      	b.n	8003b72 <ssd1306_DrawVerticalLine+0x1da>
    {
      case White:
      case Black:
        drawBit = (SSD1306.Color == White) ? 0xFF : 0x00;
 8003b0c:	4b38      	ldr	r3, [pc, #224]	@ (8003bf0 <ssd1306_DrawVerticalLine+0x258>)
 8003b0e:	795b      	ldrb	r3, [r3, #5]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <ssd1306_DrawVerticalLine+0x180>
 8003b14:	23ff      	movs	r3, #255	@ 0xff
 8003b16:	e000      	b.n	8003b1a <ssd1306_DrawVerticalLine+0x182>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
        do {
          *bufferPtr = drawBit;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	7dfa      	ldrb	r2, [r7, #23]
 8003b20:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8003b22:	f7ff fdcf 	bl	80036c4 <width>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
          length -= 8;
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	3b08      	subs	r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 8003b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	dced      	bgt.n	8003b1c <ssd1306_DrawVerticalLine+0x184>
        break;
 8003b40:	e017      	b.n	8003b72 <ssd1306_DrawVerticalLine+0x1da>
      case Inverse:
        do {
          *bufferPtr = ~(*bufferPtr);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	701a      	strb	r2, [r3, #0]
          bufferPtr += width();
 8003b4e:	f7ff fdb9 	bl	80036c4 <width>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
          length -= 8;
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	3b08      	subs	r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	807b      	strh	r3, [r7, #2]
        } while (length >= 8);
 8003b64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	dd01      	ble.n	8003b70 <ssd1306_DrawVerticalLine+0x1d8>
      case Inverse:
 8003b6c:	bf00      	nop
 8003b6e:	e7e8      	b.n	8003b42 <ssd1306_DrawVerticalLine+0x1aa>
        break;
 8003b70:	bf00      	nop
    }
  }

  if (length > 0)
 8003b72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dd34      	ble.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
  {
    drawBit = (1 << (length & 7)) - 1;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	2201      	movs	r2, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
    switch (SSD1306.Color)
 8003b8c:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <ssd1306_DrawVerticalLine+0x258>)
 8003b8e:	795b      	ldrb	r3, [r3, #5]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d01a      	beq.n	8003bca <ssd1306_DrawVerticalLine+0x232>
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	dc25      	bgt.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <ssd1306_DrawVerticalLine+0x218>
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d121      	bne.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
    {
      case White:   *bufferPtr |=  drawBit; break;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e019      	b.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
      case Black:   *bufferPtr &= ~drawBit; break;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e00c      	b.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
      case Inverse: *bufferPtr ^=  drawBit; break;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	4053      	eors	r3, r2
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e004      	b.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
  if (x < 0 || x >= width()) return;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
  if (length <= 0) return;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <ssd1306_DrawVerticalLine+0x24c>
    if (length < yOffset) return;
 8003be2:	bf00      	nop
    }
  }
}
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	bf00      	nop
 8003bec:	38000000 	.word	0x38000000
 8003bf0:	24000cbc 	.word	0x24000cbc

08003bf4 <ssd1306_WriteChar>:
//		pY += 8;
//	}
//}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	e883 0006 	stmia.w	r3, {r1, r2}
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c04:	f7ff fd5e 	bl	80036c4 <width>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b40      	ldr	r3, [pc, #256]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	793b      	ldrb	r3, [r7, #4]
 8003c14:	440b      	add	r3, r1
 8003c16:	429a      	cmp	r2, r3
 8003c18:	dd0a      	ble.n	8003c30 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8003c1a:	f7ff fd5b 	bl	80036d4 <height>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003c24:	885b      	ldrh	r3, [r3, #2]
 8003c26:	4619      	mov	r1, r3
 8003c28:	797b      	ldrb	r3, [r7, #5]
 8003c2a:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dc01      	bgt.n	8003c34 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e069      	b.n	8003d08 <ssd1306_WriteChar+0x114>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e059      	b.n	8003cee <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	3b20      	subs	r3, #32
 8003c40:	7979      	ldrb	r1, [r7, #5]
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	440b      	add	r3, r1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e041      	b.n	8003cde <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d011      	beq.n	8003c8e <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003c6a:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	b2d8      	uxtb	r0, r3
 8003c78:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003c7a:	885b      	ldrh	r3, [r3, #2]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	4619      	mov	r1, r3
 8003c88:	f7ff fe10 	bl	80038ac <ssd1306_DrawPixel>
 8003c8c:	e024      	b.n	8003cd8 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003c90:	795b      	ldrb	r3, [r3, #5]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003ca0:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	b2d8      	uxtb	r0, r3
 8003cb0:	4b17      	ldr	r3, [pc, #92]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003cb2:	885b      	ldrh	r3, [r3, #2]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7ff fdf4 	bl	80038ac <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8003cc4:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003cc6:	795b      	ldrb	r3, [r3, #5]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003cd6:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	793b      	ldrb	r3, [r7, #4]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d3b8      	bcc.n	8003c5a <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	797b      	ldrb	r3, [r7, #5]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d3a0      	bcc.n	8003c3a <ssd1306_WriteChar+0x46>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	793a      	ldrb	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	4b03      	ldr	r3, [pc, #12]	@ (8003d10 <ssd1306_WriteChar+0x11c>)
 8003d04:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	24000cbc 	.word	0x24000cbc

08003d14 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 8003d22:	e012      	b.n	8003d4a <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	7818      	ldrb	r0, [r3, #0]
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d2e:	f7ff ff61 	bl	8003bf4 <ssd1306_WriteChar>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d002      	beq.n	8003d44 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	e008      	b.n	8003d56 <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
	while (*str)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e8      	bne.n	8003d24 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	781b      	ldrb	r3, [r3, #0]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	460a      	mov	r2, r1
 8003d6a:	71fb      	strb	r3, [r7, #7]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <ssd1306_SetCursor+0x2c>)
 8003d76:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8003d78:	79bb      	ldrb	r3, [r7, #6]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <ssd1306_SetCursor+0x2c>)
 8003d7e:	805a      	strh	r2, [r3, #2]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	24000cbc 	.word	0x24000cbc

08003d90 <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8003d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <ssd1306_Clear+0x14>)
 8003d9c:	f015 fdeb 	bl	8019976 <memset>
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	38000000 	.word	0x38000000

08003da8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
	D3command = command; //must be in D3 ram space
 8003db2:	4a0c      	ldr	r2, [pc, #48]	@ (8003de4 <ssd1306_WriteCommand+0x3c>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	7013      	strb	r3, [r2, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8003db8:	bf00      	nop
 8003dba:	480b      	ldr	r0, [pc, #44]	@ (8003de8 <ssd1306_WriteCommand+0x40>)
 8003dbc:	f006 fab5 	bl	800a32a <HAL_I2C_GetState>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d1f9      	bne.n	8003dba <ssd1306_WriteCommand+0x12>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &D3command, 1);
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <ssd1306_WriteCommand+0x3c>)
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2301      	movs	r3, #1
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2178      	movs	r1, #120	@ 0x78
 8003dd4:	4804      	ldr	r0, [pc, #16]	@ (8003de8 <ssd1306_WriteCommand+0x40>)
 8003dd6:	f006 f803 	bl	8009de0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	38000400 	.word	0x38000400
 8003de8:	2400050c 	.word	0x2400050c

08003dec <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8003df8:	bf00      	nop
 8003dfa:	480a      	ldr	r0, [pc, #40]	@ (8003e24 <ssd1306_WriteData+0x38>)
 8003dfc:	f006 fa95 	bl	800a32a <HAL_I2C_GetState>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d1f9      	bne.n	8003dfa <ssd1306_WriteData+0xe>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2240      	movs	r2, #64	@ 0x40
 8003e12:	2178      	movs	r1, #120	@ 0x78
 8003e14:	4803      	ldr	r0, [pc, #12]	@ (8003e24 <ssd1306_WriteData+0x38>)
 8003e16:	f005 ffe3 	bl	8009de0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2400050c 	.word	0x2400050c

08003e28 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e48:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e52:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e70:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <HAL_MspInit+0x54>)
 8003e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003e7e:	f000 ffe3 	bl	8004e48 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003e82:	2002      	movs	r0, #2
 8003e84:	f000 ffcc 	bl	8004e20 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	58024400 	.word	0x58024400

08003e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <NMI_Handler+0x4>

08003e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
	  volatile unsigned long _AFSR ;
	  volatile unsigned long _BFAR ;
	  volatile unsigned long _MMAR ;
	// Configurable Fault Status Register
	  // Consists of MMSR, BFSR and UFSR
	  _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HardFault_Handler+0x30>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	617b      	str	r3, [r7, #20]

	  // Hard Fault Status Register
	  _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <HardFault_Handler+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	613b      	str	r3, [r7, #16]

	  // Debug Fault Status Register
	  _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
 8003eae:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <HardFault_Handler+0x38>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

	  // Auxiliary Fault Status Register
	  _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <HardFault_Handler+0x3c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60bb      	str	r3, [r7, #8]

	  // Read the Fault Address Registers. These may not contain valid values.
	  // Check BFARVALID/MMARVALID to see if they are valid values
	  // MemManage Fault Address Register
	  _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <HardFault_Handler+0x40>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	603b      	str	r3, [r7, #0]
	  // Bus Fault Address Register
	  _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <HardFault_Handler+0x44>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	607b      	str	r3, [r7, #4]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <HardFault_Handler+0x2a>
 8003eca:	bf00      	nop
 8003ecc:	e000ed28 	.word	0xe000ed28
 8003ed0:	e000ed2c 	.word	0xe000ed2c
 8003ed4:	e000ed30 	.word	0xe000ed30
 8003ed8:	e000ed3c 	.word	0xe000ed3c
 8003edc:	e000ed34 	.word	0xe000ed34
 8003ee0:	e000ed38 	.word	0xe000ed38

08003ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <MemManage_Handler+0x4>

08003eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <BusFault_Handler+0x4>

08003ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <UsageFault_Handler+0x4>

08003efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2a:	f000 ff29 	bl	8004d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f38:	4802      	ldr	r0, [pc, #8]	@ (8003f44 <TIM1_UP_IRQHandler+0x10>)
 8003f3a:	f00e fd85 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	24000ccc 	.word	0x24000ccc

08003f48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f4c:	4802      	ldr	r0, [pc, #8]	@ (8003f58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003f4e:	f00e fd7b 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	24000ccc 	.word	0x24000ccc

08003f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f60:	4802      	ldr	r0, [pc, #8]	@ (8003f6c <TIM2_IRQHandler+0x10>)
 8003f62:	f00e fd71 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	24000d88 	.word	0x24000d88

08003f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f74:	4802      	ldr	r0, [pc, #8]	@ (8003f80 <TIM3_IRQHandler+0x10>)
 8003f76:	f00e fd67 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	24000e44 	.word	0x24000e44

08003f84 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f88:	4802      	ldr	r0, [pc, #8]	@ (8003f94 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003f8a:	f00e fd5d 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	24000f00 	.word	0x24000f00

08003f98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003f9e:	f00e fd53 	bl	8012a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	24000f00 	.word	0x24000f00

08003fac <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_stream7);
 8003fb0:	4802      	ldr	r0, [pc, #8]	@ (8003fbc <DMA1_Stream7_IRQHandler+0x10>)
 8003fb2:	f003 ff09 	bl	8007dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	240003c4 	.word	0x240003c4

08003fc0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003fc4:	4802      	ldr	r0, [pc, #8]	@ (8003fd0 <SDMMC1_IRQHandler+0x10>)
 8003fc6:	f00c fe75 	bl	8010cb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	24000c18 	.word	0x24000c18

08003fd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003fd8:	4802      	ldr	r0, [pc, #8]	@ (8003fe4 <DMA2_Stream7_IRQHandler+0x10>)
 8003fda:	f003 fef5 	bl	8007dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2400034c 	.word	0x2400034c

08003fe8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8003fec:	4802      	ldr	r0, [pc, #8]	@ (8003ff8 <I2C4_EV_IRQHandler+0x10>)
 8003fee:	f006 f8c9 	bl	800a184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2400050c 	.word	0x2400050c

08003ffc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8004000:	4802      	ldr	r0, [pc, #8]	@ (800400c <I2C4_ER_IRQHandler+0x10>)
 8004002:	f006 f8d9 	bl	800a1b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2400050c 	.word	0x2400050c

08004010 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_command_end_0);
 8004014:	4802      	ldr	r0, [pc, #8]	@ (8004020 <MDMA_IRQHandler+0x10>)
 8004016:	f008 f97b 	bl	800c310 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	24000b88 	.word	0x24000b88

08004024 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004028:	4802      	ldr	r0, [pc, #8]	@ (8004034 <ADC3_IRQHandler+0x10>)
 800402a:	f001 fc9d 	bl	8005968 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	240002bc 	.word	0x240002bc

08004038 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c4_tx);
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <DMAMUX2_OVR_IRQHandler+0x10>)
 800403e:	f005 fb0f 	bl	8009660 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	24000590 	.word	0x24000590

0800404c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8004050:	4802      	ldr	r0, [pc, #8]	@ (800405c <BDMA_Channel0_IRQHandler+0x10>)
 8004052:	f003 feb9 	bl	8007dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	24000590 	.word	0x24000590

08004060 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8004064:	4802      	ldr	r0, [pc, #8]	@ (8004070 <BDMA_Channel1_IRQHandler+0x10>)
 8004066:	f003 feaf 	bl	8007dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	24000608 	.word	0x24000608

08004074 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e00a      	b.n	800409c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004086:	f3af 8000 	nop.w
 800408a:	4601      	mov	r1, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	60ba      	str	r2, [r7, #8]
 8004092:	b2ca      	uxtb	r2, r1
 8004094:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	3301      	adds	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	dbf0      	blt.n	8004086 <_read+0x12>
  }

  return len;
 80040a4:	687b      	ldr	r3, [r7, #4]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e009      	b.n	80040d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	60ba      	str	r2, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	dbf1      	blt.n	80040c0 <_write+0x12>
  }
  return len;
 80040dc:	687b      	ldr	r3, [r7, #4]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <_close>:

int _close(int file)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800410e:	605a      	str	r2, [r3, #4]
  return 0;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <_isatty>:

int _isatty(int file)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004126:	2301      	movs	r3, #1
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004158:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <_sbrk+0x5c>)
 800415a:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <_sbrk+0x60>)
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <_sbrk+0x64>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <_sbrk+0x64>)
 800416e:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <_sbrk+0x68>)
 8004170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <_sbrk+0x64>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	429a      	cmp	r2, r3
 800417e:	d207      	bcs.n	8004190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004180:	f015 fc48 	bl	8019a14 <__errno>
 8004184:	4603      	mov	r3, r0
 8004186:	220c      	movs	r2, #12
 8004188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	e009      	b.n	80041a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004190:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <_sbrk+0x64>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <_sbrk+0x64>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	4a05      	ldr	r2, [pc, #20]	@ (80041b4 <_sbrk+0x64>)
 80041a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	24080000 	.word	0x24080000
 80041b0:	00001600 	.word	0x00001600
 80041b4:	24000cc8 	.word	0x24000cc8
 80041b8:	240017c8 	.word	0x240017c8

080041bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041c0:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <SystemInit+0xe4>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	4a36      	ldr	r2, [pc, #216]	@ (80042a0 <SystemInit+0xe4>)
 80041c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041d0:	4b34      	ldr	r3, [pc, #208]	@ (80042a4 <SystemInit+0xe8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	2b06      	cmp	r3, #6
 80041da:	d807      	bhi.n	80041ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <SystemInit+0xe8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <SystemInit+0xe8>)
 80041e6:	f043 0307 	orr.w	r3, r3, #7
 80041ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80041ec:	4b2e      	ldr	r3, [pc, #184]	@ (80042a8 <SystemInit+0xec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	@ (80042a8 <SystemInit+0xec>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <SystemInit+0xec>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80041fe:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <SystemInit+0xec>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4929      	ldr	r1, [pc, #164]	@ (80042a8 <SystemInit+0xec>)
 8004204:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <SystemInit+0xf0>)
 8004206:	4013      	ands	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800420a:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <SystemInit+0xe8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <SystemInit+0xe8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 030f 	bic.w	r3, r3, #15
 800421e:	4a21      	ldr	r2, [pc, #132]	@ (80042a4 <SystemInit+0xe8>)
 8004220:	f043 0307 	orr.w	r3, r3, #7
 8004224:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004226:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <SystemInit+0xec>)
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800422c:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <SystemInit+0xec>)
 800422e:	2200      	movs	r2, #0
 8004230:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004232:	4b1d      	ldr	r3, [pc, #116]	@ (80042a8 <SystemInit+0xec>)
 8004234:	2200      	movs	r2, #0
 8004236:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <SystemInit+0xec>)
 800423a:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <SystemInit+0xf4>)
 800423c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800423e:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <SystemInit+0xec>)
 8004240:	4a1c      	ldr	r2, [pc, #112]	@ (80042b4 <SystemInit+0xf8>)
 8004242:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004244:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <SystemInit+0xec>)
 8004246:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <SystemInit+0xfc>)
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800424a:	4b17      	ldr	r3, [pc, #92]	@ (80042a8 <SystemInit+0xec>)
 800424c:	2200      	movs	r2, #0
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004250:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <SystemInit+0xec>)
 8004252:	4a19      	ldr	r2, [pc, #100]	@ (80042b8 <SystemInit+0xfc>)
 8004254:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004256:	4b14      	ldr	r3, [pc, #80]	@ (80042a8 <SystemInit+0xec>)
 8004258:	2200      	movs	r2, #0
 800425a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <SystemInit+0xec>)
 800425e:	4a16      	ldr	r2, [pc, #88]	@ (80042b8 <SystemInit+0xfc>)
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004262:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <SystemInit+0xec>)
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <SystemInit+0xec>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <SystemInit+0xec>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004272:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <SystemInit+0xec>)
 8004276:	2200      	movs	r2, #0
 8004278:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <SystemInit+0x100>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <SystemInit+0x104>)
 8004280:	4013      	ands	r3, r2
 8004282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004286:	d202      	bcs.n	800428e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004288:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <SystemInit+0x108>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800428e:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <SystemInit+0x10c>)
 8004290:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004294:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	52002000 	.word	0x52002000
 80042a8:	58024400 	.word	0x58024400
 80042ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80042b0:	02020200 	.word	0x02020200
 80042b4:	01ff0000 	.word	0x01ff0000
 80042b8:	01010280 	.word	0x01010280
 80042bc:	5c001000 	.word	0x5c001000
 80042c0:	ffff0000 	.word	0xffff0000
 80042c4:	51008108 	.word	0x51008108
 80042c8:	52004000 	.word	0x52004000

080042cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b09a      	sub	sp, #104	@ 0x68
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
 80042fc:	615a      	str	r2, [r3, #20]
 80042fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	222c      	movs	r2, #44	@ 0x2c
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f015 fb35 	bl	8019976 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800430c:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 800430e:	4a5b      	ldr	r2, [pc, #364]	@ (800447c <MX_TIM1_Init+0x1b0>)
 8004310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((Usec*TIMENumer/TIMEDenom)-1);
 8004312:	4b59      	ldr	r3, [pc, #356]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004314:	223d      	movs	r2, #61	@ 0x3d
 8004316:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004318:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((Exposure*TIMEDenom/TIMENumer)-1);
 800431e:	4b58      	ldr	r3, [pc, #352]	@ (8004480 <MX_TIM1_Init+0x1b4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4a57      	ldr	r2, [pc, #348]	@ (8004484 <MX_TIM1_Init+0x1b8>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3b01      	subs	r3, #1
 800432e:	4a52      	ldr	r2, [pc, #328]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004330:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004332:	4b51      	ldr	r3, [pc, #324]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = NumLines;
 8004338:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <MX_TIM1_Init+0x1bc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4e      	ldr	r2, [pc, #312]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 800433e:	6153      	str	r3, [r2, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004340:	4b4d      	ldr	r3, [pc, #308]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004342:	2280      	movs	r2, #128	@ 0x80
 8004344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004346:	484c      	ldr	r0, [pc, #304]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004348:	f00d ff90 	bl	801226c <HAL_TIM_Base_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004352:	f7fe ff1f 	bl	8003194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800435a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800435c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004360:	4619      	mov	r1, r3
 8004362:	4845      	ldr	r0, [pc, #276]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004364:	f00e fdae 	bl	8012ec4 <HAL_TIM_ConfigClockSource>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800436e:	f7fe ff11 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004372:	4841      	ldr	r0, [pc, #260]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004374:	f00e f8ee 	bl	8012554 <HAL_TIM_PWM_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800437e:	f7fe ff09 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8004382:	2108      	movs	r1, #8
 8004384:	483c      	ldr	r0, [pc, #240]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004386:	f00e faf7 	bl	8012978 <HAL_TIM_OnePulse_Init>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004390:	f7fe ff00 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8004394:	2340      	movs	r3, #64	@ 0x40
 8004396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004398:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800439c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80043a6:	4619      	mov	r1, r3
 80043a8:	4833      	ldr	r0, [pc, #204]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 80043aa:	f00f fc9d 	bl	8013ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80043b4:	f7fe feee 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80043b8:	2370      	movs	r3, #112	@ 0x70
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 4;
 80043bc:	2304      	movs	r3, #4
 80043be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80043c0:	2302      	movs	r3, #2
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	4619      	mov	r1, r3
 80043dc:	4826      	ldr	r0, [pc, #152]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 80043de:	f00e fc5d 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80043e8:	f7fe fed4 	bl	8003194 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 80043ec:	2303      	movs	r3, #3
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80043f0:	2304      	movs	r3, #4
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043f8:	2204      	movs	r2, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	481e      	ldr	r0, [pc, #120]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 80043fe:	f00e fc4d 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004408:	f7fe fec4 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800440c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004410:	2208      	movs	r2, #8
 8004412:	4619      	mov	r1, r3
 8004414:	4818      	ldr	r0, [pc, #96]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 8004416:	f00e fc41 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004420:	f7fe feb8 	bl	8003194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800443c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	4619      	mov	r1, r3
 8004458:	4807      	ldr	r0, [pc, #28]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 800445a:	f00f fcd3 	bl	8013e04 <HAL_TIMEx_ConfigBreakDeadTime>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8004464:	f7fe fe96 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004468:	4803      	ldr	r0, [pc, #12]	@ (8004478 <MX_TIM1_Init+0x1ac>)
 800446a:	f000 fb07 	bl	8004a7c <HAL_TIM_MspPostInit>

}
 800446e:	bf00      	nop
 8004470:	3768      	adds	r7, #104	@ 0x68
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	24000ccc 	.word	0x24000ccc
 800447c:	40010000 	.word	0x40010000
 8004480:	24000b24 	.word	0x24000b24
 8004484:	cccccccd 	.word	0xcccccccd
 8004488:	24000b28 	.word	0x24000b28

0800448c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b094      	sub	sp, #80	@ 0x50
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80044a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b0:	f107 0320 	add.w	r3, r7, #32
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	615a      	str	r2, [r3, #20]
 80044cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044ce:	4b48      	ldr	r3, [pc, #288]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80044d6:	4b46      	ldr	r3, [pc, #280]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044dc:	4b44      	ldr	r3, [pc, #272]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = BlankTime;
 80044e2:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044e4:	f240 7207 	movw	r2, #1799	@ 0x707
 80044e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f0:	4b3f      	ldr	r3, [pc, #252]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044f6:	483e      	ldr	r0, [pc, #248]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80044f8:	f00d feb8 	bl	801226c <HAL_TIM_Base_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004502:	f7fe fe47 	bl	8003194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800450a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800450c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004510:	4619      	mov	r1, r3
 8004512:	4837      	ldr	r0, [pc, #220]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004514:	f00e fcd6 	bl	8012ec4 <HAL_TIM_ConfigClockSource>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800451e:	f7fe fe39 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004522:	4833      	ldr	r0, [pc, #204]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004524:	f00e f816 	bl	8012554 <HAL_TIM_PWM_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 800452e:	f7fe fe31 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8004532:	2108      	movs	r1, #8
 8004534:	482e      	ldr	r0, [pc, #184]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004536:	f00e fa1f 	bl	8012978 <HAL_TIM_OnePulse_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8004540:	f7fe fe28 	bl	8003194 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004544:	2306      	movs	r3, #6
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800454c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004550:	4619      	mov	r1, r3
 8004552:	4827      	ldr	r0, [pc, #156]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004554:	f00e fdae 	bl	80130b4 <HAL_TIM_SlaveConfigSynchro>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800455e:	f7fe fe19 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800456a:	f107 0320 	add.w	r3, r7, #32
 800456e:	4619      	mov	r1, r3
 8004570:	481f      	ldr	r0, [pc, #124]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004572:	f00f fbb9 	bl	8013ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800457c:	f7fe fe0a 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004580:	2370      	movs	r3, #112	@ 0x70
 8004582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = Usec/3-1;
 8004584:	2320      	movs	r3, #32
 8004586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800458c:	2304      	movs	r3, #4
 800458e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	2200      	movs	r2, #0
 8004594:	4619      	mov	r1, r3
 8004596:	4816      	ldr	r0, [pc, #88]	@ (80045f0 <MX_TIM2_Init+0x164>)
 8004598:	f00e fb80 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80045a2:	f7fe fdf7 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a6:	2360      	movs	r3, #96	@ 0x60
 80045a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (Usec/4) -1;
 80045aa:	2318      	movs	r3, #24
 80045ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	2204      	movs	r2, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	480e      	ldr	r0, [pc, #56]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80045b6:	f00e fb71 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_TIM2_Init+0x138>
  {
    Error_Handler();
 80045c0:	f7fe fde8 	bl	8003194 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	220c      	movs	r2, #12
 80045d0:	4619      	mov	r1, r3
 80045d2:	4807      	ldr	r0, [pc, #28]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80045d4:	f00e fb62 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM2_Init+0x156>
  {
    Error_Handler();
 80045de:	f7fe fdd9 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045e2:	4803      	ldr	r0, [pc, #12]	@ (80045f0 <MX_TIM2_Init+0x164>)
 80045e4:	f000 fa4a 	bl	8004a7c <HAL_TIM_MspPostInit>

}
 80045e8:	bf00      	nop
 80045ea:	3750      	adds	r7, #80	@ 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	24000d88 	.word	0x24000d88

080045f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b094      	sub	sp, #80	@ 0x50
 80045f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004608:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004618:	f107 0320 	add.w	r3, r7, #32
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	615a      	str	r2, [r3, #20]
 8004634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004636:	4b3a      	ldr	r3, [pc, #232]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004638:	4a3a      	ldr	r2, [pc, #232]	@ (8004724 <MX_TIM3_Init+0x130>)
 800463a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800463c:	4b38      	ldr	r3, [pc, #224]	@ (8004720 <MX_TIM3_Init+0x12c>)
 800463e:	2200      	movs	r2, #0
 8004640:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004642:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (Usec*TIMENumer/TIMEDenom-1);
 8004648:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <MX_TIM3_Init+0x12c>)
 800464a:	223d      	movs	r2, #61	@ 0x3d
 800464c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800464e:	4b34      	ldr	r3, [pc, #208]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004654:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004656:	2200      	movs	r2, #0
 8004658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800465a:	4831      	ldr	r0, [pc, #196]	@ (8004720 <MX_TIM3_Init+0x12c>)
 800465c:	f00d fe06 	bl	801226c <HAL_TIM_Base_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004666:	f7fe fd95 	bl	8003194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800466a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800466e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004674:	4619      	mov	r1, r3
 8004676:	482a      	ldr	r0, [pc, #168]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004678:	f00e fc24 	bl	8012ec4 <HAL_TIM_ConfigClockSource>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004682:	f7fe fd87 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004686:	4826      	ldr	r0, [pc, #152]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004688:	f00d ff64 	bl	8012554 <HAL_TIM_PWM_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8004692:	f7fe fd7f 	bl	8003194 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8004696:	2305      	movs	r3, #5
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800469a:	2300      	movs	r3, #0
 800469c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800469e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046a2:	4619      	mov	r1, r3
 80046a4:	481e      	ldr	r0, [pc, #120]	@ (8004720 <MX_TIM3_Init+0x12c>)
 80046a6:	f00e fd05 	bl	80130b4 <HAL_TIM_SlaveConfigSynchro>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80046b0:	f7fe fd70 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 80046b4:	2360      	movs	r3, #96	@ 0x60
 80046b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046bc:	f107 0320 	add.w	r3, r7, #32
 80046c0:	4619      	mov	r1, r3
 80046c2:	4817      	ldr	r0, [pc, #92]	@ (8004720 <MX_TIM3_Init+0x12c>)
 80046c4:	f00f fb10 	bl	8013ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80046ce:	f7fe fd61 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d2:	2360      	movs	r3, #96	@ 0x60
 80046d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = ((Usec/4)-1);
 80046d6:	2318      	movs	r3, #24
 80046d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	4619      	mov	r1, r3
 80046e8:	480d      	ldr	r0, [pc, #52]	@ (8004720 <MX_TIM3_Init+0x12c>)
 80046ea:	f00e fad7 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80046f4:	f7fe fd4e 	bl	8003194 <Error_Handler>
  }
  sConfigOC.Pulse = (((Usec/4))-1);
 80046f8:	2318      	movs	r3, #24
 80046fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	2204      	movs	r2, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4807      	ldr	r0, [pc, #28]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004704:	f00e faca 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 800470e:	f7fe fd41 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004712:	4803      	ldr	r0, [pc, #12]	@ (8004720 <MX_TIM3_Init+0x12c>)
 8004714:	f000 f9b2 	bl	8004a7c <HAL_TIM_MspPostInit>

}
 8004718:	bf00      	nop
 800471a:	3750      	adds	r7, #80	@ 0x50
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	24000e44 	.word	0x24000e44
 8004724:	40000400 	.word	0x40000400

08004728 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b09e      	sub	sp, #120	@ 0x78
 800472c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800473c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800474c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
 8004768:	615a      	str	r2, [r3, #20]
 800476a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800476c:	463b      	mov	r3, r7
 800476e:	222c      	movs	r2, #44	@ 0x2c
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f015 f8ff 	bl	8019976 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004778:	4b60      	ldr	r3, [pc, #384]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 800477a:	4a61      	ldr	r2, [pc, #388]	@ (8004900 <MX_TIM8_Init+0x1d8>)
 800477c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800477e:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004784:	4b5d      	ldr	r3, [pc, #372]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = (Usec*TIMENumer/TIMEDenom)-1;
 800478a:	4b5c      	ldr	r3, [pc, #368]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 800478c:	223d      	movs	r2, #61	@ 0x3d
 800478e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004790:	4b5a      	ldr	r3, [pc, #360]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = Npixels-1;
 8004796:	4b59      	ldr	r3, [pc, #356]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004798:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800479c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479e:	4b57      	ldr	r3, [pc, #348]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80047a4:	4855      	ldr	r0, [pc, #340]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80047a6:	f00d fd61 	bl	801226c <HAL_TIM_Base_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 80047b0:	f7fe fcf0 	bl	8003194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80047ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80047be:	4619      	mov	r1, r3
 80047c0:	484e      	ldr	r0, [pc, #312]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80047c2:	f00e fb7f 	bl	8012ec4 <HAL_TIM_ConfigClockSource>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80047cc:	f7fe fce2 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80047d0:	484a      	ldr	r0, [pc, #296]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80047d2:	f00d febf 	bl	8012554 <HAL_TIM_PWM_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80047dc:	f7fe fcda 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80047e0:	2108      	movs	r1, #8
 80047e2:	4846      	ldr	r0, [pc, #280]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80047e4:	f00e f8c8 	bl	8012978 <HAL_TIM_OnePulse_Init>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80047ee:	f7fe fcd1 	bl	8003194 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80047f2:	2306      	movs	r3, #6
 80047f4:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80047f6:	2370      	movs	r3, #112	@ 0x70
 80047f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80047fa:	2300      	movs	r3, #0
 80047fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80047fe:	2300      	movs	r3, #0
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60
  sSlaveConfig.TriggerFilter = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8004806:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800480a:	4619      	mov	r1, r3
 800480c:	483b      	ldr	r0, [pc, #236]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 800480e:	f00e fc51 	bl	80130b4 <HAL_TIM_SlaveConfigSynchro>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8004818:	f7fe fcbc 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800481c:	2320      	movs	r3, #32
 800481e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8004820:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800482a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800482e:	4619      	mov	r1, r3
 8004830:	4832      	ldr	r0, [pc, #200]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004832:	f00f fa59 	bl	8013ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800483c:	f7fe fcaa 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004840:	2370      	movs	r3, #112	@ 0x70
 8004842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = ((Usec/4)-1);
 8004844:	2318      	movs	r3, #24
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800484c:	2300      	movs	r3, #0
 800484e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004850:	2304      	movs	r3, #4
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004854:	2300      	movs	r3, #0
 8004856:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800485c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004860:	2200      	movs	r2, #0
 8004862:	4619      	mov	r1, r3
 8004864:	4825      	ldr	r0, [pc, #148]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004866:	f00e fa19 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8004870:	f7fe fc90 	bl	8003194 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8004874:	2302      	movs	r3, #2
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800487c:	2204      	movs	r2, #4
 800487e:	4619      	mov	r1, r3
 8004880:	481e      	ldr	r0, [pc, #120]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 8004882:	f00e fa0b 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM8_Init+0x168>
  {
    Error_Handler();
 800488c:	f7fe fc82 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004894:	2208      	movs	r2, #8
 8004896:	4619      	mov	r1, r3
 8004898:	4818      	ldr	r0, [pc, #96]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 800489a:	f00e f9ff 	bl	8012c9c <HAL_TIM_PWM_ConfigChannel>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 80048a4:	f7fe fc76 	bl	8003194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80048d8:	463b      	mov	r3, r7
 80048da:	4619      	mov	r1, r3
 80048dc:	4807      	ldr	r0, [pc, #28]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80048de:	f00f fa91 	bl	8013e04 <HAL_TIMEx_ConfigBreakDeadTime>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM8_Init+0x1c4>
  {
    Error_Handler();
 80048e8:	f7fe fc54 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80048ec:	4803      	ldr	r0, [pc, #12]	@ (80048fc <MX_TIM8_Init+0x1d4>)
 80048ee:	f000 f8c5 	bl	8004a7c <HAL_TIM_MspPostInit>

}
 80048f2:	bf00      	nop
 80048f4:	3778      	adds	r7, #120	@ 0x78
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	24000f00 	.word	0x24000f00
 8004900:	40010400 	.word	0x40010400

08004904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	@ 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490c:	f107 031c 	add.w	r3, r7, #28
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a51      	ldr	r2, [pc, #324]	@ (8004a68 <HAL_TIM_Base_MspInit+0x164>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d11f      	bne.n	8004966 <HAL_TIM_Base_MspInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004926:	4b51      	ldr	r3, [pc, #324]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492c:	4a4f      	ldr	r2, [pc, #316]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004936:	4b4d      	ldr	r3, [pc, #308]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004944:	2200      	movs	r2, #0
 8004946:	2100      	movs	r1, #0
 8004948:	2019      	movs	r0, #25
 800494a:	f002 f9fc 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800494e:	2019      	movs	r0, #25
 8004950:	f002 fa13 	bl	8006d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	201a      	movs	r0, #26
 800495a:	f002 f9f4 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800495e:	201a      	movs	r0, #26
 8004960:	f002 fa0b 	bl	8006d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004964:	e07c      	b.n	8004a60 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496e:	d117      	bne.n	80049a0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004970:	4b3e      	ldr	r3, [pc, #248]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004976:	4a3d      	ldr	r2, [pc, #244]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004980:	4b3a      	ldr	r3, [pc, #232]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	201c      	movs	r0, #28
 8004994:	f002 f9d7 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004998:	201c      	movs	r0, #28
 800499a:	f002 f9ee 	bl	8006d7a <HAL_NVIC_EnableIRQ>
}
 800499e:	e05f      	b.n	8004a60 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a32      	ldr	r2, [pc, #200]	@ (8004a70 <HAL_TIM_Base_MspInit+0x16c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d117      	bne.n	80049da <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049b0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049ba:	4b2c      	ldr	r3, [pc, #176]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	201d      	movs	r0, #29
 80049ce:	f002 f9ba 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049d2:	201d      	movs	r0, #29
 80049d4:	f002 f9d1 	bl	8006d7a <HAL_NVIC_EnableIRQ>
}
 80049d8:	e042      	b.n	8004a60 <HAL_TIM_Base_MspInit+0x15c>
  else if(tim_baseHandle->Instance==TIM8)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a25      	ldr	r2, [pc, #148]	@ (8004a74 <HAL_TIM_Base_MspInit+0x170>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d13d      	bne.n	8004a60 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049e4:	4b21      	ldr	r3, [pc, #132]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ea:	4a20      	ldr	r2, [pc, #128]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049f4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 80049f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a02:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a12:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <HAL_TIM_Base_MspInit+0x168>)
 8004a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a20:	2308      	movs	r3, #8
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a24:	2302      	movs	r3, #2
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a30:	2303      	movs	r3, #3
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004a34:	f107 031c 	add.w	r3, r7, #28
 8004a38:	4619      	mov	r1, r3
 8004a3a:	480f      	ldr	r0, [pc, #60]	@ (8004a78 <HAL_TIM_Base_MspInit+0x174>)
 8004a3c:	f004 fe62 	bl	8009704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004a40:	2200      	movs	r2, #0
 8004a42:	2100      	movs	r1, #0
 8004a44:	202c      	movs	r0, #44	@ 0x2c
 8004a46:	f002 f97e 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004a4a:	202c      	movs	r0, #44	@ 0x2c
 8004a4c:	f002 f995 	bl	8006d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	202d      	movs	r0, #45	@ 0x2d
 8004a56:	f002 f976 	bl	8006d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004a5a:	202d      	movs	r0, #45	@ 0x2d
 8004a5c:	f002 f98d 	bl	8006d7a <HAL_NVIC_EnableIRQ>
}
 8004a60:	bf00      	nop
 8004a62:	3730      	adds	r7, #48	@ 0x30
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40010400 	.word	0x40010400
 8004a78:	58022000 	.word	0x58022000

08004a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	@ 0x30
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a63      	ldr	r2, [pc, #396]	@ (8004c28 <HAL_TIM_MspPostInit+0x1ac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d120      	bne.n	8004ae0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aa4:	4a61      	ldr	r2, [pc, #388]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004aae:	4b5f      	ldr	r3, [pc, #380]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ROG_Pin|GPIO_PIN_9|GPIO_PIN_8;
 8004abc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aca:	2302      	movs	r3, #2
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad2:	f107 031c 	add.w	r3, r7, #28
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4855      	ldr	r0, [pc, #340]	@ (8004c30 <HAL_TIM_MspPostInit+0x1b4>)
 8004ada:	f004 fe13 	bl	8009704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004ade:	e09e      	b.n	8004c1e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae8:	d140      	bne.n	8004b6c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aea:	4b50      	ldr	r3, [pc, #320]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004af0:	4a4e      	ldr	r2, [pc, #312]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004afa:	4b4c      	ldr	r3, [pc, #304]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b08:	4b48      	ldr	r3, [pc, #288]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b0e:	4a47      	ldr	r2, [pc, #284]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b18:	4b44      	ldr	r3, [pc, #272]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004b26:	f248 0302 	movw	r3, #32770	@ 0x8002
 8004b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b34:	2302      	movs	r3, #2
 8004b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3c:	f107 031c 	add.w	r3, r7, #28
 8004b40:	4619      	mov	r1, r3
 8004b42:	483b      	ldr	r0, [pc, #236]	@ (8004c30 <HAL_TIM_MspPostInit+0x1b4>)
 8004b44:	f004 fdde 	bl	8009704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b56:	2300      	movs	r3, #0
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5e:	f107 031c 	add.w	r3, r7, #28
 8004b62:	4619      	mov	r1, r3
 8004b64:	4833      	ldr	r0, [pc, #204]	@ (8004c34 <HAL_TIM_MspPostInit+0x1b8>)
 8004b66:	f004 fdcd 	bl	8009704 <HAL_GPIO_Init>
}
 8004b6a:	e058      	b.n	8004c1e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM3)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a31      	ldr	r2, [pc, #196]	@ (8004c38 <HAL_TIM_MspPostInit+0x1bc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d11f      	bne.n	8004bb6 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b76:	4b2d      	ldr	r3, [pc, #180]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b7e:	f043 0304 	orr.w	r3, r3, #4
 8004b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b86:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|sensorClk_Pin;
 8004b94:	23c0      	movs	r3, #192	@ 0xc0
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ba8:	f107 031c 	add.w	r3, r7, #28
 8004bac:	4619      	mov	r1, r3
 8004bae:	4823      	ldr	r0, [pc, #140]	@ (8004c3c <HAL_TIM_MspPostInit+0x1c0>)
 8004bb0:	f004 fda8 	bl	8009704 <HAL_GPIO_Init>
}
 8004bb4:	e033      	b.n	8004c1e <HAL_TIM_MspPostInit+0x1a2>
  else if(timHandle->Instance==TIM8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_TIM_MspPostInit+0x1c4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d12e      	bne.n	8004c1e <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc6:	4a19      	ldr	r2, [pc, #100]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd0:	4b16      	ldr	r3, [pc, #88]	@ (8004c2c <HAL_TIM_MspPostInit+0x1b0>)
 8004bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bde:	23c0      	movs	r3, #192	@ 0xc0
 8004be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004bf2:	f107 031c 	add.w	r3, r7, #28
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4812      	ldr	r0, [pc, #72]	@ (8004c44 <HAL_TIM_MspPostInit+0x1c8>)
 8004bfa:	f004 fd83 	bl	8009704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	2302      	movs	r3, #2
 8004c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c12:	f107 031c 	add.w	r3, r7, #28
 8004c16:	4619      	mov	r1, r3
 8004c18:	480a      	ldr	r0, [pc, #40]	@ (8004c44 <HAL_TIM_MspPostInit+0x1c8>)
 8004c1a:	f004 fd73 	bl	8009704 <HAL_GPIO_Init>
}
 8004c1e:	bf00      	nop
 8004c20:	3730      	adds	r7, #48	@ 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	58020000 	.word	0x58020000
 8004c34:	58020400 	.word	0x58020400
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	58020800 	.word	0x58020800
 8004c40:	40010400 	.word	0x40010400
 8004c44:	58022000 	.word	0x58022000

08004c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c4c:	f7ff fab6 	bl	80041bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c50:	480c      	ldr	r0, [pc, #48]	@ (8004c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c52:	490d      	ldr	r1, [pc, #52]	@ (8004c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c58:	e002      	b.n	8004c60 <LoopCopyDataInit>

08004c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c5e:	3304      	adds	r3, #4

08004c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c64:	d3f9      	bcc.n	8004c5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c66:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c68:	4c0a      	ldr	r4, [pc, #40]	@ (8004c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c6c:	e001      	b.n	8004c72 <LoopFillZerobss>

08004c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c70:	3204      	adds	r2, #4

08004c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c74:	d3fb      	bcc.n	8004c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c76:	f014 fed3 	bl	8019a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c7a:	f7fd ff63 	bl	8002b44 <main>
  bx  lr
 8004c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004c84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004c88:	24000294 	.word	0x24000294
  ldr r2, =_sidata
 8004c8c:	0801b6c0 	.word	0x0801b6c0
  ldr r2, =_sbss
 8004c90:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 8004c94:	240017c8 	.word	0x240017c8

08004c98 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c98:	e7fe      	b.n	8004c98 <ADC_IRQHandler>
	...

08004c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca2:	2003      	movs	r0, #3
 8004ca4:	f002 f844 	bl	8006d30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ca8:	f008 fb78 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <HAL_Init+0x68>)
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	4913      	ldr	r1, [pc, #76]	@ (8004d08 <HAL_Init+0x6c>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <HAL_Init+0x68>)
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <HAL_Init+0x6c>)
 8004cd0:	5cd3      	ldrb	r3, [r2, r3]
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8004d0c <HAL_Init+0x70>)
 8004cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d10 <HAL_Init+0x74>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ce6:	200f      	movs	r0, #15
 8004ce8:	f000 f814 	bl	8004d14 <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e002      	b.n	8004cfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004cf6:	f7ff f8a1 	bl	8003e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	58024400 	.word	0x58024400
 8004d08:	0801b210 	.word	0x0801b210
 8004d0c:	2400022c 	.word	0x2400022c
 8004d10:	24000228 	.word	0x24000228

08004d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d1c:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <HAL_InitTick+0x60>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e021      	b.n	8004d6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d28:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <HAL_InitTick+0x64>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <HAL_InitTick+0x60>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 f829 	bl	8006d96 <HAL_SYSTICK_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00e      	b.n	8004d6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d80a      	bhi.n	8004d6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d54:	2200      	movs	r2, #0
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	f001 fff3 	bl	8006d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <HAL_InitTick+0x68>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	24000234 	.word	0x24000234
 8004d78:	24000228 	.word	0x24000228
 8004d7c:	24000230 	.word	0x24000230

08004d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_IncTick+0x20>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <HAL_IncTick+0x24>)
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	24000234 	.word	0x24000234
 8004da4:	24000fbc 	.word	0x24000fbc

08004da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_GetTick+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	24000fbc 	.word	0x24000fbc

08004dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dc8:	f7ff ffee 	bl	8004da8 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d005      	beq.n	8004de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dda:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <HAL_Delay+0x44>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004de6:	bf00      	nop
 8004de8:	f7ff ffde 	bl	8004da8 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d8f7      	bhi.n	8004de8 <HAL_Delay+0x28>
  {
  }
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	24000234 	.word	0x24000234

08004e08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <HAL_GetREVID+0x14>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0c1b      	lsrs	r3, r3, #16
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	5c001000 	.word	0x5c001000

08004e20 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004e28:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 0202 	bic.w	r2, r3, #2
 8004e30:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	58003c00 	.word	0x58003c00

08004e48 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	58003c00 	.word	0x58003c00

08004e68 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004e72:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	4904      	ldr	r1, [pc, #16]	@ (8004e90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	58000400 	.word	0x58000400

08004e94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3360      	adds	r3, #96	@ 0x60
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	611a      	str	r2, [r3, #16]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3360      	adds	r3, #96	@ 0x60
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	601a      	str	r2, [r3, #0]
  }
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3330      	adds	r3, #48	@ 0x30
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	4413      	add	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	211f      	movs	r1, #31
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0e9b      	lsrs	r3, r3, #26
 8005002:	f003 011f 	and.w	r1, r3, #31
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f023 0203 	bic.w	r2, r3, #3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005054:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800506e:	b480      	push	{r7}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3314      	adds	r3, #20
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	0e5b      	lsrs	r3, r3, #25
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0d1b      	lsrs	r3, r3, #20
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2107      	movs	r1, #7
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	0d1b      	lsrs	r3, r3, #20
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	431a      	orrs	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0318 	and.w	r3, r3, #24
 80050e6:	4908      	ldr	r1, [pc, #32]	@ (8005108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80050e8:	40d9      	lsrs	r1, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	400b      	ands	r3, r1
 80050ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	000fffff 	.word	0x000fffff

0800510c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 031f 	and.w	r3, r3, #31
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6093      	str	r3, [r2, #8]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	5fffffc0 	.word	0x5fffffc0

08005168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800517c:	d101      	bne.n	8005182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800519e:	4013      	ands	r3, r2
 80051a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	6fffffc0 	.word	0x6fffffc0

080051b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051cc:	d101      	bne.n	80051d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <LL_ADC_Enable+0x24>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	7fffffc0 	.word	0x7fffffc0

08005208 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	4b05      	ldr	r3, [pc, #20]	@ (800522c <LL_ADC_Disable+0x24>)
 8005216:	4013      	ands	r3, r2
 8005218:	f043 0202 	orr.w	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	7fffffc0 	.word	0x7fffffc0

08005230 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <LL_ADC_IsEnabled+0x18>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_ADC_IsEnabled+0x1a>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d101      	bne.n	800526e <LL_ADC_IsDisableOngoing+0x18>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <LL_ADC_IsDisableOngoing+0x1a>
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <LL_ADC_REG_StartConversion+0x24>)
 800528a:	4013      	ands	r3, r2
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	7fffffc0 	.word	0x7fffffc0

080052a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d101      	bne.n	80052bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d101      	bne.n	80052e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b089      	sub	sp, #36	@ 0x24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e1c4      	b.n	8005694 <HAL_ADC_Init+0x3a4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	2b00      	cmp	r3, #0
 8005316:	d131      	bne.n	800537c <HAL_ADC_Init+0x8c>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a72      	ldr	r2, [pc, #456]	@ (80054e4 <HAL_ADC_Init+0x1f4>)
 800531c:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a71      	ldr	r2, [pc, #452]	@ (80054e8 <HAL_ADC_Init+0x1f8>)
 8005322:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a71      	ldr	r2, [pc, #452]	@ (80054ec <HAL_ADC_Init+0x1fc>)
 8005328:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a70      	ldr	r2, [pc, #448]	@ (80054f0 <HAL_ADC_Init+0x200>)
 800532e:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a70      	ldr	r2, [pc, #448]	@ (80054f4 <HAL_ADC_Init+0x204>)
 8005334:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a6f      	ldr	r2, [pc, #444]	@ (80054f8 <HAL_ADC_Init+0x208>)
 800533a:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a6f      	ldr	r2, [pc, #444]	@ (80054fc <HAL_ADC_Init+0x20c>)
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a6e      	ldr	r2, [pc, #440]	@ (8005500 <HAL_ADC_Init+0x210>)
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a6d      	ldr	r2, [pc, #436]	@ (8005504 <HAL_ADC_Init+0x214>)
 800534e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (hadc->MspInitCallback == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <HAL_ADC_Init+0x74>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a6a      	ldr	r2, [pc, #424]	@ (8005508 <HAL_ADC_Init+0x218>)
 8005360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fef1 	bl	8005168 <LL_ADC_IsDeepPowerDownEnabled>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <HAL_ADC_Init+0xa6>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fed7 	bl	8005144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff ff0c 	bl	80051b8 <LL_ADC_IsInternalRegulatorEnabled>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d114      	bne.n	80053d0 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fef0 	bl	8005190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b0:	4b56      	ldr	r3, [pc, #344]	@ (800550c <HAL_ADC_Init+0x21c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	099b      	lsrs	r3, r3, #6
 80053b6:	4a56      	ldr	r2, [pc, #344]	@ (8005510 <HAL_ADC_Init+0x220>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	3301      	adds	r3, #1
 80053c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053c2:	e002      	b.n	80053ca <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f9      	bne.n	80053c4 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff feef 	bl	80051b8 <LL_ADC_IsInternalRegulatorEnabled>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10d      	bne.n	80053fc <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e4:	f043 0210 	orr.w	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff4f 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005406:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 8136 	bne.w	8005682 <HAL_ADC_Init+0x392>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 8132 	bne.w	8005682 <HAL_ADC_Init+0x392>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005422:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005426:	f043 0202 	orr.w	r2, r3, #2
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fefc 	bl	8005230 <LL_ADC_IsEnabled>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d136      	bne.n	80054ac <HAL_ADC_Init+0x1bc>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a34      	ldr	r2, [pc, #208]	@ (8005514 <HAL_ADC_Init+0x224>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_ADC_Init+0x162>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a32      	ldr	r2, [pc, #200]	@ (8005518 <HAL_ADC_Init+0x228>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10e      	bne.n	8005470 <HAL_ADC_Init+0x180>
 8005452:	4830      	ldr	r0, [pc, #192]	@ (8005514 <HAL_ADC_Init+0x224>)
 8005454:	f7ff feec 	bl	8005230 <LL_ADC_IsEnabled>
 8005458:	4604      	mov	r4, r0
 800545a:	482f      	ldr	r0, [pc, #188]	@ (8005518 <HAL_ADC_Init+0x228>)
 800545c:	f7ff fee8 	bl	8005230 <LL_ADC_IsEnabled>
 8005460:	4603      	mov	r3, r0
 8005462:	4323      	orrs	r3, r4
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e008      	b.n	8005482 <HAL_ADC_Init+0x192>
 8005470:	482a      	ldr	r0, [pc, #168]	@ (800551c <HAL_ADC_Init+0x22c>)
 8005472:	f7ff fedd 	bl	8005230 <LL_ADC_IsEnabled>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d012      	beq.n	80054ac <HAL_ADC_Init+0x1bc>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_ADC_Init+0x224>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_ADC_Init+0x1aa>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a20      	ldr	r2, [pc, #128]	@ (8005518 <HAL_ADC_Init+0x228>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_ADC_Init+0x1ae>
 800549a:	4a21      	ldr	r2, [pc, #132]	@ (8005520 <HAL_ADC_Init+0x230>)
 800549c:	e000      	b.n	80054a0 <HAL_ADC_Init+0x1b0>
 800549e:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <HAL_ADC_Init+0x234>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7ff fcf4 	bl	8004e94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80054ac:	f7ff fcac 	bl	8004e08 <HAL_GetREVID>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d936      	bls.n	8005528 <HAL_ADC_Init+0x238>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d132      	bne.n	8005528 <HAL_ADC_Init+0x238>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7d5b      	ldrb	r3, [r3, #21]
 80054c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80054cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80054d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7f1b      	ldrb	r3, [r3, #28]
 80054d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80054da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80054dc:	f043 030c 	orr.w	r3, r3, #12
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e02f      	b.n	8005544 <HAL_ADC_Init+0x254>
 80054e4:	08002fe5 	.word	0x08002fe5
 80054e8:	08005df1 	.word	0x08005df1
 80054ec:	08005e05 	.word	0x08005e05
 80054f0:	08005e19 	.word	0x08005e19
 80054f4:	08006b2d 	.word	0x08006b2d
 80054f8:	08006b41 	.word	0x08006b41
 80054fc:	08006b55 	.word	0x08006b55
 8005500:	08006b69 	.word	0x08006b69
 8005504:	08006b7d 	.word	0x08006b7d
 8005508:	08000739 	.word	0x08000739
 800550c:	24000228 	.word	0x24000228
 8005510:	053e2d63 	.word	0x053e2d63
 8005514:	40022000 	.word	0x40022000
 8005518:	40022100 	.word	0x40022100
 800551c:	58026000 	.word	0x58026000
 8005520:	40022300 	.word	0x40022300
 8005524:	58026300 	.word	0x58026300
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7d5b      	ldrb	r3, [r3, #21]
 800552c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005532:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005538:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7f1b      	ldrb	r3, [r3, #28]
 800553e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7f1b      	ldrb	r3, [r3, #28]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_ADC_Init+0x26a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	3b01      	subs	r3, #1
 8005552:	045b      	lsls	r3, r3, #17
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_ADC_Init+0x286>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_ADC_Init+0x3ac>)
 800557e:	4013      	ands	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	430b      	orrs	r3, r1
 8005588:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fe88 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005594:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fe95 	bl	80052ca <LL_ADC_INJ_IsConversionOngoing>
 80055a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d14a      	bne.n	800563e <HAL_ADC_Init+0x34e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d147      	bne.n	800563e <HAL_ADC_Init+0x34e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7d1b      	ldrb	r3, [r3, #20]
 80055b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	4b37      	ldr	r3, [pc, #220]	@ (80056a0 <HAL_ADC_Init+0x3b0>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d11b      	bne.n	8005612 <HAL_ADC_Init+0x322>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	4b2f      	ldr	r3, [pc, #188]	@ (80056a4 <HAL_ADC_Init+0x3b4>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055ee:	3a01      	subs	r2, #1
 80055f0:	0411      	lsls	r1, r2, #16
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80055fc:	4311      	orrs	r1, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005602:	430a      	orrs	r2, r1
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	611a      	str	r2, [r3, #16]
 8005610:	e007      	b.n	8005622 <HAL_ADC_Init+0x332>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f8d5 	bl	80067e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10c      	bne.n	8005660 <HAL_ADC_Init+0x370>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564c:	f023 010f 	bic.w	r1, r3, #15
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
 800565e:	e007      	b.n	8005670 <HAL_ADC_Init+0x380>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020f 	bic.w	r2, r2, #15
 800566e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	f023 0303 	bic.w	r3, r3, #3
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005680:	e007      	b.n	8005692 <HAL_ADC_Init+0x3a2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f043 0210 	orr.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3724      	adds	r7, #36	@ 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd90      	pop	{r4, r7, pc}
 800569c:	fff0c003 	.word	0xfff0c003
 80056a0:	ffffbffc 	.word	0xffffbffc
 80056a4:	fc00f81e 	.word	0xfc00f81e

080056a8 <HAL_ADC_RegisterCallback>:
  *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID, pADC_CallbackTypeDef pCallback)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	460b      	mov	r3, r1
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e080      	b.n	80057d2 <HAL_ADC_RegisterCallback+0x12a>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d054      	beq.n	8005786 <HAL_ADC_RegisterCallback+0xde>
  {
    switch (CallbackID)
 80056dc:	7afb      	ldrb	r3, [r7, #11]
 80056de:	2b0a      	cmp	r3, #10
 80056e0:	d848      	bhi.n	8005774 <HAL_ADC_RegisterCallback+0xcc>
 80056e2:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_ADC_RegisterCallback+0x40>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800571d 	.word	0x0800571d
 80056f0:	08005725 	.word	0x08005725
 80056f4:	0800572d 	.word	0x0800572d
 80056f8:	08005735 	.word	0x08005735
 80056fc:	0800573d 	.word	0x0800573d
 8005700:	08005745 	.word	0x08005745
 8005704:	0800574d 	.word	0x0800574d
 8005708:	08005757 	.word	0x08005757
 800570c:	08005761 	.word	0x08005761
 8005710:	0800576b 	.word	0x0800576b
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800571a:	e059      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005722:	e055      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800572a:	e051      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005732:	e04d      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800573a:	e049      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
        hadc->InjectedQueueOverflowCallback = pCallback;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005742:	e045      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800574a:	e041      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8005754:	e03c      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800575e:	e037      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8005768:	e032      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8005772:	e02d      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	f043 0210 	orr.w	r2, r3, #16
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Return error status */
        status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
        break;
 8005784:	e024      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	2b00      	cmp	r3, #0
 800578c:	d118      	bne.n	80057c0 <HAL_ADC_RegisterCallback+0x118>
  {
    switch (CallbackID)
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	2b09      	cmp	r3, #9
 8005792:	d002      	beq.n	800579a <HAL_ADC_RegisterCallback+0xf2>
 8005794:	2b0a      	cmp	r3, #10
 8005796:	d005      	beq.n	80057a4 <HAL_ADC_RegisterCallback+0xfc>
 8005798:	e009      	b.n	80057ae <HAL_ADC_RegisterCallback+0x106>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80057a2:	e015      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80057ac:	e010      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	f043 0210 	orr.w	r2, r3, #16
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Return error status */
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
        break;
 80057be:	e007      	b.n	80057d0 <HAL_ADC_RegisterCallback+0x128>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c4:	f043 0210 	orr.w	r2, r3, #16
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Return error status */
    status =  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a55      	ldr	r2, [pc, #340]	@ (8005948 <HAL_ADC_Start_DMA+0x168>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_ADC_Start_DMA+0x20>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a54      	ldr	r2, [pc, #336]	@ (800594c <HAL_ADC_Start_DMA+0x16c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_Start_DMA+0x24>
 8005800:	4b53      	ldr	r3, [pc, #332]	@ (8005950 <HAL_ADC_Start_DMA+0x170>)
 8005802:	e000      	b.n	8005806 <HAL_ADC_Start_DMA+0x26>
 8005804:	4b53      	ldr	r3, [pc, #332]	@ (8005954 <HAL_ADC_Start_DMA+0x174>)
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fc80 	bl	800510c <LL_ADC_GetMultimode>
 800580c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fd46 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 808c 	bne.w	8005938 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_ADC_Start_DMA+0x4e>
 800582a:	2302      	movs	r3, #2
 800582c:	e087      	b.n	800593e <HAL_ADC_Start_DMA+0x15e>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b05      	cmp	r3, #5
 8005840:	d002      	beq.n	8005848 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b09      	cmp	r3, #9
 8005846:	d170      	bne.n	800592a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fe4b 	bl	80064e4 <ADC_Enable>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d163      	bne.n	8005920 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800585c:	4b3e      	ldr	r3, [pc, #248]	@ (8005958 <HAL_ADC_Start_DMA+0x178>)
 800585e:	4013      	ands	r3, r2
 8005860:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a37      	ldr	r2, [pc, #220]	@ (800594c <HAL_ADC_Start_DMA+0x16c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d002      	beq.n	8005878 <HAL_ADC_Start_DMA+0x98>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e000      	b.n	800587a <HAL_ADC_Start_DMA+0x9a>
 8005878:	4b33      	ldr	r3, [pc, #204]	@ (8005948 <HAL_ADC_Start_DMA+0x168>)
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	4293      	cmp	r3, r2
 8005880:	d002      	beq.n	8005888 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	f023 0206 	bic.w	r2, r3, #6
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80058ac:	e002      	b.n	80058b4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b8:	4a28      	ldr	r2, [pc, #160]	@ (800595c <HAL_ADC_Start_DMA+0x17c>)
 80058ba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c0:	4a27      	ldr	r2, [pc, #156]	@ (8005960 <HAL_ADC_Start_DMA+0x180>)
 80058c2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	4a26      	ldr	r2, [pc, #152]	@ (8005964 <HAL_ADC_Start_DMA+0x184>)
 80058ca:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	221c      	movs	r2, #28
 80058d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0210 	orr.w	r2, r2, #16
 80058ea:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7ff fb93 	bl	8005022 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3340      	adds	r3, #64	@ 0x40
 8005906:	4619      	mov	r1, r3
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f001 fdac 	bl	8007468 <HAL_DMA_Start_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fcaf 	bl	800527c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800591e:	e00d      	b.n	800593c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8005928:	e008      	b.n	800593c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005936:	e001      	b.n	800593c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005938:	2302      	movs	r3, #2
 800593a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40022000 	.word	0x40022000
 800594c:	40022100 	.word	0x40022100
 8005950:	40022300 	.word	0x40022300
 8005954:	58026300 	.word	0x58026300
 8005958:	fffff0fe 	.word	0xfffff0fe
 800595c:	080066b7 	.word	0x080066b7
 8005960:	08006793 	.word	0x08006793
 8005964:	080067b1 	.word	0x080067b1

08005968 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a89      	ldr	r2, [pc, #548]	@ (8005bb0 <HAL_ADC_IRQHandler+0x248>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_ADC_IRQHandler+0x30>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a88      	ldr	r2, [pc, #544]	@ (8005bb4 <HAL_ADC_IRQHandler+0x24c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_ADC_IRQHandler+0x34>
 8005998:	4b87      	ldr	r3, [pc, #540]	@ (8005bb8 <HAL_ADC_IRQHandler+0x250>)
 800599a:	e000      	b.n	800599e <HAL_ADC_IRQHandler+0x36>
 800599c:	4b87      	ldr	r3, [pc, #540]	@ (8005bbc <HAL_ADC_IRQHandler+0x254>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fbb4 	bl	800510c <LL_ADC_GetMultimode>
 80059a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d019      	beq.n	80059e4 <HAL_ADC_IRQHandler+0x7c>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <HAL_ADC_IRQHandler+0x7c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2202      	movs	r2, #2
 80059e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_ADC_IRQHandler+0x90>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <HAL_ADC_IRQHandler+0xa6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8084 	beq.w	8005b0c <HAL_ADC_IRQHandler+0x1a4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07e      	beq.n	8005b0c <HAL_ADC_IRQHandler+0x1a4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <HAL_ADC_IRQHandler+0xbe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff faba 	bl	8004fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d062      	beq.n	8005afc <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005bb4 <HAL_ADC_IRQHandler+0x24c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d002      	beq.n	8005a46 <HAL_ADC_IRQHandler+0xde>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	e000      	b.n	8005a48 <HAL_ADC_IRQHandler+0xe0>
 8005a46:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb0 <HAL_ADC_IRQHandler+0x248>)
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d008      	beq.n	8005a62 <HAL_ADC_IRQHandler+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_ADC_IRQHandler+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d002      	beq.n	8005a62 <HAL_ADC_IRQHandler+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d104      	bne.n	8005a6c <HAL_ADC_IRQHandler+0x104>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	e00c      	b.n	8005a86 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a50      	ldr	r2, [pc, #320]	@ (8005bb4 <HAL_ADC_IRQHandler+0x24c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d002      	beq.n	8005a7c <HAL_ADC_IRQHandler+0x114>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	e000      	b.n	8005a7e <HAL_ADC_IRQHandler+0x116>
 8005a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb0 <HAL_ADC_IRQHandler+0x248>)
 8005a7e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d135      	bne.n	8005afc <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d12e      	bne.n	8005afc <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fbfe 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11a      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 020c 	bic.w	r2, r2, #12
 8005abc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d112      	bne.n	8005afc <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ae2:	e00b      	b.n	8005afc <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae8:	f043 0210 	orr.w	r2, r3, #16
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af4:	f043 0201 	orr.w	r2, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	220c      	movs	r2, #12
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <HAL_ADC_IRQHandler+0x1b8>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <HAL_ADC_IRQHandler+0x1d0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80a2 	beq.w	8005c70 <HAL_ADC_IRQHandler+0x308>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 809c 	beq.w	8005c70 <HAL_ADC_IRQHandler+0x308>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <HAL_ADC_IRQHandler+0x1e8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fa77 	bl	8005048 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005b5a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fa1f 	bl	8004fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b66:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	@ (8005bb4 <HAL_ADC_IRQHandler+0x24c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d002      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x210>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	e000      	b.n	8005b7a <HAL_ADC_IRQHandler+0x212>
 8005b78:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <HAL_ADC_IRQHandler+0x248>)
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d008      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d002      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d104      	bne.n	8005b9e <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	e015      	b.n	8005bca <HAL_ADC_IRQHandler+0x262>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a04      	ldr	r2, [pc, #16]	@ (8005bb4 <HAL_ADC_IRQHandler+0x24c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_ADC_IRQHandler+0x258>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	e009      	b.n	8005bc2 <HAL_ADC_IRQHandler+0x25a>
 8005bae:	bf00      	nop
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40022100 	.word	0x40022100
 8005bb8:	40022300 	.word	0x40022300
 8005bbc:	58026300 	.word	0x58026300
 8005bc0:	4b87      	ldr	r3, [pc, #540]	@ (8005de0 <HAL_ADC_IRQHandler+0x478>)
 8005bc2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d047      	beq.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_ADC_IRQHandler+0x282>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03f      	beq.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d13a      	bne.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d133      	bne.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d12e      	bne.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fb5f 	bl	80052ca <LL_ADC_INJ_IsConversionOngoing>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11a      	bne.n	8005c48 <HAL_ADC_IRQHandler+0x2e0>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c20:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d112      	bne.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c46:	e00b      	b.n	8005c60 <HAL_ADC_IRQHandler+0x2f8>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4c:	f043 0210 	orr.w	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c58:	f043 0201 	orr.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	659a      	str	r2, [r3, #88]	@ 0x58
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2260      	movs	r2, #96	@ 0x60
 8005c6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d012      	beq.n	8005ca0 <HAL_ADC_IRQHandler+0x338>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_ADC_IRQHandler+0x338>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2280      	movs	r2, #128	@ 0x80
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d013      	beq.n	8005cd2 <HAL_ADC_IRQHandler+0x36a>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_ADC_IRQHandler+0x36a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d014      	beq.n	8005d06 <HAL_ADC_IRQHandler+0x39e>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00f      	beq.n	8005d06 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d044      	beq.n	8005d9a <HAL_ADC_IRQHandler+0x432>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03f      	beq.n	8005d9a <HAL_ADC_IRQHandler+0x432>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_ADC_IRQHandler+0x3c0>
    {
      overrun_error = 1UL;
 8005d22:	2301      	movs	r3, #1
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d26:	e021      	b.n	8005d6c <HAL_ADC_IRQHandler+0x404>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d015      	beq.n	8005d5a <HAL_ADC_IRQHandler+0x3f2>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2b      	ldr	r2, [pc, #172]	@ (8005de0 <HAL_ADC_IRQHandler+0x478>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_ADC_IRQHandler+0x3da>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a29      	ldr	r2, [pc, #164]	@ (8005de4 <HAL_ADC_IRQHandler+0x47c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_ADC_IRQHandler+0x3de>
 8005d42:	4b29      	ldr	r3, [pc, #164]	@ (8005de8 <HAL_ADC_IRQHandler+0x480>)
 8005d44:	e000      	b.n	8005d48 <HAL_ADC_IRQHandler+0x3e0>
 8005d46:	4b29      	ldr	r3, [pc, #164]	@ (8005dec <HAL_ADC_IRQHandler+0x484>)
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff f9ed 	bl	8005128 <LL_ADC_GetMultiDMATransfer>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_ADC_IRQHandler+0x404>
        {
          overrun_error = 1UL;
 8005d54:	2301      	movs	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	e008      	b.n	8005d6c <HAL_ADC_IRQHandler+0x404>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_ADC_IRQHandler+0x404>
        {
          overrun_error = 1UL;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10f      	bne.n	8005d92 <HAL_ADC_IRQHandler+0x42a>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d82:	f043 0202 	orr.w	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	659a      	str	r2, [r3, #88]	@ 0x58
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d019      	beq.n	8005dd8 <HAL_ADC_IRQHandler+0x470>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d014      	beq.n	8005dd8 <HAL_ADC_IRQHandler+0x470>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f043 0208 	orr.w	r2, r3, #8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40022000 	.word	0x40022000
 8005de4:	40022100 	.word	0x40022100
 8005de8:	40022300 	.word	0x40022300
 8005dec:	58026300 	.word	0x58026300

08005df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b0a1      	sub	sp, #132	@ 0x84
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a65      	ldr	r2, [pc, #404]	@ (8005fdc <HAL_ADC_ConfigChannel+0x1b0>)
 8005e46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x2a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e32e      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x688>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fa1e 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 8313 	bne.w	8006496 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	db2c      	blt.n	8005ed2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x6a>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0e9b      	lsrs	r3, r3, #26
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	e016      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x98>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8005eae:	2320      	movs	r3, #32
 8005eb0:	e003      	b.n	8005eba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8005eb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb4:	fab3 f383 	clz	r3, r3
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	69d1      	ldr	r1, [r2, #28]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7ff f873 	bl	8004fca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f9db 	bl	80052a4 <LL_ADC_REG_IsConversionOngoing>
 8005eee:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff f9e8 	bl	80052ca <LL_ADC_INJ_IsConversionOngoing>
 8005efa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80b8 	bne.w	8006074 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80b4 	bne.w	8006074 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f7ff f8a8 	bl	800506e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f1e:	4b30      	ldr	r3, [pc, #192]	@ (8005fe0 <HAL_ADC_ConfigChannel+0x1b4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f2a:	d10b      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x118>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	e01d      	b.n	8005f80 <HAL_ADC_ConfigChannel+0x154>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x13e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	e00a      	b.n	8005f80 <HAL_ADC_ConfigChannel+0x154>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d02c      	beq.n	8005fe4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f98:	f7fe ffb0 	bl	8004efc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6919      	ldr	r1, [r3, #16]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	7e5b      	ldrb	r3, [r3, #25]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d102      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x186>
 8005fac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005fb0:	e000      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x188>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f7fe ffda 	bl	8004f6e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6919      	ldr	r1, [r3, #16]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	7e1b      	ldrb	r3, [r3, #24]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d102      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x1a4>
 8005fca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fce:	e000      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1a6>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fe ffb2 	bl	8004f3c <LL_ADC_SetDataRightShift>
 8005fd8:	e04c      	b.n	8006074 <HAL_ADC_ConfigChannel+0x248>
 8005fda:	bf00      	nop
 8005fdc:	47ff0000 	.word	0x47ff0000
 8005fe0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	069b      	lsls	r3, r3, #26
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006006:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800600e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	069b      	lsls	r3, r3, #26
 8006018:	429a      	cmp	r2, r3
 800601a:	d107      	bne.n	800602c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800602a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	069b      	lsls	r3, r3, #26
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800604e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	069b      	lsls	r3, r3, #26
 8006060:	429a      	cmp	r2, r3
 8006062:	d107      	bne.n	8006074 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006072:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff f8d9 	bl	8005230 <LL_ADC_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 8211 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	461a      	mov	r2, r3
 8006094:	f7ff f816 	bl	80050c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4aa1      	ldr	r2, [pc, #644]	@ (8006324 <HAL_ADC_ConfigChannel+0x4f8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f040 812e 	bne.w	8006300 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x2a0>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	0e9b      	lsrs	r3, r3, #26
 80060ba:	3301      	adds	r3, #1
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	bf94      	ite	ls
 80060c4:	2301      	movls	r3, #1
 80060c6:	2300      	movhi	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e019      	b.n	8006100 <HAL_ADC_ConfigChannel+0x2d4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80060da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80060de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80060e4:	2320      	movs	r3, #32
 80060e6:	e003      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80060e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	3301      	adds	r3, #1
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	bf94      	ite	ls
 80060fa:	2301      	movls	r3, #1
 80060fc:	2300      	movhi	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006100:	2b00      	cmp	r3, #0
 8006102:	d079      	beq.n	80061f8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800610c:	2b00      	cmp	r3, #0
 800610e:	d107      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x2f4>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	0e9b      	lsrs	r3, r3, #26
 8006116:	3301      	adds	r3, #1
 8006118:	069b      	lsls	r3, r3, #26
 800611a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800611e:	e015      	b.n	800614c <HAL_ADC_ConfigChannel+0x320>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006128:	fa93 f3a3 	rbit	r3, r3
 800612c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800612e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006130:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006138:	2320      	movs	r3, #32
 800613a:	e003      	b.n	8006144 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800613c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800613e:	fab3 f383 	clz	r3, r3
 8006142:	b2db      	uxtb	r3, r3
 8006144:	3301      	adds	r3, #1
 8006146:	069b      	lsls	r3, r3, #26
 8006148:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_ADC_ConfigChannel+0x340>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	0e9b      	lsrs	r3, r3, #26
 800615e:	3301      	adds	r3, #1
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2101      	movs	r1, #1
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	e017      	b.n	800619c <HAL_ADC_ConfigChannel+0x370>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006174:	fa93 f3a3 	rbit	r3, r3
 8006178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800617a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800617e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006184:	2320      	movs	r3, #32
 8006186:	e003      	b.n	8006190 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618a:	fab3 f383 	clz	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	3301      	adds	r3, #1
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2101      	movs	r1, #1
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	ea42 0103 	orr.w	r1, r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_ADC_ConfigChannel+0x396>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	0e9b      	lsrs	r3, r3, #26
 80061b2:	3301      	adds	r3, #1
 80061b4:	f003 021f 	and.w	r2, r3, #31
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	051b      	lsls	r3, r3, #20
 80061c0:	e018      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x3c8>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80061da:	2320      	movs	r3, #32
 80061dc:	e003      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	fab3 f383 	clz	r3, r3
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	f003 021f 	and.w	r2, r3, #31
 80061ec:	4613      	mov	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061f4:	430b      	orrs	r3, r1
 80061f6:	e07e      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <HAL_ADC_ConfigChannel+0x3e8>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	0e9b      	lsrs	r3, r3, #26
 800620a:	3301      	adds	r3, #1
 800620c:	069b      	lsls	r3, r3, #26
 800620e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006212:	e015      	b.n	8006240 <HAL_ADC_ConfigChannel+0x414>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800622c:	2320      	movs	r3, #32
 800622e:	e003      	b.n	8006238 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	3301      	adds	r3, #1
 800623a:	069b      	lsls	r3, r3, #26
 800623c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <HAL_ADC_ConfigChannel+0x434>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	0e9b      	lsrs	r3, r3, #26
 8006252:	3301      	adds	r3, #1
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2101      	movs	r1, #1
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	e017      	b.n	8006290 <HAL_ADC_ConfigChannel+0x464>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	61bb      	str	r3, [r7, #24]
  return result;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006278:	2320      	movs	r3, #32
 800627a:	e003      	b.n	8006284 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	fab3 f383 	clz	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	3301      	adds	r3, #1
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	ea42 0103 	orr.w	r1, r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10d      	bne.n	80062bc <HAL_ADC_ConfigChannel+0x490>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0e9b      	lsrs	r3, r3, #26
 80062a6:	3301      	adds	r3, #1
 80062a8:	f003 021f 	and.w	r2, r3, #31
 80062ac:	4613      	mov	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	4413      	add	r3, r2
 80062b2:	3b1e      	subs	r3, #30
 80062b4:	051b      	lsls	r3, r3, #20
 80062b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80062ba:	e01b      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x4c8>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	fa93 f3a3 	rbit	r3, r3
 80062c8:	60fb      	str	r3, [r7, #12]
  return result;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80062d4:	2320      	movs	r3, #32
 80062d6:	e003      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	3301      	adds	r3, #1
 80062e2:	f003 021f 	and.w	r2, r3, #31
 80062e6:	4613      	mov	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4413      	add	r3, r2
 80062ec:	3b1e      	subs	r3, #30
 80062ee:	051b      	lsls	r3, r3, #20
 80062f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062f4:	430b      	orrs	r3, r1
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	6892      	ldr	r2, [r2, #8]
 80062fa:	4619      	mov	r1, r3
 80062fc:	f7fe feb7 	bl	800506e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f280 80cf 	bge.w	80064a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a06      	ldr	r2, [pc, #24]	@ (8006328 <HAL_ADC_ConfigChannel+0x4fc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_ADC_ConfigChannel+0x4f2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a04      	ldr	r2, [pc, #16]	@ (800632c <HAL_ADC_ConfigChannel+0x500>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d10a      	bne.n	8006334 <HAL_ADC_ConfigChannel+0x508>
 800631e:	4b04      	ldr	r3, [pc, #16]	@ (8006330 <HAL_ADC_ConfigChannel+0x504>)
 8006320:	e009      	b.n	8006336 <HAL_ADC_ConfigChannel+0x50a>
 8006322:	bf00      	nop
 8006324:	47ff0000 	.word	0x47ff0000
 8006328:	40022000 	.word	0x40022000
 800632c:	40022100 	.word	0x40022100
 8006330:	40022300 	.word	0x40022300
 8006334:	4b61      	ldr	r3, [pc, #388]	@ (80064bc <HAL_ADC_ConfigChannel+0x690>)
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fdd2 	bl	8004ee0 <LL_ADC_GetCommonPathInternalCh>
 800633c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a5f      	ldr	r2, [pc, #380]	@ (80064c0 <HAL_ADC_ConfigChannel+0x694>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_ADC_ConfigChannel+0x526>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5d      	ldr	r2, [pc, #372]	@ (80064c4 <HAL_ADC_ConfigChannel+0x698>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d10e      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x544>
 8006352:	485b      	ldr	r0, [pc, #364]	@ (80064c0 <HAL_ADC_ConfigChannel+0x694>)
 8006354:	f7fe ff6c 	bl	8005230 <LL_ADC_IsEnabled>
 8006358:	4604      	mov	r4, r0
 800635a:	485a      	ldr	r0, [pc, #360]	@ (80064c4 <HAL_ADC_ConfigChannel+0x698>)
 800635c:	f7fe ff68 	bl	8005230 <LL_ADC_IsEnabled>
 8006360:	4603      	mov	r3, r0
 8006362:	4323      	orrs	r3, r4
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e008      	b.n	8006382 <HAL_ADC_ConfigChannel+0x556>
 8006370:	4855      	ldr	r0, [pc, #340]	@ (80064c8 <HAL_ADC_ConfigChannel+0x69c>)
 8006372:	f7fe ff5d 	bl	8005230 <LL_ADC_IsEnabled>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d07d      	beq.n	8006482 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a50      	ldr	r2, [pc, #320]	@ (80064cc <HAL_ADC_ConfigChannel+0x6a0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d130      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x5c6>
 8006390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d12b      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a4a      	ldr	r2, [pc, #296]	@ (80064c8 <HAL_ADC_ConfigChannel+0x69c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	f040 8081 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a45      	ldr	r2, [pc, #276]	@ (80064c0 <HAL_ADC_ConfigChannel+0x694>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_ADC_ConfigChannel+0x58e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a43      	ldr	r2, [pc, #268]	@ (80064c4 <HAL_ADC_ConfigChannel+0x698>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <HAL_ADC_ConfigChannel+0x592>
 80063ba:	4a45      	ldr	r2, [pc, #276]	@ (80064d0 <HAL_ADC_ConfigChannel+0x6a4>)
 80063bc:	e000      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x594>
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <HAL_ADC_ConfigChannel+0x690>)
 80063c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7fe fd76 	bl	8004eba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063ce:	4b41      	ldr	r3, [pc, #260]	@ (80064d4 <HAL_ADC_ConfigChannel+0x6a8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	4a40      	ldr	r2, [pc, #256]	@ (80064d8 <HAL_ADC_ConfigChannel+0x6ac>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	099b      	lsrs	r3, r3, #6
 80063dc:	3301      	adds	r3, #1
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063e2:	e002      	b.n	80063ea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f9      	bne.n	80063e4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063f0:	e05a      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a39      	ldr	r2, [pc, #228]	@ (80064dc <HAL_ADC_ConfigChannel+0x6b0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d11e      	bne.n	800643a <HAL_ADC_ConfigChannel+0x60e>
 80063fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d119      	bne.n	800643a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2f      	ldr	r2, [pc, #188]	@ (80064c8 <HAL_ADC_ConfigChannel+0x69c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d14b      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <HAL_ADC_ConfigChannel+0x694>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_ADC_ConfigChannel+0x5f8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <HAL_ADC_ConfigChannel+0x698>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x5fc>
 8006424:	4a2a      	ldr	r2, [pc, #168]	@ (80064d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8006426:	e000      	b.n	800642a <HAL_ADC_ConfigChannel+0x5fe>
 8006428:	4a24      	ldr	r2, [pc, #144]	@ (80064bc <HAL_ADC_ConfigChannel+0x690>)
 800642a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fd41 	bl	8004eba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006438:	e036      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a28      	ldr	r2, [pc, #160]	@ (80064e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d131      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
 8006444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d12c      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <HAL_ADC_ConfigChannel+0x69c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d127      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <HAL_ADC_ConfigChannel+0x694>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_ADC_ConfigChannel+0x640>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <HAL_ADC_ConfigChannel+0x698>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d101      	bne.n	8006470 <HAL_ADC_ConfigChannel+0x644>
 800646c:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800646e:	e000      	b.n	8006472 <HAL_ADC_ConfigChannel+0x646>
 8006470:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <HAL_ADC_ConfigChannel+0x690>)
 8006472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fe fd1d 	bl	8004eba <LL_ADC_SetCommonPathInternalCh>
 8006480:	e012      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006494:	e008      	b.n	80064a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80064b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3784      	adds	r7, #132	@ 0x84
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd90      	pop	{r4, r7, pc}
 80064bc:	58026300 	.word	0x58026300
 80064c0:	40022000 	.word	0x40022000
 80064c4:	40022100 	.word	0x40022100
 80064c8:	58026000 	.word	0x58026000
 80064cc:	cb840000 	.word	0xcb840000
 80064d0:	40022300 	.word	0x40022300
 80064d4:	24000228 	.word	0x24000228
 80064d8:	053e2d63 	.word	0x053e2d63
 80064dc:	c7520000 	.word	0xc7520000
 80064e0:	cfb80000 	.word	0xcfb80000

080064e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fe9d 	bl	8005230 <LL_ADC_IsEnabled>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d16e      	bne.n	80065da <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	4b38      	ldr	r3, [pc, #224]	@ (80065e4 <ADC_Enable+0x100>)
 8006504:	4013      	ands	r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f043 0210 	orr.w	r2, r3, #16
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651a:	f043 0201 	orr.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e05a      	b.n	80065dc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fe58 	bl	80051e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006530:	f7fe fc3a 	bl	8004da8 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2b      	ldr	r2, [pc, #172]	@ (80065e8 <ADC_Enable+0x104>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <ADC_Enable+0x66>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a29      	ldr	r2, [pc, #164]	@ (80065ec <ADC_Enable+0x108>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <ADC_Enable+0x6a>
 800654a:	4b29      	ldr	r3, [pc, #164]	@ (80065f0 <ADC_Enable+0x10c>)
 800654c:	e000      	b.n	8006550 <ADC_Enable+0x6c>
 800654e:	4b29      	ldr	r3, [pc, #164]	@ (80065f4 <ADC_Enable+0x110>)
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fddb 	bl	800510c <LL_ADC_GetMultimode>
 8006556:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a23      	ldr	r2, [pc, #140]	@ (80065ec <ADC_Enable+0x108>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d002      	beq.n	8006568 <ADC_Enable+0x84>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	e000      	b.n	800656a <ADC_Enable+0x86>
 8006568:	4b1f      	ldr	r3, [pc, #124]	@ (80065e8 <ADC_Enable+0x104>)
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d130      	bne.n	80065da <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006578:	e028      	b.n	80065cc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fe56 	bl	8005230 <LL_ADC_IsEnabled>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fe26 	bl	80051e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006594:	f7fe fc08 	bl	8004da8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d914      	bls.n	80065cc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d00d      	beq.n	80065cc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b4:	f043 0210 	orr.w	r2, r3, #16
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c0:	f043 0201 	orr.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e007      	b.n	80065dc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d1cf      	bne.n	800657a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	8000003f 	.word	0x8000003f
 80065e8:	40022000 	.word	0x40022000
 80065ec:	40022100 	.word	0x40022100
 80065f0:	40022300 	.word	0x40022300
 80065f4:	58026300 	.word	0x58026300

080065f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe fe26 	bl	8005256 <LL_ADC_IsDisableOngoing>
 800660a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fe0d 	bl	8005230 <LL_ADC_IsEnabled>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d047      	beq.n	80066ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d144      	bne.n	80066ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 030d 	and.w	r3, r3, #13
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10c      	bne.n	800664a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fde7 	bl	8005208 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2203      	movs	r2, #3
 8006640:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006642:	f7fe fbb1 	bl	8004da8 <HAL_GetTick>
 8006646:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006648:	e029      	b.n	800669e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664e:	f043 0210 	orr.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e023      	b.n	80066ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006666:	f7fe fb9f 	bl	8004da8 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d914      	bls.n	800669e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006686:	f043 0210 	orr.w	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e007      	b.n	80066ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1dc      	bne.n	8006666 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d14c      	bne.n	800676a <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d021      	beq.n	800672e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fc58 	bl	8004fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d032      	beq.n	8006760 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d12b      	bne.n	8006760 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11f      	bne.n	8006760 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	f043 0201 	orr.w	r2, r3, #1
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
 800672c:	e018      	b.n	8006760 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d111      	bne.n	8006760 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006758:	f043 0201 	orr.w	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006768:	e00f      	b.n	800678a <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	4798      	blx	r3
}
 800677e:	e004      	b.n	800678a <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ce:	f043 0204 	orr.w	r2, r3, #4
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a7a      	ldr	r2, [pc, #488]	@ (80069e0 <ADC_ConfigureBoostMode+0x1f8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <ADC_ConfigureBoostMode+0x1c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a79      	ldr	r2, [pc, #484]	@ (80069e4 <ADC_ConfigureBoostMode+0x1fc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d109      	bne.n	8006818 <ADC_ConfigureBoostMode+0x30>
 8006804:	4b78      	ldr	r3, [pc, #480]	@ (80069e8 <ADC_ConfigureBoostMode+0x200>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e008      	b.n	800682a <ADC_ConfigureBoostMode+0x42>
 8006818:	4b74      	ldr	r3, [pc, #464]	@ (80069ec <ADC_ConfigureBoostMode+0x204>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01c      	beq.n	8006868 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800682e:	f006 ff2f 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 8006832:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800683c:	d010      	beq.n	8006860 <ADC_ConfigureBoostMode+0x78>
 800683e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006842:	d873      	bhi.n	800692c <ADC_ConfigureBoostMode+0x144>
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006848:	d002      	beq.n	8006850 <ADC_ConfigureBoostMode+0x68>
 800684a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800684e:	d16d      	bne.n	800692c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	0c1b      	lsrs	r3, r3, #16
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	60fb      	str	r3, [r7, #12]
        break;
 800685e:	e068      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	60fb      	str	r3, [r7, #12]
        break;
 8006866:	e064      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006868:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800686c:	f04f 0100 	mov.w	r1, #0
 8006870:	f008 f95e 	bl	800eb30 <HAL_RCCEx_GetPeriphCLKFreq>
 8006874:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800687e:	d051      	beq.n	8006924 <ADC_ConfigureBoostMode+0x13c>
 8006880:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006884:	d854      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 8006886:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800688a:	d047      	beq.n	800691c <ADC_ConfigureBoostMode+0x134>
 800688c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006890:	d84e      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 8006892:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006896:	d03d      	beq.n	8006914 <ADC_ConfigureBoostMode+0x12c>
 8006898:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800689c:	d848      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 800689e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068a2:	d033      	beq.n	800690c <ADC_ConfigureBoostMode+0x124>
 80068a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068a8:	d842      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068aa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80068ae:	d029      	beq.n	8006904 <ADC_ConfigureBoostMode+0x11c>
 80068b0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80068b4:	d83c      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80068ba:	d01a      	beq.n	80068f2 <ADC_ConfigureBoostMode+0x10a>
 80068bc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80068c0:	d836      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068c2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80068c6:	d014      	beq.n	80068f2 <ADC_ConfigureBoostMode+0x10a>
 80068c8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80068cc:	d830      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d2:	d00e      	beq.n	80068f2 <ADC_ConfigureBoostMode+0x10a>
 80068d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d8:	d82a      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068de:	d008      	beq.n	80068f2 <ADC_ConfigureBoostMode+0x10a>
 80068e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068e4:	d824      	bhi.n	8006930 <ADC_ConfigureBoostMode+0x148>
 80068e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068ea:	d002      	beq.n	80068f2 <ADC_ConfigureBoostMode+0x10a>
 80068ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068f0:	d11e      	bne.n	8006930 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	0c9b      	lsrs	r3, r3, #18
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	60fb      	str	r3, [r7, #12]
        break;
 8006902:	e016      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	60fb      	str	r3, [r7, #12]
        break;
 800690a:	e012      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	60fb      	str	r3, [r7, #12]
        break;
 8006912:	e00e      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	60fb      	str	r3, [r7, #12]
        break;
 800691a:	e00a      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	09db      	lsrs	r3, r3, #7
 8006920:	60fb      	str	r3, [r7, #12]
        break;
 8006922:	e006      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	60fb      	str	r3, [r7, #12]
        break;
 800692a:	e002      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
        break;
 800692c:	bf00      	nop
 800692e:	e000      	b.n	8006932 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006930:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006932:	f7fe fa69 	bl	8004e08 <HAL_GetREVID>
 8006936:	4603      	mov	r3, r0
 8006938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800693c:	4293      	cmp	r3, r2
 800693e:	d815      	bhi.n	800696c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a2b      	ldr	r2, [pc, #172]	@ (80069f0 <ADC_ConfigureBoostMode+0x208>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d908      	bls.n	800695a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006956:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006958:	e03e      	b.n	80069d8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006968:	609a      	str	r2, [r3, #8]
}
 800696a:	e035      	b.n	80069d8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a1f      	ldr	r2, [pc, #124]	@ (80069f4 <ADC_ConfigureBoostMode+0x20c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d808      	bhi.n	800698c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006988:	609a      	str	r2, [r3, #8]
}
 800698a:	e025      	b.n	80069d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a1a      	ldr	r2, [pc, #104]	@ (80069f8 <ADC_ConfigureBoostMode+0x210>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d80a      	bhi.n	80069aa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	e016      	b.n	80069d8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a13      	ldr	r2, [pc, #76]	@ (80069fc <ADC_ConfigureBoostMode+0x214>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d80a      	bhi.n	80069c8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c4:	609a      	str	r2, [r3, #8]
}
 80069c6:	e007      	b.n	80069d8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40022000 	.word	0x40022000
 80069e4:	40022100 	.word	0x40022100
 80069e8:	40022300 	.word	0x40022300
 80069ec:	58026300 	.word	0x58026300
 80069f0:	01312d00 	.word	0x01312d00
 80069f4:	005f5e10 	.word	0x005f5e10
 80069f8:	00bebc20 	.word	0x00bebc20
 80069fc:	017d7840 	.word	0x017d7840

08006a00 <LL_ADC_StartCalibration>:
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <LL_ADC_StartCalibration+0x38>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	3ffeffc0 	.word	0x3ffeffc0

08006a3c <LL_ADC_IsCalibrationOnGoing>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a50:	d101      	bne.n	8006a56 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_ADCEx_Calibration_Start+0x1e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e04c      	b.n	8006b1c <HAL_ADCEx_Calibration_Start+0xb8>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fdb4 	bl	80065f8 <ADC_Disable>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d135      	bne.n	8006b06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a9e:	4b21      	ldr	r3, [pc, #132]	@ (8006b24 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff ffa4 	bl	8006a00 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ab8:	e014      	b.n	8006ae4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3301      	adds	r3, #1
 8006abe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4a19      	ldr	r2, [pc, #100]	@ (8006b28 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d30d      	bcc.n	8006ae4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006acc:	f023 0312 	bic.w	r3, r3, #18
 8006ad0:	f043 0210 	orr.w	r2, r3, #16
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e01b      	b.n	8006b1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff ffa7 	bl	8006a3c <LL_ADC_IsCalibrationOnGoing>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e2      	bne.n	8006aba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af8:	f023 0303 	bic.w	r3, r3, #3
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b04:	e005      	b.n	8006b12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f043 0210 	orr.w	r2, r3, #16
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	ffffeefd 	.word	0xffffeefd
 8006b28:	25c3f800 	.word	0x25c3f800

08006b2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006bac:	4013      	ands	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006bb8:	4b06      	ldr	r3, [pc, #24]	@ (8006bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bbe:	4a04      	ldr	r2, [pc, #16]	@ (8006bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	60d3      	str	r3, [r2, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	e000ed00 	.word	0xe000ed00
 8006bd4:	05fa0000 	.word	0x05fa0000

08006bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bdc:	4b04      	ldr	r3, [pc, #16]	@ (8006bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	f003 0307 	and.w	r3, r3, #7
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	e000ed00 	.word	0xe000ed00

08006bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	db0b      	blt.n	8006c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	f003 021f 	and.w	r2, r3, #31
 8006c0c:	4907      	ldr	r1, [pc, #28]	@ (8006c2c <__NVIC_EnableIRQ+0x38>)
 8006c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	2001      	movs	r0, #1
 8006c16:	fa00 f202 	lsl.w	r2, r0, r2
 8006c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	e000e100 	.word	0xe000e100

08006c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	db0a      	blt.n	8006c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	490c      	ldr	r1, [pc, #48]	@ (8006c7c <__NVIC_SetPriority+0x4c>)
 8006c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c4e:	0112      	lsls	r2, r2, #4
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	440b      	add	r3, r1
 8006c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c58:	e00a      	b.n	8006c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	4908      	ldr	r1, [pc, #32]	@ (8006c80 <__NVIC_SetPriority+0x50>)
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	3b04      	subs	r3, #4
 8006c68:	0112      	lsls	r2, r2, #4
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	761a      	strb	r2, [r3, #24]
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	e000e100 	.word	0xe000e100
 8006c80:	e000ed00 	.word	0xe000ed00

08006c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b089      	sub	sp, #36	@ 0x24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f1c3 0307 	rsb	r3, r3, #7
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	bf28      	it	cs
 8006ca2:	2304      	movcs	r3, #4
 8006ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d902      	bls.n	8006cb4 <NVIC_EncodePriority+0x30>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3b03      	subs	r3, #3
 8006cb2:	e000      	b.n	8006cb6 <NVIC_EncodePriority+0x32>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	43d9      	mvns	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cdc:	4313      	orrs	r3, r2
         );
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3724      	adds	r7, #36	@ 0x24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfc:	d301      	bcc.n	8006d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e00f      	b.n	8006d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d02:	4a0a      	ldr	r2, [pc, #40]	@ (8006d2c <SysTick_Config+0x40>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d0a:	210f      	movs	r1, #15
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	f7ff ff8e 	bl	8006c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <SysTick_Config+0x40>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d1a:	4b04      	ldr	r3, [pc, #16]	@ (8006d2c <SysTick_Config+0x40>)
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	e000e010 	.word	0xe000e010

08006d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff ff29 	bl	8006b90 <__NVIC_SetPriorityGrouping>
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d54:	f7ff ff40 	bl	8006bd8 <__NVIC_GetPriorityGrouping>
 8006d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	6978      	ldr	r0, [r7, #20]
 8006d60:	f7ff ff90 	bl	8006c84 <NVIC_EncodePriority>
 8006d64:	4602      	mov	r2, r0
 8006d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ff5f 	bl	8006c30 <__NVIC_SetPriority>
}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	4603      	mov	r3, r0
 8006d82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff33 	bl	8006bf4 <__NVIC_EnableIRQ>
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ffa4 	bl	8006cec <SysTick_Config>
 8006da4:	4603      	mov	r3, r0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006db8:	f7fd fff6 	bl	8004da8 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e316      	b.n	80073f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a66      	ldr	r2, [pc, #408]	@ (8006f68 <HAL_DMA_Init+0x1b8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d04a      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a65      	ldr	r2, [pc, #404]	@ (8006f6c <HAL_DMA_Init+0x1bc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d045      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a63      	ldr	r2, [pc, #396]	@ (8006f70 <HAL_DMA_Init+0x1c0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d040      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a62      	ldr	r2, [pc, #392]	@ (8006f74 <HAL_DMA_Init+0x1c4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d03b      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a60      	ldr	r2, [pc, #384]	@ (8006f78 <HAL_DMA_Init+0x1c8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d036      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8006f7c <HAL_DMA_Init+0x1cc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d031      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5d      	ldr	r2, [pc, #372]	@ (8006f80 <HAL_DMA_Init+0x1d0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d02c      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a5c      	ldr	r2, [pc, #368]	@ (8006f84 <HAL_DMA_Init+0x1d4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006f88 <HAL_DMA_Init+0x1d8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a59      	ldr	r2, [pc, #356]	@ (8006f8c <HAL_DMA_Init+0x1dc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01d      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a57      	ldr	r2, [pc, #348]	@ (8006f90 <HAL_DMA_Init+0x1e0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a56      	ldr	r2, [pc, #344]	@ (8006f94 <HAL_DMA_Init+0x1e4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a54      	ldr	r2, [pc, #336]	@ (8006f98 <HAL_DMA_Init+0x1e8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a53      	ldr	r2, [pc, #332]	@ (8006f9c <HAL_DMA_Init+0x1ec>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a51      	ldr	r2, [pc, #324]	@ (8006fa0 <HAL_DMA_Init+0x1f0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a50      	ldr	r2, [pc, #320]	@ (8006fa4 <HAL_DMA_Init+0x1f4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d101      	bne.n	8006e6c <HAL_DMA_Init+0xbc>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_DMA_Init+0xbe>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 813b 	beq.w	80070ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a37      	ldr	r2, [pc, #220]	@ (8006f68 <HAL_DMA_Init+0x1b8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a36      	ldr	r2, [pc, #216]	@ (8006f6c <HAL_DMA_Init+0x1bc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a34      	ldr	r2, [pc, #208]	@ (8006f70 <HAL_DMA_Init+0x1c0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a33      	ldr	r2, [pc, #204]	@ (8006f74 <HAL_DMA_Init+0x1c4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a31      	ldr	r2, [pc, #196]	@ (8006f78 <HAL_DMA_Init+0x1c8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a30      	ldr	r2, [pc, #192]	@ (8006f7c <HAL_DMA_Init+0x1cc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8006f80 <HAL_DMA_Init+0x1d0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2d      	ldr	r2, [pc, #180]	@ (8006f84 <HAL_DMA_Init+0x1d4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f88 <HAL_DMA_Init+0x1d8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <HAL_DMA_Init+0x1dc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a28      	ldr	r2, [pc, #160]	@ (8006f90 <HAL_DMA_Init+0x1e0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a27      	ldr	r2, [pc, #156]	@ (8006f94 <HAL_DMA_Init+0x1e4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a25      	ldr	r2, [pc, #148]	@ (8006f98 <HAL_DMA_Init+0x1e8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a24      	ldr	r2, [pc, #144]	@ (8006f9c <HAL_DMA_Init+0x1ec>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a22      	ldr	r2, [pc, #136]	@ (8006fa0 <HAL_DMA_Init+0x1f0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a21      	ldr	r2, [pc, #132]	@ (8006fa4 <HAL_DMA_Init+0x1f4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <HAL_DMA_Init+0x186>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e007      	b.n	8006f46 <HAL_DMA_Init+0x196>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f46:	e02f      	b.n	8006fa8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f48:	f7fd ff2e 	bl	8004da8 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d928      	bls.n	8006fa8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e246      	b.n	80073f6 <HAL_DMA_Init+0x646>
 8006f68:	40020010 	.word	0x40020010
 8006f6c:	40020028 	.word	0x40020028
 8006f70:	40020040 	.word	0x40020040
 8006f74:	40020058 	.word	0x40020058
 8006f78:	40020070 	.word	0x40020070
 8006f7c:	40020088 	.word	0x40020088
 8006f80:	400200a0 	.word	0x400200a0
 8006f84:	400200b8 	.word	0x400200b8
 8006f88:	40020410 	.word	0x40020410
 8006f8c:	40020428 	.word	0x40020428
 8006f90:	40020440 	.word	0x40020440
 8006f94:	40020458 	.word	0x40020458
 8006f98:	40020470 	.word	0x40020470
 8006f9c:	40020488 	.word	0x40020488
 8006fa0:	400204a0 	.word	0x400204a0
 8006fa4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c8      	bne.n	8006f48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4b83      	ldr	r3, [pc, #524]	@ (80071d0 <HAL_DMA_Init+0x420>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d107      	bne.n	800700c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	4313      	orrs	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800700c:	4b71      	ldr	r3, [pc, #452]	@ (80071d4 <HAL_DMA_Init+0x424>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b71      	ldr	r3, [pc, #452]	@ (80071d8 <HAL_DMA_Init+0x428>)
 8007012:	4013      	ands	r3, r2
 8007014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007018:	d328      	bcc.n	800706c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b28      	cmp	r3, #40	@ 0x28
 8007020:	d903      	bls.n	800702a <HAL_DMA_Init+0x27a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b2e      	cmp	r3, #46	@ 0x2e
 8007028:	d917      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007030:	d903      	bls.n	800703a <HAL_DMA_Init+0x28a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b42      	cmp	r3, #66	@ 0x42
 8007038:	d90f      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b46      	cmp	r3, #70	@ 0x46
 8007040:	d903      	bls.n	800704a <HAL_DMA_Init+0x29a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b48      	cmp	r3, #72	@ 0x48
 8007048:	d907      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007050:	d905      	bls.n	800705e <HAL_DMA_Init+0x2ae>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b52      	cmp	r3, #82	@ 0x52
 8007058:	d801      	bhi.n	800705e <HAL_DMA_Init+0x2ae>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_DMA_Init+0x2b0>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0307 	bic.w	r3, r3, #7
 8007082:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	2b04      	cmp	r3, #4
 8007094:	d117      	bne.n	80070c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 f889 	bl	80091c0 <DMA_CheckFifoParam>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2240      	movs	r2, #64	@ 0x40
 80070b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e197      	b.n	80073f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 ffc4 	bl	800905c <DMA_CalcBaseAndBitshift>
 80070d4:	4603      	mov	r3, r0
 80070d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	223f      	movs	r2, #63	@ 0x3f
 80070e2:	409a      	lsls	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e0cd      	b.n	8007286 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3b      	ldr	r2, [pc, #236]	@ (80071dc <HAL_DMA_Init+0x42c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <HAL_DMA_Init+0x38a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a39      	ldr	r2, [pc, #228]	@ (80071e0 <HAL_DMA_Init+0x430>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01d      	beq.n	800713a <HAL_DMA_Init+0x38a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a38      	ldr	r2, [pc, #224]	@ (80071e4 <HAL_DMA_Init+0x434>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a36      	ldr	r2, [pc, #216]	@ (80071e8 <HAL_DMA_Init+0x438>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <HAL_DMA_Init+0x43c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_DMA_Init+0x38a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a33      	ldr	r2, [pc, #204]	@ (80071f0 <HAL_DMA_Init+0x440>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a32      	ldr	r2, [pc, #200]	@ (80071f4 <HAL_DMA_Init+0x444>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a30      	ldr	r2, [pc, #192]	@ (80071f8 <HAL_DMA_Init+0x448>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_DMA_Init+0x38e>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_DMA_Init+0x390>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8097 	beq.w	8007274 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a24      	ldr	r2, [pc, #144]	@ (80071dc <HAL_DMA_Init+0x42c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d021      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a22      	ldr	r2, [pc, #136]	@ (80071e0 <HAL_DMA_Init+0x430>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01c      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a21      	ldr	r2, [pc, #132]	@ (80071e4 <HAL_DMA_Init+0x434>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d017      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1f      	ldr	r2, [pc, #124]	@ (80071e8 <HAL_DMA_Init+0x438>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d012      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1e      	ldr	r2, [pc, #120]	@ (80071ec <HAL_DMA_Init+0x43c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00d      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1c      	ldr	r2, [pc, #112]	@ (80071f0 <HAL_DMA_Init+0x440>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d008      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1b      	ldr	r2, [pc, #108]	@ (80071f4 <HAL_DMA_Init+0x444>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a19      	ldr	r2, [pc, #100]	@ (80071f8 <HAL_DMA_Init+0x448>)
 8007192:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <HAL_DMA_Init+0x44c>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b40      	cmp	r3, #64	@ 0x40
 80071ba:	d021      	beq.n	8007200 <HAL_DMA_Init+0x450>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d102      	bne.n	80071ca <HAL_DMA_Init+0x41a>
 80071c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071c8:	e01b      	b.n	8007202 <HAL_DMA_Init+0x452>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e019      	b.n	8007202 <HAL_DMA_Init+0x452>
 80071ce:	bf00      	nop
 80071d0:	fe10803f 	.word	0xfe10803f
 80071d4:	5c001000 	.word	0x5c001000
 80071d8:	ffff0000 	.word	0xffff0000
 80071dc:	58025408 	.word	0x58025408
 80071e0:	5802541c 	.word	0x5802541c
 80071e4:	58025430 	.word	0x58025430
 80071e8:	58025444 	.word	0x58025444
 80071ec:	58025458 	.word	0x58025458
 80071f0:	5802546c 	.word	0x5802546c
 80071f4:	58025480 	.word	0x58025480
 80071f8:	58025494 	.word	0x58025494
 80071fc:	fffe000f 	.word	0xfffe000f
 8007200:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68d2      	ldr	r2, [r2, #12]
 8007206:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007230:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	4b6e      	ldr	r3, [pc, #440]	@ (8007400 <HAL_DMA_Init+0x650>)
 8007248:	4413      	add	r3, r2
 800724a:	4a6e      	ldr	r2, [pc, #440]	@ (8007404 <HAL_DMA_Init+0x654>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 feff 	bl	800905c <DMA_CalcBaseAndBitshift>
 800725e:	4603      	mov	r3, r0
 8007260:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2201      	movs	r2, #1
 800726c:	409a      	lsls	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e008      	b.n	8007286 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2240      	movs	r2, #64	@ 0x40
 8007278:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2203      	movs	r2, #3
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0b7      	b.n	80073f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a5f      	ldr	r2, [pc, #380]	@ (8007408 <HAL_DMA_Init+0x658>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d072      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a5d      	ldr	r2, [pc, #372]	@ (800740c <HAL_DMA_Init+0x65c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d06d      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5c      	ldr	r2, [pc, #368]	@ (8007410 <HAL_DMA_Init+0x660>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d068      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5a      	ldr	r2, [pc, #360]	@ (8007414 <HAL_DMA_Init+0x664>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d063      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a59      	ldr	r2, [pc, #356]	@ (8007418 <HAL_DMA_Init+0x668>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d05e      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a57      	ldr	r2, [pc, #348]	@ (800741c <HAL_DMA_Init+0x66c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d059      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a56      	ldr	r2, [pc, #344]	@ (8007420 <HAL_DMA_Init+0x670>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d054      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a54      	ldr	r2, [pc, #336]	@ (8007424 <HAL_DMA_Init+0x674>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d04f      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a53      	ldr	r2, [pc, #332]	@ (8007428 <HAL_DMA_Init+0x678>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04a      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a51      	ldr	r2, [pc, #324]	@ (800742c <HAL_DMA_Init+0x67c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d045      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a50      	ldr	r2, [pc, #320]	@ (8007430 <HAL_DMA_Init+0x680>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d040      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a4e      	ldr	r2, [pc, #312]	@ (8007434 <HAL_DMA_Init+0x684>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d03b      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a4d      	ldr	r2, [pc, #308]	@ (8007438 <HAL_DMA_Init+0x688>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d036      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a4b      	ldr	r2, [pc, #300]	@ (800743c <HAL_DMA_Init+0x68c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4a      	ldr	r2, [pc, #296]	@ (8007440 <HAL_DMA_Init+0x690>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d02c      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a48      	ldr	r2, [pc, #288]	@ (8007444 <HAL_DMA_Init+0x694>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a47      	ldr	r2, [pc, #284]	@ (8007448 <HAL_DMA_Init+0x698>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a45      	ldr	r2, [pc, #276]	@ (800744c <HAL_DMA_Init+0x69c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a44      	ldr	r2, [pc, #272]	@ (8007450 <HAL_DMA_Init+0x6a0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a42      	ldr	r2, [pc, #264]	@ (8007454 <HAL_DMA_Init+0x6a4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a41      	ldr	r2, [pc, #260]	@ (8007458 <HAL_DMA_Init+0x6a8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3f      	ldr	r2, [pc, #252]	@ (800745c <HAL_DMA_Init+0x6ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3e      	ldr	r2, [pc, #248]	@ (8007460 <HAL_DMA_Init+0x6b0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a3c      	ldr	r2, [pc, #240]	@ (8007464 <HAL_DMA_Init+0x6b4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d101      	bne.n	800737a <HAL_DMA_Init+0x5ca>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_DMA_Init+0x5cc>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d032      	beq.n	80073e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 ff99 	bl	80092b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b80      	cmp	r3, #128	@ 0x80
 800738c:	d102      	bne.n	8007394 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80073a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <HAL_DMA_Init+0x624>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d80c      	bhi.n	80073d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f002 f816 	bl	80093ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	e008      	b.n	80073e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	a7fdabf8 	.word	0xa7fdabf8
 8007404:	cccccccd 	.word	0xcccccccd
 8007408:	40020010 	.word	0x40020010
 800740c:	40020028 	.word	0x40020028
 8007410:	40020040 	.word	0x40020040
 8007414:	40020058 	.word	0x40020058
 8007418:	40020070 	.word	0x40020070
 800741c:	40020088 	.word	0x40020088
 8007420:	400200a0 	.word	0x400200a0
 8007424:	400200b8 	.word	0x400200b8
 8007428:	40020410 	.word	0x40020410
 800742c:	40020428 	.word	0x40020428
 8007430:	40020440 	.word	0x40020440
 8007434:	40020458 	.word	0x40020458
 8007438:	40020470 	.word	0x40020470
 800743c:	40020488 	.word	0x40020488
 8007440:	400204a0 	.word	0x400204a0
 8007444:	400204b8 	.word	0x400204b8
 8007448:	58025408 	.word	0x58025408
 800744c:	5802541c 	.word	0x5802541c
 8007450:	58025430 	.word	0x58025430
 8007454:	58025444 	.word	0x58025444
 8007458:	58025458 	.word	0x58025458
 800745c:	5802546c 	.word	0x5802546c
 8007460:	58025480 	.word	0x58025480
 8007464:	58025494 	.word	0x58025494

08007468 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e226      	b.n	80078d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_DMA_Start_IT+0x2a>
 800748e:	2302      	movs	r3, #2
 8007490:	e21f      	b.n	80078d2 <HAL_DMA_Start_IT+0x46a>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	f040 820a 	bne.w	80078bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a68      	ldr	r2, [pc, #416]	@ (800765c <HAL_DMA_Start_IT+0x1f4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d04a      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a66      	ldr	r2, [pc, #408]	@ (8007660 <HAL_DMA_Start_IT+0x1f8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a65      	ldr	r2, [pc, #404]	@ (8007664 <HAL_DMA_Start_IT+0x1fc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d040      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a63      	ldr	r2, [pc, #396]	@ (8007668 <HAL_DMA_Start_IT+0x200>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a62      	ldr	r2, [pc, #392]	@ (800766c <HAL_DMA_Start_IT+0x204>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d036      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a60      	ldr	r2, [pc, #384]	@ (8007670 <HAL_DMA_Start_IT+0x208>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d031      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007674 <HAL_DMA_Start_IT+0x20c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d02c      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a5d      	ldr	r2, [pc, #372]	@ (8007678 <HAL_DMA_Start_IT+0x210>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d027      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a5c      	ldr	r2, [pc, #368]	@ (800767c <HAL_DMA_Start_IT+0x214>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5a      	ldr	r2, [pc, #360]	@ (8007680 <HAL_DMA_Start_IT+0x218>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a59      	ldr	r2, [pc, #356]	@ (8007684 <HAL_DMA_Start_IT+0x21c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a57      	ldr	r2, [pc, #348]	@ (8007688 <HAL_DMA_Start_IT+0x220>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a56      	ldr	r2, [pc, #344]	@ (800768c <HAL_DMA_Start_IT+0x224>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a54      	ldr	r2, [pc, #336]	@ (8007690 <HAL_DMA_Start_IT+0x228>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a53      	ldr	r2, [pc, #332]	@ (8007694 <HAL_DMA_Start_IT+0x22c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a51      	ldr	r2, [pc, #324]	@ (8007698 <HAL_DMA_Start_IT+0x230>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_DMA_Start_IT+0x100>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <HAL_DMA_Start_IT+0x110>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f001 fbc0 	bl	8008d04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a34      	ldr	r2, [pc, #208]	@ (800765c <HAL_DMA_Start_IT+0x1f4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d04a      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a33      	ldr	r2, [pc, #204]	@ (8007660 <HAL_DMA_Start_IT+0x1f8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d045      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a31      	ldr	r2, [pc, #196]	@ (8007664 <HAL_DMA_Start_IT+0x1fc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d040      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a30      	ldr	r2, [pc, #192]	@ (8007668 <HAL_DMA_Start_IT+0x200>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d03b      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2e      	ldr	r2, [pc, #184]	@ (800766c <HAL_DMA_Start_IT+0x204>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d036      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007670 <HAL_DMA_Start_IT+0x208>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d031      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007674 <HAL_DMA_Start_IT+0x20c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02c      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007678 <HAL_DMA_Start_IT+0x210>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d027      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a28      	ldr	r2, [pc, #160]	@ (800767c <HAL_DMA_Start_IT+0x214>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d022      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a27      	ldr	r2, [pc, #156]	@ (8007680 <HAL_DMA_Start_IT+0x218>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d01d      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a25      	ldr	r2, [pc, #148]	@ (8007684 <HAL_DMA_Start_IT+0x21c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d018      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a24      	ldr	r2, [pc, #144]	@ (8007688 <HAL_DMA_Start_IT+0x220>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d013      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a22      	ldr	r2, [pc, #136]	@ (800768c <HAL_DMA_Start_IT+0x224>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a21      	ldr	r2, [pc, #132]	@ (8007690 <HAL_DMA_Start_IT+0x228>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1f      	ldr	r2, [pc, #124]	@ (8007694 <HAL_DMA_Start_IT+0x22c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1e      	ldr	r2, [pc, #120]	@ (8007698 <HAL_DMA_Start_IT+0x230>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d101      	bne.n	8007628 <HAL_DMA_Start_IT+0x1c0>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <HAL_DMA_Start_IT+0x1c2>
 8007628:	2300      	movs	r3, #0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d036      	beq.n	800769c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f023 021e 	bic.w	r2, r3, #30
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0216 	orr.w	r2, r2, #22
 8007640:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	d03e      	beq.n	80076c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0208 	orr.w	r2, r2, #8
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e035      	b.n	80076c8 <HAL_DMA_Start_IT+0x260>
 800765c:	40020010 	.word	0x40020010
 8007660:	40020028 	.word	0x40020028
 8007664:	40020040 	.word	0x40020040
 8007668:	40020058 	.word	0x40020058
 800766c:	40020070 	.word	0x40020070
 8007670:	40020088 	.word	0x40020088
 8007674:	400200a0 	.word	0x400200a0
 8007678:	400200b8 	.word	0x400200b8
 800767c:	40020410 	.word	0x40020410
 8007680:	40020428 	.word	0x40020428
 8007684:	40020440 	.word	0x40020440
 8007688:	40020458 	.word	0x40020458
 800768c:	40020470 	.word	0x40020470
 8007690:	40020488 	.word	0x40020488
 8007694:	400204a0 	.word	0x400204a0
 8007698:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f023 020e 	bic.w	r2, r3, #14
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 020a 	orr.w	r2, r2, #10
 80076ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0204 	orr.w	r2, r2, #4
 80076c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a83      	ldr	r2, [pc, #524]	@ (80078dc <HAL_DMA_Start_IT+0x474>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d072      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a82      	ldr	r2, [pc, #520]	@ (80078e0 <HAL_DMA_Start_IT+0x478>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d06d      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a80      	ldr	r2, [pc, #512]	@ (80078e4 <HAL_DMA_Start_IT+0x47c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d068      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a7f      	ldr	r2, [pc, #508]	@ (80078e8 <HAL_DMA_Start_IT+0x480>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d063      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a7d      	ldr	r2, [pc, #500]	@ (80078ec <HAL_DMA_Start_IT+0x484>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d05e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a7c      	ldr	r2, [pc, #496]	@ (80078f0 <HAL_DMA_Start_IT+0x488>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d059      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a7a      	ldr	r2, [pc, #488]	@ (80078f4 <HAL_DMA_Start_IT+0x48c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d054      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a79      	ldr	r2, [pc, #484]	@ (80078f8 <HAL_DMA_Start_IT+0x490>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04f      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a77      	ldr	r2, [pc, #476]	@ (80078fc <HAL_DMA_Start_IT+0x494>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d04a      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a76      	ldr	r2, [pc, #472]	@ (8007900 <HAL_DMA_Start_IT+0x498>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d045      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a74      	ldr	r2, [pc, #464]	@ (8007904 <HAL_DMA_Start_IT+0x49c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d040      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a73      	ldr	r2, [pc, #460]	@ (8007908 <HAL_DMA_Start_IT+0x4a0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d03b      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a71      	ldr	r2, [pc, #452]	@ (800790c <HAL_DMA_Start_IT+0x4a4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d036      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a70      	ldr	r2, [pc, #448]	@ (8007910 <HAL_DMA_Start_IT+0x4a8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d031      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a6e      	ldr	r2, [pc, #440]	@ (8007914 <HAL_DMA_Start_IT+0x4ac>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02c      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a6d      	ldr	r2, [pc, #436]	@ (8007918 <HAL_DMA_Start_IT+0x4b0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d027      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a6b      	ldr	r2, [pc, #428]	@ (800791c <HAL_DMA_Start_IT+0x4b4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6a      	ldr	r2, [pc, #424]	@ (8007920 <HAL_DMA_Start_IT+0x4b8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d01d      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a68      	ldr	r2, [pc, #416]	@ (8007924 <HAL_DMA_Start_IT+0x4bc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a67      	ldr	r2, [pc, #412]	@ (8007928 <HAL_DMA_Start_IT+0x4c0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a65      	ldr	r2, [pc, #404]	@ (800792c <HAL_DMA_Start_IT+0x4c4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a64      	ldr	r2, [pc, #400]	@ (8007930 <HAL_DMA_Start_IT+0x4c8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a62      	ldr	r2, [pc, #392]	@ (8007934 <HAL_DMA_Start_IT+0x4cc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a61      	ldr	r2, [pc, #388]	@ (8007938 <HAL_DMA_Start_IT+0x4d0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d101      	bne.n	80077bc <HAL_DMA_Start_IT+0x354>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <HAL_DMA_Start_IT+0x356>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a37      	ldr	r2, [pc, #220]	@ (80078dc <HAL_DMA_Start_IT+0x474>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d04a      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a36      	ldr	r2, [pc, #216]	@ (80078e0 <HAL_DMA_Start_IT+0x478>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d045      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a34      	ldr	r2, [pc, #208]	@ (80078e4 <HAL_DMA_Start_IT+0x47c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d040      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a33      	ldr	r2, [pc, #204]	@ (80078e8 <HAL_DMA_Start_IT+0x480>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d03b      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a31      	ldr	r2, [pc, #196]	@ (80078ec <HAL_DMA_Start_IT+0x484>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d036      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a30      	ldr	r2, [pc, #192]	@ (80078f0 <HAL_DMA_Start_IT+0x488>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d031      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2e      	ldr	r2, [pc, #184]	@ (80078f4 <HAL_DMA_Start_IT+0x48c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d02c      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2d      	ldr	r2, [pc, #180]	@ (80078f8 <HAL_DMA_Start_IT+0x490>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d027      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2b      	ldr	r2, [pc, #172]	@ (80078fc <HAL_DMA_Start_IT+0x494>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d022      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2a      	ldr	r2, [pc, #168]	@ (8007900 <HAL_DMA_Start_IT+0x498>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d01d      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a28      	ldr	r2, [pc, #160]	@ (8007904 <HAL_DMA_Start_IT+0x49c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d018      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a27      	ldr	r2, [pc, #156]	@ (8007908 <HAL_DMA_Start_IT+0x4a0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a25      	ldr	r2, [pc, #148]	@ (800790c <HAL_DMA_Start_IT+0x4a4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00e      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a24      	ldr	r2, [pc, #144]	@ (8007910 <HAL_DMA_Start_IT+0x4a8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d009      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a22      	ldr	r2, [pc, #136]	@ (8007914 <HAL_DMA_Start_IT+0x4ac>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a21      	ldr	r2, [pc, #132]	@ (8007918 <HAL_DMA_Start_IT+0x4b0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d108      	bne.n	80078aa <HAL_DMA_Start_IT+0x442>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e012      	b.n	80078d0 <HAL_DMA_Start_IT+0x468>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e009      	b.n	80078d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40020010 	.word	0x40020010
 80078e0:	40020028 	.word	0x40020028
 80078e4:	40020040 	.word	0x40020040
 80078e8:	40020058 	.word	0x40020058
 80078ec:	40020070 	.word	0x40020070
 80078f0:	40020088 	.word	0x40020088
 80078f4:	400200a0 	.word	0x400200a0
 80078f8:	400200b8 	.word	0x400200b8
 80078fc:	40020410 	.word	0x40020410
 8007900:	40020428 	.word	0x40020428
 8007904:	40020440 	.word	0x40020440
 8007908:	40020458 	.word	0x40020458
 800790c:	40020470 	.word	0x40020470
 8007910:	40020488 	.word	0x40020488
 8007914:	400204a0 	.word	0x400204a0
 8007918:	400204b8 	.word	0x400204b8
 800791c:	58025408 	.word	0x58025408
 8007920:	5802541c 	.word	0x5802541c
 8007924:	58025430 	.word	0x58025430
 8007928:	58025444 	.word	0x58025444
 800792c:	58025458 	.word	0x58025458
 8007930:	5802546c 	.word	0x5802546c
 8007934:	58025480 	.word	0x58025480
 8007938:	58025494 	.word	0x58025494

0800793c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e237      	b.n	8007dbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d004      	beq.n	8007964 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2280      	movs	r2, #128	@ 0x80
 800795e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e22c      	b.n	8007dbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a5c      	ldr	r2, [pc, #368]	@ (8007adc <HAL_DMA_Abort_IT+0x1a0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d04a      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a5b      	ldr	r2, [pc, #364]	@ (8007ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d045      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a59      	ldr	r2, [pc, #356]	@ (8007ae4 <HAL_DMA_Abort_IT+0x1a8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d040      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a58      	ldr	r2, [pc, #352]	@ (8007ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d03b      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a56      	ldr	r2, [pc, #344]	@ (8007aec <HAL_DMA_Abort_IT+0x1b0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d036      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a55      	ldr	r2, [pc, #340]	@ (8007af0 <HAL_DMA_Abort_IT+0x1b4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d031      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a53      	ldr	r2, [pc, #332]	@ (8007af4 <HAL_DMA_Abort_IT+0x1b8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d02c      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a52      	ldr	r2, [pc, #328]	@ (8007af8 <HAL_DMA_Abort_IT+0x1bc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d027      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a50      	ldr	r2, [pc, #320]	@ (8007afc <HAL_DMA_Abort_IT+0x1c0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d022      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a4f      	ldr	r2, [pc, #316]	@ (8007b00 <HAL_DMA_Abort_IT+0x1c4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d01d      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a4d      	ldr	r2, [pc, #308]	@ (8007b04 <HAL_DMA_Abort_IT+0x1c8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d018      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a4c      	ldr	r2, [pc, #304]	@ (8007b08 <HAL_DMA_Abort_IT+0x1cc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a4a      	ldr	r2, [pc, #296]	@ (8007b0c <HAL_DMA_Abort_IT+0x1d0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a49      	ldr	r2, [pc, #292]	@ (8007b10 <HAL_DMA_Abort_IT+0x1d4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a47      	ldr	r2, [pc, #284]	@ (8007b14 <HAL_DMA_Abort_IT+0x1d8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_DMA_Abort_IT+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a46      	ldr	r2, [pc, #280]	@ (8007b18 <HAL_DMA_Abort_IT+0x1dc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d101      	bne.n	8007a08 <HAL_DMA_Abort_IT+0xcc>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <HAL_DMA_Abort_IT+0xce>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8086 	beq.w	8007b1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8007adc <HAL_DMA_Abort_IT+0x1a0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d04a      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae0 <HAL_DMA_Abort_IT+0x1a4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d045      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae4 <HAL_DMA_Abort_IT+0x1a8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d040      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae8 <HAL_DMA_Abort_IT+0x1ac>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d03b      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a29      	ldr	r2, [pc, #164]	@ (8007aec <HAL_DMA_Abort_IT+0x1b0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d036      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a28      	ldr	r2, [pc, #160]	@ (8007af0 <HAL_DMA_Abort_IT+0x1b4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d031      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a26      	ldr	r2, [pc, #152]	@ (8007af4 <HAL_DMA_Abort_IT+0x1b8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d02c      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a25      	ldr	r2, [pc, #148]	@ (8007af8 <HAL_DMA_Abort_IT+0x1bc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d027      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a23      	ldr	r2, [pc, #140]	@ (8007afc <HAL_DMA_Abort_IT+0x1c0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d022      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a22      	ldr	r2, [pc, #136]	@ (8007b00 <HAL_DMA_Abort_IT+0x1c4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d01d      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a20      	ldr	r2, [pc, #128]	@ (8007b04 <HAL_DMA_Abort_IT+0x1c8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d018      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b08 <HAL_DMA_Abort_IT+0x1cc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d013      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1d      	ldr	r2, [pc, #116]	@ (8007b0c <HAL_DMA_Abort_IT+0x1d0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00e      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007b10 <HAL_DMA_Abort_IT+0x1d4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d009      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8007b14 <HAL_DMA_Abort_IT+0x1d8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d004      	beq.n	8007ab8 <HAL_DMA_Abort_IT+0x17c>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	@ (8007b18 <HAL_DMA_Abort_IT+0x1dc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d108      	bne.n	8007aca <HAL_DMA_Abort_IT+0x18e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e178      	b.n	8007dbc <HAL_DMA_Abort_IT+0x480>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e16f      	b.n	8007dbc <HAL_DMA_Abort_IT+0x480>
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 020e 	bic.w	r2, r2, #14
 8007b2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a6c      	ldr	r2, [pc, #432]	@ (8007ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d04a      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8007ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d045      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a69      	ldr	r2, [pc, #420]	@ (8007cec <HAL_DMA_Abort_IT+0x3b0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d040      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a68      	ldr	r2, [pc, #416]	@ (8007cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d03b      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a66      	ldr	r2, [pc, #408]	@ (8007cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d036      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a65      	ldr	r2, [pc, #404]	@ (8007cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d031      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a63      	ldr	r2, [pc, #396]	@ (8007cfc <HAL_DMA_Abort_IT+0x3c0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02c      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a62      	ldr	r2, [pc, #392]	@ (8007d00 <HAL_DMA_Abort_IT+0x3c4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d027      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a60      	ldr	r2, [pc, #384]	@ (8007d04 <HAL_DMA_Abort_IT+0x3c8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8007d08 <HAL_DMA_Abort_IT+0x3cc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a5d      	ldr	r2, [pc, #372]	@ (8007d0c <HAL_DMA_Abort_IT+0x3d0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d10 <HAL_DMA_Abort_IT+0x3d4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8007d14 <HAL_DMA_Abort_IT+0x3d8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a59      	ldr	r2, [pc, #356]	@ (8007d18 <HAL_DMA_Abort_IT+0x3dc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a57      	ldr	r2, [pc, #348]	@ (8007d1c <HAL_DMA_Abort_IT+0x3e0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <HAL_DMA_Abort_IT+0x290>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a56      	ldr	r2, [pc, #344]	@ (8007d20 <HAL_DMA_Abort_IT+0x3e4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d108      	bne.n	8007bde <HAL_DMA_Abort_IT+0x2a2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e007      	b.n	8007bee <HAL_DMA_Abort_IT+0x2b2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ce4 <HAL_DMA_Abort_IT+0x3a8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d072      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8007ce8 <HAL_DMA_Abort_IT+0x3ac>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d06d      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a39      	ldr	r2, [pc, #228]	@ (8007cec <HAL_DMA_Abort_IT+0x3b0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d068      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a37      	ldr	r2, [pc, #220]	@ (8007cf0 <HAL_DMA_Abort_IT+0x3b4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d063      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a36      	ldr	r2, [pc, #216]	@ (8007cf4 <HAL_DMA_Abort_IT+0x3b8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d05e      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a34      	ldr	r2, [pc, #208]	@ (8007cf8 <HAL_DMA_Abort_IT+0x3bc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d059      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a33      	ldr	r2, [pc, #204]	@ (8007cfc <HAL_DMA_Abort_IT+0x3c0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d054      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a31      	ldr	r2, [pc, #196]	@ (8007d00 <HAL_DMA_Abort_IT+0x3c4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d04f      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a30      	ldr	r2, [pc, #192]	@ (8007d04 <HAL_DMA_Abort_IT+0x3c8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d04a      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007d08 <HAL_DMA_Abort_IT+0x3cc>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d045      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2d      	ldr	r2, [pc, #180]	@ (8007d0c <HAL_DMA_Abort_IT+0x3d0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d040      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	@ (8007d10 <HAL_DMA_Abort_IT+0x3d4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d03b      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d14 <HAL_DMA_Abort_IT+0x3d8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d036      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a28      	ldr	r2, [pc, #160]	@ (8007d18 <HAL_DMA_Abort_IT+0x3dc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d031      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a27      	ldr	r2, [pc, #156]	@ (8007d1c <HAL_DMA_Abort_IT+0x3e0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d02c      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a25      	ldr	r2, [pc, #148]	@ (8007d20 <HAL_DMA_Abort_IT+0x3e4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d027      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a24      	ldr	r2, [pc, #144]	@ (8007d24 <HAL_DMA_Abort_IT+0x3e8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d022      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a22      	ldr	r2, [pc, #136]	@ (8007d28 <HAL_DMA_Abort_IT+0x3ec>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01d      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a21      	ldr	r2, [pc, #132]	@ (8007d2c <HAL_DMA_Abort_IT+0x3f0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d018      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <HAL_DMA_Abort_IT+0x3f4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <HAL_DMA_Abort_IT+0x3f8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00e      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d38 <HAL_DMA_Abort_IT+0x3fc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1b      	ldr	r2, [pc, #108]	@ (8007d3c <HAL_DMA_Abort_IT+0x400>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <HAL_DMA_Abort_IT+0x3a2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <HAL_DMA_Abort_IT+0x404>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d132      	bne.n	8007d44 <HAL_DMA_Abort_IT+0x408>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e031      	b.n	8007d46 <HAL_DMA_Abort_IT+0x40a>
 8007ce2:	bf00      	nop
 8007ce4:	40020010 	.word	0x40020010
 8007ce8:	40020028 	.word	0x40020028
 8007cec:	40020040 	.word	0x40020040
 8007cf0:	40020058 	.word	0x40020058
 8007cf4:	40020070 	.word	0x40020070
 8007cf8:	40020088 	.word	0x40020088
 8007cfc:	400200a0 	.word	0x400200a0
 8007d00:	400200b8 	.word	0x400200b8
 8007d04:	40020410 	.word	0x40020410
 8007d08:	40020428 	.word	0x40020428
 8007d0c:	40020440 	.word	0x40020440
 8007d10:	40020458 	.word	0x40020458
 8007d14:	40020470 	.word	0x40020470
 8007d18:	40020488 	.word	0x40020488
 8007d1c:	400204a0 	.word	0x400204a0
 8007d20:	400204b8 	.word	0x400204b8
 8007d24:	58025408 	.word	0x58025408
 8007d28:	5802541c 	.word	0x5802541c
 8007d2c:	58025430 	.word	0x58025430
 8007d30:	58025444 	.word	0x58025444
 8007d34:	58025458 	.word	0x58025458
 8007d38:	5802546c 	.word	0x5802546c
 8007d3c:	58025480 	.word	0x58025480
 8007d40:	58025494 	.word	0x58025494
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d028      	beq.n	8007d9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop

08007dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	@ 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007dd4:	4b67      	ldr	r3, [pc, #412]	@ (8007f74 <HAL_DMA_IRQHandler+0x1ac>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a67      	ldr	r2, [pc, #412]	@ (8007f78 <HAL_DMA_IRQHandler+0x1b0>)
 8007dda:	fba2 2303 	umull	r2, r3, r2, r3
 8007dde:	0a9b      	lsrs	r3, r3, #10
 8007de0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8007f7c <HAL_DMA_IRQHandler+0x1b4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d04a      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a5d      	ldr	r2, [pc, #372]	@ (8007f80 <HAL_DMA_IRQHandler+0x1b8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d045      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a5c      	ldr	r2, [pc, #368]	@ (8007f84 <HAL_DMA_IRQHandler+0x1bc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d040      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8007f88 <HAL_DMA_IRQHandler+0x1c0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d03b      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a59      	ldr	r2, [pc, #356]	@ (8007f8c <HAL_DMA_IRQHandler+0x1c4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d036      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a57      	ldr	r2, [pc, #348]	@ (8007f90 <HAL_DMA_IRQHandler+0x1c8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d031      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a56      	ldr	r2, [pc, #344]	@ (8007f94 <HAL_DMA_IRQHandler+0x1cc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d02c      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a54      	ldr	r2, [pc, #336]	@ (8007f98 <HAL_DMA_IRQHandler+0x1d0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d027      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a53      	ldr	r2, [pc, #332]	@ (8007f9c <HAL_DMA_IRQHandler+0x1d4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d022      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a51      	ldr	r2, [pc, #324]	@ (8007fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d01d      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a50      	ldr	r2, [pc, #320]	@ (8007fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d018      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8007fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a4d      	ldr	r2, [pc, #308]	@ (8007fac <HAL_DMA_IRQHandler+0x1e4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a4b      	ldr	r2, [pc, #300]	@ (8007fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a4a      	ldr	r2, [pc, #296]	@ (8007fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xd2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a48      	ldr	r2, [pc, #288]	@ (8007fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d101      	bne.n	8007e9e <HAL_DMA_IRQHandler+0xd6>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_DMA_IRQHandler+0xd8>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 842b 	beq.w	80086fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2208      	movs	r2, #8
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80a2 	beq.w	8008000 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8007f7c <HAL_DMA_IRQHandler+0x1b4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d04a      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a2d      	ldr	r2, [pc, #180]	@ (8007f80 <HAL_DMA_IRQHandler+0x1b8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d045      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f84 <HAL_DMA_IRQHandler+0x1bc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d040      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a2a      	ldr	r2, [pc, #168]	@ (8007f88 <HAL_DMA_IRQHandler+0x1c0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d03b      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	@ (8007f8c <HAL_DMA_IRQHandler+0x1c4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d036      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a27      	ldr	r2, [pc, #156]	@ (8007f90 <HAL_DMA_IRQHandler+0x1c8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d031      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a25      	ldr	r2, [pc, #148]	@ (8007f94 <HAL_DMA_IRQHandler+0x1cc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d02c      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a24      	ldr	r2, [pc, #144]	@ (8007f98 <HAL_DMA_IRQHandler+0x1d0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d027      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a22      	ldr	r2, [pc, #136]	@ (8007f9c <HAL_DMA_IRQHandler+0x1d4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d022      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a21      	ldr	r2, [pc, #132]	@ (8007fa0 <HAL_DMA_IRQHandler+0x1d8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01d      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1f      	ldr	r2, [pc, #124]	@ (8007fa4 <HAL_DMA_IRQHandler+0x1dc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa8 <HAL_DMA_IRQHandler+0x1e0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	@ (8007fac <HAL_DMA_IRQHandler+0x1e4>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb0 <HAL_DMA_IRQHandler+0x1e8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a19      	ldr	r2, [pc, #100]	@ (8007fb4 <HAL_DMA_IRQHandler+0x1ec>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x194>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a18      	ldr	r2, [pc, #96]	@ (8007fb8 <HAL_DMA_IRQHandler+0x1f0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d12f      	bne.n	8007fbc <HAL_DMA_IRQHandler+0x1f4>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bf14      	ite	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	2300      	moveq	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	e02e      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x208>
 8007f72:	bf00      	nop
 8007f74:	24000228 	.word	0x24000228
 8007f78:	1b4e81b5 	.word	0x1b4e81b5
 8007f7c:	40020010 	.word	0x40020010
 8007f80:	40020028 	.word	0x40020028
 8007f84:	40020040 	.word	0x40020040
 8007f88:	40020058 	.word	0x40020058
 8007f8c:	40020070 	.word	0x40020070
 8007f90:	40020088 	.word	0x40020088
 8007f94:	400200a0 	.word	0x400200a0
 8007f98:	400200b8 	.word	0x400200b8
 8007f9c:	40020410 	.word	0x40020410
 8007fa0:	40020428 	.word	0x40020428
 8007fa4:	40020440 	.word	0x40020440
 8007fa8:	40020458 	.word	0x40020458
 8007fac:	40020470 	.word	0x40020470
 8007fb0:	40020488 	.word	0x40020488
 8007fb4:	400204a0 	.word	0x400204a0
 8007fb8:	400204b8 	.word	0x400204b8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf14      	ite	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	2300      	moveq	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d015      	beq.n	8008000 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0204 	bic.w	r2, r2, #4
 8007fe2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fe8:	f003 031f 	and.w	r3, r3, #31
 8007fec:	2208      	movs	r2, #8
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff8:	f043 0201 	orr.w	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008004:	f003 031f 	and.w	r3, r3, #31
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	fa22 f303 	lsr.w	r3, r2, r3
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d06e      	beq.n	80080f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a69      	ldr	r2, [pc, #420]	@ (80081c0 <HAL_DMA_IRQHandler+0x3f8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d04a      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a67      	ldr	r2, [pc, #412]	@ (80081c4 <HAL_DMA_IRQHandler+0x3fc>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d045      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a66      	ldr	r2, [pc, #408]	@ (80081c8 <HAL_DMA_IRQHandler+0x400>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d040      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a64      	ldr	r2, [pc, #400]	@ (80081cc <HAL_DMA_IRQHandler+0x404>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d03b      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a63      	ldr	r2, [pc, #396]	@ (80081d0 <HAL_DMA_IRQHandler+0x408>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d036      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a61      	ldr	r2, [pc, #388]	@ (80081d4 <HAL_DMA_IRQHandler+0x40c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d031      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a60      	ldr	r2, [pc, #384]	@ (80081d8 <HAL_DMA_IRQHandler+0x410>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d02c      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a5e      	ldr	r2, [pc, #376]	@ (80081dc <HAL_DMA_IRQHandler+0x414>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d027      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a5d      	ldr	r2, [pc, #372]	@ (80081e0 <HAL_DMA_IRQHandler+0x418>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d022      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a5b      	ldr	r2, [pc, #364]	@ (80081e4 <HAL_DMA_IRQHandler+0x41c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01d      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a5a      	ldr	r2, [pc, #360]	@ (80081e8 <HAL_DMA_IRQHandler+0x420>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d018      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a58      	ldr	r2, [pc, #352]	@ (80081ec <HAL_DMA_IRQHandler+0x424>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a57      	ldr	r2, [pc, #348]	@ (80081f0 <HAL_DMA_IRQHandler+0x428>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a55      	ldr	r2, [pc, #340]	@ (80081f4 <HAL_DMA_IRQHandler+0x42c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a54      	ldr	r2, [pc, #336]	@ (80081f8 <HAL_DMA_IRQHandler+0x430>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_DMA_IRQHandler+0x2ee>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a52      	ldr	r2, [pc, #328]	@ (80081fc <HAL_DMA_IRQHandler+0x434>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10a      	bne.n	80080cc <HAL_DMA_IRQHandler+0x304>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	e003      	b.n	80080d4 <HAL_DMA_IRQHandler+0x30c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00d      	beq.n	80080f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2201      	movs	r2, #1
 80080e2:	409a      	lsls	r2, r3
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ec:	f043 0202 	orr.w	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	2204      	movs	r2, #4
 80080fe:	409a      	lsls	r2, r3
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	4013      	ands	r3, r2
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 808f 	beq.w	8008228 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a2c      	ldr	r2, [pc, #176]	@ (80081c0 <HAL_DMA_IRQHandler+0x3f8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d04a      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a2a      	ldr	r2, [pc, #168]	@ (80081c4 <HAL_DMA_IRQHandler+0x3fc>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d045      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a29      	ldr	r2, [pc, #164]	@ (80081c8 <HAL_DMA_IRQHandler+0x400>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d040      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a27      	ldr	r2, [pc, #156]	@ (80081cc <HAL_DMA_IRQHandler+0x404>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d03b      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a26      	ldr	r2, [pc, #152]	@ (80081d0 <HAL_DMA_IRQHandler+0x408>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d036      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a24      	ldr	r2, [pc, #144]	@ (80081d4 <HAL_DMA_IRQHandler+0x40c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d031      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a23      	ldr	r2, [pc, #140]	@ (80081d8 <HAL_DMA_IRQHandler+0x410>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d02c      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a21      	ldr	r2, [pc, #132]	@ (80081dc <HAL_DMA_IRQHandler+0x414>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d027      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a20      	ldr	r2, [pc, #128]	@ (80081e0 <HAL_DMA_IRQHandler+0x418>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d022      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1e      	ldr	r2, [pc, #120]	@ (80081e4 <HAL_DMA_IRQHandler+0x41c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01d      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1d      	ldr	r2, [pc, #116]	@ (80081e8 <HAL_DMA_IRQHandler+0x420>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d018      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ec <HAL_DMA_IRQHandler+0x424>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1a      	ldr	r2, [pc, #104]	@ (80081f0 <HAL_DMA_IRQHandler+0x428>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <HAL_DMA_IRQHandler+0x42c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <HAL_DMA_IRQHandler+0x430>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_DMA_IRQHandler+0x3e2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a15      	ldr	r2, [pc, #84]	@ (80081fc <HAL_DMA_IRQHandler+0x434>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d12a      	bne.n	8008200 <HAL_DMA_IRQHandler+0x438>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bf14      	ite	ne
 80081b8:	2301      	movne	r3, #1
 80081ba:	2300      	moveq	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	e023      	b.n	8008208 <HAL_DMA_IRQHandler+0x440>
 80081c0:	40020010 	.word	0x40020010
 80081c4:	40020028 	.word	0x40020028
 80081c8:	40020040 	.word	0x40020040
 80081cc:	40020058 	.word	0x40020058
 80081d0:	40020070 	.word	0x40020070
 80081d4:	40020088 	.word	0x40020088
 80081d8:	400200a0 	.word	0x400200a0
 80081dc:	400200b8 	.word	0x400200b8
 80081e0:	40020410 	.word	0x40020410
 80081e4:	40020428 	.word	0x40020428
 80081e8:	40020440 	.word	0x40020440
 80081ec:	40020458 	.word	0x40020458
 80081f0:	40020470 	.word	0x40020470
 80081f4:	40020488 	.word	0x40020488
 80081f8:	400204a0 	.word	0x400204a0
 80081fc:	400204b8 	.word	0x400204b8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00d      	beq.n	8008228 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2204      	movs	r2, #4
 8008216:	409a      	lsls	r2, r3
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008220:	f043 0204 	orr.w	r2, r3, #4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2210      	movs	r2, #16
 8008232:	409a      	lsls	r2, r3
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	4013      	ands	r3, r2
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80a6 	beq.w	800838a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a85      	ldr	r2, [pc, #532]	@ (8008458 <HAL_DMA_IRQHandler+0x690>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d04a      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a83      	ldr	r2, [pc, #524]	@ (800845c <HAL_DMA_IRQHandler+0x694>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d045      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a82      	ldr	r2, [pc, #520]	@ (8008460 <HAL_DMA_IRQHandler+0x698>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d040      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a80      	ldr	r2, [pc, #512]	@ (8008464 <HAL_DMA_IRQHandler+0x69c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d03b      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a7f      	ldr	r2, [pc, #508]	@ (8008468 <HAL_DMA_IRQHandler+0x6a0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d036      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a7d      	ldr	r2, [pc, #500]	@ (800846c <HAL_DMA_IRQHandler+0x6a4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d031      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a7c      	ldr	r2, [pc, #496]	@ (8008470 <HAL_DMA_IRQHandler+0x6a8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d02c      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a7a      	ldr	r2, [pc, #488]	@ (8008474 <HAL_DMA_IRQHandler+0x6ac>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d027      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a79      	ldr	r2, [pc, #484]	@ (8008478 <HAL_DMA_IRQHandler+0x6b0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d022      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a77      	ldr	r2, [pc, #476]	@ (800847c <HAL_DMA_IRQHandler+0x6b4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01d      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a76      	ldr	r2, [pc, #472]	@ (8008480 <HAL_DMA_IRQHandler+0x6b8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d018      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a74      	ldr	r2, [pc, #464]	@ (8008484 <HAL_DMA_IRQHandler+0x6bc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d013      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a73      	ldr	r2, [pc, #460]	@ (8008488 <HAL_DMA_IRQHandler+0x6c0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00e      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a71      	ldr	r2, [pc, #452]	@ (800848c <HAL_DMA_IRQHandler+0x6c4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d009      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a70      	ldr	r2, [pc, #448]	@ (8008490 <HAL_DMA_IRQHandler+0x6c8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d004      	beq.n	80082de <HAL_DMA_IRQHandler+0x516>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008494 <HAL_DMA_IRQHandler+0x6cc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d10a      	bne.n	80082f4 <HAL_DMA_IRQHandler+0x52c>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bf14      	ite	ne
 80082ec:	2301      	movne	r3, #1
 80082ee:	2300      	moveq	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	e009      	b.n	8008308 <HAL_DMA_IRQHandler+0x540>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d03e      	beq.n	800838a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	2210      	movs	r2, #16
 8008316:	409a      	lsls	r2, r3
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d018      	beq.n	800835c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d108      	bne.n	800834a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d024      	beq.n	800838a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
 8008348:	e01f      	b.n	800838a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
 800835a:	e016      	b.n	800838a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d107      	bne.n	800837a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0208 	bic.w	r2, r2, #8
 8008378:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2220      	movs	r2, #32
 8008394:	409a      	lsls	r2, r3
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	4013      	ands	r3, r2
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8110 	beq.w	80085c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008458 <HAL_DMA_IRQHandler+0x690>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d04a      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2b      	ldr	r2, [pc, #172]	@ (800845c <HAL_DMA_IRQHandler+0x694>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d045      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a29      	ldr	r2, [pc, #164]	@ (8008460 <HAL_DMA_IRQHandler+0x698>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d040      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a28      	ldr	r2, [pc, #160]	@ (8008464 <HAL_DMA_IRQHandler+0x69c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d03b      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a26      	ldr	r2, [pc, #152]	@ (8008468 <HAL_DMA_IRQHandler+0x6a0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d036      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a25      	ldr	r2, [pc, #148]	@ (800846c <HAL_DMA_IRQHandler+0x6a4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d031      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a23      	ldr	r2, [pc, #140]	@ (8008470 <HAL_DMA_IRQHandler+0x6a8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d02c      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a22      	ldr	r2, [pc, #136]	@ (8008474 <HAL_DMA_IRQHandler+0x6ac>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d027      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a20      	ldr	r2, [pc, #128]	@ (8008478 <HAL_DMA_IRQHandler+0x6b0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d022      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <HAL_DMA_IRQHandler+0x6b4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d01d      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <HAL_DMA_IRQHandler+0x6b8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1c      	ldr	r2, [pc, #112]	@ (8008484 <HAL_DMA_IRQHandler+0x6bc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1a      	ldr	r2, [pc, #104]	@ (8008488 <HAL_DMA_IRQHandler+0x6c0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a19      	ldr	r2, [pc, #100]	@ (800848c <HAL_DMA_IRQHandler+0x6c4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a17      	ldr	r2, [pc, #92]	@ (8008490 <HAL_DMA_IRQHandler+0x6c8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_DMA_IRQHandler+0x678>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <HAL_DMA_IRQHandler+0x6cc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d12b      	bne.n	8008498 <HAL_DMA_IRQHandler+0x6d0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b00      	cmp	r3, #0
 800844c:	bf14      	ite	ne
 800844e:	2301      	movne	r3, #1
 8008450:	2300      	moveq	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	e02a      	b.n	80084ac <HAL_DMA_IRQHandler+0x6e4>
 8008456:	bf00      	nop
 8008458:	40020010 	.word	0x40020010
 800845c:	40020028 	.word	0x40020028
 8008460:	40020040 	.word	0x40020040
 8008464:	40020058 	.word	0x40020058
 8008468:	40020070 	.word	0x40020070
 800846c:	40020088 	.word	0x40020088
 8008470:	400200a0 	.word	0x400200a0
 8008474:	400200b8 	.word	0x400200b8
 8008478:	40020410 	.word	0x40020410
 800847c:	40020428 	.word	0x40020428
 8008480:	40020440 	.word	0x40020440
 8008484:	40020458 	.word	0x40020458
 8008488:	40020470 	.word	0x40020470
 800848c:	40020488 	.word	0x40020488
 8008490:	400204a0 	.word	0x400204a0
 8008494:	400204b8 	.word	0x400204b8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8087 	beq.w	80085c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084b6:	f003 031f 	and.w	r3, r3, #31
 80084ba:	2220      	movs	r2, #32
 80084bc:	409a      	lsls	r2, r3
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d139      	bne.n	8008542 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0216 	bic.w	r2, r2, #22
 80084dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695a      	ldr	r2, [r3, #20]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <HAL_DMA_IRQHandler+0x736>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0208 	bic.w	r2, r2, #8
 800850c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	223f      	movs	r2, #63	@ 0x3f
 8008518:	409a      	lsls	r2, r3
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 834a 	beq.w	8008bcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
          }
          return;
 8008540:	e344      	b.n	8008bcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d018      	beq.n	8008582 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d108      	bne.n	8008570 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02c      	beq.n	80085c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
 800856e:	e027      	b.n	80085c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d023      	beq.n	80085c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
 8008580:	e01e      	b.n	80085c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10f      	bne.n	80085b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0210 	bic.w	r2, r2, #16
 800859e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8306 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8088 	beq.w	80086e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2204      	movs	r2, #4
 80085dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a7a      	ldr	r2, [pc, #488]	@ (80087d0 <HAL_DMA_IRQHandler+0xa08>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d04a      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a79      	ldr	r2, [pc, #484]	@ (80087d4 <HAL_DMA_IRQHandler+0xa0c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d045      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a77      	ldr	r2, [pc, #476]	@ (80087d8 <HAL_DMA_IRQHandler+0xa10>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d040      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a76      	ldr	r2, [pc, #472]	@ (80087dc <HAL_DMA_IRQHandler+0xa14>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d03b      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a74      	ldr	r2, [pc, #464]	@ (80087e0 <HAL_DMA_IRQHandler+0xa18>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d036      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a73      	ldr	r2, [pc, #460]	@ (80087e4 <HAL_DMA_IRQHandler+0xa1c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d031      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a71      	ldr	r2, [pc, #452]	@ (80087e8 <HAL_DMA_IRQHandler+0xa20>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d02c      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a70      	ldr	r2, [pc, #448]	@ (80087ec <HAL_DMA_IRQHandler+0xa24>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d027      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a6e      	ldr	r2, [pc, #440]	@ (80087f0 <HAL_DMA_IRQHandler+0xa28>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d022      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a6d      	ldr	r2, [pc, #436]	@ (80087f4 <HAL_DMA_IRQHandler+0xa2c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d01d      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a6b      	ldr	r2, [pc, #428]	@ (80087f8 <HAL_DMA_IRQHandler+0xa30>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d018      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a6a      	ldr	r2, [pc, #424]	@ (80087fc <HAL_DMA_IRQHandler+0xa34>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d013      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a68      	ldr	r2, [pc, #416]	@ (8008800 <HAL_DMA_IRQHandler+0xa38>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00e      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a67      	ldr	r2, [pc, #412]	@ (8008804 <HAL_DMA_IRQHandler+0xa3c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d009      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a65      	ldr	r2, [pc, #404]	@ (8008808 <HAL_DMA_IRQHandler+0xa40>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d004      	beq.n	8008680 <HAL_DMA_IRQHandler+0x8b8>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a64      	ldr	r2, [pc, #400]	@ (800880c <HAL_DMA_IRQHandler+0xa44>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d108      	bne.n	8008692 <HAL_DMA_IRQHandler+0x8ca>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e007      	b.n	80086a2 <HAL_DMA_IRQHandler+0x8da>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0201 	bic.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d307      	bcc.n	80086be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f2      	bne.n	80086a2 <HAL_DMA_IRQHandler+0x8da>
 80086bc:	e000      	b.n	80086c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80086be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80086d6:	e003      	b.n	80086e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8272 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
 80086fa:	e26c      	b.n	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a43      	ldr	r2, [pc, #268]	@ (8008810 <HAL_DMA_IRQHandler+0xa48>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d022      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a42      	ldr	r2, [pc, #264]	@ (8008814 <HAL_DMA_IRQHandler+0xa4c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d01d      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a40      	ldr	r2, [pc, #256]	@ (8008818 <HAL_DMA_IRQHandler+0xa50>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3f      	ldr	r2, [pc, #252]	@ (800881c <HAL_DMA_IRQHandler+0xa54>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a3d      	ldr	r2, [pc, #244]	@ (8008820 <HAL_DMA_IRQHandler+0xa58>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a3c      	ldr	r2, [pc, #240]	@ (8008824 <HAL_DMA_IRQHandler+0xa5c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a3a      	ldr	r2, [pc, #232]	@ (8008828 <HAL_DMA_IRQHandler+0xa60>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_DMA_IRQHandler+0x984>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a39      	ldr	r2, [pc, #228]	@ (800882c <HAL_DMA_IRQHandler+0xa64>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d101      	bne.n	8008750 <HAL_DMA_IRQHandler+0x988>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <HAL_DMA_IRQHandler+0x98a>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 823f 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008764:	f003 031f 	and.w	r3, r3, #31
 8008768:	2204      	movs	r2, #4
 800876a:	409a      	lsls	r2, r3
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	4013      	ands	r3, r2
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80cd 	beq.w	8008910 <HAL_DMA_IRQHandler+0xb48>
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80c7 	beq.w	8008910 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2204      	movs	r2, #4
 800878c:	409a      	lsls	r2, r3
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d049      	beq.n	8008830 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8210 	beq.w	8008bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087b8:	e20a      	b.n	8008bd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8206 	beq.w	8008bd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087cc:	e200      	b.n	8008bd0 <HAL_DMA_IRQHandler+0xe08>
 80087ce:	bf00      	nop
 80087d0:	40020010 	.word	0x40020010
 80087d4:	40020028 	.word	0x40020028
 80087d8:	40020040 	.word	0x40020040
 80087dc:	40020058 	.word	0x40020058
 80087e0:	40020070 	.word	0x40020070
 80087e4:	40020088 	.word	0x40020088
 80087e8:	400200a0 	.word	0x400200a0
 80087ec:	400200b8 	.word	0x400200b8
 80087f0:	40020410 	.word	0x40020410
 80087f4:	40020428 	.word	0x40020428
 80087f8:	40020440 	.word	0x40020440
 80087fc:	40020458 	.word	0x40020458
 8008800:	40020470 	.word	0x40020470
 8008804:	40020488 	.word	0x40020488
 8008808:	400204a0 	.word	0x400204a0
 800880c:	400204b8 	.word	0x400204b8
 8008810:	58025408 	.word	0x58025408
 8008814:	5802541c 	.word	0x5802541c
 8008818:	58025430 	.word	0x58025430
 800881c:	58025444 	.word	0x58025444
 8008820:	58025458 	.word	0x58025458
 8008824:	5802546c 	.word	0x5802546c
 8008828:	58025480 	.word	0x58025480
 800882c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d160      	bne.n	80088fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a7f      	ldr	r2, [pc, #508]	@ (8008a3c <HAL_DMA_IRQHandler+0xc74>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d04a      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a7d      	ldr	r2, [pc, #500]	@ (8008a40 <HAL_DMA_IRQHandler+0xc78>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d045      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a7c      	ldr	r2, [pc, #496]	@ (8008a44 <HAL_DMA_IRQHandler+0xc7c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d040      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a7a      	ldr	r2, [pc, #488]	@ (8008a48 <HAL_DMA_IRQHandler+0xc80>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d03b      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a79      	ldr	r2, [pc, #484]	@ (8008a4c <HAL_DMA_IRQHandler+0xc84>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d036      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a77      	ldr	r2, [pc, #476]	@ (8008a50 <HAL_DMA_IRQHandler+0xc88>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d031      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a76      	ldr	r2, [pc, #472]	@ (8008a54 <HAL_DMA_IRQHandler+0xc8c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d02c      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a74      	ldr	r2, [pc, #464]	@ (8008a58 <HAL_DMA_IRQHandler+0xc90>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d027      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a73      	ldr	r2, [pc, #460]	@ (8008a5c <HAL_DMA_IRQHandler+0xc94>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d022      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a71      	ldr	r2, [pc, #452]	@ (8008a60 <HAL_DMA_IRQHandler+0xc98>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d01d      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a70      	ldr	r2, [pc, #448]	@ (8008a64 <HAL_DMA_IRQHandler+0xc9c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d018      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a6e      	ldr	r2, [pc, #440]	@ (8008a68 <HAL_DMA_IRQHandler+0xca0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d013      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a6d      	ldr	r2, [pc, #436]	@ (8008a6c <HAL_DMA_IRQHandler+0xca4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00e      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a6b      	ldr	r2, [pc, #428]	@ (8008a70 <HAL_DMA_IRQHandler+0xca8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d009      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a6a      	ldr	r2, [pc, #424]	@ (8008a74 <HAL_DMA_IRQHandler+0xcac>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d004      	beq.n	80088da <HAL_DMA_IRQHandler+0xb12>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a68      	ldr	r2, [pc, #416]	@ (8008a78 <HAL_DMA_IRQHandler+0xcb0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d108      	bne.n	80088ec <HAL_DMA_IRQHandler+0xb24>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0208 	bic.w	r2, r2, #8
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e007      	b.n	80088fc <HAL_DMA_IRQHandler+0xb34>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0204 	bic.w	r2, r2, #4
 80088fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8165 	beq.w	8008bd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800890e:	e15f      	b.n	8008bd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2202      	movs	r2, #2
 800891a:	409a      	lsls	r2, r3
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4013      	ands	r3, r2
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 80c5 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xce8>
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80bf 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008936:	f003 031f 	and.w	r3, r3, #31
 800893a:	2202      	movs	r2, #2
 800893c:	409a      	lsls	r2, r3
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d018      	beq.n	800897e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 813a 	beq.w	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008968:	e134      	b.n	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 8130 	beq.w	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800897c:	e12a      	b.n	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 8089 	bne.w	8008a9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a2b      	ldr	r2, [pc, #172]	@ (8008a3c <HAL_DMA_IRQHandler+0xc74>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d04a      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a29      	ldr	r2, [pc, #164]	@ (8008a40 <HAL_DMA_IRQHandler+0xc78>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d045      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a28      	ldr	r2, [pc, #160]	@ (8008a44 <HAL_DMA_IRQHandler+0xc7c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d040      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a26      	ldr	r2, [pc, #152]	@ (8008a48 <HAL_DMA_IRQHandler+0xc80>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d03b      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a25      	ldr	r2, [pc, #148]	@ (8008a4c <HAL_DMA_IRQHandler+0xc84>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d036      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a23      	ldr	r2, [pc, #140]	@ (8008a50 <HAL_DMA_IRQHandler+0xc88>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d031      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a22      	ldr	r2, [pc, #136]	@ (8008a54 <HAL_DMA_IRQHandler+0xc8c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d02c      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a20      	ldr	r2, [pc, #128]	@ (8008a58 <HAL_DMA_IRQHandler+0xc90>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d027      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1f      	ldr	r2, [pc, #124]	@ (8008a5c <HAL_DMA_IRQHandler+0xc94>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d022      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <HAL_DMA_IRQHandler+0xc98>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01d      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008a64 <HAL_DMA_IRQHandler+0xc9c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d018      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008a68 <HAL_DMA_IRQHandler+0xca0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a19      	ldr	r2, [pc, #100]	@ (8008a6c <HAL_DMA_IRQHandler+0xca4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00e      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a17      	ldr	r2, [pc, #92]	@ (8008a70 <HAL_DMA_IRQHandler+0xca8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d009      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a16      	ldr	r2, [pc, #88]	@ (8008a74 <HAL_DMA_IRQHandler+0xcac>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_DMA_IRQHandler+0xc62>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a14      	ldr	r2, [pc, #80]	@ (8008a78 <HAL_DMA_IRQHandler+0xcb0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d128      	bne.n	8008a7c <HAL_DMA_IRQHandler+0xcb4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0214 	bic.w	r2, r2, #20
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e027      	b.n	8008a8c <HAL_DMA_IRQHandler+0xcc4>
 8008a3c:	40020010 	.word	0x40020010
 8008a40:	40020028 	.word	0x40020028
 8008a44:	40020040 	.word	0x40020040
 8008a48:	40020058 	.word	0x40020058
 8008a4c:	40020070 	.word	0x40020070
 8008a50:	40020088 	.word	0x40020088
 8008a54:	400200a0 	.word	0x400200a0
 8008a58:	400200b8 	.word	0x400200b8
 8008a5c:	40020410 	.word	0x40020410
 8008a60:	40020428 	.word	0x40020428
 8008a64:	40020440 	.word	0x40020440
 8008a68:	40020458 	.word	0x40020458
 8008a6c:	40020470 	.word	0x40020470
 8008a70:	40020488 	.word	0x40020488
 8008a74:	400204a0 	.word	0x400204a0
 8008a78:	400204b8 	.word	0x400204b8
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 020a 	bic.w	r2, r2, #10
 8008a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8097 	beq.w	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aae:	e091      	b.n	8008bd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ab4:	f003 031f 	and.w	r3, r3, #31
 8008ab8:	2208      	movs	r2, #8
 8008aba:	409a      	lsls	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8088 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8082 	beq.w	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a41      	ldr	r2, [pc, #260]	@ (8008bdc <HAL_DMA_IRQHandler+0xe14>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d04a      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3f      	ldr	r2, [pc, #252]	@ (8008be0 <HAL_DMA_IRQHandler+0xe18>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d045      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3e      	ldr	r2, [pc, #248]	@ (8008be4 <HAL_DMA_IRQHandler+0xe1c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d040      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a3c      	ldr	r2, [pc, #240]	@ (8008be8 <HAL_DMA_IRQHandler+0xe20>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d03b      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a3b      	ldr	r2, [pc, #236]	@ (8008bec <HAL_DMA_IRQHandler+0xe24>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d036      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a39      	ldr	r2, [pc, #228]	@ (8008bf0 <HAL_DMA_IRQHandler+0xe28>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d031      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a38      	ldr	r2, [pc, #224]	@ (8008bf4 <HAL_DMA_IRQHandler+0xe2c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d02c      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a36      	ldr	r2, [pc, #216]	@ (8008bf8 <HAL_DMA_IRQHandler+0xe30>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d027      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a35      	ldr	r2, [pc, #212]	@ (8008bfc <HAL_DMA_IRQHandler+0xe34>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d022      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a33      	ldr	r2, [pc, #204]	@ (8008c00 <HAL_DMA_IRQHandler+0xe38>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01d      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a32      	ldr	r2, [pc, #200]	@ (8008c04 <HAL_DMA_IRQHandler+0xe3c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d018      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a30      	ldr	r2, [pc, #192]	@ (8008c08 <HAL_DMA_IRQHandler+0xe40>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d013      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c0c <HAL_DMA_IRQHandler+0xe44>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a2d      	ldr	r2, [pc, #180]	@ (8008c10 <HAL_DMA_IRQHandler+0xe48>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a2c      	ldr	r2, [pc, #176]	@ (8008c14 <HAL_DMA_IRQHandler+0xe4c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_DMA_IRQHandler+0xdaa>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8008c18 <HAL_DMA_IRQHandler+0xe50>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d108      	bne.n	8008b84 <HAL_DMA_IRQHandler+0xdbc>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 021c 	bic.w	r2, r2, #28
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	e007      	b.n	8008b94 <HAL_DMA_IRQHandler+0xdcc>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 020e 	bic.w	r2, r2, #14
 8008b92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	e004      	b.n	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008bd6:	3728      	adds	r7, #40	@ 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40020010 	.word	0x40020010
 8008be0:	40020028 	.word	0x40020028
 8008be4:	40020040 	.word	0x40020040
 8008be8:	40020058 	.word	0x40020058
 8008bec:	40020070 	.word	0x40020070
 8008bf0:	40020088 	.word	0x40020088
 8008bf4:	400200a0 	.word	0x400200a0
 8008bf8:	400200b8 	.word	0x400200b8
 8008bfc:	40020410 	.word	0x40020410
 8008c00:	40020428 	.word	0x40020428
 8008c04:	40020440 	.word	0x40020440
 8008c08:	40020458 	.word	0x40020458
 8008c0c:	40020470 	.word	0x40020470
 8008c10:	40020488 	.word	0x40020488
 8008c14:	400204a0 	.word	0x400204a0
 8008c18:	400204b8 	.word	0x400204b8

08008c1c <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	460b      	mov	r3, r1
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e045      	b.n	8008cc4 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_DMA_RegisterCallback+0x2a>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e03e      	b.n	8008cc4 <HAL_DMA_RegisterCallback+0xa8>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d12d      	bne.n	8008cb6 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d827      	bhi.n	8008cb0 <HAL_DMA_RegisterCallback+0x94>
 8008c60:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <HAL_DMA_RegisterCallback+0x4c>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8008c86:	e018      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008c8e:	e014      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8008c96:	e010      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8008c9e:	e00c      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8008ca6:	e008      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008cae:	e004      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb4:	e001      	b.n	8008cba <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cde:	b2db      	uxtb	r3, r3
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a7f      	ldr	r2, [pc, #508]	@ (8008f20 <DMA_SetConfig+0x21c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d072      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a7d      	ldr	r2, [pc, #500]	@ (8008f24 <DMA_SetConfig+0x220>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d06d      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7c      	ldr	r2, [pc, #496]	@ (8008f28 <DMA_SetConfig+0x224>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d068      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a7a      	ldr	r2, [pc, #488]	@ (8008f2c <DMA_SetConfig+0x228>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d063      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a79      	ldr	r2, [pc, #484]	@ (8008f30 <DMA_SetConfig+0x22c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d05e      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a77      	ldr	r2, [pc, #476]	@ (8008f34 <DMA_SetConfig+0x230>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d059      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a76      	ldr	r2, [pc, #472]	@ (8008f38 <DMA_SetConfig+0x234>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d054      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a74      	ldr	r2, [pc, #464]	@ (8008f3c <DMA_SetConfig+0x238>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d04f      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a73      	ldr	r2, [pc, #460]	@ (8008f40 <DMA_SetConfig+0x23c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d04a      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a71      	ldr	r2, [pc, #452]	@ (8008f44 <DMA_SetConfig+0x240>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d045      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a70      	ldr	r2, [pc, #448]	@ (8008f48 <DMA_SetConfig+0x244>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d040      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a6e      	ldr	r2, [pc, #440]	@ (8008f4c <DMA_SetConfig+0x248>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d03b      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8008f50 <DMA_SetConfig+0x24c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d036      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a6b      	ldr	r2, [pc, #428]	@ (8008f54 <DMA_SetConfig+0x250>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d031      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a6a      	ldr	r2, [pc, #424]	@ (8008f58 <DMA_SetConfig+0x254>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d02c      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a68      	ldr	r2, [pc, #416]	@ (8008f5c <DMA_SetConfig+0x258>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d027      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a67      	ldr	r2, [pc, #412]	@ (8008f60 <DMA_SetConfig+0x25c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d022      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a65      	ldr	r2, [pc, #404]	@ (8008f64 <DMA_SetConfig+0x260>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01d      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a64      	ldr	r2, [pc, #400]	@ (8008f68 <DMA_SetConfig+0x264>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a62      	ldr	r2, [pc, #392]	@ (8008f6c <DMA_SetConfig+0x268>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a61      	ldr	r2, [pc, #388]	@ (8008f70 <DMA_SetConfig+0x26c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a5f      	ldr	r2, [pc, #380]	@ (8008f74 <DMA_SetConfig+0x270>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8008f78 <DMA_SetConfig+0x274>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <DMA_SetConfig+0x10a>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a5c      	ldr	r2, [pc, #368]	@ (8008f7c <DMA_SetConfig+0x278>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d101      	bne.n	8008e12 <DMA_SetConfig+0x10e>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e000      	b.n	8008e14 <DMA_SetConfig+0x110>
 8008e12:	2300      	movs	r3, #0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00d      	beq.n	8008e34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008e20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d004      	beq.n	8008e34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008e32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a39      	ldr	r2, [pc, #228]	@ (8008f20 <DMA_SetConfig+0x21c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d04a      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a38      	ldr	r2, [pc, #224]	@ (8008f24 <DMA_SetConfig+0x220>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d045      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a36      	ldr	r2, [pc, #216]	@ (8008f28 <DMA_SetConfig+0x224>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d040      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a35      	ldr	r2, [pc, #212]	@ (8008f2c <DMA_SetConfig+0x228>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d03b      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a33      	ldr	r2, [pc, #204]	@ (8008f30 <DMA_SetConfig+0x22c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d036      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a32      	ldr	r2, [pc, #200]	@ (8008f34 <DMA_SetConfig+0x230>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d031      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a30      	ldr	r2, [pc, #192]	@ (8008f38 <DMA_SetConfig+0x234>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d02c      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008f3c <DMA_SetConfig+0x238>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d027      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a2d      	ldr	r2, [pc, #180]	@ (8008f40 <DMA_SetConfig+0x23c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d022      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a2c      	ldr	r2, [pc, #176]	@ (8008f44 <DMA_SetConfig+0x240>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01d      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8008f48 <DMA_SetConfig+0x244>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d018      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a29      	ldr	r2, [pc, #164]	@ (8008f4c <DMA_SetConfig+0x248>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d013      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a27      	ldr	r2, [pc, #156]	@ (8008f50 <DMA_SetConfig+0x24c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00e      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a26      	ldr	r2, [pc, #152]	@ (8008f54 <DMA_SetConfig+0x250>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d009      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a24      	ldr	r2, [pc, #144]	@ (8008f58 <DMA_SetConfig+0x254>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d004      	beq.n	8008ed4 <DMA_SetConfig+0x1d0>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a23      	ldr	r2, [pc, #140]	@ (8008f5c <DMA_SetConfig+0x258>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d101      	bne.n	8008ed8 <DMA_SetConfig+0x1d4>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <DMA_SetConfig+0x1d6>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d059      	beq.n	8008f92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	223f      	movs	r2, #63	@ 0x3f
 8008ee8:	409a      	lsls	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008efc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b40      	cmp	r3, #64	@ 0x40
 8008f0c:	d138      	bne.n	8008f80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f1e:	e086      	b.n	800902e <DMA_SetConfig+0x32a>
 8008f20:	40020010 	.word	0x40020010
 8008f24:	40020028 	.word	0x40020028
 8008f28:	40020040 	.word	0x40020040
 8008f2c:	40020058 	.word	0x40020058
 8008f30:	40020070 	.word	0x40020070
 8008f34:	40020088 	.word	0x40020088
 8008f38:	400200a0 	.word	0x400200a0
 8008f3c:	400200b8 	.word	0x400200b8
 8008f40:	40020410 	.word	0x40020410
 8008f44:	40020428 	.word	0x40020428
 8008f48:	40020440 	.word	0x40020440
 8008f4c:	40020458 	.word	0x40020458
 8008f50:	40020470 	.word	0x40020470
 8008f54:	40020488 	.word	0x40020488
 8008f58:	400204a0 	.word	0x400204a0
 8008f5c:	400204b8 	.word	0x400204b8
 8008f60:	58025408 	.word	0x58025408
 8008f64:	5802541c 	.word	0x5802541c
 8008f68:	58025430 	.word	0x58025430
 8008f6c:	58025444 	.word	0x58025444
 8008f70:	58025458 	.word	0x58025458
 8008f74:	5802546c 	.word	0x5802546c
 8008f78:	58025480 	.word	0x58025480
 8008f7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]
}
 8008f90:	e04d      	b.n	800902e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a29      	ldr	r2, [pc, #164]	@ (800903c <DMA_SetConfig+0x338>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d022      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a27      	ldr	r2, [pc, #156]	@ (8009040 <DMA_SetConfig+0x33c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d01d      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a26      	ldr	r2, [pc, #152]	@ (8009044 <DMA_SetConfig+0x340>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d018      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a24      	ldr	r2, [pc, #144]	@ (8009048 <DMA_SetConfig+0x344>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a23      	ldr	r2, [pc, #140]	@ (800904c <DMA_SetConfig+0x348>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a21      	ldr	r2, [pc, #132]	@ (8009050 <DMA_SetConfig+0x34c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a20      	ldr	r2, [pc, #128]	@ (8009054 <DMA_SetConfig+0x350>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <DMA_SetConfig+0x2de>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8009058 <DMA_SetConfig+0x354>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d101      	bne.n	8008fe6 <DMA_SetConfig+0x2e2>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <DMA_SetConfig+0x2e4>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d020      	beq.n	800902e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff0:	f003 031f 	and.w	r3, r3, #31
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	409a      	lsls	r2, r3
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b40      	cmp	r3, #64	@ 0x40
 800900a:	d108      	bne.n	800901e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	60da      	str	r2, [r3, #12]
}
 800901c:	e007      	b.n	800902e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
}
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	58025408 	.word	0x58025408
 8009040:	5802541c 	.word	0x5802541c
 8009044:	58025430 	.word	0x58025430
 8009048:	58025444 	.word	0x58025444
 800904c:	58025458 	.word	0x58025458
 8009050:	5802546c 	.word	0x5802546c
 8009054:	58025480 	.word	0x58025480
 8009058:	58025494 	.word	0x58025494

0800905c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a42      	ldr	r2, [pc, #264]	@ (8009174 <DMA_CalcBaseAndBitshift+0x118>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d04a      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a41      	ldr	r2, [pc, #260]	@ (8009178 <DMA_CalcBaseAndBitshift+0x11c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d045      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a3f      	ldr	r2, [pc, #252]	@ (800917c <DMA_CalcBaseAndBitshift+0x120>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d040      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a3e      	ldr	r2, [pc, #248]	@ (8009180 <DMA_CalcBaseAndBitshift+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d03b      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a3c      	ldr	r2, [pc, #240]	@ (8009184 <DMA_CalcBaseAndBitshift+0x128>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d036      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a3b      	ldr	r2, [pc, #236]	@ (8009188 <DMA_CalcBaseAndBitshift+0x12c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d031      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a39      	ldr	r2, [pc, #228]	@ (800918c <DMA_CalcBaseAndBitshift+0x130>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d02c      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a38      	ldr	r2, [pc, #224]	@ (8009190 <DMA_CalcBaseAndBitshift+0x134>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d027      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a36      	ldr	r2, [pc, #216]	@ (8009194 <DMA_CalcBaseAndBitshift+0x138>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d022      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a35      	ldr	r2, [pc, #212]	@ (8009198 <DMA_CalcBaseAndBitshift+0x13c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d01d      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a33      	ldr	r2, [pc, #204]	@ (800919c <DMA_CalcBaseAndBitshift+0x140>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d018      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a32      	ldr	r2, [pc, #200]	@ (80091a0 <DMA_CalcBaseAndBitshift+0x144>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d013      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a30      	ldr	r2, [pc, #192]	@ (80091a4 <DMA_CalcBaseAndBitshift+0x148>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00e      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a2f      	ldr	r2, [pc, #188]	@ (80091a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d009      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a2d      	ldr	r2, [pc, #180]	@ (80091ac <DMA_CalcBaseAndBitshift+0x150>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d004      	beq.n	8009104 <DMA_CalcBaseAndBitshift+0xa8>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a2c      	ldr	r2, [pc, #176]	@ (80091b0 <DMA_CalcBaseAndBitshift+0x154>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d101      	bne.n	8009108 <DMA_CalcBaseAndBitshift+0xac>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <DMA_CalcBaseAndBitshift+0xae>
 8009108:	2300      	movs	r3, #0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d024      	beq.n	8009158 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	3b10      	subs	r3, #16
 8009116:	4a27      	ldr	r2, [pc, #156]	@ (80091b4 <DMA_CalcBaseAndBitshift+0x158>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	091b      	lsrs	r3, r3, #4
 800911e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	4a24      	ldr	r2, [pc, #144]	@ (80091b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8009128:	5cd3      	ldrb	r3, [r2, r3]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d908      	bls.n	8009148 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	4b1f      	ldr	r3, [pc, #124]	@ (80091bc <DMA_CalcBaseAndBitshift+0x160>)
 800913e:	4013      	ands	r3, r2
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	659a      	str	r2, [r3, #88]	@ 0x58
 8009146:	e00d      	b.n	8009164 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	4b1b      	ldr	r3, [pc, #108]	@ (80091bc <DMA_CalcBaseAndBitshift+0x160>)
 8009150:	4013      	ands	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6593      	str	r3, [r2, #88]	@ 0x58
 8009156:	e005      	b.n	8009164 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	40020010 	.word	0x40020010
 8009178:	40020028 	.word	0x40020028
 800917c:	40020040 	.word	0x40020040
 8009180:	40020058 	.word	0x40020058
 8009184:	40020070 	.word	0x40020070
 8009188:	40020088 	.word	0x40020088
 800918c:	400200a0 	.word	0x400200a0
 8009190:	400200b8 	.word	0x400200b8
 8009194:	40020410 	.word	0x40020410
 8009198:	40020428 	.word	0x40020428
 800919c:	40020440 	.word	0x40020440
 80091a0:	40020458 	.word	0x40020458
 80091a4:	40020470 	.word	0x40020470
 80091a8:	40020488 	.word	0x40020488
 80091ac:	400204a0 	.word	0x400204a0
 80091b0:	400204b8 	.word	0x400204b8
 80091b4:	aaaaaaab 	.word	0xaaaaaaab
 80091b8:	0801b220 	.word	0x0801b220
 80091bc:	fffffc00 	.word	0xfffffc00

080091c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d120      	bne.n	8009216 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d858      	bhi.n	800928e <DMA_CheckFifoParam+0xce>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <DMA_CheckFifoParam+0x24>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	08009207 	.word	0x08009207
 80091ec:	080091f5 	.word	0x080091f5
 80091f0:	0800928f 	.word	0x0800928f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d048      	beq.n	8009292 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009204:	e045      	b.n	8009292 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800920e:	d142      	bne.n	8009296 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009214:	e03f      	b.n	8009296 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800921e:	d123      	bne.n	8009268 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	2b03      	cmp	r3, #3
 8009226:	d838      	bhi.n	800929a <DMA_CheckFifoParam+0xda>
 8009228:	a201      	add	r2, pc, #4	@ (adr r2, 8009230 <DMA_CheckFifoParam+0x70>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009241 	.word	0x08009241
 8009234:	08009247 	.word	0x08009247
 8009238:	08009241 	.word	0x08009241
 800923c:	08009259 	.word	0x08009259
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
        break;
 8009244:	e030      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d025      	beq.n	800929e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009256:	e022      	b.n	800929e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009260:	d11f      	bne.n	80092a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009266:	e01c      	b.n	80092a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926c:	2b02      	cmp	r3, #2
 800926e:	d902      	bls.n	8009276 <DMA_CheckFifoParam+0xb6>
 8009270:	2b03      	cmp	r3, #3
 8009272:	d003      	beq.n	800927c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009274:	e018      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]
        break;
 800927a:	e015      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00e      	beq.n	80092a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	e00b      	b.n	80092a6 <DMA_CheckFifoParam+0xe6>
        break;
 800928e:	bf00      	nop
 8009290:	e00a      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        break;
 8009292:	bf00      	nop
 8009294:	e008      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        break;
 8009296:	bf00      	nop
 8009298:	e006      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        break;
 800929a:	bf00      	nop
 800929c:	e004      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        break;
 800929e:	bf00      	nop
 80092a0:	e002      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
        break;
 80092a2:	bf00      	nop
 80092a4:	e000      	b.n	80092a8 <DMA_CheckFifoParam+0xe8>
    break;
 80092a6:	bf00      	nop
    }
  }

  return status;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop

080092b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a38      	ldr	r2, [pc, #224]	@ (80093ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d022      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a36      	ldr	r2, [pc, #216]	@ (80093b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d01d      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a35      	ldr	r2, [pc, #212]	@ (80093b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d018      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a33      	ldr	r2, [pc, #204]	@ (80093b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a32      	ldr	r2, [pc, #200]	@ (80093bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00e      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a30      	ldr	r2, [pc, #192]	@ (80093c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d009      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a2f      	ldr	r2, [pc, #188]	@ (80093c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d004      	beq.n	8009316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a2d      	ldr	r2, [pc, #180]	@ (80093c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d101      	bne.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800931a:	2300      	movs	r3, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01a      	beq.n	8009356 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	3b08      	subs	r3, #8
 8009328:	4a28      	ldr	r2, [pc, #160]	@ (80093cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800932a:	fba2 2303 	umull	r2, r3, r2, r3
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4b26      	ldr	r3, [pc, #152]	@ (80093d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a24      	ldr	r2, [pc, #144]	@ (80093d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009344:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	2201      	movs	r2, #1
 800934e:	409a      	lsls	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009354:	e024      	b.n	80093a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	3b10      	subs	r3, #16
 800935e:	4a1e      	ldr	r2, [pc, #120]	@ (80093d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009360:	fba2 2303 	umull	r2, r3, r2, r3
 8009364:	091b      	lsrs	r3, r3, #4
 8009366:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4a1c      	ldr	r2, [pc, #112]	@ (80093dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d806      	bhi.n	800937e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4a1b      	ldr	r2, [pc, #108]	@ (80093e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d902      	bls.n	800937e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3308      	adds	r3, #8
 800937c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4b18      	ldr	r3, [pc, #96]	@ (80093e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	461a      	mov	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a16      	ldr	r2, [pc, #88]	@ (80093e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009390:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	2201      	movs	r2, #1
 800939a:	409a      	lsls	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093a0:	bf00      	nop
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	58025408 	.word	0x58025408
 80093b0:	5802541c 	.word	0x5802541c
 80093b4:	58025430 	.word	0x58025430
 80093b8:	58025444 	.word	0x58025444
 80093bc:	58025458 	.word	0x58025458
 80093c0:	5802546c 	.word	0x5802546c
 80093c4:	58025480 	.word	0x58025480
 80093c8:	58025494 	.word	0x58025494
 80093cc:	cccccccd 	.word	0xcccccccd
 80093d0:	16009600 	.word	0x16009600
 80093d4:	58025880 	.word	0x58025880
 80093d8:	aaaaaaab 	.word	0xaaaaaaab
 80093dc:	400204b8 	.word	0x400204b8
 80093e0:	4002040f 	.word	0x4002040f
 80093e4:	10008200 	.word	0x10008200
 80093e8:	40020880 	.word	0x40020880

080093ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04a      	beq.n	8009498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d847      	bhi.n	8009498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a25      	ldr	r2, [pc, #148]	@ (80094a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d022      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a24      	ldr	r2, [pc, #144]	@ (80094a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d01d      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a22      	ldr	r2, [pc, #136]	@ (80094ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d018      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a21      	ldr	r2, [pc, #132]	@ (80094b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d013      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00e      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1e      	ldr	r2, [pc, #120]	@ (80094b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d009      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1c      	ldr	r2, [pc, #112]	@ (80094bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d004      	beq.n	8009458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1b      	ldr	r2, [pc, #108]	@ (80094c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d101      	bne.n	800945c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800945c:	2300      	movs	r3, #0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	461a      	mov	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a15      	ldr	r2, [pc, #84]	@ (80094c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009474:	671a      	str	r2, [r3, #112]	@ 0x70
 8009476:	e009      	b.n	800948c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b14      	ldr	r3, [pc, #80]	@ (80094cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	461a      	mov	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a11      	ldr	r2, [pc, #68]	@ (80094d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800948a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3b01      	subs	r3, #1
 8009490:	2201      	movs	r2, #1
 8009492:	409a      	lsls	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009498:	bf00      	nop
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	58025408 	.word	0x58025408
 80094a8:	5802541c 	.word	0x5802541c
 80094ac:	58025430 	.word	0x58025430
 80094b0:	58025444 	.word	0x58025444
 80094b4:	58025458 	.word	0x58025458
 80094b8:	5802546c 	.word	0x5802546c
 80094bc:	58025480 	.word	0x58025480
 80094c0:	58025494 	.word	0x58025494
 80094c4:	1600963f 	.word	0x1600963f
 80094c8:	58025940 	.word	0x58025940
 80094cc:	1000823f 	.word	0x1000823f
 80094d0:	40020940 	.word	0x40020940

080094d4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	7a1b      	ldrb	r3, [r3, #8]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d154      	bne.n	8009598 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a4b      	ldr	r2, [pc, #300]	@ (8009620 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d049      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a49      	ldr	r2, [pc, #292]	@ (8009624 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d044      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a48      	ldr	r2, [pc, #288]	@ (8009628 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d03f      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a46      	ldr	r2, [pc, #280]	@ (800962c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d03a      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a45      	ldr	r2, [pc, #276]	@ (8009630 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d035      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a43      	ldr	r2, [pc, #268]	@ (8009634 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d030      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a42      	ldr	r2, [pc, #264]	@ (8009638 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d02b      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a40      	ldr	r2, [pc, #256]	@ (800963c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d026      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a3f      	ldr	r2, [pc, #252]	@ (8009640 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d021      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a3d      	ldr	r2, [pc, #244]	@ (8009644 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d01c      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a3c      	ldr	r2, [pc, #240]	@ (8009648 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d017      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a3a      	ldr	r2, [pc, #232]	@ (800964c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d012      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a39      	ldr	r2, [pc, #228]	@ (8009650 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00d      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a37      	ldr	r2, [pc, #220]	@ (8009654 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d008      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a36      	ldr	r2, [pc, #216]	@ (8009658 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a34      	ldr	r2, [pc, #208]	@ (800965c <HAL_DMAEx_ConfigMuxSync+0x188>)
 800958a:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d131      	bne.n	8009608 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_DMAEx_ConfigMuxSync+0xde>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e02f      	b.n	8009612 <HAL_DMAEx_ConfigMuxSync+0x13e>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c4:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 80095c8:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	b2d9      	uxtb	r1, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	061a      	lsls	r2, r3, #24
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	3b01      	subs	r3, #1
 80095dc:	04db      	lsls	r3, r3, #19
 80095de:	431a      	orrs	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	7a1b      	ldrb	r3, [r3, #8]
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	431a      	orrs	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	7a5b      	ldrb	r3, [r3, #9]
 80095f0:	025b      	lsls	r3, r3, #9
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095f8:	430a      	orrs	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	e004      	b.n	8009612 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800960e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40020010 	.word	0x40020010
 8009624:	40020028 	.word	0x40020028
 8009628:	40020040 	.word	0x40020040
 800962c:	40020058 	.word	0x40020058
 8009630:	40020070 	.word	0x40020070
 8009634:	40020088 	.word	0x40020088
 8009638:	400200a0 	.word	0x400200a0
 800963c:	400200b8 	.word	0x400200b8
 8009640:	40020410 	.word	0x40020410
 8009644:	40020428 	.word	0x40020428
 8009648:	40020440 	.word	0x40020440
 800964c:	40020458 	.word	0x40020458
 8009650:	40020470 	.word	0x40020470
 8009654:	40020488 	.word	0x40020488
 8009658:	400204a0 	.word	0x400204a0
 800965c:	400204b8 	.word	0x400204b8

08009660 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009672:	4013      	ands	r3, r2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01a      	beq.n	80096ae <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009682:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009690:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009696:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	655a      	str	r2, [r3, #84]	@ 0x54

    if(hdma->XferErrorCallback != NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d022      	beq.n	80096fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01a      	beq.n	80096fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	655a      	str	r2, [r3, #84]	@ 0x54

      if(hdma->XferErrorCallback != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
      }
    }
  }
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	@ 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009712:	4b89      	ldr	r3, [pc, #548]	@ (8009938 <HAL_GPIO_Init+0x234>)
 8009714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009716:	e194      	b.n	8009a42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	2101      	movs	r1, #1
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	fa01 f303 	lsl.w	r3, r1, r3
 8009724:	4013      	ands	r3, r2
 8009726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8186 	beq.w	8009a3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b01      	cmp	r3, #1
 800973a:	d005      	beq.n	8009748 <HAL_GPIO_Init+0x44>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f003 0303 	and.w	r3, r3, #3
 8009744:	2b02      	cmp	r3, #2
 8009746:	d130      	bne.n	80097aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	2203      	movs	r2, #3
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	43db      	mvns	r3, r3
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	4013      	ands	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	fa02 f303 	lsl.w	r3, r2, r3
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	4313      	orrs	r3, r2
 8009770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800977e:	2201      	movs	r2, #1
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	fa02 f303 	lsl.w	r3, r2, r3
 8009786:	43db      	mvns	r3, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	4013      	ands	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	091b      	lsrs	r3, r3, #4
 8009794:	f003 0201 	and.w	r2, r3, #1
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	fa02 f303 	lsl.w	r3, r2, r3
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d017      	beq.n	80097e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	2203      	movs	r2, #3
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	43db      	mvns	r3, r3
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	4013      	ands	r3, r2
 80097cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	689a      	ldr	r2, [r3, #8]
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d123      	bne.n	800983a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	08da      	lsrs	r2, r3, #3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3208      	adds	r2, #8
 80097fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	220f      	movs	r2, #15
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	43db      	mvns	r3, r3
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	4013      	ands	r3, r2
 8009814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	4313      	orrs	r3, r2
 800982a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	08da      	lsrs	r2, r3, #3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3208      	adds	r2, #8
 8009834:	69b9      	ldr	r1, [r7, #24]
 8009836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	2203      	movs	r2, #3
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	43db      	mvns	r3, r3
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	4013      	ands	r3, r2
 8009850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f003 0203 	and.w	r2, r3, #3
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	fa02 f303 	lsl.w	r3, r2, r3
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	4313      	orrs	r3, r2
 8009866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 80e0 	beq.w	8009a3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800987c:	4b2f      	ldr	r3, [pc, #188]	@ (800993c <HAL_GPIO_Init+0x238>)
 800987e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009882:	4a2e      	ldr	r2, [pc, #184]	@ (800993c <HAL_GPIO_Init+0x238>)
 8009884:	f043 0302 	orr.w	r3, r3, #2
 8009888:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800988c:	4b2b      	ldr	r3, [pc, #172]	@ (800993c <HAL_GPIO_Init+0x238>)
 800988e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800989a:	4a29      	ldr	r2, [pc, #164]	@ (8009940 <HAL_GPIO_Init+0x23c>)
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	089b      	lsrs	r3, r3, #2
 80098a0:	3302      	adds	r3, #2
 80098a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	220f      	movs	r2, #15
 80098b2:	fa02 f303 	lsl.w	r3, r2, r3
 80098b6:	43db      	mvns	r3, r3
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	4013      	ands	r3, r2
 80098bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a20      	ldr	r2, [pc, #128]	@ (8009944 <HAL_GPIO_Init+0x240>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d052      	beq.n	800996c <HAL_GPIO_Init+0x268>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009948 <HAL_GPIO_Init+0x244>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d031      	beq.n	8009932 <HAL_GPIO_Init+0x22e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1e      	ldr	r2, [pc, #120]	@ (800994c <HAL_GPIO_Init+0x248>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d02b      	beq.n	800992e <HAL_GPIO_Init+0x22a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009950 <HAL_GPIO_Init+0x24c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d025      	beq.n	800992a <HAL_GPIO_Init+0x226>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009954 <HAL_GPIO_Init+0x250>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d01f      	beq.n	8009926 <HAL_GPIO_Init+0x222>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009958 <HAL_GPIO_Init+0x254>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d019      	beq.n	8009922 <HAL_GPIO_Init+0x21e>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a1a      	ldr	r2, [pc, #104]	@ (800995c <HAL_GPIO_Init+0x258>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <HAL_GPIO_Init+0x21a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a19      	ldr	r2, [pc, #100]	@ (8009960 <HAL_GPIO_Init+0x25c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00d      	beq.n	800991a <HAL_GPIO_Init+0x216>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a18      	ldr	r2, [pc, #96]	@ (8009964 <HAL_GPIO_Init+0x260>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d007      	beq.n	8009916 <HAL_GPIO_Init+0x212>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a17      	ldr	r2, [pc, #92]	@ (8009968 <HAL_GPIO_Init+0x264>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d101      	bne.n	8009912 <HAL_GPIO_Init+0x20e>
 800990e:	2309      	movs	r3, #9
 8009910:	e02d      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009912:	230a      	movs	r3, #10
 8009914:	e02b      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009916:	2308      	movs	r3, #8
 8009918:	e029      	b.n	800996e <HAL_GPIO_Init+0x26a>
 800991a:	2307      	movs	r3, #7
 800991c:	e027      	b.n	800996e <HAL_GPIO_Init+0x26a>
 800991e:	2306      	movs	r3, #6
 8009920:	e025      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009922:	2305      	movs	r3, #5
 8009924:	e023      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009926:	2304      	movs	r3, #4
 8009928:	e021      	b.n	800996e <HAL_GPIO_Init+0x26a>
 800992a:	2303      	movs	r3, #3
 800992c:	e01f      	b.n	800996e <HAL_GPIO_Init+0x26a>
 800992e:	2302      	movs	r3, #2
 8009930:	e01d      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009932:	2301      	movs	r3, #1
 8009934:	e01b      	b.n	800996e <HAL_GPIO_Init+0x26a>
 8009936:	bf00      	nop
 8009938:	58000080 	.word	0x58000080
 800993c:	58024400 	.word	0x58024400
 8009940:	58000400 	.word	0x58000400
 8009944:	58020000 	.word	0x58020000
 8009948:	58020400 	.word	0x58020400
 800994c:	58020800 	.word	0x58020800
 8009950:	58020c00 	.word	0x58020c00
 8009954:	58021000 	.word	0x58021000
 8009958:	58021400 	.word	0x58021400
 800995c:	58021800 	.word	0x58021800
 8009960:	58021c00 	.word	0x58021c00
 8009964:	58022000 	.word	0x58022000
 8009968:	58022400 	.word	0x58022400
 800996c:	2300      	movs	r3, #0
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	f002 0203 	and.w	r2, r2, #3
 8009974:	0092      	lsls	r2, r2, #2
 8009976:	4093      	lsls	r3, r2
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	4313      	orrs	r3, r2
 800997c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800997e:	4938      	ldr	r1, [pc, #224]	@ (8009a60 <HAL_GPIO_Init+0x35c>)
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	089b      	lsrs	r3, r3, #2
 8009984:	3302      	adds	r3, #2
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800998c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	43db      	mvns	r3, r3
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	4013      	ands	r3, r2
 800999c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80099b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80099ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	43db      	mvns	r3, r3
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	4013      	ands	r3, r2
 80099ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	4313      	orrs	r3, r2
 80099de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80099e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	43db      	mvns	r3, r3
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	4013      	ands	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f47f ae63 	bne.w	8009718 <HAL_GPIO_Init+0x14>
  }
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	3724      	adds	r7, #36	@ 0x24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	58000400 	.word	0x58000400

08009a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	887b      	ldrh	r3, [r7, #2]
 8009a76:	4013      	ands	r3, r2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	73fb      	strb	r3, [r7, #15]
 8009a80:	e001      	b.n	8009a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	807b      	strh	r3, [r7, #2]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009aa4:	787b      	ldrb	r3, [r7, #1]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009aaa:	887a      	ldrh	r2, [r7, #2]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009ab0:	e003      	b.n	8009aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009ab2:	887b      	ldrh	r3, [r7, #2]
 8009ab4:	041a      	lsls	r2, r3, #16
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	619a      	str	r2, [r3, #24]
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ad8:	887a      	ldrh	r2, [r7, #2]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4013      	ands	r3, r2
 8009ade:	041a      	lsls	r2, r3, #16
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	43d9      	mvns	r1, r3
 8009ae4:	887b      	ldrh	r3, [r7, #2]
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	619a      	str	r2, [r3, #24]
}
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
	...

08009afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e0b1      	b.n	8009c72 <HAL_I2C_Init+0x176>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d12c      	bne.n	8009b74 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a55      	ldr	r2, [pc, #340]	@ (8009c7c <HAL_I2C_Init+0x180>)
 8009b26:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a55      	ldr	r2, [pc, #340]	@ (8009c80 <HAL_I2C_Init+0x184>)
 8009b2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a54      	ldr	r2, [pc, #336]	@ (8009c84 <HAL_I2C_Init+0x188>)
 8009b32:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a54      	ldr	r2, [pc, #336]	@ (8009c88 <HAL_I2C_Init+0x18c>)
 8009b38:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a53      	ldr	r2, [pc, #332]	@ (8009c8c <HAL_I2C_Init+0x190>)
 8009b3e:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a53      	ldr	r2, [pc, #332]	@ (8009c90 <HAL_I2C_Init+0x194>)
 8009b44:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a52      	ldr	r2, [pc, #328]	@ (8009c94 <HAL_I2C_Init+0x198>)
 8009b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a52      	ldr	r2, [pc, #328]	@ (8009c98 <HAL_I2C_Init+0x19c>)
 8009b50:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a51      	ldr	r2, [pc, #324]	@ (8009c9c <HAL_I2C_Init+0x1a0>)
 8009b56:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a51      	ldr	r2, [pc, #324]	@ (8009ca0 <HAL_I2C_Init+0x1a4>)
 8009b5c:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a4e      	ldr	r2, [pc, #312]	@ (8009ca4 <HAL_I2C_Init+0x1a8>)
 8009b6a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2224      	movs	r2, #36	@ 0x24
 8009b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0201 	bic.w	r2, r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d107      	bne.n	8009bc2 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bbe:	609a      	str	r2, [r3, #8]
 8009bc0:	e006      	b.n	8009bd0 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d108      	bne.n	8009bea <HAL_I2C_Init+0xee>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009be6:	605a      	str	r2, [r3, #4]
 8009be8:	e007      	b.n	8009bfa <HAL_I2C_Init+0xfe>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009bf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6859      	ldr	r1, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	4b28      	ldr	r3, [pc, #160]	@ (8009ca8 <HAL_I2C_Init+0x1ac>)
 8009c06:	430b      	orrs	r3, r1
 8009c08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	69d9      	ldr	r1, [r3, #28]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1a      	ldr	r2, [r3, #32]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	0800a26f 	.word	0x0800a26f
 8009c80:	0800a283 	.word	0x0800a283
 8009c84:	0800a297 	.word	0x0800a297
 8009c88:	0800a2ab 	.word	0x0800a2ab
 8009c8c:	0800a2db 	.word	0x0800a2db
 8009c90:	08003e29 	.word	0x08003e29
 8009c94:	0800a2ef 	.word	0x0800a2ef
 8009c98:	0800a303 	.word	0x0800a303
 8009c9c:	0800a317 	.word	0x0800a317
 8009ca0:	0800a2bf 	.word	0x0800a2bf
 8009ca4:	08001245 	.word	0x08001245
 8009ca8:	02008000 	.word	0x02008000

08009cac <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d107      	bne.n	8009cd4 <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e07e      	b.n	8009dd2 <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d151      	bne.n	8009d84 <HAL_I2C_RegisterCallback+0xd8>
  {
    switch (CallbackID)
 8009ce0:	7afb      	ldrb	r3, [r7, #11]
 8009ce2:	2b0a      	cmp	r3, #10
 8009ce4:	d845      	bhi.n	8009d72 <HAL_I2C_RegisterCallback+0xc6>
 8009ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cec <HAL_I2C_RegisterCallback+0x40>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d19 	.word	0x08009d19
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d29 	.word	0x08009d29
 8009cf8:	08009d31 	.word	0x08009d31
 8009cfc:	08009d39 	.word	0x08009d39
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d51 	.word	0x08009d51
 8009d0c:	08009d59 	.word	0x08009d59
 8009d10:	08009d61 	.word	0x08009d61
 8009d14:	08009d69 	.word	0x08009d69
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009d1e:	e057      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009d26:	e053      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009d2e:	e04f      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009d36:	e04b      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009d3e:	e047      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009d46:	e043      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009d4e:	e03f      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009d56:	e03b      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009d5e:	e037      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009d66:	e033      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009d70:	e02e      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	75fb      	strb	r3, [r7, #23]
        break;
 8009d82:	e025      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d117      	bne.n	8009dc0 <HAL_I2C_RegisterCallback+0x114>
  {
    switch (CallbackID)
 8009d90:	7afb      	ldrb	r3, [r7, #11]
 8009d92:	2b09      	cmp	r3, #9
 8009d94:	d002      	beq.n	8009d9c <HAL_I2C_RegisterCallback+0xf0>
 8009d96:	2b0a      	cmp	r3, #10
 8009d98:	d004      	beq.n	8009da4 <HAL_I2C_RegisterCallback+0xf8>
 8009d9a:	e008      	b.n	8009dae <HAL_I2C_RegisterCallback+0x102>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009da2:	e015      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009dac:	e010      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	75fb      	strb	r3, [r7, #23]
        break;
 8009dbe:	e007      	b.n	8009dd0 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop

08009de0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	4608      	mov	r0, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	461a      	mov	r2, r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	817b      	strh	r3, [r7, #10]
 8009df2:	460b      	mov	r3, r1
 8009df4:	813b      	strh	r3, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	f040 80c3 	bne.w	8009f8e <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <HAL_I2C_Mem_Write_DMA+0x34>
 8009e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e0b7      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e2e:	d101      	bne.n	8009e34 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e0ad      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_I2C_Mem_Write_DMA+0x62>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e0a6      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2221      	movs	r2, #33	@ 0x21
 8009e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2240      	movs	r2, #64	@ 0x40
 8009e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6a3a      	ldr	r2, [r7, #32]
 8009e64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8009f98 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8009e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a49      	ldr	r2, [pc, #292]	@ (8009f9c <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8009e76:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8009e78:	897a      	ldrh	r2, [r7, #10]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2bff      	cmp	r3, #255	@ 0xff
 8009e86:	d903      	bls.n	8009e90 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	22ff      	movs	r2, #255	@ 0xff
 8009e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009e8e:	e004      	b.n	8009e9a <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d109      	bne.n	8009eb4 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ea0:	893b      	ldrh	r3, [r7, #8]
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8009eb2:	e00b      	b.n	8009ecc <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009eb4:	893b      	ldrh	r3, [r7, #8]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8009ec2:	893b      	ldrh	r3, [r7, #8]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d020      	beq.n	8009f16 <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	4a31      	ldr	r2, [pc, #196]	@ (8009fa0 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8009eda:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee0:	4a30      	ldr	r2, [pc, #192]	@ (8009fa4 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8009ee2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee8:	2200      	movs	r2, #0
 8009eea:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009ef8:	6a39      	ldr	r1, [r7, #32]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3328      	adds	r3, #40	@ 0x28
 8009f00:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009f06:	f7fd faaf 	bl	8007468 <HAL_DMA_Start_IT>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d128      	bne.n	8009f66 <HAL_I2C_Mem_Write_DMA+0x186>
 8009f14:	e013      	b.n	8009f3e <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e028      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	8979      	ldrh	r1, [r7, #10]
 8009f44:	4b18      	ldr	r3, [pc, #96]	@ (8009fa8 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f001 ff95 	bl	800be7c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f001 ffbf 	bl	800bee0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	e014      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2220      	movs	r2, #32
 8009f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f7a:	f043 0210 	orr.w	r2, r3, #16
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
  }
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	ffff0000 	.word	0xffff0000
 8009f9c:	0800a711 	.word	0x0800a711
 8009fa0:	0800b8c3 	.word	0x0800b8c3
 8009fa4:	0800b959 	.word	0x0800b959
 8009fa8:	80002000 	.word	0x80002000

08009fac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08a      	sub	sp, #40	@ 0x28
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	f040 80d2 	bne.w	800a172 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fdc:	d101      	bne.n	8009fe2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e0c8      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_I2C_IsDeviceReady+0x44>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e0c1      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2224      	movs	r2, #36	@ 0x24
 8009ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d105      	bne.n	800a01a <HAL_I2C_IsDeviceReady+0x6e>
 800a00e:	897b      	ldrh	r3, [r7, #10]
 800a010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a014:	4b59      	ldr	r3, [pc, #356]	@ (800a17c <HAL_I2C_IsDeviceReady+0x1d0>)
 800a016:	4313      	orrs	r3, r2
 800a018:	e004      	b.n	800a024 <HAL_I2C_IsDeviceReady+0x78>
 800a01a:	897b      	ldrh	r3, [r7, #10]
 800a01c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a020:	4b57      	ldr	r3, [pc, #348]	@ (800a180 <HAL_I2C_IsDeviceReady+0x1d4>)
 800a022:	4313      	orrs	r3, r2
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800a02a:	f7fa febd 	bl	8004da8 <HAL_GetTick>
 800a02e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	bf0c      	ite	eq
 800a03e:	2301      	moveq	r3, #1
 800a040:	2300      	movne	r3, #0
 800a042:	b2db      	uxtb	r3, r3
 800a044:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f003 0310 	and.w	r3, r3, #16
 800a050:	2b10      	cmp	r3, #16
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a05c:	e034      	b.n	800a0c8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a064:	d01a      	beq.n	800a09c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a066:	f7fa fe9f 	bl	8004da8 <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d302      	bcc.n	800a07c <HAL_I2C_IsDeviceReady+0xd0>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10f      	bne.n	800a09c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2220      	movs	r2, #32
 800a080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a088:	f043 0220 	orr.w	r2, r3, #32
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e06b      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	bf0c      	ite	eq
 800a0aa:	2301      	moveq	r3, #1
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	bf0c      	ite	eq
 800a0c0:	2301      	moveq	r3, #1
 800a0c2:	2300      	movne	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a0c8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <HAL_I2C_IsDeviceReady+0x128>
 800a0ce:	7fbb      	ldrb	r3, [r7, #30]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0c4      	beq.n	800a05e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	f003 0310 	and.w	r3, r3, #16
 800a0de:	2b10      	cmp	r3, #16
 800a0e0:	d01a      	beq.n	800a118 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2120      	movs	r1, #32
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f001 fd8b 	bl	800bc08 <I2C_WaitOnFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e03b      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2220      	movs	r2, #32
 800a102:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2220      	movs	r2, #32
 800a108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e02d      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2200      	movs	r2, #0
 800a120:	2120      	movs	r1, #32
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f001 fd70 	bl	800bc08 <I2C_WaitOnFlagUntilTimeout>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e020      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2210      	movs	r2, #16
 800a138:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2220      	movs	r2, #32
 800a140:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	3301      	adds	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	f63f af5a 	bhi.w	800a006 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2220      	movs	r2, #32
 800a156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a15e:	f043 0220 	orr.w	r2, r3, #32
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	02002000 	.word	0x02002000
 800a180:	02002800 	.word	0x02002800

0800a184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00f      	beq.n	800a1fa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00a      	beq.n	800a1fa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1e8:	f043 0201 	orr.w	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00f      	beq.n	800a224 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a212:	f043 0208 	orr.w	r2, r3, #8
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a222:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00f      	beq.n	800a24e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a23c:	f043 0202 	orr.w	r2, r3, #2
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a24c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a252:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f003 030b 	and.w	r3, r3, #11
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f9f1 	bl	800b648 <I2C_ITError>
  }
}
 800a266:	bf00      	nop
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a338:	b2db      	uxtb	r3, r3
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b086      	sub	sp, #24
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a356:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <I2C_Slave_ISR_IT+0x24>
 800a366:	2302      	movs	r3, #2
 800a368:	e0e2      	b.n	800a530 <I2C_Slave_ISR_IT+0x1ea>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d009      	beq.n	800a390 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a386:	6939      	ldr	r1, [r7, #16]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 feaf 	bl	800b0ec <I2C_ITSlaveCplt>
 800a38e:	e0ca      	b.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b00      	cmp	r3, #0
 800a398:	d04b      	beq.n	800a432 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d046      	beq.n	800a432 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d128      	bne.n	800a400 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b28      	cmp	r3, #40	@ 0x28
 800a3b8:	d108      	bne.n	800a3cc <I2C_Slave_ISR_IT+0x86>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3c0:	d104      	bne.n	800a3cc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f001 f8e9 	bl	800b59c <I2C_ITListenCplt>
 800a3ca:	e031      	b.n	800a430 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b29      	cmp	r3, #41	@ 0x29
 800a3d6:	d10e      	bne.n	800a3f6 <I2C_Slave_ISR_IT+0xb0>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a3de:	d00a      	beq.n	800a3f6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2210      	movs	r2, #16
 800a3e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f001 fa46 	bl	800b87a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fd51 	bl	800ae96 <I2C_ITSlaveSeqCplt>
 800a3f4:	e01c      	b.n	800a430 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a3fe:	e08f      	b.n	800a520 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2210      	movs	r2, #16
 800a406:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a40c:	f043 0204 	orr.w	r2, r3, #4
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <I2C_Slave_ISR_IT+0xdc>
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a420:	d17e      	bne.n	800a520 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f001 f90d 	bl	800b648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a42e:	e077      	b.n	800a520 <I2C_Slave_ISR_IT+0x1da>
 800a430:	e076      	b.n	800a520 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d02f      	beq.n	800a49c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02a      	beq.n	800a49c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d018      	beq.n	800a482 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a46c:	3b01      	subs	r3, #1
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a478:	b29b      	uxth	r3, r3
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d14b      	bne.n	800a524 <I2C_Slave_ISR_IT+0x1de>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a492:	d047      	beq.n	800a524 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fcfe 	bl	800ae96 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a49a:	e043      	b.n	800a524 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a4b0:	6939      	ldr	r1, [r7, #16]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 fc2c 	bl	800ad10 <I2C_ITAddrCplt>
 800a4b8:	e035      	b.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d030      	beq.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d02b      	beq.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d018      	beq.n	800a50a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a500:	3b01      	subs	r3, #1
 800a502:	b29a      	uxth	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a508:	e00d      	b.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a510:	d002      	beq.n	800a518 <I2C_Slave_ISR_IT+0x1d2>
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fcbc 	bl	800ae96 <I2C_ITSlaveSeqCplt>
 800a51e:	e002      	b.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800a524:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <I2C_Master_ISR_DMA+0x1a>
 800a54e:	2302      	movs	r3, #2
 800a550:	e0d9      	b.n	800a706 <I2C_Master_ISR_DMA+0x1ce>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d016      	beq.n	800a592 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d011      	beq.n	800a592 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2210      	movs	r2, #16
 800a574:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57a:	f043 0204 	orr.w	r2, r3, #4
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a582:	2120      	movs	r1, #32
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f001 fcab 	bl	800bee0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 f975 	bl	800b87a <I2C_Flush_TXDR>
 800a590:	e0b4      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d071      	beq.n	800a680 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d06c      	beq.n	800a680 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5b4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d04e      	beq.n	800a65e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5cc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2bff      	cmp	r3, #255	@ 0xff
 800a5d6:	d906      	bls.n	800a5e6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	22ff      	movs	r2, #255	@ 0xff
 800a5dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800a5de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	e010      	b.n	800a608 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a5f8:	d003      	beq.n	800a602 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fe:	617b      	str	r3, [r7, #20]
 800a600:	e002      	b.n	800a608 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a602:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a606:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	8a79      	ldrh	r1, [r7, #18]
 800a610:	2300      	movs	r3, #0
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f001 fc30 	bl	800be7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a620:	b29a      	uxth	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	b29a      	uxth	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b22      	cmp	r3, #34	@ 0x22
 800a638:	d108      	bne.n	800a64c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a648:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a64a:	e057      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a65a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a65c:	e04e      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a66c:	d003      	beq.n	800a676 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 fbd2 	bl	800ae18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a674:	e042      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a676:	2140      	movs	r1, #64	@ 0x40
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 ffe5 	bl	800b648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a67e:	e03d      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d028      	beq.n	800a6dc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a690:	2b00      	cmp	r3, #0
 800a692:	d023      	beq.n	800a6dc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a698:	b29b      	uxth	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d119      	bne.n	800a6d2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ac:	d025      	beq.n	800a6fa <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a6b6:	d108      	bne.n	800a6ca <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6c6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a6c8:	e017      	b.n	800a6fa <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 fba4 	bl	800ae18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a6d0:	e013      	b.n	800a6fa <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a6d2:	2140      	movs	r1, #64	@ 0x40
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 ffb7 	bl	800b648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a6da:	e00e      	b.n	800a6fa <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fc2e 	bl	800af54 <I2C_ITMasterCplt>
 800a6f8:	e000      	b.n	800a6fc <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800a6fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af02      	add	r7, sp, #8
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a71c:	4b8d      	ldr	r3, [pc, #564]	@ (800a954 <I2C_Mem_ISR_DMA+0x244>)
 800a71e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <I2C_Mem_ISR_DMA+0x1e>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e10e      	b.n	800a94c <I2C_Mem_ISR_DMA+0x23c>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d016      	beq.n	800a76e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a746:	2b00      	cmp	r3, #0
 800a748:	d011      	beq.n	800a76e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2210      	movs	r2, #16
 800a750:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a75e:	2120      	movs	r1, #32
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f001 fbbd 	bl	800bee0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f001 f887 	bl	800b87a <I2C_Flush_TXDR>
 800a76c:	e0e9      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00e      	beq.n	800a796 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a78a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295
 800a792:	651a      	str	r2, [r3, #80]	@ 0x50
 800a794:	e0d5      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05f      	beq.n	800a860 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d05a      	beq.n	800a860 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f001 fc1b 	bl	800bfe8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a7b2:	2110      	movs	r1, #16
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f001 fb93 	bl	800bee0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d048      	beq.n	800a856 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	2bff      	cmp	r3, #255	@ 0xff
 800a7cc:	d910      	bls.n	800a7f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	22ff      	movs	r2, #255	@ 0xff
 800a7d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d8:	b299      	uxth	r1, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f001 fb47 	bl	800be7c <I2C_TransferConfig>
 800a7ee:	e011      	b.n	800a814 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7fe:	b299      	uxth	r1, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a804:	b2da      	uxtb	r2, r3
 800a806:	2300      	movs	r3, #0
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f001 fb34 	bl	800be7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	b29a      	uxth	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b22      	cmp	r3, #34	@ 0x22
 800a830:	d108      	bne.n	800a844 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a842:	e07e      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a854:	e075      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a856:	2140      	movs	r1, #64	@ 0x40
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 fef5 	bl	800b648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a85e:	e070      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	d05d      	beq.n	800a926 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a870:	2b00      	cmp	r3, #0
 800a872:	d058      	beq.n	800a926 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a874:	2101      	movs	r1, #1
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f001 fbb6 	bl	800bfe8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a87c:	2110      	movs	r1, #16
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 fb2e 	bl	800bee0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b22      	cmp	r3, #34	@ 0x22
 800a88e:	d101      	bne.n	800a894 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800a890:	4b31      	ldr	r3, [pc, #196]	@ (800a958 <I2C_Mem_ISR_DMA+0x248>)
 800a892:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2bff      	cmp	r3, #255	@ 0xff
 800a89c:	d910      	bls.n	800a8c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	22ff      	movs	r2, #255	@ 0xff
 800a8a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a8:	b299      	uxth	r1, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f001 fadf 	bl	800be7c <I2C_TransferConfig>
 800a8be:	e011      	b.n	800a8e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ce:	b299      	uxth	r1, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f001 facc 	bl	800be7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b22      	cmp	r3, #34	@ 0x22
 800a900:	d108      	bne.n	800a914 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a910:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a912:	e016      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a922:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a924:	e00d      	b.n	800a942 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d008      	beq.n	800a942 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fb09 	bl	800af54 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	80002000 	.word	0x80002000
 800a958:	80002400 	.word	0x80002400

0800a95c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <I2C_Slave_ISR_DMA+0x24>
 800a97c:	2302      	movs	r3, #2
 800a97e:	e1c2      	b.n	800ad06 <I2C_Slave_ISR_DMA+0x3aa>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d009      	beq.n	800a9a6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 fba4 	bl	800b0ec <I2C_ITSlaveCplt>
 800a9a4:	e1aa      	b.n	800acfc <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f003 0310 	and.w	r3, r3, #16
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8197 	beq.w	800ace0 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8191 	beq.w	800ace0 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d105      	bne.n	800a9d4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 817f 	beq.w	800acd2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d07b      	beq.n	800aad4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d076      	beq.n	800aad4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a74      	ldr	r2, [pc, #464]	@ (800abc0 <I2C_Slave_ISR_DMA+0x264>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d059      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a72      	ldr	r2, [pc, #456]	@ (800abc4 <I2C_Slave_ISR_DMA+0x268>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d053      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a70      	ldr	r2, [pc, #448]	@ (800abc8 <I2C_Slave_ISR_DMA+0x26c>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d04d      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a6e      	ldr	r2, [pc, #440]	@ (800abcc <I2C_Slave_ISR_DMA+0x270>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d047      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a6c      	ldr	r2, [pc, #432]	@ (800abd0 <I2C_Slave_ISR_DMA+0x274>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d041      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a6a      	ldr	r2, [pc, #424]	@ (800abd4 <I2C_Slave_ISR_DMA+0x278>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d03b      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a68      	ldr	r2, [pc, #416]	@ (800abd8 <I2C_Slave_ISR_DMA+0x27c>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d035      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a66      	ldr	r2, [pc, #408]	@ (800abdc <I2C_Slave_ISR_DMA+0x280>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d02f      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a64      	ldr	r2, [pc, #400]	@ (800abe0 <I2C_Slave_ISR_DMA+0x284>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d029      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a62      	ldr	r2, [pc, #392]	@ (800abe4 <I2C_Slave_ISR_DMA+0x288>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d023      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a60      	ldr	r2, [pc, #384]	@ (800abe8 <I2C_Slave_ISR_DMA+0x28c>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d01d      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a5e      	ldr	r2, [pc, #376]	@ (800abec <I2C_Slave_ISR_DMA+0x290>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d017      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a5c      	ldr	r2, [pc, #368]	@ (800abf0 <I2C_Slave_ISR_DMA+0x294>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d011      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a5a      	ldr	r2, [pc, #360]	@ (800abf4 <I2C_Slave_ISR_DMA+0x298>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00b      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a58      	ldr	r2, [pc, #352]	@ (800abf8 <I2C_Slave_ISR_DMA+0x29c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d005      	beq.n	800aaa6 <I2C_Slave_ISR_DMA+0x14a>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a56      	ldr	r2, [pc, #344]	@ (800abfc <I2C_Slave_ISR_DMA+0x2a0>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d109      	bne.n	800aaba <I2C_Slave_ISR_DMA+0x15e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bf0c      	ite	eq
 800aab2:	2301      	moveq	r3, #1
 800aab4:	2300      	movne	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	e008      	b.n	800aacc <I2C_Slave_ISR_DMA+0x170>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bf0c      	ite	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	2300      	movne	r3, #0
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800aad0:	2301      	movs	r3, #1
 800aad2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 809e 	beq.w	800ac1a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8098 	beq.w	800ac1a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a33      	ldr	r2, [pc, #204]	@ (800abc0 <I2C_Slave_ISR_DMA+0x264>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d059      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a31      	ldr	r2, [pc, #196]	@ (800abc4 <I2C_Slave_ISR_DMA+0x268>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d053      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a2f      	ldr	r2, [pc, #188]	@ (800abc8 <I2C_Slave_ISR_DMA+0x26c>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d04d      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a2d      	ldr	r2, [pc, #180]	@ (800abcc <I2C_Slave_ISR_DMA+0x270>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d047      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a2b      	ldr	r2, [pc, #172]	@ (800abd0 <I2C_Slave_ISR_DMA+0x274>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d041      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a29      	ldr	r2, [pc, #164]	@ (800abd4 <I2C_Slave_ISR_DMA+0x278>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d03b      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a27      	ldr	r2, [pc, #156]	@ (800abd8 <I2C_Slave_ISR_DMA+0x27c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d035      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a25      	ldr	r2, [pc, #148]	@ (800abdc <I2C_Slave_ISR_DMA+0x280>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d02f      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a23      	ldr	r2, [pc, #140]	@ (800abe0 <I2C_Slave_ISR_DMA+0x284>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d029      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a21      	ldr	r2, [pc, #132]	@ (800abe4 <I2C_Slave_ISR_DMA+0x288>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d023      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a1f      	ldr	r2, [pc, #124]	@ (800abe8 <I2C_Slave_ISR_DMA+0x28c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d01d      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a1d      	ldr	r2, [pc, #116]	@ (800abec <I2C_Slave_ISR_DMA+0x290>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d017      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a1b      	ldr	r2, [pc, #108]	@ (800abf0 <I2C_Slave_ISR_DMA+0x294>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d011      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a19      	ldr	r2, [pc, #100]	@ (800abf4 <I2C_Slave_ISR_DMA+0x298>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a17      	ldr	r2, [pc, #92]	@ (800abf8 <I2C_Slave_ISR_DMA+0x29c>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d005      	beq.n	800abaa <I2C_Slave_ISR_DMA+0x24e>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a15      	ldr	r2, [pc, #84]	@ (800abfc <I2C_Slave_ISR_DMA+0x2a0>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d12a      	bne.n	800ac00 <I2C_Slave_ISR_DMA+0x2a4>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	bf0c      	ite	eq
 800abb6:	2301      	moveq	r3, #1
 800abb8:	2300      	movne	r3, #0
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	e029      	b.n	800ac12 <I2C_Slave_ISR_DMA+0x2b6>
 800abbe:	bf00      	nop
 800abc0:	40020010 	.word	0x40020010
 800abc4:	40020028 	.word	0x40020028
 800abc8:	40020040 	.word	0x40020040
 800abcc:	40020058 	.word	0x40020058
 800abd0:	40020070 	.word	0x40020070
 800abd4:	40020088 	.word	0x40020088
 800abd8:	400200a0 	.word	0x400200a0
 800abdc:	400200b8 	.word	0x400200b8
 800abe0:	40020410 	.word	0x40020410
 800abe4:	40020428 	.word	0x40020428
 800abe8:	40020440 	.word	0x40020440
 800abec:	40020458 	.word	0x40020458
 800abf0:	40020470 	.word	0x40020470
 800abf4:	40020488 	.word	0x40020488
 800abf8:	400204a0 	.word	0x400204a0
 800abfc:	400204b8 	.word	0x400204b8
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bf0c      	ite	eq
 800ac0c:	2301      	moveq	r3, #1
 800ac0e:	2300      	movne	r3, #0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800ac16:	2301      	movs	r3, #1
 800ac18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d128      	bne.n	800ac72 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b28      	cmp	r3, #40	@ 0x28
 800ac2a:	d108      	bne.n	800ac3e <I2C_Slave_ISR_DMA+0x2e2>
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac32:	d104      	bne.n	800ac3e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ac34:	68b9      	ldr	r1, [r7, #8]
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 fcb0 	bl	800b59c <I2C_ITListenCplt>
 800ac3c:	e048      	b.n	800acd0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b29      	cmp	r3, #41	@ 0x29
 800ac48:	d10e      	bne.n	800ac68 <I2C_Slave_ISR_DMA+0x30c>
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac50:	d00a      	beq.n	800ac68 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2210      	movs	r2, #16
 800ac58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fe0d 	bl	800b87a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f918 	bl	800ae96 <I2C_ITSlaveSeqCplt>
 800ac66:	e033      	b.n	800acd0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2210      	movs	r2, #16
 800ac6e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ac70:	e034      	b.n	800acdc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2210      	movs	r2, #16
 800ac78:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7e:	f043 0204 	orr.w	r2, r3, #4
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac8c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <I2C_Slave_ISR_DMA+0x340>
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac9a:	d11f      	bne.n	800acdc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b21      	cmp	r3, #33	@ 0x21
 800aca0:	d002      	beq.n	800aca8 <I2C_Slave_ISR_DMA+0x34c>
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	2b29      	cmp	r3, #41	@ 0x29
 800aca6:	d103      	bne.n	800acb0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2221      	movs	r2, #33	@ 0x21
 800acac:	631a      	str	r2, [r3, #48]	@ 0x30
 800acae:	e008      	b.n	800acc2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	2b22      	cmp	r3, #34	@ 0x22
 800acb4:	d002      	beq.n	800acbc <I2C_Slave_ISR_DMA+0x360>
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acba:	d102      	bne.n	800acc2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2222      	movs	r2, #34	@ 0x22
 800acc0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc6:	4619      	mov	r1, r3
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 fcbd 	bl	800b648 <I2C_ITError>
      if (treatdmanack == 1U)
 800acce:	e005      	b.n	800acdc <I2C_Slave_ISR_DMA+0x380>
 800acd0:	e004      	b.n	800acdc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2210      	movs	r2, #16
 800acd8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acda:	e00f      	b.n	800acfc <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800acdc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acde:	e00d      	b.n	800acfc <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d008      	beq.n	800acfc <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d003      	beq.n	800acfc <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f80a 	bl	800ad10 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop

0800ad10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ad26:	2b28      	cmp	r3, #40	@ 0x28
 800ad28:	d16a      	bne.n	800ae00 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	0c1b      	lsrs	r3, r3, #16
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	0c1b      	lsrs	r3, r3, #16
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ad48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ad64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d138      	bne.n	800ade0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ad6e:	897b      	ldrh	r3, [r7, #10]
 800ad70:	09db      	lsrs	r3, r3, #7
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	89bb      	ldrh	r3, [r7, #12]
 800ad76:	4053      	eors	r3, r2
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	f003 0306 	and.w	r3, r3, #6
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d11c      	bne.n	800adbc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800ad82:	897b      	ldrh	r3, [r7, #10]
 800ad84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d13b      	bne.n	800ae10 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2208      	movs	r2, #8
 800ada4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adb2:	89ba      	ldrh	r2, [r7, #12]
 800adb4:	7bf9      	ldrb	r1, [r7, #15]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800adba:	e029      	b.n	800ae10 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800adbc:	893b      	ldrh	r3, [r7, #8]
 800adbe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800adc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 f90f 	bl	800bfe8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800add6:	89ba      	ldrh	r2, [r7, #12]
 800add8:	7bf9      	ldrb	r1, [r7, #15]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
}
 800adde:	e017      	b.n	800ae10 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ade0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 f8ff 	bl	800bfe8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adf6:	89ba      	ldrh	r2, [r7, #12]
 800adf8:	7bf9      	ldrb	r1, [r7, #15]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4798      	blx	r3
}
 800adfe:	e007      	b.n	800ae10 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2208      	movs	r2, #8
 800ae06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800ae10:	bf00      	nop
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b21      	cmp	r3, #33	@ 0x21
 800ae32:	d116      	bne.n	800ae62 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2211      	movs	r2, #17
 800ae40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae48:	2101      	movs	r1, #1
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f001 f8cc 	bl	800bfe8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ae60:	e015      	b.n	800ae8e <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2212      	movs	r2, #18
 800ae6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ae76:	2102      	movs	r1, #2
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 f8b5 	bl	800bfe8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	e00c      	b.n	800aee4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aee2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b29      	cmp	r3, #41	@ 0x29
 800aeee:	d113      	bne.n	800af18 <I2C_ITSlaveSeqCplt+0x82>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2228      	movs	r2, #40	@ 0x28
 800aef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2221      	movs	r2, #33	@ 0x21
 800aefc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aefe:	2101      	movs	r1, #1
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 f871 	bl	800bfe8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 800af16:	e018      	b.n	800af4a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b2a      	cmp	r3, #42	@ 0x2a
 800af22:	d112      	bne.n	800af4a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2228      	movs	r2, #40	@ 0x28
 800af28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2222      	movs	r2, #34	@ 0x22
 800af30:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af32:	2102      	movs	r1, #2
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 f857 	bl	800bfe8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2220      	movs	r2, #32
 800af68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b21      	cmp	r3, #33	@ 0x21
 800af74:	d107      	bne.n	800af86 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800af76:	2101      	movs	r1, #1
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f001 f835 	bl	800bfe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2211      	movs	r2, #17
 800af82:	631a      	str	r2, [r3, #48]	@ 0x30
 800af84:	e00c      	b.n	800afa0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b22      	cmp	r3, #34	@ 0x22
 800af90:	d106      	bne.n	800afa0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af92:	2102      	movs	r1, #2
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 f827 	bl	800bfe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2212      	movs	r2, #18
 800af9e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6859      	ldr	r1, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	4b4e      	ldr	r3, [pc, #312]	@ (800b0e4 <I2C_ITMasterCplt+0x190>)
 800afac:	400b      	ands	r3, r1
 800afae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a4b      	ldr	r2, [pc, #300]	@ (800b0e8 <I2C_ITMasterCplt+0x194>)
 800afba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f003 0310 	and.w	r3, r3, #16
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2210      	movs	r2, #16
 800afcc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afd2:	f043 0204 	orr.w	r2, r3, #4
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b60      	cmp	r3, #96	@ 0x60
 800afe4:	d10a      	bne.n	800affc <I2C_ITMasterCplt+0xa8>
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800affa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fc3c 	bl	800b87a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b006:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b60      	cmp	r3, #96	@ 0x60
 800b012:	d002      	beq.n	800b01a <I2C_ITMasterCplt+0xc6>
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d006      	beq.n	800b028 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fb11 	bl	800b648 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b026:	e058      	b.n	800b0da <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b21      	cmp	r3, #33	@ 0x21
 800b032:	d126      	bne.n	800b082 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b40      	cmp	r3, #64	@ 0x40
 800b04c:	d10c      	bne.n	800b068 <I2C_ITMasterCplt+0x114>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemTxCpltCallback(hi2c);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
}
 800b066:	e038      	b.n	800b0da <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	4798      	blx	r3
}
 800b080:	e02b      	b.n	800b0da <I2C_ITMasterCplt+0x186>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b22      	cmp	r3, #34	@ 0x22
 800b08c:	d125      	bne.n	800b0da <I2C_ITMasterCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b40      	cmp	r3, #64	@ 0x40
 800b0a6:	d10c      	bne.n	800b0c2 <I2C_ITMasterCplt+0x16e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	4798      	blx	r3
}
 800b0c0:	e00b      	b.n	800b0da <I2C_ITMasterCplt+0x186>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
}
 800b0da:	bf00      	nop
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	fe00e800 	.word	0xfe00e800
 800b0e8:	ffff0000 	.word	0xffff0000

0800b0ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b10e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2220      	movs	r2, #32
 800b116:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	2b21      	cmp	r3, #33	@ 0x21
 800b11c:	d002      	beq.n	800b124 <I2C_ITSlaveCplt+0x38>
 800b11e:	7afb      	ldrb	r3, [r7, #11]
 800b120:	2b29      	cmp	r3, #41	@ 0x29
 800b122:	d108      	bne.n	800b136 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b124:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 ff5d 	bl	800bfe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2221      	movs	r2, #33	@ 0x21
 800b132:	631a      	str	r2, [r3, #48]	@ 0x30
 800b134:	e019      	b.n	800b16a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b22      	cmp	r3, #34	@ 0x22
 800b13a:	d002      	beq.n	800b142 <I2C_ITSlaveCplt+0x56>
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b140:	d108      	bne.n	800b154 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b142:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 ff4e 	bl	800bfe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2222      	movs	r2, #34	@ 0x22
 800b150:	631a      	str	r2, [r3, #48]	@ 0x30
 800b152:	e00a      	b.n	800b16a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b154:	7afb      	ldrb	r3, [r7, #11]
 800b156:	2b28      	cmp	r3, #40	@ 0x28
 800b158:	d107      	bne.n	800b16a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b15a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 ff42 	bl	800bfe8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b178:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6859      	ldr	r1, [r3, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b7f      	ldr	r3, [pc, #508]	@ (800b384 <I2C_ITSlaveCplt+0x298>)
 800b186:	400b      	ands	r3, r1
 800b188:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fb75 	bl	800b87a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d07a      	beq.n	800b290 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b1a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 8111 	beq.w	800b3d6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a73      	ldr	r2, [pc, #460]	@ (800b388 <I2C_ITSlaveCplt+0x29c>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d059      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a71      	ldr	r2, [pc, #452]	@ (800b38c <I2C_ITSlaveCplt+0x2a0>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d053      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a6f      	ldr	r2, [pc, #444]	@ (800b390 <I2C_ITSlaveCplt+0x2a4>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d04d      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a6d      	ldr	r2, [pc, #436]	@ (800b394 <I2C_ITSlaveCplt+0x2a8>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d047      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a6b      	ldr	r2, [pc, #428]	@ (800b398 <I2C_ITSlaveCplt+0x2ac>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d041      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a69      	ldr	r2, [pc, #420]	@ (800b39c <I2C_ITSlaveCplt+0x2b0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d03b      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a67      	ldr	r2, [pc, #412]	@ (800b3a0 <I2C_ITSlaveCplt+0x2b4>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d035      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a65      	ldr	r2, [pc, #404]	@ (800b3a4 <I2C_ITSlaveCplt+0x2b8>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d02f      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a63      	ldr	r2, [pc, #396]	@ (800b3a8 <I2C_ITSlaveCplt+0x2bc>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d029      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a61      	ldr	r2, [pc, #388]	@ (800b3ac <I2C_ITSlaveCplt+0x2c0>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d023      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a5f      	ldr	r2, [pc, #380]	@ (800b3b0 <I2C_ITSlaveCplt+0x2c4>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d01d      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a5d      	ldr	r2, [pc, #372]	@ (800b3b4 <I2C_ITSlaveCplt+0x2c8>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d017      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a5b      	ldr	r2, [pc, #364]	@ (800b3b8 <I2C_ITSlaveCplt+0x2cc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d011      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a59      	ldr	r2, [pc, #356]	@ (800b3bc <I2C_ITSlaveCplt+0x2d0>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d00b      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a57      	ldr	r2, [pc, #348]	@ (800b3c0 <I2C_ITSlaveCplt+0x2d4>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d005      	beq.n	800b274 <I2C_ITSlaveCplt+0x188>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a55      	ldr	r2, [pc, #340]	@ (800b3c4 <I2C_ITSlaveCplt+0x2d8>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d105      	bne.n	800b280 <I2C_ITSlaveCplt+0x194>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	e004      	b.n	800b28a <I2C_ITSlaveCplt+0x19e>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800b28e:	e0a2      	b.n	800b3d6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 809d 	beq.w	800b3d6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 8090 	beq.w	800b3d6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a32      	ldr	r2, [pc, #200]	@ (800b388 <I2C_ITSlaveCplt+0x29c>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d059      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a30      	ldr	r2, [pc, #192]	@ (800b38c <I2C_ITSlaveCplt+0x2a0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d053      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a2e      	ldr	r2, [pc, #184]	@ (800b390 <I2C_ITSlaveCplt+0x2a4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d04d      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800b394 <I2C_ITSlaveCplt+0x2a8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d047      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a2a      	ldr	r2, [pc, #168]	@ (800b398 <I2C_ITSlaveCplt+0x2ac>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d041      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a28      	ldr	r2, [pc, #160]	@ (800b39c <I2C_ITSlaveCplt+0x2b0>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d03b      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a26      	ldr	r2, [pc, #152]	@ (800b3a0 <I2C_ITSlaveCplt+0x2b4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d035      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a24      	ldr	r2, [pc, #144]	@ (800b3a4 <I2C_ITSlaveCplt+0x2b8>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d02f      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a22      	ldr	r2, [pc, #136]	@ (800b3a8 <I2C_ITSlaveCplt+0x2bc>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d029      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a20      	ldr	r2, [pc, #128]	@ (800b3ac <I2C_ITSlaveCplt+0x2c0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d023      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a1e      	ldr	r2, [pc, #120]	@ (800b3b0 <I2C_ITSlaveCplt+0x2c4>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d01d      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1c      	ldr	r2, [pc, #112]	@ (800b3b4 <I2C_ITSlaveCplt+0x2c8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d017      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b8 <I2C_ITSlaveCplt+0x2cc>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d011      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a18      	ldr	r2, [pc, #96]	@ (800b3bc <I2C_ITSlaveCplt+0x2d0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d00b      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a16      	ldr	r2, [pc, #88]	@ (800b3c0 <I2C_ITSlaveCplt+0x2d4>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d005      	beq.n	800b376 <I2C_ITSlaveCplt+0x28a>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a14      	ldr	r2, [pc, #80]	@ (800b3c4 <I2C_ITSlaveCplt+0x2d8>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d128      	bne.n	800b3c8 <I2C_ITSlaveCplt+0x2dc>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	e027      	b.n	800b3d2 <I2C_ITSlaveCplt+0x2e6>
 800b382:	bf00      	nop
 800b384:	fe00e800 	.word	0xfe00e800
 800b388:	40020010 	.word	0x40020010
 800b38c:	40020028 	.word	0x40020028
 800b390:	40020040 	.word	0x40020040
 800b394:	40020058 	.word	0x40020058
 800b398:	40020070 	.word	0x40020070
 800b39c:	40020088 	.word	0x40020088
 800b3a0:	400200a0 	.word	0x400200a0
 800b3a4:	400200b8 	.word	0x400200b8
 800b3a8:	40020410 	.word	0x40020410
 800b3ac:	40020428 	.word	0x40020428
 800b3b0:	40020440 	.word	0x40020440
 800b3b4:	40020458 	.word	0x40020458
 800b3b8:	40020470 	.word	0x40020470
 800b3bc:	40020488 	.word	0x40020488
 800b3c0:	400204a0 	.word	0x400204a0
 800b3c4:	400204b8 	.word	0x400204b8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d020      	beq.n	800b422 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f023 0304 	bic.w	r3, r3, #4
 800b3e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00c      	beq.n	800b422 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b40c:	3b01      	subs	r3, #1
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b418:	b29b      	uxth	r3, r3
 800b41a:	3b01      	subs	r3, #1
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b426:	b29b      	uxth	r3, r3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b430:	f043 0204 	orr.w	r2, r3, #4
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f003 0310 	and.w	r3, r3, #16
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d049      	beq.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d044      	beq.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b450:	b29b      	uxth	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d128      	bne.n	800b4a8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b28      	cmp	r3, #40	@ 0x28
 800b460:	d108      	bne.n	800b474 <I2C_ITSlaveCplt+0x388>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b468:	d104      	bne.n	800b474 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b46a:	6979      	ldr	r1, [r7, #20]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f895 	bl	800b59c <I2C_ITListenCplt>
 800b472:	e030      	b.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b29      	cmp	r3, #41	@ 0x29
 800b47e:	d10e      	bne.n	800b49e <I2C_ITSlaveCplt+0x3b2>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b486:	d00a      	beq.n	800b49e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2210      	movs	r2, #16
 800b48e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f9f2 	bl	800b87a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fcfd 	bl	800ae96 <I2C_ITSlaveSeqCplt>
 800b49c:	e01b      	b.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2210      	movs	r2, #16
 800b4a4:	61da      	str	r2, [r3, #28]
 800b4a6:	e016      	b.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2210      	movs	r2, #16
 800b4ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4b4:	f043 0204 	orr.w	r2, r3, #4
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <I2C_ITSlaveCplt+0x3de>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4c8:	d105      	bne.n	800b4d6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f8b9 	bl	800b648 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d010      	beq.n	800b50e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8a8 	bl	800b648 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b28      	cmp	r3, #40	@ 0x28
 800b502:	d144      	bne.n	800b58e <I2C_ITSlaveCplt+0x4a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b504:	6979      	ldr	r1, [r7, #20]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f848 	bl	800b59c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b50c:	e03f      	b.n	800b58e <I2C_ITSlaveCplt+0x4a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b512:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b516:	d015      	beq.n	800b544 <I2C_ITSlaveCplt+0x458>
    I2C_ITSlaveSeqCplt(hi2c);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fcbc 	bl	800ae96 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1d      	ldr	r2, [pc, #116]	@ (800b598 <I2C_ITSlaveCplt+0x4ac>)
 800b522:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2220      	movs	r2, #32
 800b528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ListenCpltCallback(hi2c);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3
}
 800b542:	e024      	b.n	800b58e <I2C_ITSlaveCplt+0x4a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b22      	cmp	r3, #34	@ 0x22
 800b54e:	d10f      	bne.n	800b570 <I2C_ITSlaveCplt+0x484>
    hi2c->State = HAL_I2C_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
}
 800b56e:	e00e      	b.n	800b58e <I2C_ITSlaveCplt+0x4a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	4798      	blx	r3
}
 800b58e:	bf00      	nop
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	ffff0000 	.word	0xffff0000

0800b59c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a26      	ldr	r2, [pc, #152]	@ (800b644 <I2C_ITListenCplt+0xa8>)
 800b5aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f003 0304 	and.w	r3, r3, #4
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d022      	beq.n	800b618 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d012      	beq.n	800b618 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b602:	b29b      	uxth	r3, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	b29a      	uxth	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b610:	f043 0204 	orr.w	r2, r3, #4
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b618:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fce3 	bl	800bfe8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2210      	movs	r2, #16
 800b628:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	ffff0000 	.word	0xffff0000

0800b648 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b658:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a6d      	ldr	r2, [pc, #436]	@ (800b81c <I2C_ITError+0x1d4>)
 800b666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	431a      	orrs	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	2b28      	cmp	r3, #40	@ 0x28
 800b67e:	d005      	beq.n	800b68c <I2C_ITError+0x44>
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	2b29      	cmp	r3, #41	@ 0x29
 800b684:	d002      	beq.n	800b68c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	2b2a      	cmp	r3, #42	@ 0x2a
 800b68a:	d10b      	bne.n	800b6a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b68c:	2103      	movs	r1, #3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fcaa 	bl	800bfe8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2228      	movs	r2, #40	@ 0x28
 800b698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a60      	ldr	r2, [pc, #384]	@ (800b820 <I2C_ITError+0x1d8>)
 800b6a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b6a2:	e030      	b.n	800b706 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b6a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fc9d 	bl	800bfe8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f8e3 	bl	800b87a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b60      	cmp	r3, #96	@ 0x60
 800b6be:	d01f      	beq.n	800b700 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	f003 0320 	and.w	r3, r3, #32
 800b6d2:	2b20      	cmp	r3, #32
 800b6d4:	d114      	bne.n	800b700 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	f003 0310 	and.w	r3, r3, #16
 800b6e0:	2b10      	cmp	r3, #16
 800b6e2:	d109      	bne.n	800b6f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2210      	movs	r2, #16
 800b6ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6f0:	f043 0204 	orr.w	r2, r3, #4
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b710:	2b00      	cmp	r3, #0
 800b712:	d039      	beq.n	800b788 <I2C_ITError+0x140>
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b11      	cmp	r3, #17
 800b718:	d002      	beq.n	800b720 <I2C_ITError+0xd8>
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2b21      	cmp	r3, #33	@ 0x21
 800b71e:	d133      	bne.n	800b788 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b72a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b72e:	d107      	bne.n	800b740 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b73e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b744:	4618      	mov	r0, r3
 800b746:	f7fd fac3 	bl	8008cd0 <HAL_DMA_GetState>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d017      	beq.n	800b780 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b754:	4a33      	ldr	r2, [pc, #204]	@ (800b824 <I2C_ITError+0x1dc>)
 800b756:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b764:	4618      	mov	r0, r3
 800b766:	f7fc f8e9 	bl	800793c <HAL_DMA_Abort_IT>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d04d      	beq.n	800b80c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b77a:	4610      	mov	r0, r2
 800b77c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b77e:	e045      	b.n	800b80c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f851 	bl	800b828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b786:	e041      	b.n	800b80c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d039      	beq.n	800b804 <I2C_ITError+0x1bc>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b12      	cmp	r3, #18
 800b794:	d002      	beq.n	800b79c <I2C_ITError+0x154>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b22      	cmp	r3, #34	@ 0x22
 800b79a:	d133      	bne.n	800b804 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7aa:	d107      	bne.n	800b7bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b7ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fd fa85 	bl	8008cd0 <HAL_DMA_GetState>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d017      	beq.n	800b7fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d0:	4a14      	ldr	r2, [pc, #80]	@ (800b824 <I2C_ITError+0x1dc>)
 800b7d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fc f8ab 	bl	800793c <HAL_DMA_Abort_IT>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d011      	beq.n	800b810 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7fa:	e009      	b.n	800b810 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f813 	bl	800b828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b802:	e005      	b.n	800b810 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f80f 	bl	800b828 <I2C_TreatErrorCallback>
  }
}
 800b80a:	e002      	b.n	800b812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b80c:	bf00      	nop
 800b80e:	e000      	b.n	800b812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b810:	bf00      	nop
}
 800b812:	bf00      	nop
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	ffff0000 	.word	0xffff0000
 800b820:	0800a347 	.word	0x0800a347
 800b824:	0800bbcd 	.word	0x0800bbcd

0800b828 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b60      	cmp	r3, #96	@ 0x60
 800b83a:	d10f      	bne.n	800b85c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b85a:	e00a      	b.n	800b872 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ErrorCallback(hi2c);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
}
 800b872:	bf00      	nop
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b083      	sub	sp, #12
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d103      	bne.n	800b898 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2200      	movs	r2, #0
 800b896:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d007      	beq.n	800b8b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	699a      	ldr	r2, [r3, #24]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f042 0201 	orr.w	r2, r2, #1
 800b8b4:	619a      	str	r2, [r3, #24]
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b8de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d104      	bne.n	800b8f4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b8ea:	2120      	movs	r1, #32
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 faf7 	bl	800bee0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b8f2:	e02d      	b.n	800b950 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b906:	b29b      	uxth	r3, r3
 800b908:	2bff      	cmp	r3, #255	@ 0xff
 800b90a:	d903      	bls.n	800b914 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	22ff      	movs	r2, #255	@ 0xff
 800b910:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b912:	e004      	b.n	800b91e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b926:	4619      	mov	r1, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3328      	adds	r3, #40	@ 0x28
 800b92e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b934:	f7fb fd98 	bl	8007468 <HAL_DMA_Start_IT>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b93e:	2110      	movs	r1, #16
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7ff fe81 	bl	800b648 <I2C_ITError>
}
 800b946:	e003      	b.n	800b950 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b948:	2140      	movs	r1, #64	@ 0x40
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 fac8 	bl	800bee0 <I2C_Enable_IRQ>
}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800b960:	2300      	movs	r3, #0
 800b962:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b968:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d076      	beq.n	800ba60 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a71      	ldr	r2, [pc, #452]	@ (800bb40 <I2C_DMAError+0x1e8>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d059      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a6f      	ldr	r2, [pc, #444]	@ (800bb44 <I2C_DMAError+0x1ec>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d053      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a6d      	ldr	r2, [pc, #436]	@ (800bb48 <I2C_DMAError+0x1f0>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d04d      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a6b      	ldr	r2, [pc, #428]	@ (800bb4c <I2C_DMAError+0x1f4>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d047      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a69      	ldr	r2, [pc, #420]	@ (800bb50 <I2C_DMAError+0x1f8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d041      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a67      	ldr	r2, [pc, #412]	@ (800bb54 <I2C_DMAError+0x1fc>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d03b      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a65      	ldr	r2, [pc, #404]	@ (800bb58 <I2C_DMAError+0x200>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d035      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a63      	ldr	r2, [pc, #396]	@ (800bb5c <I2C_DMAError+0x204>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d02f      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a61      	ldr	r2, [pc, #388]	@ (800bb60 <I2C_DMAError+0x208>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d029      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a5f      	ldr	r2, [pc, #380]	@ (800bb64 <I2C_DMAError+0x20c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d023      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a5d      	ldr	r2, [pc, #372]	@ (800bb68 <I2C_DMAError+0x210>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d01d      	beq.n	800ba32 <I2C_DMAError+0xda>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a5b      	ldr	r2, [pc, #364]	@ (800bb6c <I2C_DMAError+0x214>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d017      	beq.n	800ba32 <I2C_DMAError+0xda>
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a59      	ldr	r2, [pc, #356]	@ (800bb70 <I2C_DMAError+0x218>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d011      	beq.n	800ba32 <I2C_DMAError+0xda>
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a57      	ldr	r2, [pc, #348]	@ (800bb74 <I2C_DMAError+0x21c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00b      	beq.n	800ba32 <I2C_DMAError+0xda>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a55      	ldr	r2, [pc, #340]	@ (800bb78 <I2C_DMAError+0x220>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d005      	beq.n	800ba32 <I2C_DMAError+0xda>
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a53      	ldr	r2, [pc, #332]	@ (800bb7c <I2C_DMAError+0x224>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d109      	bne.n	800ba46 <I2C_DMAError+0xee>
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bf0c      	ite	eq
 800ba3e:	2301      	moveq	r3, #1
 800ba40:	2300      	movne	r3, #0
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	e008      	b.n	800ba58 <I2C_DMAError+0x100>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bf0c      	ite	eq
 800ba52:	2301      	moveq	r3, #1
 800ba54:	2300      	movne	r3, #0
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 8098 	beq.w	800bb9a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a33      	ldr	r2, [pc, #204]	@ (800bb40 <I2C_DMAError+0x1e8>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d059      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a31      	ldr	r2, [pc, #196]	@ (800bb44 <I2C_DMAError+0x1ec>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d053      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a2f      	ldr	r2, [pc, #188]	@ (800bb48 <I2C_DMAError+0x1f0>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d04d      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a2d      	ldr	r2, [pc, #180]	@ (800bb4c <I2C_DMAError+0x1f4>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d047      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a2b      	ldr	r2, [pc, #172]	@ (800bb50 <I2C_DMAError+0x1f8>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d041      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a29      	ldr	r2, [pc, #164]	@ (800bb54 <I2C_DMAError+0x1fc>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d03b      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a27      	ldr	r2, [pc, #156]	@ (800bb58 <I2C_DMAError+0x200>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d035      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a25      	ldr	r2, [pc, #148]	@ (800bb5c <I2C_DMAError+0x204>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d02f      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a23      	ldr	r2, [pc, #140]	@ (800bb60 <I2C_DMAError+0x208>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d029      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a21      	ldr	r2, [pc, #132]	@ (800bb64 <I2C_DMAError+0x20c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d023      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1f      	ldr	r2, [pc, #124]	@ (800bb68 <I2C_DMAError+0x210>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d01d      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb6c <I2C_DMAError+0x214>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d017      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a1b      	ldr	r2, [pc, #108]	@ (800bb70 <I2C_DMAError+0x218>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d011      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a19      	ldr	r2, [pc, #100]	@ (800bb74 <I2C_DMAError+0x21c>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00b      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a17      	ldr	r2, [pc, #92]	@ (800bb78 <I2C_DMAError+0x220>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d005      	beq.n	800bb2a <I2C_DMAError+0x1d2>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a15      	ldr	r2, [pc, #84]	@ (800bb7c <I2C_DMAError+0x224>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d12a      	bne.n	800bb80 <I2C_DMAError+0x228>
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bf0c      	ite	eq
 800bb36:	2301      	moveq	r3, #1
 800bb38:	2300      	movne	r3, #0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	e029      	b.n	800bb92 <I2C_DMAError+0x23a>
 800bb3e:	bf00      	nop
 800bb40:	40020010 	.word	0x40020010
 800bb44:	40020028 	.word	0x40020028
 800bb48:	40020040 	.word	0x40020040
 800bb4c:	40020058 	.word	0x40020058
 800bb50:	40020070 	.word	0x40020070
 800bb54:	40020088 	.word	0x40020088
 800bb58:	400200a0 	.word	0x400200a0
 800bb5c:	400200b8 	.word	0x400200b8
 800bb60:	40020410 	.word	0x40020410
 800bb64:	40020428 	.word	0x40020428
 800bb68:	40020440 	.word	0x40020440
 800bb6c:	40020458 	.word	0x40020458
 800bb70:	40020470 	.word	0x40020470
 800bb74:	40020488 	.word	0x40020488
 800bb78:	400204a0 	.word	0x400204a0
 800bb7c:	400204b8 	.word	0x400204b8
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2301      	moveq	r3, #1
 800bb8e:	2300      	movne	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800bb96:	2301      	movs	r3, #1
 800bb98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7fd f8a6 	bl	8008cec <HAL_DMA_GetError>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d00e      	beq.n	800bbc4 <I2C_DMAError+0x26c>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bbbc:	2110      	movs	r1, #16
 800bbbe:	68b8      	ldr	r0, [r7, #8]
 800bbc0:	f7ff fd42 	bl	800b648 <I2C_ITError>
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f7ff fe14 	bl	800b828 <I2C_TreatErrorCallback>
}
 800bc00:	bf00      	nop
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	4613      	mov	r3, r2
 800bc16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc18:	e03b      	b.n	800bc92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f84c 	bl	800bcbc <I2C_IsErrorOccurred>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e041      	b.n	800bcb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc34:	d02d      	beq.n	800bc92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc36:	f7f9 f8b7 	bl	8004da8 <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d302      	bcc.n	800bc4c <I2C_WaitOnFlagUntilTimeout+0x44>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d122      	bne.n	800bc92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	4013      	ands	r3, r2
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2301      	moveq	r3, #1
 800bc5e:	2300      	movne	r3, #0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	461a      	mov	r2, r3
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d113      	bne.n	800bc92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc6e:	f043 0220 	orr.w	r2, r3, #32
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e00f      	b.n	800bcb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	699a      	ldr	r2, [r3, #24]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	bf0c      	ite	eq
 800bca2:	2301      	moveq	r3, #1
 800bca4:	2300      	movne	r3, #0
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d0b4      	beq.n	800bc1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08a      	sub	sp, #40	@ 0x28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	f003 0310 	and.w	r3, r3, #16
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d068      	beq.n	800bdba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2210      	movs	r2, #16
 800bcee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bcf0:	e049      	b.n	800bd86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf8:	d045      	beq.n	800bd86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bcfa:	f7f9 f855 	bl	8004da8 <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d302      	bcc.n	800bd10 <I2C_IsErrorOccurred+0x54>
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d13a      	bne.n	800bd86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd32:	d121      	bne.n	800bd78 <I2C_IsErrorOccurred+0xbc>
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd3a:	d01d      	beq.n	800bd78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	d01a      	beq.n	800bd78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bd52:	f7f9 f829 	bl	8004da8 <HAL_GetTick>
 800bd56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd58:	e00e      	b.n	800bd78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bd5a:	f7f9 f825 	bl	8004da8 <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	2b19      	cmp	r3, #25
 800bd66:	d907      	bls.n	800bd78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	f043 0320 	orr.w	r3, r3, #32
 800bd6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bd76:	e006      	b.n	800bd86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d1e9      	bne.n	800bd5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	f003 0320 	and.w	r3, r3, #32
 800bd90:	2b20      	cmp	r3, #32
 800bd92:	d003      	beq.n	800bd9c <I2C_IsErrorOccurred+0xe0>
 800bd94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0aa      	beq.n	800bcf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bd9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d103      	bne.n	800bdac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	f043 0304 	orr.w	r3, r3, #4
 800bdb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00b      	beq.n	800bde4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	f043 0301 	orr.w	r3, r3, #1
 800bdd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	f043 0308 	orr.w	r3, r3, #8
 800bdf4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bdfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	f043 0302 	orr.w	r3, r3, #2
 800be16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01c      	beq.n	800be6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff fd22 	bl	800b87a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6859      	ldr	r1, [r3, #4]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	4b0d      	ldr	r3, [pc, #52]	@ (800be78 <I2C_IsErrorOccurred+0x1bc>)
 800be42:	400b      	ands	r3, r1
 800be44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	431a      	orrs	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2220      	movs	r2, #32
 800be56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800be6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3728      	adds	r7, #40	@ 0x28
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	fe00e800 	.word	0xfe00e800

0800be7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	607b      	str	r3, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	817b      	strh	r3, [r7, #10]
 800be8a:	4613      	mov	r3, r2
 800be8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be8e:	897b      	ldrh	r3, [r7, #10]
 800be90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be94:	7a7b      	ldrb	r3, [r7, #9]
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800beaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	0d5b      	lsrs	r3, r3, #21
 800beb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800beba:	4b08      	ldr	r3, [pc, #32]	@ (800bedc <I2C_TransferConfig+0x60>)
 800bebc:	430b      	orrs	r3, r1
 800bebe:	43db      	mvns	r3, r3
 800bec0:	ea02 0103 	and.w	r1, r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	430a      	orrs	r2, r1
 800becc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	03ff63ff 	.word	0x03ff63ff

0800bee0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bef4:	4a39      	ldr	r2, [pc, #228]	@ (800bfdc <I2C_Enable_IRQ+0xfc>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d032      	beq.n	800bf60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800befe:	4a38      	ldr	r2, [pc, #224]	@ (800bfe0 <I2C_Enable_IRQ+0x100>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d02d      	beq.n	800bf60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800bf08:	4a36      	ldr	r2, [pc, #216]	@ (800bfe4 <I2C_Enable_IRQ+0x104>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d028      	beq.n	800bf60 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bf0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da03      	bge.n	800bf1e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bf1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bf1e:	887b      	ldrh	r3, [r7, #2]
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800bf2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bf30:	887b      	ldrh	r3, [r7, #2]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800bf40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bf42:	887b      	ldrh	r3, [r7, #2]
 800bf44:	2b10      	cmp	r3, #16
 800bf46:	d103      	bne.n	800bf50 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bf4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf50:	887b      	ldrh	r3, [r7, #2]
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	d133      	bne.n	800bfbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f043 0320 	orr.w	r3, r3, #32
 800bf5c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf5e:	e02e      	b.n	800bfbe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bf60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	da03      	bge.n	800bf70 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800bf6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800bf80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bf82:	887b      	ldrh	r3, [r7, #2]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800bf92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bf94:	887b      	ldrh	r3, [r7, #2]
 800bf96:	2b10      	cmp	r3, #16
 800bf98:	d103      	bne.n	800bfa2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800bfa0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bfa2:	887b      	ldrh	r3, [r7, #2]
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d103      	bne.n	800bfb0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bfae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bfb0:	887b      	ldrh	r3, [r7, #2]
 800bfb2:	2b40      	cmp	r3, #64	@ 0x40
 800bfb4:	d103      	bne.n	800bfbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfbc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	601a      	str	r2, [r3, #0]
}
 800bfce:	bf00      	nop
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	0800a539 	.word	0x0800a539
 800bfe0:	0800a95d 	.word	0x0800a95d
 800bfe4:	0800a711 	.word	0x0800a711

0800bfe8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bff8:	887b      	ldrh	r3, [r7, #2]
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00f      	beq.n	800c022 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800c008:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c010:	b2db      	uxtb	r3, r3
 800c012:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c016:	2b28      	cmp	r3, #40	@ 0x28
 800c018:	d003      	beq.n	800c022 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c020:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c022:	887b      	ldrh	r3, [r7, #2]
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00f      	beq.n	800c04c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800c032:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c040:	2b28      	cmp	r3, #40	@ 0x28
 800c042:	d003      	beq.n	800c04c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c04a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c04c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da03      	bge.n	800c05c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800c05a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c05c:	887b      	ldrh	r3, [r7, #2]
 800c05e:	2b10      	cmp	r3, #16
 800c060:	d103      	bne.n	800c06a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c068:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c06a:	887b      	ldrh	r3, [r7, #2]
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d103      	bne.n	800c078 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f043 0320 	orr.w	r3, r3, #32
 800c076:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c078:	887b      	ldrh	r3, [r7, #2]
 800c07a:	2b40      	cmp	r3, #64	@ 0x40
 800c07c:	d103      	bne.n	800c086 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c084:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6819      	ldr	r1, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	43da      	mvns	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	400a      	ands	r2, r1
 800c096:	601a      	str	r2, [r3, #0]
}
 800c098:	bf00      	nop
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b20      	cmp	r3, #32
 800c0b8:	d138      	bne.n	800c12c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d101      	bne.n	800c0c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	e032      	b.n	800c12e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2224      	movs	r2, #36	@ 0x24
 800c0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0201 	bic.w	r2, r2, #1
 800c0e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c0f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	e000      	b.n	800c12e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c12c:	2302      	movs	r3, #2
  }
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d139      	bne.n	800c1c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e033      	b.n	800c1c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2224      	movs	r2, #36	@ 0x24
 800c16a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0201 	bic.w	r2, r2, #1
 800c17c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c18c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	4313      	orrs	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0201 	orr.w	r2, r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e000      	b.n	800c1c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c1c4:	2302      	movs	r3, #2
  }
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c1da:	f7f8 fde5 	bl	8004da8 <HAL_GetTick>
 800c1de:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e03b      	b.n	800c262 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68da      	ldr	r2, [r3, #12]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0201 	bic.w	r2, r2, #1
 800c208:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c20a:	e00f      	b.n	800c22c <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c20c:	f7f8 fdcc 	bl	8004da8 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	2b05      	cmp	r3, #5
 800c218:	d908      	bls.n	800c22c <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2240      	movs	r2, #64	@ 0x40
 800c21e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2203      	movs	r2, #3
 800c224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e01a      	b.n	800c262 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e8      	bne.n	800c20c <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f9bc 	bl	800c5b8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b087      	sub	sp, #28
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e03e      	b.n	800c302 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800c28e:	2302      	movs	r3, #2
 800c290:	e037      	b.n	800c302 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d126      	bne.n	800c2f4 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d11c      	bne.n	800c2ee <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d108      	bne.n	800c2dc <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	691a      	ldr	r2, [r3, #16]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c2d8:	611a      	str	r2, [r3, #16]
 800c2da:	e00d      	b.n	800c2f8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	691a      	ldr	r2, [r3, #16]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c2ea:	611a      	str	r2, [r3, #16]
 800c2ec:	e004      	b.n	800c2f8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	75fb      	strb	r3, [r7, #23]
 800c2f2:	e001      	b.n	800c2f8 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
	...

0800c310 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c31c:	4b91      	ldr	r3, [pc, #580]	@ (800c564 <HAL_MDMA_IRQHandler+0x254>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a91      	ldr	r2, [pc, #580]	@ (800c568 <HAL_MDMA_IRQHandler+0x258>)
 800c322:	fba2 2303 	umull	r2, r3, r2, r3
 800c326:	0a9b      	lsrs	r3, r3, #10
 800c328:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	4b8e      	ldr	r3, [pc, #568]	@ (800c56c <HAL_MDMA_IRQHandler+0x25c>)
 800c332:	4413      	add	r3, r2
 800c334:	099b      	lsrs	r3, r3, #6
 800c336:	f003 031f 	and.w	r3, r3, #31
 800c33a:	2201      	movs	r2, #1
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800c342:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 812d 	beq.w	800c5ac <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d054      	beq.n	800c40a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d04d      	beq.n	800c40a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f022 0202 	bic.w	r2, r2, #2
 800c37c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d106      	bne.n	800c39e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c394:	f043 0201 	orr.w	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	669a      	str	r2, [r3, #104]	@ 0x68
 800c39c:	e005      	b.n	800c3aa <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3a2:	f043 0202 	orr.w	r2, r3, #2
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d005      	beq.n	800c3c0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3b8:	f043 0204 	orr.w	r2, r3, #4
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d005      	beq.n	800c3d6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3ce:	f043 0208 	orr.w	r2, r3, #8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3e4:	f043 0210 	orr.w	r2, r3, #16
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3fa:	f043 0220 	orr.w	r2, r3, #32
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d012      	beq.n	800c43e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	f003 0320 	and.w	r3, r3, #32
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00b      	beq.n	800c43e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2210      	movs	r2, #16
 800c42c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c432:	2b00      	cmp	r3, #0
 800c434:	d003      	beq.n	800c43e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 0308 	and.w	r3, r3, #8
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d012      	beq.n	800c472 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	f003 0310 	and.w	r3, r3, #16
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00b      	beq.n	800c472 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2208      	movs	r2, #8
 800c460:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d012      	beq.n	800c4a6 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f003 0308 	and.w	r3, r3, #8
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00b      	beq.n	800c4a6 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2204      	movs	r2, #4
 800c494:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d003      	beq.n	800c4a6 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d039      	beq.n	800c528 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	f003 0304 	and.w	r3, r3, #4
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d032      	beq.n	800c528 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800c4d0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d110      	bne.n	800c500 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d05c      	beq.n	800c5b0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3
        }
        return;
 800c4fe:	e057      	b.n	800c5b0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2202      	movs	r2, #2
 800c506:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d040      	beq.n	800c5b2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2204      	movs	r2, #4
 800c534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 0201 	bic.w	r2, r2, #1
 800c546:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3301      	adds	r3, #1
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	429a      	cmp	r2, r3
 800c552:	d30d      	bcc.n	800c570 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1f2      	bne.n	800c548 <HAL_MDMA_IRQHandler+0x238>
 800c562:	e006      	b.n	800c572 <HAL_MDMA_IRQHandler+0x262>
 800c564:	24000228 	.word	0x24000228
 800c568:	1b4e81b5 	.word	0x1b4e81b5
 800c56c:	adffffc0 	.word	0xadffffc0
        break;
 800c570:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2203      	movs	r2, #3
 800c58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c590:	e003      	b.n	800c59a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
 800c5aa:	e002      	b.n	800c5b2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800c5ac:	bf00      	nop
 800c5ae:	e000      	b.n	800c5b2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800c5b0:	bf00      	nop
    }
  }
}
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68d9      	ldr	r1, [r3, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	691a      	ldr	r2, [r3, #16]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	695a      	ldr	r2, [r3, #20]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c5de:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c5ea:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c5f6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800c600:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c60c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c60e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c618:	d107      	bne.n	800c62a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691a      	ldr	r2, [r3, #16]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c628:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2200      	movs	r2, #0
 800c630:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c636:	2b00      	cmp	r3, #0
 800c638:	da11      	bge.n	800c65e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	695a      	ldr	r2, [r3, #20]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c648:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64e:	425b      	negs	r3, r3
 800c650:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	b292      	uxth	r2, r2
 800c65a:	621a      	str	r2, [r3, #32]
 800c65c:	e006      	b.n	800c66c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c662:	461a      	mov	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	b292      	uxth	r2, r2
 800c66a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	da15      	bge.n	800c6a0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	695a      	ldr	r2, [r3, #20]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c682:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c688:	425b      	negs	r3, r3
 800c68a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6a19      	ldr	r1, [r3, #32]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	041a      	lsls	r2, r3, #16
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	621a      	str	r2, [r3, #32]
 800c69e:	e009      	b.n	800c6b4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6a19      	ldr	r1, [r3, #32]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6aa:	041a      	lsls	r2, r3, #16
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6bc:	d006      	beq.n	800c6cc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6ca:	e003      	b.n	800c6d4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c6dc:	bf00      	nop
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800c6ec:	4b05      	ldr	r3, [pc, #20]	@ (800c704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a04      	ldr	r2, [pc, #16]	@ (800c704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c6f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6f6:	6013      	str	r3, [r2, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	58024800 	.word	0x58024800

0800c708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c710:	4b19      	ldr	r3, [pc, #100]	@ (800c778 <HAL_PWREx_ConfigSupply+0x70>)
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d00a      	beq.n	800c732 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c71c:	4b16      	ldr	r3, [pc, #88]	@ (800c778 <HAL_PWREx_ConfigSupply+0x70>)
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f003 0307 	and.w	r3, r3, #7
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d001      	beq.n	800c72e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e01f      	b.n	800c76e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	e01d      	b.n	800c76e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c732:	4b11      	ldr	r3, [pc, #68]	@ (800c778 <HAL_PWREx_ConfigSupply+0x70>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	f023 0207 	bic.w	r2, r3, #7
 800c73a:	490f      	ldr	r1, [pc, #60]	@ (800c778 <HAL_PWREx_ConfigSupply+0x70>)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c742:	f7f8 fb31 	bl	8004da8 <HAL_GetTick>
 800c746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c748:	e009      	b.n	800c75e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c74a:	f7f8 fb2d 	bl	8004da8 <HAL_GetTick>
 800c74e:	4602      	mov	r2, r0
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c758:	d901      	bls.n	800c75e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e007      	b.n	800c76e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c75e:	4b06      	ldr	r3, [pc, #24]	@ (800c778 <HAL_PWREx_ConfigSupply+0x70>)
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c76a:	d1ee      	bne.n	800c74a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	58024800 	.word	0x58024800

0800c77c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08c      	sub	sp, #48	@ 0x30
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f000 bc48 	b.w	800d020 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 8088 	beq.w	800c8ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c79e:	4b99      	ldr	r3, [pc, #612]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c7a8:	4b96      	ldr	r3, [pc, #600]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b0:	2b10      	cmp	r3, #16
 800c7b2:	d007      	beq.n	800c7c4 <HAL_RCC_OscConfig+0x48>
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	2b18      	cmp	r3, #24
 800c7b8:	d111      	bne.n	800c7de <HAL_RCC_OscConfig+0x62>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	f003 0303 	and.w	r3, r3, #3
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d10c      	bne.n	800c7de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7c4:	4b8f      	ldr	r3, [pc, #572]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d06d      	beq.n	800c8ac <HAL_RCC_OscConfig+0x130>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d169      	bne.n	800c8ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f000 bc21 	b.w	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7e6:	d106      	bne.n	800c7f6 <HAL_RCC_OscConfig+0x7a>
 800c7e8:	4b86      	ldr	r3, [pc, #536]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a85      	ldr	r2, [pc, #532]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c7ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7f2:	6013      	str	r3, [r2, #0]
 800c7f4:	e02e      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10c      	bne.n	800c818 <HAL_RCC_OscConfig+0x9c>
 800c7fe:	4b81      	ldr	r3, [pc, #516]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a80      	ldr	r2, [pc, #512]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c808:	6013      	str	r3, [r2, #0]
 800c80a:	4b7e      	ldr	r3, [pc, #504]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a7d      	ldr	r2, [pc, #500]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c810:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e01d      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c820:	d10c      	bne.n	800c83c <HAL_RCC_OscConfig+0xc0>
 800c822:	4b78      	ldr	r3, [pc, #480]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a77      	ldr	r2, [pc, #476]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	4b75      	ldr	r3, [pc, #468]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a74      	ldr	r2, [pc, #464]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	e00b      	b.n	800c854 <HAL_RCC_OscConfig+0xd8>
 800c83c:	4b71      	ldr	r3, [pc, #452]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a70      	ldr	r2, [pc, #448]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c846:	6013      	str	r3, [r2, #0]
 800c848:	4b6e      	ldr	r3, [pc, #440]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a6d      	ldr	r2, [pc, #436]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c84e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d013      	beq.n	800c884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85c:	f7f8 faa4 	bl	8004da8 <HAL_GetTick>
 800c860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c862:	e008      	b.n	800c876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c864:	f7f8 faa0 	bl	8004da8 <HAL_GetTick>
 800c868:	4602      	mov	r2, r0
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	2b64      	cmp	r3, #100	@ 0x64
 800c870:	d901      	bls.n	800c876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c872:	2303      	movs	r3, #3
 800c874:	e3d4      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c876:	4b63      	ldr	r3, [pc, #396]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0f0      	beq.n	800c864 <HAL_RCC_OscConfig+0xe8>
 800c882:	e014      	b.n	800c8ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c884:	f7f8 fa90 	bl	8004da8 <HAL_GetTick>
 800c888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c88a:	e008      	b.n	800c89e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c88c:	f7f8 fa8c 	bl	8004da8 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b64      	cmp	r3, #100	@ 0x64
 800c898:	d901      	bls.n	800c89e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e3c0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c89e:	4b59      	ldr	r3, [pc, #356]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1f0      	bne.n	800c88c <HAL_RCC_OscConfig+0x110>
 800c8aa:	e000      	b.n	800c8ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 80ca 	beq.w	800ca50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8bc:	4b51      	ldr	r3, [pc, #324]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8c6:	4b4f      	ldr	r3, [pc, #316]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <HAL_RCC_OscConfig+0x166>
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	2b18      	cmp	r3, #24
 800c8d6:	d156      	bne.n	800c986 <HAL_RCC_OscConfig+0x20a>
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	f003 0303 	and.w	r3, r3, #3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d151      	bne.n	800c986 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8e2:	4b48      	ldr	r3, [pc, #288]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0304 	and.w	r3, r3, #4
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d005      	beq.n	800c8fa <HAL_RCC_OscConfig+0x17e>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e392      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c8fa:	4b42      	ldr	r3, [pc, #264]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f023 0219 	bic.w	r2, r3, #25
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	493f      	ldr	r1, [pc, #252]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c908:	4313      	orrs	r3, r2
 800c90a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c90c:	f7f8 fa4c 	bl	8004da8 <HAL_GetTick>
 800c910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c912:	e008      	b.n	800c926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c914:	f7f8 fa48 	bl	8004da8 <HAL_GetTick>
 800c918:	4602      	mov	r2, r0
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d901      	bls.n	800c926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c922:	2303      	movs	r3, #3
 800c924:	e37c      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c926:	4b37      	ldr	r3, [pc, #220]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0f0      	beq.n	800c914 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c932:	f7f8 fa69 	bl	8004e08 <HAL_GetREVID>
 800c936:	4603      	mov	r3, r0
 800c938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d817      	bhi.n	800c970 <HAL_RCC_OscConfig+0x1f4>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	2b40      	cmp	r3, #64	@ 0x40
 800c946:	d108      	bne.n	800c95a <HAL_RCC_OscConfig+0x1de>
 800c948:	4b2e      	ldr	r3, [pc, #184]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c950:	4a2c      	ldr	r2, [pc, #176]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c958:	e07a      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c95a:	4b2a      	ldr	r3, [pc, #168]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	031b      	lsls	r3, r3, #12
 800c968:	4926      	ldr	r1, [pc, #152]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c96e:	e06f      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c970:	4b24      	ldr	r3, [pc, #144]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	061b      	lsls	r3, r3, #24
 800c97e:	4921      	ldr	r1, [pc, #132]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c980:	4313      	orrs	r3, r2
 800c982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c984:	e064      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d047      	beq.n	800ca1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c98e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f023 0219 	bic.w	r2, r3, #25
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	491a      	ldr	r1, [pc, #104]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c99c:	4313      	orrs	r3, r2
 800c99e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a0:	f7f8 fa02 	bl	8004da8 <HAL_GetTick>
 800c9a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9a6:	e008      	b.n	800c9ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c9a8:	f7f8 f9fe 	bl	8004da8 <HAL_GetTick>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d901      	bls.n	800c9ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e332      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9ba:	4b12      	ldr	r3, [pc, #72]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 0304 	and.w	r3, r3, #4
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0f0      	beq.n	800c9a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9c6:	f7f8 fa1f 	bl	8004e08 <HAL_GetREVID>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d819      	bhi.n	800ca08 <HAL_RCC_OscConfig+0x28c>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	2b40      	cmp	r3, #64	@ 0x40
 800c9da:	d108      	bne.n	800c9ee <HAL_RCC_OscConfig+0x272>
 800c9dc:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c9e4:	4a07      	ldr	r2, [pc, #28]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ea:	6053      	str	r3, [r2, #4]
 800c9ec:	e030      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	031b      	lsls	r3, r3, #12
 800c9fc:	4901      	ldr	r1, [pc, #4]	@ (800ca04 <HAL_RCC_OscConfig+0x288>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	604b      	str	r3, [r1, #4]
 800ca02:	e025      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
 800ca04:	58024400 	.word	0x58024400
 800ca08:	4b9a      	ldr	r3, [pc, #616]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	061b      	lsls	r3, r3, #24
 800ca16:	4997      	ldr	r1, [pc, #604]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	604b      	str	r3, [r1, #4]
 800ca1c:	e018      	b.n	800ca50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca1e:	4b95      	ldr	r3, [pc, #596]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a94      	ldr	r2, [pc, #592]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca24:	f023 0301 	bic.w	r3, r3, #1
 800ca28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca2a:	f7f8 f9bd 	bl	8004da8 <HAL_GetTick>
 800ca2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca30:	e008      	b.n	800ca44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca32:	f7f8 f9b9 	bl	8004da8 <HAL_GetTick>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e2ed      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca44:	4b8b      	ldr	r3, [pc, #556]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1f0      	bne.n	800ca32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0310 	and.w	r3, r3, #16
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80a9 	beq.w	800cbb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca5e:	4b85      	ldr	r3, [pc, #532]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca68:	4b82      	ldr	r3, [pc, #520]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b08      	cmp	r3, #8
 800ca72:	d007      	beq.n	800ca84 <HAL_RCC_OscConfig+0x308>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b18      	cmp	r3, #24
 800ca78:	d13a      	bne.n	800caf0 <HAL_RCC_OscConfig+0x374>
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d135      	bne.n	800caf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca84:	4b7b      	ldr	r3, [pc, #492]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <HAL_RCC_OscConfig+0x320>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	2b80      	cmp	r3, #128	@ 0x80
 800ca96:	d001      	beq.n	800ca9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e2c1      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca9c:	f7f8 f9b4 	bl	8004e08 <HAL_GetREVID>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d817      	bhi.n	800cada <HAL_RCC_OscConfig+0x35e>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	2b20      	cmp	r3, #32
 800cab0:	d108      	bne.n	800cac4 <HAL_RCC_OscConfig+0x348>
 800cab2:	4b70      	ldr	r3, [pc, #448]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800caba:	4a6e      	ldr	r2, [pc, #440]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cabc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cac0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cac2:	e075      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cac4:	4b6b      	ldr	r3, [pc, #428]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	069b      	lsls	r3, r3, #26
 800cad2:	4968      	ldr	r1, [pc, #416]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cad8:	e06a      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cada:	4b66      	ldr	r3, [pc, #408]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	061b      	lsls	r3, r3, #24
 800cae8:	4962      	ldr	r1, [pc, #392]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800caea:	4313      	orrs	r3, r2
 800caec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800caee:	e05f      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d042      	beq.n	800cb7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800caf8:	4b5e      	ldr	r3, [pc, #376]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a5d      	ldr	r2, [pc, #372]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cafe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb04:	f7f8 f950 	bl	8004da8 <HAL_GetTick>
 800cb08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb0a:	e008      	b.n	800cb1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb0c:	f7f8 f94c 	bl	8004da8 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d901      	bls.n	800cb1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	e280      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb1e:	4b55      	ldr	r3, [pc, #340]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0f0      	beq.n	800cb0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb2a:	f7f8 f96d 	bl	8004e08 <HAL_GetREVID>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d817      	bhi.n	800cb68 <HAL_RCC_OscConfig+0x3ec>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d108      	bne.n	800cb52 <HAL_RCC_OscConfig+0x3d6>
 800cb40:	4b4c      	ldr	r3, [pc, #304]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cb48:	4a4a      	ldr	r2, [pc, #296]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb4e:	6053      	str	r3, [r2, #4]
 800cb50:	e02e      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
 800cb52:	4b48      	ldr	r3, [pc, #288]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	069b      	lsls	r3, r3, #26
 800cb60:	4944      	ldr	r1, [pc, #272]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	604b      	str	r3, [r1, #4]
 800cb66:	e023      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
 800cb68:	4b42      	ldr	r3, [pc, #264]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	061b      	lsls	r3, r3, #24
 800cb76:	493f      	ldr	r1, [pc, #252]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	60cb      	str	r3, [r1, #12]
 800cb7c:	e018      	b.n	800cbb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb7e:	4b3d      	ldr	r3, [pc, #244]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a3c      	ldr	r2, [pc, #240]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cb84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8a:	f7f8 f90d 	bl	8004da8 <HAL_GetTick>
 800cb8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb92:	f7f8 f909 	bl	8004da8 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e23d      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cba4:	4b33      	ldr	r3, [pc, #204]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1f0      	bne.n	800cb92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0308 	and.w	r3, r3, #8
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d036      	beq.n	800cc2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d019      	beq.n	800cbf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbc4:	4b2b      	ldr	r3, [pc, #172]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbc8:	4a2a      	ldr	r2, [pc, #168]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbca:	f043 0301 	orr.w	r3, r3, #1
 800cbce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd0:	f7f8 f8ea 	bl	8004da8 <HAL_GetTick>
 800cbd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbd6:	e008      	b.n	800cbea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbd8:	f7f8 f8e6 	bl	8004da8 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d901      	bls.n	800cbea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e21a      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbea:	4b22      	ldr	r3, [pc, #136]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f0      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x45c>
 800cbf6:	e018      	b.n	800cc2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cbfe:	f023 0301 	bic.w	r3, r3, #1
 800cc02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc04:	f7f8 f8d0 	bl	8004da8 <HAL_GetTick>
 800cc08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc0a:	e008      	b.n	800cc1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc0c:	f7f8 f8cc 	bl	8004da8 <HAL_GetTick>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e200      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc1e:	4b15      	ldr	r3, [pc, #84]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1f0      	bne.n	800cc0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0320 	and.w	r3, r3, #32
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d039      	beq.n	800ccaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d01c      	beq.n	800cc78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a0c      	ldr	r2, [pc, #48]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc4a:	f7f8 f8ad 	bl	8004da8 <HAL_GetTick>
 800cc4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc50:	e008      	b.n	800cc64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc52:	f7f8 f8a9 	bl	8004da8 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e1dd      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc64:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <HAL_RCC_OscConfig+0x4f8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0f0      	beq.n	800cc52 <HAL_RCC_OscConfig+0x4d6>
 800cc70:	e01b      	b.n	800ccaa <HAL_RCC_OscConfig+0x52e>
 800cc72:	bf00      	nop
 800cc74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cc78:	4b9b      	ldr	r3, [pc, #620]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a9a      	ldr	r2, [pc, #616]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cc7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc84:	f7f8 f890 	bl	8004da8 <HAL_GetTick>
 800cc88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc8a:	e008      	b.n	800cc9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc8c:	f7f8 f88c 	bl	8004da8 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d901      	bls.n	800cc9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e1c0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc9e:	4b92      	ldr	r3, [pc, #584]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1f0      	bne.n	800cc8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 8081 	beq.w	800cdba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ccb8:	4b8c      	ldr	r3, [pc, #560]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a8b      	ldr	r2, [pc, #556]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800ccbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccc4:	f7f8 f870 	bl	8004da8 <HAL_GetTick>
 800ccc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccca:	e008      	b.n	800ccde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cccc:	f7f8 f86c 	bl	8004da8 <HAL_GetTick>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	2b64      	cmp	r3, #100	@ 0x64
 800ccd8:	d901      	bls.n	800ccde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	e1a0      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccde:	4b83      	ldr	r3, [pc, #524]	@ (800ceec <HAL_RCC_OscConfig+0x770>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0f0      	beq.n	800cccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d106      	bne.n	800cd00 <HAL_RCC_OscConfig+0x584>
 800ccf2:	4b7d      	ldr	r3, [pc, #500]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf6:	4a7c      	ldr	r2, [pc, #496]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ccf8:	f043 0301 	orr.w	r3, r3, #1
 800ccfc:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccfe:	e02d      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10c      	bne.n	800cd22 <HAL_RCC_OscConfig+0x5a6>
 800cd08:	4b77      	ldr	r3, [pc, #476]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0c:	4a76      	ldr	r2, [pc, #472]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd14:	4b74      	ldr	r3, [pc, #464]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd18:	4a73      	ldr	r2, [pc, #460]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd1a:	f023 0304 	bic.w	r3, r3, #4
 800cd1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd20:	e01c      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	2b05      	cmp	r3, #5
 800cd28:	d10c      	bne.n	800cd44 <HAL_RCC_OscConfig+0x5c8>
 800cd2a:	4b6f      	ldr	r3, [pc, #444]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd2e:	4a6e      	ldr	r2, [pc, #440]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd30:	f043 0304 	orr.w	r3, r3, #4
 800cd34:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd36:	4b6c      	ldr	r3, [pc, #432]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3a:	4a6b      	ldr	r2, [pc, #428]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd3c:	f043 0301 	orr.w	r3, r3, #1
 800cd40:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd42:	e00b      	b.n	800cd5c <HAL_RCC_OscConfig+0x5e0>
 800cd44:	4b68      	ldr	r3, [pc, #416]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd48:	4a67      	ldr	r2, [pc, #412]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd4a:	f023 0301 	bic.w	r3, r3, #1
 800cd4e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd50:	4b65      	ldr	r3, [pc, #404]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd54:	4a64      	ldr	r2, [pc, #400]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd56:	f023 0304 	bic.w	r3, r3, #4
 800cd5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d015      	beq.n	800cd90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd64:	f7f8 f820 	bl	8004da8 <HAL_GetTick>
 800cd68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd6a:	e00a      	b.n	800cd82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd6c:	f7f8 f81c 	bl	8004da8 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d901      	bls.n	800cd82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e14e      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd82:	4b59      	ldr	r3, [pc, #356]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cd84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0ee      	beq.n	800cd6c <HAL_RCC_OscConfig+0x5f0>
 800cd8e:	e014      	b.n	800cdba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd90:	f7f8 f80a 	bl	8004da8 <HAL_GetTick>
 800cd94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd96:	e00a      	b.n	800cdae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd98:	f7f8 f806 	bl	8004da8 <HAL_GetTick>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d901      	bls.n	800cdae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e138      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cdae:	4b4e      	ldr	r3, [pc, #312]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1ee      	bne.n	800cd98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 812d 	beq.w	800d01e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cdc4:	4b48      	ldr	r3, [pc, #288]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdcc:	2b18      	cmp	r3, #24
 800cdce:	f000 80bd 	beq.w	800cf4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	f040 809e 	bne.w	800cf18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cddc:	4b42      	ldr	r3, [pc, #264]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a41      	ldr	r2, [pc, #260]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cde2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cde6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde8:	f7f7 ffde 	bl	8004da8 <HAL_GetTick>
 800cdec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdf0:	f7f7 ffda 	bl	8004da8 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e10e      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce02:	4b39      	ldr	r3, [pc, #228]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce0e:	4b36      	ldr	r3, [pc, #216]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce12:	4b37      	ldr	r3, [pc, #220]	@ (800cef0 <HAL_RCC_OscConfig+0x774>)
 800ce14:	4013      	ands	r3, r2
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce1e:	0112      	lsls	r2, r2, #4
 800ce20:	430a      	orrs	r2, r1
 800ce22:	4931      	ldr	r1, [pc, #196]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce24:	4313      	orrs	r3, r2
 800ce26:	628b      	str	r3, [r1, #40]	@ 0x28
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce36:	3b01      	subs	r3, #1
 800ce38:	025b      	lsls	r3, r3, #9
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce42:	3b01      	subs	r3, #1
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce50:	3b01      	subs	r3, #1
 800ce52:	061b      	lsls	r3, r3, #24
 800ce54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ce58:	4923      	ldr	r1, [pc, #140]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ce5e:	4b22      	ldr	r3, [pc, #136]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce62:	4a21      	ldr	r2, [pc, #132]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce6e:	4b21      	ldr	r3, [pc, #132]	@ (800cef4 <HAL_RCC_OscConfig+0x778>)
 800ce70:	4013      	ands	r3, r2
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce76:	00d2      	lsls	r2, r2, #3
 800ce78:	491b      	ldr	r1, [pc, #108]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ce7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce82:	f023 020c 	bic.w	r2, r3, #12
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8a:	4917      	ldr	r1, [pc, #92]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce90:	4b15      	ldr	r3, [pc, #84]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	f023 0202 	bic.w	r2, r3, #2
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9c:	4912      	ldr	r1, [pc, #72]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cea2:	4b11      	ldr	r3, [pc, #68]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea6:	4a10      	ldr	r2, [pc, #64]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ceac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ceae:	4b0e      	ldr	r3, [pc, #56]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ceb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ceb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ceba:	4b0b      	ldr	r3, [pc, #44]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebe:	4a0a      	ldr	r2, [pc, #40]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cec6:	4b08      	ldr	r3, [pc, #32]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceca:	4a07      	ldr	r2, [pc, #28]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800cecc:	f043 0301 	orr.w	r3, r3, #1
 800ced0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ced2:	4b05      	ldr	r3, [pc, #20]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a04      	ldr	r2, [pc, #16]	@ (800cee8 <HAL_RCC_OscConfig+0x76c>)
 800ced8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cedc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cede:	f7f7 ff63 	bl	8004da8 <HAL_GetTick>
 800cee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cee4:	e011      	b.n	800cf0a <HAL_RCC_OscConfig+0x78e>
 800cee6:	bf00      	nop
 800cee8:	58024400 	.word	0x58024400
 800ceec:	58024800 	.word	0x58024800
 800cef0:	fffffc0c 	.word	0xfffffc0c
 800cef4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cef8:	f7f7 ff56 	bl	8004da8 <HAL_GetTick>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d901      	bls.n	800cf0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e08a      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf0a:	4b47      	ldr	r3, [pc, #284]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0f0      	beq.n	800cef8 <HAL_RCC_OscConfig+0x77c>
 800cf16:	e082      	b.n	800d01e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf18:	4b43      	ldr	r3, [pc, #268]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a42      	ldr	r2, [pc, #264]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf24:	f7f7 ff40 	bl	8004da8 <HAL_GetTick>
 800cf28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf2c:	f7f7 ff3c 	bl	8004da8 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e070      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf3e:	4b3a      	ldr	r3, [pc, #232]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1f0      	bne.n	800cf2c <HAL_RCC_OscConfig+0x7b0>
 800cf4a:	e068      	b.n	800d01e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cf4c:	4b36      	ldr	r3, [pc, #216]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cf52:	4b35      	ldr	r3, [pc, #212]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d031      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f003 0203 	and.w	r2, r3, #3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d12a      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	091b      	lsrs	r3, r3, #4
 800cf72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d122      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d11a      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	0a5b      	lsrs	r3, r3, #9
 800cf92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d111      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d108      	bne.n	800cfc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	0e1b      	lsrs	r3, r3, #24
 800cfb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d001      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e02b      	b.n	800d020 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cfc8:	4b17      	ldr	r3, [pc, #92]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfcc:	08db      	lsrs	r3, r3, #3
 800cfce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d01f      	beq.n	800d01e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cfde:	4b12      	ldr	r3, [pc, #72]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe2:	4a11      	ldr	r2, [pc, #68]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800cfe4:	f023 0301 	bic.w	r3, r3, #1
 800cfe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cfea:	f7f7 fedd 	bl	8004da8 <HAL_GetTick>
 800cfee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cff0:	bf00      	nop
 800cff2:	f7f7 fed9 	bl	8004da8 <HAL_GetTick>
 800cff6:	4602      	mov	r2, r0
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d0f9      	beq.n	800cff2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cffe:	4b0a      	ldr	r3, [pc, #40]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d002:	4b0a      	ldr	r3, [pc, #40]	@ (800d02c <HAL_RCC_OscConfig+0x8b0>)
 800d004:	4013      	ands	r3, r2
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d00a:	00d2      	lsls	r2, r2, #3
 800d00c:	4906      	ldr	r1, [pc, #24]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d012:	4b05      	ldr	r3, [pc, #20]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d016:	4a04      	ldr	r2, [pc, #16]	@ (800d028 <HAL_RCC_OscConfig+0x8ac>)
 800d018:	f043 0301 	orr.w	r3, r3, #1
 800d01c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3730      	adds	r7, #48	@ 0x30
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	58024400 	.word	0x58024400
 800d02c:	ffff0007 	.word	0xffff0007

0800d030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e19c      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d044:	4b8a      	ldr	r3, [pc, #552]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 030f 	and.w	r3, r3, #15
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d910      	bls.n	800d074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d052:	4b87      	ldr	r3, [pc, #540]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f023 020f 	bic.w	r2, r3, #15
 800d05a:	4985      	ldr	r1, [pc, #532]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	4313      	orrs	r3, r2
 800d060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d062:	4b83      	ldr	r3, [pc, #524]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 030f 	and.w	r3, r3, #15
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d001      	beq.n	800d074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e184      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d010      	beq.n	800d0a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	4b7b      	ldr	r3, [pc, #492]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d908      	bls.n	800d0a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d090:	4b78      	ldr	r3, [pc, #480]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	4975      	ldr	r1, [pc, #468]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 0308 	and.w	r3, r3, #8
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d010      	beq.n	800d0d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695a      	ldr	r2, [r3, #20]
 800d0b2:	4b70      	ldr	r3, [pc, #448]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d908      	bls.n	800d0d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d0be:	4b6d      	ldr	r3, [pc, #436]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0c0:	69db      	ldr	r3, [r3, #28]
 800d0c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	496a      	ldr	r1, [pc, #424]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0310 	and.w	r3, r3, #16
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d010      	beq.n	800d0fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699a      	ldr	r2, [r3, #24]
 800d0e0:	4b64      	ldr	r3, [pc, #400]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d908      	bls.n	800d0fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d0ec:	4b61      	ldr	r3, [pc, #388]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	495e      	ldr	r1, [pc, #376]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 0320 	and.w	r3, r3, #32
 800d106:	2b00      	cmp	r3, #0
 800d108:	d010      	beq.n	800d12c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	69da      	ldr	r2, [r3, #28]
 800d10e:	4b59      	ldr	r3, [pc, #356]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d116:	429a      	cmp	r2, r3
 800d118:	d908      	bls.n	800d12c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d11a:	4b56      	ldr	r3, [pc, #344]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	4953      	ldr	r1, [pc, #332]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b00      	cmp	r3, #0
 800d136:	d010      	beq.n	800d15a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	4b4d      	ldr	r3, [pc, #308]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	f003 030f 	and.w	r3, r3, #15
 800d144:	429a      	cmp	r2, r3
 800d146:	d908      	bls.n	800d15a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d148:	4b4a      	ldr	r3, [pc, #296]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	f023 020f 	bic.w	r2, r3, #15
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	4947      	ldr	r1, [pc, #284]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d156:	4313      	orrs	r3, r2
 800d158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d055      	beq.n	800d212 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d166:	4b43      	ldr	r3, [pc, #268]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	4940      	ldr	r1, [pc, #256]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d174:	4313      	orrs	r3, r2
 800d176:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d107      	bne.n	800d190 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d180:	4b3c      	ldr	r3, [pc, #240]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d121      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e0f6      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d107      	bne.n	800d1a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d198:	4b36      	ldr	r3, [pc, #216]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d115      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e0ea      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d107      	bne.n	800d1c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d1b0:	4b30      	ldr	r3, [pc, #192]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d109      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e0de      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1c0:	4b2c      	ldr	r3, [pc, #176]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d101      	bne.n	800d1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0d6      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1d0:	4b28      	ldr	r3, [pc, #160]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	f023 0207 	bic.w	r2, r3, #7
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	4925      	ldr	r1, [pc, #148]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e2:	f7f7 fde1 	bl	8004da8 <HAL_GetTick>
 800d1e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1e8:	e00a      	b.n	800d200 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1ea:	f7f7 fddd 	bl	8004da8 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d901      	bls.n	800d200 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e0be      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d200:	4b1c      	ldr	r3, [pc, #112]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	429a      	cmp	r2, r3
 800d210:	d1eb      	bne.n	800d1ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d010      	beq.n	800d240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68da      	ldr	r2, [r3, #12]
 800d222:	4b14      	ldr	r3, [pc, #80]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	f003 030f 	and.w	r3, r3, #15
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d208      	bcs.n	800d240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d22e:	4b11      	ldr	r3, [pc, #68]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	f023 020f 	bic.w	r2, r3, #15
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	490e      	ldr	r1, [pc, #56]	@ (800d274 <HAL_RCC_ClockConfig+0x244>)
 800d23c:	4313      	orrs	r3, r2
 800d23e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d240:	4b0b      	ldr	r3, [pc, #44]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d214      	bcs.n	800d278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d24e:	4b08      	ldr	r3, [pc, #32]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f023 020f 	bic.w	r2, r3, #15
 800d256:	4906      	ldr	r1, [pc, #24]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d25e:	4b04      	ldr	r3, [pc, #16]	@ (800d270 <HAL_RCC_ClockConfig+0x240>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 030f 	and.w	r3, r3, #15
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d005      	beq.n	800d278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e086      	b.n	800d37e <HAL_RCC_ClockConfig+0x34e>
 800d270:	52002000 	.word	0x52002000
 800d274:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0304 	and.w	r3, r3, #4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d010      	beq.n	800d2a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691a      	ldr	r2, [r3, #16]
 800d288:	4b3f      	ldr	r3, [pc, #252]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d290:	429a      	cmp	r2, r3
 800d292:	d208      	bcs.n	800d2a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d294:	4b3c      	ldr	r3, [pc, #240]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	4939      	ldr	r1, [pc, #228]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d010      	beq.n	800d2d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	695a      	ldr	r2, [r3, #20]
 800d2b6:	4b34      	ldr	r3, [pc, #208]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d208      	bcs.n	800d2d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d2c2:	4b31      	ldr	r3, [pc, #196]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	492e      	ldr	r1, [pc, #184]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d010      	beq.n	800d302 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699a      	ldr	r2, [r3, #24]
 800d2e4:	4b28      	ldr	r3, [pc, #160]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d208      	bcs.n	800d302 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d2f0:	4b25      	ldr	r3, [pc, #148]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	4922      	ldr	r1, [pc, #136]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0320 	and.w	r3, r3, #32
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d010      	beq.n	800d330 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69da      	ldr	r2, [r3, #28]
 800d312:	4b1d      	ldr	r3, [pc, #116]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d208      	bcs.n	800d330 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d31e:	4b1a      	ldr	r3, [pc, #104]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	4917      	ldr	r1, [pc, #92]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d32c:	4313      	orrs	r3, r2
 800d32e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d330:	f000 f834 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d334:	4602      	mov	r2, r0
 800d336:	4b14      	ldr	r3, [pc, #80]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	0a1b      	lsrs	r3, r3, #8
 800d33c:	f003 030f 	and.w	r3, r3, #15
 800d340:	4912      	ldr	r1, [pc, #72]	@ (800d38c <HAL_RCC_ClockConfig+0x35c>)
 800d342:	5ccb      	ldrb	r3, [r1, r3]
 800d344:	f003 031f 	and.w	r3, r3, #31
 800d348:	fa22 f303 	lsr.w	r3, r2, r3
 800d34c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d34e:	4b0e      	ldr	r3, [pc, #56]	@ (800d388 <HAL_RCC_ClockConfig+0x358>)
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	4a0d      	ldr	r2, [pc, #52]	@ (800d38c <HAL_RCC_ClockConfig+0x35c>)
 800d358:	5cd3      	ldrb	r3, [r2, r3]
 800d35a:	f003 031f 	and.w	r3, r3, #31
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	fa22 f303 	lsr.w	r3, r2, r3
 800d364:	4a0a      	ldr	r2, [pc, #40]	@ (800d390 <HAL_RCC_ClockConfig+0x360>)
 800d366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d368:	4a0a      	ldr	r2, [pc, #40]	@ (800d394 <HAL_RCC_ClockConfig+0x364>)
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d36e:	4b0a      	ldr	r3, [pc, #40]	@ (800d398 <HAL_RCC_ClockConfig+0x368>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4618      	mov	r0, r3
 800d374:	f7f7 fcce 	bl	8004d14 <HAL_InitTick>
 800d378:	4603      	mov	r3, r0
 800d37a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	58024400 	.word	0x58024400
 800d38c:	0801b210 	.word	0x0801b210
 800d390:	2400022c 	.word	0x2400022c
 800d394:	24000228 	.word	0x24000228
 800d398:	24000230 	.word	0x24000230

0800d39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b089      	sub	sp, #36	@ 0x24
 800d3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3a2:	4bb3      	ldr	r3, [pc, #716]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3aa:	2b18      	cmp	r3, #24
 800d3ac:	f200 8155 	bhi.w	800d65a <HAL_RCC_GetSysClockFreq+0x2be>
 800d3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d65b 	.word	0x0800d65b
 800d3c0:	0800d65b 	.word	0x0800d65b
 800d3c4:	0800d65b 	.word	0x0800d65b
 800d3c8:	0800d65b 	.word	0x0800d65b
 800d3cc:	0800d65b 	.word	0x0800d65b
 800d3d0:	0800d65b 	.word	0x0800d65b
 800d3d4:	0800d65b 	.word	0x0800d65b
 800d3d8:	0800d443 	.word	0x0800d443
 800d3dc:	0800d65b 	.word	0x0800d65b
 800d3e0:	0800d65b 	.word	0x0800d65b
 800d3e4:	0800d65b 	.word	0x0800d65b
 800d3e8:	0800d65b 	.word	0x0800d65b
 800d3ec:	0800d65b 	.word	0x0800d65b
 800d3f0:	0800d65b 	.word	0x0800d65b
 800d3f4:	0800d65b 	.word	0x0800d65b
 800d3f8:	0800d449 	.word	0x0800d449
 800d3fc:	0800d65b 	.word	0x0800d65b
 800d400:	0800d65b 	.word	0x0800d65b
 800d404:	0800d65b 	.word	0x0800d65b
 800d408:	0800d65b 	.word	0x0800d65b
 800d40c:	0800d65b 	.word	0x0800d65b
 800d410:	0800d65b 	.word	0x0800d65b
 800d414:	0800d65b 	.word	0x0800d65b
 800d418:	0800d44f 	.word	0x0800d44f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41c:	4b94      	ldr	r3, [pc, #592]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d428:	4b91      	ldr	r3, [pc, #580]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	4a90      	ldr	r2, [pc, #576]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d434:	fa22 f303 	lsr.w	r3, r2, r3
 800d438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d43a:	e111      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d43c:	4b8d      	ldr	r3, [pc, #564]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d43e:	61bb      	str	r3, [r7, #24]
      break;
 800d440:	e10e      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d442:	4b8d      	ldr	r3, [pc, #564]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d444:	61bb      	str	r3, [r7, #24]
      break;
 800d446:	e10b      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d448:	4b8c      	ldr	r3, [pc, #560]	@ (800d67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d44a:	61bb      	str	r3, [r7, #24]
      break;
 800d44c:	e108      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d44e:	4b88      	ldr	r3, [pc, #544]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d458:	4b85      	ldr	r3, [pc, #532]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	091b      	lsrs	r3, r3, #4
 800d45e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d462:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d464:	4b82      	ldr	r3, [pc, #520]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d46e:	4b80      	ldr	r3, [pc, #512]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d486:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 80e1 	beq.w	800d654 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b02      	cmp	r3, #2
 800d496:	f000 8083 	beq.w	800d5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	f200 80a1 	bhi.w	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d056      	beq.n	800d55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d4ae:	e099      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d02d      	beq.n	800d518 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4bc:	4b6c      	ldr	r3, [pc, #432]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	08db      	lsrs	r3, r3, #3
 800d4c2:	f003 0303 	and.w	r3, r3, #3
 800d4c6:	4a6b      	ldr	r2, [pc, #428]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	ee07 3a90 	vmov	s15, r3
 800d4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b62      	ldr	r3, [pc, #392]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d516:	e087      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	ee07 3a90 	vmov	s15, r3
 800d51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d522:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52a:	4b51      	ldr	r3, [pc, #324]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d532:	ee07 3a90 	vmov	s15, r3
 800d536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d53e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d55a:	e065      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56e:	4b40      	ldr	r3, [pc, #256]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d582:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d59e:	e043      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d5e2:	e021      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d606:	ed97 6a02 	vldr	s12, [r7, #8]
 800d60a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d626:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d628:	4b11      	ldr	r3, [pc, #68]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62c:	0a5b      	lsrs	r3, r3, #9
 800d62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d632:	3301      	adds	r3, #1
 800d634:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d640:	edd7 6a07 	vldr	s13, [r7, #28]
 800d644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d64c:	ee17 3a90 	vmov	r3, s15
 800d650:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d652:	e005      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d654:	2300      	movs	r3, #0
 800d656:	61bb      	str	r3, [r7, #24]
      break;
 800d658:	e002      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d65a:	4b07      	ldr	r3, [pc, #28]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d65c:	61bb      	str	r3, [r7, #24]
      break;
 800d65e:	bf00      	nop
  }

  return sysclockfreq;
 800d660:	69bb      	ldr	r3, [r7, #24]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3724      	adds	r7, #36	@ 0x24
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	58024400 	.word	0x58024400
 800d674:	03d09000 	.word	0x03d09000
 800d678:	003d0900 	.word	0x003d0900
 800d67c:	017d7840 	.word	0x017d7840
 800d680:	46000000 	.word	0x46000000
 800d684:	4c742400 	.word	0x4c742400
 800d688:	4a742400 	.word	0x4a742400
 800d68c:	4bbebc20 	.word	0x4bbebc20

0800d690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d696:	f7ff fe81 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d69a:	4602      	mov	r2, r0
 800d69c:	4b10      	ldr	r3, [pc, #64]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	0a1b      	lsrs	r3, r3, #8
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	490f      	ldr	r1, [pc, #60]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6a8:	5ccb      	ldrb	r3, [r1, r3]
 800d6aa:	f003 031f 	and.w	r3, r3, #31
 800d6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	f003 030f 	and.w	r3, r3, #15
 800d6bc:	4a09      	ldr	r2, [pc, #36]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6be:	5cd3      	ldrb	r3, [r2, r3]
 800d6c0:	f003 031f 	and.w	r3, r3, #31
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ca:	4a07      	ldr	r2, [pc, #28]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6ce:	4a07      	ldr	r2, [pc, #28]	@ (800d6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d6d4:	4b04      	ldr	r3, [pc, #16]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	58024400 	.word	0x58024400
 800d6e4:	0801b210 	.word	0x0801b210
 800d6e8:	2400022c 	.word	0x2400022c
 800d6ec:	24000228 	.word	0x24000228

0800d6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d6f4:	f7ff ffcc 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4b06      	ldr	r3, [pc, #24]	@ (800d714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	091b      	lsrs	r3, r3, #4
 800d700:	f003 0307 	and.w	r3, r3, #7
 800d704:	4904      	ldr	r1, [pc, #16]	@ (800d718 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d706:	5ccb      	ldrb	r3, [r1, r3]
 800d708:	f003 031f 	and.w	r3, r3, #31
 800d70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d710:	4618      	mov	r0, r3
 800d712:	bd80      	pop	{r7, pc}
 800d714:	58024400 	.word	0x58024400
 800d718:	0801b210 	.word	0x0801b210

0800d71c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d720:	b0ca      	sub	sp, #296	@ 0x128
 800d722:	af00      	add	r7, sp, #0
 800d724:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d728:	2300      	movs	r3, #0
 800d72a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d72e:	2300      	movs	r3, #0
 800d730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d740:	2500      	movs	r5, #0
 800d742:	ea54 0305 	orrs.w	r3, r4, r5
 800d746:	d049      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d74c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d74e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d752:	d02f      	beq.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d754:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d758:	d828      	bhi.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d75a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d75e:	d01a      	beq.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d760:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d764:	d822      	bhi.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d766:	2b00      	cmp	r3, #0
 800d768:	d003      	beq.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d76a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d76e:	d007      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d770:	e01c      	b.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d772:	4bb8      	ldr	r3, [pc, #736]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d776:	4ab7      	ldr	r2, [pc, #732]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d77c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d77e:	e01a      	b.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d784:	3308      	adds	r3, #8
 800d786:	2102      	movs	r1, #2
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 fb61 	bl	800fe50 <RCCEx_PLL2_Config>
 800d78e:	4603      	mov	r3, r0
 800d790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d794:	e00f      	b.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d79a:	3328      	adds	r3, #40	@ 0x28
 800d79c:	2102      	movs	r1, #2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f002 fc08 	bl	800ffb4 <RCCEx_PLL3_Config>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7aa:	e004      	b.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7b2:	e000      	b.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d7be:	4ba5      	ldr	r3, [pc, #660]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7cc:	4aa1      	ldr	r2, [pc, #644]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7ce:	430b      	orrs	r3, r1
 800d7d0:	6513      	str	r3, [r2, #80]	@ 0x50
 800d7d2:	e003      	b.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d7e8:	f04f 0900 	mov.w	r9, #0
 800d7ec:	ea58 0309 	orrs.w	r3, r8, r9
 800d7f0:	d047      	beq.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d82a      	bhi.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d804 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d802:	bf00      	nop
 800d804:	0800d819 	.word	0x0800d819
 800d808:	0800d827 	.word	0x0800d827
 800d80c:	0800d83d 	.word	0x0800d83d
 800d810:	0800d85b 	.word	0x0800d85b
 800d814:	0800d85b 	.word	0x0800d85b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d818:	4b8e      	ldr	r3, [pc, #568]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81c:	4a8d      	ldr	r2, [pc, #564]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d81e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d824:	e01a      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d82a:	3308      	adds	r3, #8
 800d82c:	2100      	movs	r1, #0
 800d82e:	4618      	mov	r0, r3
 800d830:	f002 fb0e 	bl	800fe50 <RCCEx_PLL2_Config>
 800d834:	4603      	mov	r3, r0
 800d836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d83a:	e00f      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d840:	3328      	adds	r3, #40	@ 0x28
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f002 fbb5 	bl	800ffb4 <RCCEx_PLL3_Config>
 800d84a:	4603      	mov	r3, r0
 800d84c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d850:	e004      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d858:	e000      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d85a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d85c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d864:	4b7b      	ldr	r3, [pc, #492]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d868:	f023 0107 	bic.w	r1, r3, #7
 800d86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d872:	4a78      	ldr	r2, [pc, #480]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d874:	430b      	orrs	r3, r1
 800d876:	6513      	str	r3, [r2, #80]	@ 0x50
 800d878:	e003      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d87a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d87e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d88e:	f04f 0b00 	mov.w	fp, #0
 800d892:	ea5a 030b 	orrs.w	r3, sl, fp
 800d896:	d04c      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d89c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d89e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8a2:	d030      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d8a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8a8:	d829      	bhi.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8ac:	d02d      	beq.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d8ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800d8b0:	d825      	bhi.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8b2:	2b80      	cmp	r3, #128	@ 0x80
 800d8b4:	d018      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d8b6:	2b80      	cmp	r3, #128	@ 0x80
 800d8b8:	d821      	bhi.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d8be:	2b40      	cmp	r3, #64	@ 0x40
 800d8c0:	d007      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d8c2:	e01c      	b.n	800d8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8c4:	4b63      	ldr	r3, [pc, #396]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c8:	4a62      	ldr	r2, [pc, #392]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8d0:	e01c      	b.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f002 fab8 	bl	800fe50 <RCCEx_PLL2_Config>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8e6:	e011      	b.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ec:	3328      	adds	r3, #40	@ 0x28
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f002 fb5f 	bl	800ffb4 <RCCEx_PLL3_Config>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8fc:	e006      	b.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8fe:	2301      	movs	r3, #1
 800d900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d904:	e002      	b.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d906:	bf00      	nop
 800d908:	e000      	b.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d90c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10a      	bne.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d914:	4b4f      	ldr	r3, [pc, #316]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d918:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d922:	4a4c      	ldr	r2, [pc, #304]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d924:	430b      	orrs	r3, r1
 800d926:	6513      	str	r3, [r2, #80]	@ 0x50
 800d928:	e003      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d92e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d93e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d942:	2300      	movs	r3, #0
 800d944:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d948:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d94c:	460b      	mov	r3, r1
 800d94e:	4313      	orrs	r3, r2
 800d950:	d053      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d95a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d95e:	d035      	beq.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d964:	d82e      	bhi.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d966:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d96a:	d031      	beq.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d96c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d970:	d828      	bhi.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d976:	d01a      	beq.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d97c:	d822      	bhi.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d986:	d007      	beq.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d988:	e01c      	b.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d98a:	4b32      	ldr	r3, [pc, #200]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d98e:	4a31      	ldr	r2, [pc, #196]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d996:	e01c      	b.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d99c:	3308      	adds	r3, #8
 800d99e:	2100      	movs	r1, #0
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f002 fa55 	bl	800fe50 <RCCEx_PLL2_Config>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d9ac:	e011      	b.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9b2:	3328      	adds	r3, #40	@ 0x28
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f002 fafc 	bl	800ffb4 <RCCEx_PLL3_Config>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9c2:	e006      	b.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9ca:	e002      	b.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d9cc:	bf00      	nop
 800d9ce:	e000      	b.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10b      	bne.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d9da:	4b1e      	ldr	r3, [pc, #120]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d9ea:	4a1a      	ldr	r2, [pc, #104]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9ec:	430b      	orrs	r3, r1
 800d9ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9f0:	e003      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800da06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800da0a:	2300      	movs	r3, #0
 800da0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800da10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800da14:	460b      	mov	r3, r1
 800da16:	4313      	orrs	r3, r2
 800da18:	d056      	beq.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800da1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800da22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da26:	d038      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800da28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da2c:	d831      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800da32:	d034      	beq.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800da34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800da38:	d82b      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da3e:	d01d      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800da40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da44:	d825      	bhi.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da46:	2b00      	cmp	r3, #0
 800da48:	d006      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800da4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da4e:	d00a      	beq.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800da50:	e01f      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da52:	bf00      	nop
 800da54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da58:	4ba2      	ldr	r3, [pc, #648]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5c:	4aa1      	ldr	r2, [pc, #644]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da64:	e01c      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6a:	3308      	adds	r3, #8
 800da6c:	2100      	movs	r1, #0
 800da6e:	4618      	mov	r0, r3
 800da70:	f002 f9ee 	bl	800fe50 <RCCEx_PLL2_Config>
 800da74:	4603      	mov	r3, r0
 800da76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800da7a:	e011      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da80:	3328      	adds	r3, #40	@ 0x28
 800da82:	2100      	movs	r1, #0
 800da84:	4618      	mov	r0, r3
 800da86:	f002 fa95 	bl	800ffb4 <RCCEx_PLL3_Config>
 800da8a:	4603      	mov	r3, r0
 800da8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da90:	e006      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da98:	e002      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800da9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800daa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10b      	bne.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800daa8:	4b8e      	ldr	r3, [pc, #568]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800daaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dab8:	4a8a      	ldr	r2, [pc, #552]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800daba:	430b      	orrs	r3, r1
 800dabc:	6593      	str	r3, [r2, #88]	@ 0x58
 800dabe:	e003      	b.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dad4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dad8:	2300      	movs	r3, #0
 800dada:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dade:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dae2:	460b      	mov	r3, r1
 800dae4:	4313      	orrs	r3, r2
 800dae6:	d03a      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daee:	2b30      	cmp	r3, #48	@ 0x30
 800daf0:	d01f      	beq.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800daf2:	2b30      	cmp	r3, #48	@ 0x30
 800daf4:	d819      	bhi.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d00c      	beq.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	d815      	bhi.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d019      	beq.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800db02:	2b10      	cmp	r3, #16
 800db04:	d111      	bne.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db06:	4b77      	ldr	r3, [pc, #476]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0a:	4a76      	ldr	r2, [pc, #472]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800db12:	e011      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db18:	3308      	adds	r3, #8
 800db1a:	2102      	movs	r1, #2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f002 f997 	bl	800fe50 <RCCEx_PLL2_Config>
 800db22:	4603      	mov	r3, r0
 800db24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800db28:	e006      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db30:	e002      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800db32:	bf00      	nop
 800db34:	e000      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800db36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10a      	bne.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800db40:	4b68      	ldr	r3, [pc, #416]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800db48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4e:	4a65      	ldr	r2, [pc, #404]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db50:	430b      	orrs	r3, r1
 800db52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db54:	e003      	b.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800db5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800db6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db6e:	2300      	movs	r3, #0
 800db70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800db74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800db78:	460b      	mov	r3, r1
 800db7a:	4313      	orrs	r3, r2
 800db7c:	d051      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800db7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db88:	d035      	beq.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800db8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db8e:	d82e      	bhi.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800db90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800db94:	d031      	beq.n	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800db96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800db9a:	d828      	bhi.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800db9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dba0:	d01a      	beq.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dba6:	d822      	bhi.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dbac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbb0:	d007      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dbb2:	e01c      	b.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbb4:	4b4b      	ldr	r3, [pc, #300]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb8:	4a4a      	ldr	r2, [pc, #296]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dbc0:	e01c      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f002 f940 	bl	800fe50 <RCCEx_PLL2_Config>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dbd6:	e011      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbdc:	3328      	adds	r3, #40	@ 0x28
 800dbde:	2100      	movs	r1, #0
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f002 f9e7 	bl	800ffb4 <RCCEx_PLL3_Config>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dbec:	e006      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbf4:	e002      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dbf6:	bf00      	nop
 800dbf8:	e000      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dbfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10a      	bne.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dc04:	4b37      	ldr	r3, [pc, #220]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc12:	4a34      	ldr	r2, [pc, #208]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc14:	430b      	orrs	r3, r1
 800dc16:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc18:	e003      	b.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dc2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dc32:	2300      	movs	r3, #0
 800dc34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	d056      	beq.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc4c:	d033      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dc4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc52:	d82c      	bhi.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc58:	d02f      	beq.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dc5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc5e:	d826      	bhi.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc64:	d02b      	beq.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800dc66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc6a:	d820      	bhi.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc70:	d012      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dc72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc76:	d81a      	bhi.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d022      	beq.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800dc7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc80:	d115      	bne.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc86:	3308      	adds	r3, #8
 800dc88:	2101      	movs	r1, #1
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f002 f8e0 	bl	800fe50 <RCCEx_PLL2_Config>
 800dc90:	4603      	mov	r3, r0
 800dc92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dc96:	e015      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc9c:	3328      	adds	r3, #40	@ 0x28
 800dc9e:	2101      	movs	r1, #1
 800dca0:	4618      	mov	r0, r3
 800dca2:	f002 f987 	bl	800ffb4 <RCCEx_PLL3_Config>
 800dca6:	4603      	mov	r3, r0
 800dca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dcac:	e00a      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dcb4:	e006      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcb6:	bf00      	nop
 800dcb8:	e004      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcba:	bf00      	nop
 800dcbc:	e002      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcbe:	bf00      	nop
 800dcc0:	e000      	b.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dcc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10d      	bne.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dccc:	4b05      	ldr	r3, [pc, #20]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcda:	4a02      	ldr	r2, [pc, #8]	@ (800dce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcdc:	430b      	orrs	r3, r1
 800dcde:	6513      	str	r3, [r2, #80]	@ 0x50
 800dce0:	e006      	b.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dce2:	bf00      	nop
 800dce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dcfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dd00:	2300      	movs	r3, #0
 800dd02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dd06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	d055      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd1c:	d033      	beq.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dd1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd22:	d82c      	bhi.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd28:	d02f      	beq.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd2e:	d826      	bhi.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd34:	d02b      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dd36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd3a:	d820      	bhi.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd40:	d012      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800dd42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd46:	d81a      	bhi.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d022      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800dd4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd50:	d115      	bne.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd56:	3308      	adds	r3, #8
 800dd58:	2101      	movs	r1, #1
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f002 f878 	bl	800fe50 <RCCEx_PLL2_Config>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd66:	e015      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd6c:	3328      	adds	r3, #40	@ 0x28
 800dd6e:	2101      	movs	r1, #1
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 f91f 	bl	800ffb4 <RCCEx_PLL3_Config>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd7c:	e00a      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd84:	e006      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd86:	bf00      	nop
 800dd88:	e004      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd8a:	bf00      	nop
 800dd8c:	e002      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd8e:	bf00      	nop
 800dd90:	e000      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10b      	bne.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dd9c:	4ba3      	ldr	r3, [pc, #652]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dda0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dda8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ddac:	4a9f      	ldr	r2, [pc, #636]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddae:	430b      	orrs	r3, r1
 800ddb0:	6593      	str	r3, [r2, #88]	@ 0x58
 800ddb2:	e003      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ddbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ddc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	d037      	beq.n	800de4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dde2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dde6:	d00e      	beq.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800dde8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddec:	d816      	bhi.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d018      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ddf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddf6:	d111      	bne.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddf8:	4b8c      	ldr	r3, [pc, #560]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfc:	4a8b      	ldr	r2, [pc, #556]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800de04:	e00f      	b.n	800de26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de0a:	3308      	adds	r3, #8
 800de0c:	2101      	movs	r1, #1
 800de0e:	4618      	mov	r0, r3
 800de10:	f002 f81e 	bl	800fe50 <RCCEx_PLL2_Config>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800de1a:	e004      	b.n	800de26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de1c:	2301      	movs	r3, #1
 800de1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de22:	e000      	b.n	800de26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800de24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10a      	bne.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800de2e:	4b7f      	ldr	r3, [pc, #508]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800de36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de3c:	4a7b      	ldr	r2, [pc, #492]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de3e:	430b      	orrs	r3, r1
 800de40:	6513      	str	r3, [r2, #80]	@ 0x50
 800de42:	e003      	b.n	800de4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800de4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800de58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de5c:	2300      	movs	r3, #0
 800de5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800de66:	460b      	mov	r3, r1
 800de68:	4313      	orrs	r3, r2
 800de6a:	d039      	beq.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800de6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de72:	2b03      	cmp	r3, #3
 800de74:	d81c      	bhi.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800de76:	a201      	add	r2, pc, #4	@ (adr r2, 800de7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800deb9 	.word	0x0800deb9
 800de80:	0800de8d 	.word	0x0800de8d
 800de84:	0800de9b 	.word	0x0800de9b
 800de88:	0800deb9 	.word	0x0800deb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de8c:	4b67      	ldr	r3, [pc, #412]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de90:	4a66      	ldr	r2, [pc, #408]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800de98:	e00f      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de9e:	3308      	adds	r3, #8
 800dea0:	2102      	movs	r1, #2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f001 ffd4 	bl	800fe50 <RCCEx_PLL2_Config>
 800dea8:	4603      	mov	r3, r0
 800deaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800deae:	e004      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800deb6:	e000      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800deb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10a      	bne.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dec2:	4b5a      	ldr	r3, [pc, #360]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dec6:	f023 0103 	bic.w	r1, r3, #3
 800deca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ded0:	4a56      	ldr	r2, [pc, #344]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ded2:	430b      	orrs	r3, r1
 800ded4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ded6:	e003      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dedc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800deec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800def0:	2300      	movs	r3, #0
 800def2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800def6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800defa:	460b      	mov	r3, r1
 800defc:	4313      	orrs	r3, r2
 800defe:	f000 809f 	beq.w	800e040 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800df02:	4b4b      	ldr	r3, [pc, #300]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a4a      	ldr	r2, [pc, #296]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800df0e:	f7f6 ff4b 	bl	8004da8 <HAL_GetTick>
 800df12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df16:	e00b      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df18:	f7f6 ff46 	bl	8004da8 <HAL_GetTick>
 800df1c:	4602      	mov	r2, r0
 800df1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	2b64      	cmp	r3, #100	@ 0x64
 800df26:	d903      	bls.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800df28:	2303      	movs	r3, #3
 800df2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df2e:	e005      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df30:	4b3f      	ldr	r3, [pc, #252]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0ed      	beq.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800df3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df40:	2b00      	cmp	r3, #0
 800df42:	d179      	bne.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800df44:	4b39      	ldr	r3, [pc, #228]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800df48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800df50:	4053      	eors	r3, r2
 800df52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df56:	2b00      	cmp	r3, #0
 800df58:	d015      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df5a:	4b34      	ldr	r3, [pc, #208]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df66:	4b31      	ldr	r3, [pc, #196]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df6a:	4a30      	ldr	r2, [pc, #192]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df72:	4b2e      	ldr	r3, [pc, #184]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df76:	4a2d      	ldr	r2, [pc, #180]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800df7e:	4a2b      	ldr	r2, [pc, #172]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800df8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df92:	d118      	bne.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df94:	f7f6 ff08 	bl	8004da8 <HAL_GetTick>
 800df98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df9c:	e00d      	b.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df9e:	f7f6 ff03 	bl	8004da8 <HAL_GetTick>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dfa8:	1ad2      	subs	r2, r2, r3
 800dfaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d903      	bls.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800dfb8:	e005      	b.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfba:	4b1c      	ldr	r3, [pc, #112]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0eb      	beq.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800dfc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d129      	bne.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dfd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dfda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dfde:	d10e      	bne.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800dfe0:	4b12      	ldr	r3, [pc, #72]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800dfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dff0:	091a      	lsrs	r2, r3, #4
 800dff2:	4b10      	ldr	r3, [pc, #64]	@ (800e034 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800dff4:	4013      	ands	r3, r2
 800dff6:	4a0d      	ldr	r2, [pc, #52]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dff8:	430b      	orrs	r3, r1
 800dffa:	6113      	str	r3, [r2, #16]
 800dffc:	e005      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800dffe:	4b0b      	ldr	r3, [pc, #44]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	4a0a      	ldr	r2, [pc, #40]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e004:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e008:	6113      	str	r3, [r2, #16]
 800e00a:	4b08      	ldr	r3, [pc, #32]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e00c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e01a:	4a04      	ldr	r2, [pc, #16]	@ (800e02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e01c:	430b      	orrs	r3, r1
 800e01e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e020:	e00e      	b.n	800e040 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e02a:	e009      	b.n	800e040 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e02c:	58024400 	.word	0x58024400
 800e030:	58024800 	.word	0x58024800
 800e034:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e03c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f002 0301 	and.w	r3, r2, #1
 800e04c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e050:	2300      	movs	r3, #0
 800e052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e056:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4313      	orrs	r3, r2
 800e05e:	f000 8089 	beq.w	800e174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e068:	2b28      	cmp	r3, #40	@ 0x28
 800e06a:	d86b      	bhi.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e06c:	a201      	add	r2, pc, #4	@ (adr r2, 800e074 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e072:	bf00      	nop
 800e074:	0800e14d 	.word	0x0800e14d
 800e078:	0800e145 	.word	0x0800e145
 800e07c:	0800e145 	.word	0x0800e145
 800e080:	0800e145 	.word	0x0800e145
 800e084:	0800e145 	.word	0x0800e145
 800e088:	0800e145 	.word	0x0800e145
 800e08c:	0800e145 	.word	0x0800e145
 800e090:	0800e145 	.word	0x0800e145
 800e094:	0800e119 	.word	0x0800e119
 800e098:	0800e145 	.word	0x0800e145
 800e09c:	0800e145 	.word	0x0800e145
 800e0a0:	0800e145 	.word	0x0800e145
 800e0a4:	0800e145 	.word	0x0800e145
 800e0a8:	0800e145 	.word	0x0800e145
 800e0ac:	0800e145 	.word	0x0800e145
 800e0b0:	0800e145 	.word	0x0800e145
 800e0b4:	0800e12f 	.word	0x0800e12f
 800e0b8:	0800e145 	.word	0x0800e145
 800e0bc:	0800e145 	.word	0x0800e145
 800e0c0:	0800e145 	.word	0x0800e145
 800e0c4:	0800e145 	.word	0x0800e145
 800e0c8:	0800e145 	.word	0x0800e145
 800e0cc:	0800e145 	.word	0x0800e145
 800e0d0:	0800e145 	.word	0x0800e145
 800e0d4:	0800e14d 	.word	0x0800e14d
 800e0d8:	0800e145 	.word	0x0800e145
 800e0dc:	0800e145 	.word	0x0800e145
 800e0e0:	0800e145 	.word	0x0800e145
 800e0e4:	0800e145 	.word	0x0800e145
 800e0e8:	0800e145 	.word	0x0800e145
 800e0ec:	0800e145 	.word	0x0800e145
 800e0f0:	0800e145 	.word	0x0800e145
 800e0f4:	0800e14d 	.word	0x0800e14d
 800e0f8:	0800e145 	.word	0x0800e145
 800e0fc:	0800e145 	.word	0x0800e145
 800e100:	0800e145 	.word	0x0800e145
 800e104:	0800e145 	.word	0x0800e145
 800e108:	0800e145 	.word	0x0800e145
 800e10c:	0800e145 	.word	0x0800e145
 800e110:	0800e145 	.word	0x0800e145
 800e114:	0800e14d 	.word	0x0800e14d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e11c:	3308      	adds	r3, #8
 800e11e:	2101      	movs	r1, #1
 800e120:	4618      	mov	r0, r3
 800e122:	f001 fe95 	bl	800fe50 <RCCEx_PLL2_Config>
 800e126:	4603      	mov	r3, r0
 800e128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e12c:	e00f      	b.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e132:	3328      	adds	r3, #40	@ 0x28
 800e134:	2101      	movs	r1, #1
 800e136:	4618      	mov	r0, r3
 800e138:	f001 ff3c 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e13c:	4603      	mov	r3, r0
 800e13e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e142:	e004      	b.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e14a:	e000      	b.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e14e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10a      	bne.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e156:	4bbf      	ldr	r3, [pc, #764]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e15a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e164:	4abb      	ldr	r2, [pc, #748]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e166:	430b      	orrs	r3, r1
 800e168:	6553      	str	r3, [r2, #84]	@ 0x54
 800e16a:	e003      	b.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e16c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	f002 0302 	and.w	r3, r2, #2
 800e180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e184:	2300      	movs	r3, #0
 800e186:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e18a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e18e:	460b      	mov	r3, r1
 800e190:	4313      	orrs	r3, r2
 800e192:	d041      	beq.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e19a:	2b05      	cmp	r3, #5
 800e19c:	d824      	bhi.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e19e:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a4:	0800e1f1 	.word	0x0800e1f1
 800e1a8:	0800e1bd 	.word	0x0800e1bd
 800e1ac:	0800e1d3 	.word	0x0800e1d3
 800e1b0:	0800e1f1 	.word	0x0800e1f1
 800e1b4:	0800e1f1 	.word	0x0800e1f1
 800e1b8:	0800e1f1 	.word	0x0800e1f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	2101      	movs	r1, #1
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f001 fe43 	bl	800fe50 <RCCEx_PLL2_Config>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e1d0:	e00f      	b.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1d6:	3328      	adds	r3, #40	@ 0x28
 800e1d8:	2101      	movs	r1, #1
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f001 feea 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e1e6:	e004      	b.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1ee:	e000      	b.n	800e1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d10a      	bne.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e1fa:	4b96      	ldr	r3, [pc, #600]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1fe:	f023 0107 	bic.w	r1, r3, #7
 800e202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e208:	4a92      	ldr	r2, [pc, #584]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e20a:	430b      	orrs	r3, r1
 800e20c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e20e:	e003      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f002 0304 	and.w	r3, r2, #4
 800e224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e228:	2300      	movs	r3, #0
 800e22a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e22e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e232:	460b      	mov	r3, r1
 800e234:	4313      	orrs	r3, r2
 800e236:	d044      	beq.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e240:	2b05      	cmp	r3, #5
 800e242:	d825      	bhi.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e299 	.word	0x0800e299
 800e250:	0800e265 	.word	0x0800e265
 800e254:	0800e27b 	.word	0x0800e27b
 800e258:	0800e299 	.word	0x0800e299
 800e25c:	0800e299 	.word	0x0800e299
 800e260:	0800e299 	.word	0x0800e299
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e268:	3308      	adds	r3, #8
 800e26a:	2101      	movs	r1, #1
 800e26c:	4618      	mov	r0, r3
 800e26e:	f001 fdef 	bl	800fe50 <RCCEx_PLL2_Config>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e278:	e00f      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e27e:	3328      	adds	r3, #40	@ 0x28
 800e280:	2101      	movs	r1, #1
 800e282:	4618      	mov	r0, r3
 800e284:	f001 fe96 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e288:	4603      	mov	r3, r0
 800e28a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e28e:	e004      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e296:	e000      	b.n	800e29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e29a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10b      	bne.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2a2:	4b6c      	ldr	r3, [pc, #432]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2a6:	f023 0107 	bic.w	r1, r3, #7
 800e2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e2b2:	4a68      	ldr	r2, [pc, #416]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800e2b8:	e003      	b.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ca:	f002 0320 	and.w	r3, r2, #32
 800e2ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	d055      	beq.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e2ee:	d033      	beq.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e2f4:	d82c      	bhi.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2fa:	d02f      	beq.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e300:	d826      	bhi.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e306:	d02b      	beq.n	800e360 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e30c:	d820      	bhi.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e30e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e312:	d012      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e318:	d81a      	bhi.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d022      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e322:	d115      	bne.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e328:	3308      	adds	r3, #8
 800e32a:	2100      	movs	r1, #0
 800e32c:	4618      	mov	r0, r3
 800e32e:	f001 fd8f 	bl	800fe50 <RCCEx_PLL2_Config>
 800e332:	4603      	mov	r3, r0
 800e334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e338:	e015      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e33e:	3328      	adds	r3, #40	@ 0x28
 800e340:	2102      	movs	r1, #2
 800e342:	4618      	mov	r0, r3
 800e344:	f001 fe36 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e348:	4603      	mov	r3, r0
 800e34a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e34e:	e00a      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e356:	e006      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e358:	bf00      	nop
 800e35a:	e004      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e35c:	bf00      	nop
 800e35e:	e002      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e360:	bf00      	nop
 800e362:	e000      	b.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10b      	bne.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e36e:	4b39      	ldr	r3, [pc, #228]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e372:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e37e:	4a35      	ldr	r2, [pc, #212]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e380:	430b      	orrs	r3, r1
 800e382:	6553      	str	r3, [r2, #84]	@ 0x54
 800e384:	e003      	b.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e38a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e39a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e3a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	d058      	beq.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e3b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e3ba:	d033      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e3bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e3c0:	d82c      	bhi.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3c6:	d02f      	beq.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e3c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3cc:	d826      	bhi.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3d2:	d02b      	beq.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e3d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3d8:	d820      	bhi.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3de:	d012      	beq.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e3e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3e4:	d81a      	bhi.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d022      	beq.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e3ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3ee:	d115      	bne.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f4:	3308      	adds	r3, #8
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f001 fd29 	bl	800fe50 <RCCEx_PLL2_Config>
 800e3fe:	4603      	mov	r3, r0
 800e400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e404:	e015      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e40a:	3328      	adds	r3, #40	@ 0x28
 800e40c:	2102      	movs	r1, #2
 800e40e:	4618      	mov	r0, r3
 800e410:	f001 fdd0 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e414:	4603      	mov	r3, r0
 800e416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e41a:	e00a      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e41c:	2301      	movs	r3, #1
 800e41e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e422:	e006      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e424:	bf00      	nop
 800e426:	e004      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e428:	bf00      	nop
 800e42a:	e002      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e42c:	bf00      	nop
 800e42e:	e000      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10e      	bne.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e43a:	4b06      	ldr	r3, [pc, #24]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e43e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e44a:	4a02      	ldr	r2, [pc, #8]	@ (800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e44c:	430b      	orrs	r3, r1
 800e44e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e450:	e006      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e452:	bf00      	nop
 800e454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e45c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e46c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e470:	2300      	movs	r3, #0
 800e472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e476:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e47a:	460b      	mov	r3, r1
 800e47c:	4313      	orrs	r3, r2
 800e47e:	d055      	beq.n	800e52c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e488:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e48c:	d033      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e48e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e492:	d82c      	bhi.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e498:	d02f      	beq.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e49a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e49e:	d826      	bhi.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e4a4:	d02b      	beq.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e4a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e4aa:	d820      	bhi.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4b0:	d012      	beq.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e4b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4b6:	d81a      	bhi.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d022      	beq.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e4bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4c0:	d115      	bne.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f001 fcc0 	bl	800fe50 <RCCEx_PLL2_Config>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e4d6:	e015      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4dc:	3328      	adds	r3, #40	@ 0x28
 800e4de:	2102      	movs	r1, #2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 fd67 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e4ec:	e00a      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4f4:	e006      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4f6:	bf00      	nop
 800e4f8:	e004      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4fa:	bf00      	nop
 800e4fc:	e002      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e502:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10b      	bne.n	800e524 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e50c:	4ba1      	ldr	r3, [pc, #644]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e50e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e510:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e51c:	4a9d      	ldr	r2, [pc, #628]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e51e:	430b      	orrs	r3, r1
 800e520:	6593      	str	r3, [r2, #88]	@ 0x58
 800e522:	e003      	b.n	800e52c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	f002 0308 	and.w	r3, r2, #8
 800e538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e53c:	2300      	movs	r3, #0
 800e53e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e542:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e546:	460b      	mov	r3, r1
 800e548:	4313      	orrs	r3, r2
 800e54a:	d01e      	beq.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e558:	d10c      	bne.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e55e:	3328      	adds	r3, #40	@ 0x28
 800e560:	2102      	movs	r1, #2
 800e562:	4618      	mov	r0, r3
 800e564:	f001 fd26 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e574:	4b87      	ldr	r3, [pc, #540]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e578:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e584:	4a83      	ldr	r2, [pc, #524]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e586:	430b      	orrs	r3, r1
 800e588:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f002 0310 	and.w	r3, r2, #16
 800e596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e59a:	2300      	movs	r3, #0
 800e59c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e5a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	d01e      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5b6:	d10c      	bne.n	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5bc:	3328      	adds	r3, #40	@ 0x28
 800e5be:	2102      	movs	r1, #2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f001 fcf7 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e5d2:	4b70      	ldr	r3, [pc, #448]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5e2:	4a6c      	ldr	r2, [pc, #432]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5e4:	430b      	orrs	r3, r1
 800e5e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e5f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e5fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e602:	460b      	mov	r3, r1
 800e604:	4313      	orrs	r3, r2
 800e606:	d03e      	beq.n	800e686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e60c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e614:	d022      	beq.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e61a:	d81b      	bhi.n	800e654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d003      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e624:	d00b      	beq.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e626:	e015      	b.n	800e654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e62c:	3308      	adds	r3, #8
 800e62e:	2100      	movs	r1, #0
 800e630:	4618      	mov	r0, r3
 800e632:	f001 fc0d 	bl	800fe50 <RCCEx_PLL2_Config>
 800e636:	4603      	mov	r3, r0
 800e638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e63c:	e00f      	b.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e642:	3328      	adds	r3, #40	@ 0x28
 800e644:	2102      	movs	r1, #2
 800e646:	4618      	mov	r0, r3
 800e648:	f001 fcb4 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e652:	e004      	b.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e65a:	e000      	b.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e65c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e65e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10b      	bne.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e666:	4b4b      	ldr	r3, [pc, #300]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e66a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e676:	4a47      	ldr	r2, [pc, #284]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e678:	430b      	orrs	r3, r1
 800e67a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e67c:	e003      	b.n	800e686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e67e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e692:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e694:	2300      	movs	r3, #0
 800e696:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e698:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e69c:	460b      	mov	r3, r1
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	d03b      	beq.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e6ae:	d01f      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e6b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e6b4:	d818      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e6b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6ba:	d003      	beq.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e6bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6c0:	d007      	beq.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e6c2:	e011      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6c4:	4b33      	ldr	r3, [pc, #204]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c8:	4a32      	ldr	r2, [pc, #200]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e6d0:	e00f      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d6:	3328      	adds	r3, #40	@ 0x28
 800e6d8:	2101      	movs	r1, #1
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f001 fc6a 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e6e6:	e004      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e6ee:	e000      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10b      	bne.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e6fa:	4b26      	ldr	r3, [pc, #152]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e70a:	4a22      	ldr	r2, [pc, #136]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e70c:	430b      	orrs	r3, r1
 800e70e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e710:	e003      	b.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e726:	673b      	str	r3, [r7, #112]	@ 0x70
 800e728:	2300      	movs	r3, #0
 800e72a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e72c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e730:	460b      	mov	r3, r1
 800e732:	4313      	orrs	r3, r2
 800e734:	d034      	beq.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d003      	beq.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e744:	d007      	beq.n	800e756 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e746:	e011      	b.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e748:	4b12      	ldr	r3, [pc, #72]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e74c:	4a11      	ldr	r2, [pc, #68]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e74e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e754:	e00e      	b.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e75a:	3308      	adds	r3, #8
 800e75c:	2102      	movs	r1, #2
 800e75e:	4618      	mov	r0, r3
 800e760:	f001 fb76 	bl	800fe50 <RCCEx_PLL2_Config>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e76a:	e003      	b.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e772:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10d      	bne.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e77c:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e77e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e780:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e78a:	4a02      	ldr	r2, [pc, #8]	@ (800e794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e78c:	430b      	orrs	r3, r1
 800e78e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e790:	e006      	b.n	800e7a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e792:	bf00      	nop
 800e794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e79c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e7ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e7b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	d00c      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7c0:	3328      	adds	r3, #40	@ 0x28
 800e7c2:	2102      	movs	r1, #2
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 fbf5 	bl	800ffb4 <RCCEx_PLL3_Config>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e7e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	d038      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7fe:	d018      	beq.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e804:	d811      	bhi.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e80a:	d014      	beq.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e810:	d80b      	bhi.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d011      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e81a:	d106      	bne.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e81c:	4bc3      	ldr	r3, [pc, #780]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e820:	4ac2      	ldr	r2, [pc, #776]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e828:	e008      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e830:	e004      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e832:	bf00      	nop
 800e834:	e002      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e836:	bf00      	nop
 800e838:	e000      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e83a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e83c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10b      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e844:	4bb9      	ldr	r3, [pc, #740]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e848:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e854:	4ab5      	ldr	r2, [pc, #724]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e856:	430b      	orrs	r3, r1
 800e858:	6553      	str	r3, [r2, #84]	@ 0x54
 800e85a:	e003      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e85c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e870:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e872:	2300      	movs	r3, #0
 800e874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e876:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e87a:	460b      	mov	r3, r1
 800e87c:	4313      	orrs	r3, r2
 800e87e:	d009      	beq.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e880:	4baa      	ldr	r3, [pc, #680]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e884:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e88e:	4aa7      	ldr	r2, [pc, #668]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e890:	430b      	orrs	r3, r1
 800e892:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e8a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e8a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	d00a      	beq.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e8b0:	4b9e      	ldr	r3, [pc, #632]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e8c0:	4a9a      	ldr	r2, [pc, #616]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8c2:	430b      	orrs	r3, r1
 800e8c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e8d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	d009      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e8e2:	4b92      	ldr	r3, [pc, #584]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8f0:	4a8e      	ldr	r2, [pc, #568]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8f2:	430b      	orrs	r3, r1
 800e8f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e902:	643b      	str	r3, [r7, #64]	@ 0x40
 800e904:	2300      	movs	r3, #0
 800e906:	647b      	str	r3, [r7, #68]	@ 0x44
 800e908:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e90c:	460b      	mov	r3, r1
 800e90e:	4313      	orrs	r3, r2
 800e910:	d00e      	beq.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e912:	4b86      	ldr	r3, [pc, #536]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	4a85      	ldr	r2, [pc, #532]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e918:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e91c:	6113      	str	r3, [r2, #16]
 800e91e:	4b83      	ldr	r3, [pc, #524]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e920:	6919      	ldr	r1, [r3, #16]
 800e922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e92a:	4a80      	ldr	r2, [pc, #512]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e92c:	430b      	orrs	r3, r1
 800e92e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e93c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e93e:	2300      	movs	r3, #0
 800e940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e942:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e946:	460b      	mov	r3, r1
 800e948:	4313      	orrs	r3, r2
 800e94a:	d009      	beq.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e94c:	4b77      	ldr	r3, [pc, #476]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e94e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e950:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e95a:	4a74      	ldr	r2, [pc, #464]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e95c:	430b      	orrs	r3, r1
 800e95e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e96c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e96e:	2300      	movs	r3, #0
 800e970:	637b      	str	r3, [r7, #52]	@ 0x34
 800e972:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e976:	460b      	mov	r3, r1
 800e978:	4313      	orrs	r3, r2
 800e97a:	d00a      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e97c:	4b6b      	ldr	r3, [pc, #428]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e97e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e980:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e98c:	4a67      	ldr	r2, [pc, #412]	@ (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e98e:	430b      	orrs	r3, r1
 800e990:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	2100      	movs	r1, #0
 800e99c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	d011      	beq.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f001 fa4a 	bl	800fe50 <RCCEx_PLL2_Config>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	2100      	movs	r1, #0
 800e9dc:	6239      	str	r1, [r7, #32]
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	d011      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f001 fa2a 	bl	800fe50 <RCCEx_PLL2_Config>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ea02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ea12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	61b9      	str	r1, [r7, #24]
 800ea1e:	f003 0304 	and.w	r3, r3, #4
 800ea22:	61fb      	str	r3, [r7, #28]
 800ea24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	d011      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ea2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea32:	3308      	adds	r3, #8
 800ea34:	2102      	movs	r1, #2
 800ea36:	4618      	mov	r0, r3
 800ea38:	f001 fa0a 	bl	800fe50 <RCCEx_PLL2_Config>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ea42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d003      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ea52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6139      	str	r1, [r7, #16]
 800ea5e:	f003 0308 	and.w	r3, r3, #8
 800ea62:	617b      	str	r3, [r7, #20]
 800ea64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	d011      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea72:	3328      	adds	r3, #40	@ 0x28
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f001 fa9c 	bl	800ffb4 <RCCEx_PLL3_Config>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ea82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ea92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	f003 0310 	and.w	r3, r3, #16
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	d011      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eab2:	3328      	adds	r3, #40	@ 0x28
 800eab4:	2101      	movs	r1, #1
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 fa7c 	bl	800ffb4 <RCCEx_PLL3_Config>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ead2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eada:	2100      	movs	r1, #0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	f003 0320 	and.w	r3, r3, #32
 800eae2:	607b      	str	r3, [r7, #4]
 800eae4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eae8:	460b      	mov	r3, r1
 800eaea:	4313      	orrs	r3, r2
 800eaec:	d011      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaf2:	3328      	adds	r3, #40	@ 0x28
 800eaf4:	2102      	movs	r1, #2
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f001 fa5c 	bl	800ffb4 <RCCEx_PLL3_Config>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800eb12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e000      	b.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800eb26:	46bd      	mov	sp, r7
 800eb28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb2c:	58024400 	.word	0x58024400

0800eb30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b090      	sub	sp, #64	@ 0x40
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eb3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb3e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800eb42:	430b      	orrs	r3, r1
 800eb44:	f040 8094 	bne.w	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800eb48:	4b9e      	ldr	r3, [pc, #632]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb4c:	f003 0307 	and.w	r3, r3, #7
 800eb50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	f200 8087 	bhi.w	800ec68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800eb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800eb75 	.word	0x0800eb75
 800eb64:	0800eb9d 	.word	0x0800eb9d
 800eb68:	0800ebc5 	.word	0x0800ebc5
 800eb6c:	0800ec61 	.word	0x0800ec61
 800eb70:	0800ebed 	.word	0x0800ebed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eb74:	4b93      	ldr	r3, [pc, #588]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb80:	d108      	bne.n	800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f001 f810 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb90:	f000 bd45 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb98:	f000 bd41 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb9c:	4b89      	ldr	r3, [pc, #548]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eba8:	d108      	bne.n	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebaa:	f107 0318 	add.w	r3, r7, #24
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fd54 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebb8:	f000 bd31 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebc0:	f000 bd2d 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ebc4:	4b7f      	ldr	r3, [pc, #508]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebd0:	d108      	bne.n	800ebe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebd2:	f107 030c 	add.w	r3, r7, #12
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 fe94 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebe0:	f000 bd1d 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebe8:	f000 bd19 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ebec:	4b75      	ldr	r3, [pc, #468]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ebf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ebf6:	4b73      	ldr	r3, [pc, #460]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f003 0304 	and.w	r3, r3, #4
 800ebfe:	2b04      	cmp	r3, #4
 800ec00:	d10c      	bne.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ec02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d109      	bne.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec08:	4b6e      	ldr	r3, [pc, #440]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	08db      	lsrs	r3, r3, #3
 800ec0e:	f003 0303 	and.w	r3, r3, #3
 800ec12:	4a6d      	ldr	r2, [pc, #436]	@ (800edc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ec14:	fa22 f303 	lsr.w	r3, r2, r3
 800ec18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec1a:	e01f      	b.n	800ec5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec1c:	4b69      	ldr	r3, [pc, #420]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec28:	d106      	bne.n	800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ec2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec30:	d102      	bne.n	800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ec32:	4b66      	ldr	r3, [pc, #408]	@ (800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ec34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec36:	e011      	b.n	800ec5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec38:	4b62      	ldr	r3, [pc, #392]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec44:	d106      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ec46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec4c:	d102      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ec4e:	4b60      	ldr	r3, [pc, #384]	@ (800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ec50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec52:	e003      	b.n	800ec5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ec54:	2300      	movs	r3, #0
 800ec56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ec58:	f000 bce1 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec5c:	f000 bcdf 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec60:	4b5c      	ldr	r3, [pc, #368]	@ (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ec62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec64:	f000 bcdb 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec6c:	f000 bcd7 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ec70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec74:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	f040 80ad 	bne.w	800edd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ec7e:	4b51      	ldr	r3, [pc, #324]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ec86:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ec88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec8e:	d056      	beq.n	800ed3e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ec90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec96:	f200 8090 	bhi.w	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9c:	2bc0      	cmp	r3, #192	@ 0xc0
 800ec9e:	f000 8088 	beq.w	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800eca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca4:	2bc0      	cmp	r3, #192	@ 0xc0
 800eca6:	f200 8088 	bhi.w	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	2b80      	cmp	r3, #128	@ 0x80
 800ecae:	d032      	beq.n	800ed16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb2:	2b80      	cmp	r3, #128	@ 0x80
 800ecb4:	f200 8081 	bhi.w	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc0:	2b40      	cmp	r3, #64	@ 0x40
 800ecc2:	d014      	beq.n	800ecee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ecc4:	e079      	b.n	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecc6:	4b3f      	ldr	r3, [pc, #252]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ecd2:	d108      	bne.n	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 ff67 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ece2:	f000 bc9c 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecea:	f000 bc98 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecee:	4b35      	ldr	r3, [pc, #212]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ecfa:	d108      	bne.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecfc:	f107 0318 	add.w	r3, r7, #24
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 fcab 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed0a:	f000 bc88 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed12:	f000 bc84 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed16:	4b2b      	ldr	r3, [pc, #172]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed22:	d108      	bne.n	800ed36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed24:	f107 030c 	add.w	r3, r7, #12
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 fdeb 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed32:	f000 bc74 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed3a:	f000 bc70 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed3e:	4b21      	ldr	r3, [pc, #132]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed48:	4b1e      	ldr	r3, [pc, #120]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f003 0304 	and.w	r3, r3, #4
 800ed50:	2b04      	cmp	r3, #4
 800ed52:	d10c      	bne.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ed54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d109      	bne.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed5a:	4b1a      	ldr	r3, [pc, #104]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	08db      	lsrs	r3, r3, #3
 800ed60:	f003 0303 	and.w	r3, r3, #3
 800ed64:	4a18      	ldr	r2, [pc, #96]	@ (800edc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed66:	fa22 f303 	lsr.w	r3, r2, r3
 800ed6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed6c:	e01f      	b.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed6e:	4b15      	ldr	r3, [pc, #84]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed7a:	d106      	bne.n	800ed8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ed7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed82:	d102      	bne.n	800ed8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed84:	4b11      	ldr	r3, [pc, #68]	@ (800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ed86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed88:	e011      	b.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed8a:	4b0e      	ldr	r3, [pc, #56]	@ (800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed96:	d106      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ed98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed9e:	d102      	bne.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eda0:	4b0b      	ldr	r3, [pc, #44]	@ (800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800eda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda4:	e003      	b.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800edaa:	f000 bc38 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800edae:	f000 bc36 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800edb2:	4b08      	ldr	r3, [pc, #32]	@ (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800edb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edb6:	f000 bc32 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edbe:	f000 bc2e 	b.w	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800edc2:	bf00      	nop
 800edc4:	58024400 	.word	0x58024400
 800edc8:	03d09000 	.word	0x03d09000
 800edcc:	003d0900 	.word	0x003d0900
 800edd0:	017d7840 	.word	0x017d7840
 800edd4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800edd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eddc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ede0:	430b      	orrs	r3, r1
 800ede2:	f040 809c 	bne.w	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ede6:	4b9e      	ldr	r3, [pc, #632]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ede8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800edee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800edf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edf6:	d054      	beq.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800edf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edfe:	f200 808b 	bhi.w	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee08:	f000 8083 	beq.w	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee12:	f200 8081 	bhi.w	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee1c:	d02f      	beq.n	800ee7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee24:	d878      	bhi.n	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ee26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d004      	beq.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee32:	d012      	beq.n	800ee5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ee34:	e070      	b.n	800ef18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee36:	4b8a      	ldr	r3, [pc, #552]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee42:	d107      	bne.n	800ee54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 feaf 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee52:	e3e4      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee58:	e3e1      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee5a:	4b81      	ldr	r3, [pc, #516]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee66:	d107      	bne.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee68:	f107 0318 	add.w	r3, r7, #24
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 fbf5 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee76:	e3d2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee7c:	e3cf      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee7e:	4b78      	ldr	r3, [pc, #480]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee8a:	d107      	bne.n	800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee8c:	f107 030c 	add.w	r3, r7, #12
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 fd37 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee9a:	e3c0      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eea0:	e3bd      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eea2:	4b6f      	ldr	r3, [pc, #444]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eea6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eeaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eeac:	4b6c      	ldr	r3, [pc, #432]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f003 0304 	and.w	r3, r3, #4
 800eeb4:	2b04      	cmp	r3, #4
 800eeb6:	d10c      	bne.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800eeb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d109      	bne.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eebe:	4b68      	ldr	r3, [pc, #416]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	08db      	lsrs	r3, r3, #3
 800eec4:	f003 0303 	and.w	r3, r3, #3
 800eec8:	4a66      	ldr	r2, [pc, #408]	@ (800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800eeca:	fa22 f303 	lsr.w	r3, r2, r3
 800eece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eed0:	e01e      	b.n	800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eed2:	4b63      	ldr	r3, [pc, #396]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eeda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eede:	d106      	bne.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800eee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eee6:	d102      	bne.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eee8:	4b5f      	ldr	r3, [pc, #380]	@ (800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eeec:	e010      	b.n	800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eeee:	4b5c      	ldr	r3, [pc, #368]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eefa:	d106      	bne.n	800ef0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800eefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef02:	d102      	bne.n	800ef0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef04:	4b59      	ldr	r3, [pc, #356]	@ (800f06c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ef06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef08:	e002      	b.n	800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ef0e:	e386      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef10:	e385      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef12:	4b57      	ldr	r3, [pc, #348]	@ (800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ef14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef16:	e382      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef1c:	e37f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ef1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef22:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ef26:	430b      	orrs	r3, r1
 800ef28:	f040 80a7 	bne.w	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ef2c:	4b4c      	ldr	r3, [pc, #304]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef30:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ef34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef3c:	d055      	beq.n	800efea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef44:	f200 8096 	bhi.w	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ef4e:	f000 8084 	beq.w	800f05a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ef52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ef58:	f200 808c 	bhi.w	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef62:	d030      	beq.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ef64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef6a:	f200 8083 	bhi.w	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d004      	beq.n	800ef7e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ef74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ef7a:	d012      	beq.n	800efa2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ef7c:	e07a      	b.n	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef7e:	4b38      	ldr	r3, [pc, #224]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef8a:	d107      	bne.n	800ef9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fe0b 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef9a:	e340      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efa0:	e33d      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efa2:	4b2f      	ldr	r3, [pc, #188]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efae:	d107      	bne.n	800efc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efb0:	f107 0318 	add.w	r3, r7, #24
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 fb51 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efbe:	e32e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efc0:	2300      	movs	r3, #0
 800efc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc4:	e32b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efc6:	4b26      	ldr	r3, [pc, #152]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efd2:	d107      	bne.n	800efe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efd4:	f107 030c 	add.w	r3, r7, #12
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 fc93 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efe2:	e31c      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efe8:	e319      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efea:	4b1d      	ldr	r3, [pc, #116]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eff2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eff4:	4b1a      	ldr	r3, [pc, #104]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f003 0304 	and.w	r3, r3, #4
 800effc:	2b04      	cmp	r3, #4
 800effe:	d10c      	bne.n	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	2b00      	cmp	r3, #0
 800f004:	d109      	bne.n	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f006:	4b16      	ldr	r3, [pc, #88]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	08db      	lsrs	r3, r3, #3
 800f00c:	f003 0303 	and.w	r3, r3, #3
 800f010:	4a14      	ldr	r2, [pc, #80]	@ (800f064 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f012:	fa22 f303 	lsr.w	r3, r2, r3
 800f016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f018:	e01e      	b.n	800f058 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f01a:	4b11      	ldr	r3, [pc, #68]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f026:	d106      	bne.n	800f036 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f02e:	d102      	bne.n	800f036 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f030:	4b0d      	ldr	r3, [pc, #52]	@ (800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f034:	e010      	b.n	800f058 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f036:	4b0a      	ldr	r3, [pc, #40]	@ (800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f03e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f042:	d106      	bne.n	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f04a:	d102      	bne.n	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f04c:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f050:	e002      	b.n	800f058 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f056:	e2e2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f058:	e2e1      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f05a:	4b05      	ldr	r3, [pc, #20]	@ (800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f05e:	e2de      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f060:	58024400 	.word	0x58024400
 800f064:	03d09000 	.word	0x03d09000
 800f068:	003d0900 	.word	0x003d0900
 800f06c:	017d7840 	.word	0x017d7840
 800f070:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f078:	e2d1      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f07e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f082:	430b      	orrs	r3, r1
 800f084:	f040 809c 	bne.w	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f088:	4b93      	ldr	r3, [pc, #588]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f08c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f090:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f098:	d054      	beq.n	800f144 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0a0:	f200 808b 	bhi.w	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0aa:	f000 8083 	beq.w	800f1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0b4:	f200 8081 	bhi.w	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0be:	d02f      	beq.n	800f120 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0c6:	d878      	bhi.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d004      	beq.n	800f0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0d4:	d012      	beq.n	800f0fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f0d6:	e070      	b.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0d8:	4b7f      	ldr	r3, [pc, #508]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0e4:	d107      	bne.n	800f0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fd5e 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0f4:	e293      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0fa:	e290      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0fc:	4b76      	ldr	r3, [pc, #472]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f108:	d107      	bne.n	800f11a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f10a:	f107 0318 	add.w	r3, r7, #24
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 faa4 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f118:	e281      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f11e:	e27e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f120:	4b6d      	ldr	r3, [pc, #436]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f12c:	d107      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f12e:	f107 030c 	add.w	r3, r7, #12
 800f132:	4618      	mov	r0, r3
 800f134:	f000 fbe6 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f13c:	e26f      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f13e:	2300      	movs	r3, #0
 800f140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f142:	e26c      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f144:	4b64      	ldr	r3, [pc, #400]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f14c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f14e:	4b62      	ldr	r3, [pc, #392]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 0304 	and.w	r3, r3, #4
 800f156:	2b04      	cmp	r3, #4
 800f158:	d10c      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d109      	bne.n	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f160:	4b5d      	ldr	r3, [pc, #372]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	08db      	lsrs	r3, r3, #3
 800f166:	f003 0303 	and.w	r3, r3, #3
 800f16a:	4a5c      	ldr	r2, [pc, #368]	@ (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f16c:	fa22 f303 	lsr.w	r3, r2, r3
 800f170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f172:	e01e      	b.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f174:	4b58      	ldr	r3, [pc, #352]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f180:	d106      	bne.n	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f188:	d102      	bne.n	800f190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f18a:	4b55      	ldr	r3, [pc, #340]	@ (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f18e:	e010      	b.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f190:	4b51      	ldr	r3, [pc, #324]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f19c:	d106      	bne.n	800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1a4:	d102      	bne.n	800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1a6:	4b4f      	ldr	r3, [pc, #316]	@ (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1aa:	e002      	b.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1b0:	e235      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1b2:	e234      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1b4:	4b4c      	ldr	r3, [pc, #304]	@ (800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1b8:	e231      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1be:	e22e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1c4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f1c8:	430b      	orrs	r3, r1
 800f1ca:	f040 808f 	bne.w	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f1ce:	4b42      	ldr	r3, [pc, #264]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1d2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f1de:	d06b      	beq.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f1e6:	d874      	bhi.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f1ee:	d056      	beq.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f1f6:	d86c      	bhi.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f1fe:	d03b      	beq.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f202:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f206:	d864      	bhi.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f20e:	d021      	beq.n	800f254 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f216:	d85c      	bhi.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d004      	beq.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f224:	d004      	beq.n	800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f226:	e054      	b.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f228:	f7fe fa62 	bl	800d6f0 <HAL_RCC_GetPCLK1Freq>
 800f22c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f22e:	e1f6      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f230:	4b29      	ldr	r3, [pc, #164]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f23c:	d107      	bne.n	800f24e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f23e:	f107 0318 	add.w	r3, r7, #24
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fa0a 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f24c:	e1e7      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f252:	e1e4      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f254:	4b20      	ldr	r3, [pc, #128]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f260:	d107      	bne.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f262:	f107 030c 	add.w	r3, r7, #12
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fb4c 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f270:	e1d5      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f276:	e1d2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f278:	4b17      	ldr	r3, [pc, #92]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f003 0304 	and.w	r3, r3, #4
 800f280:	2b04      	cmp	r3, #4
 800f282:	d109      	bne.n	800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f284:	4b14      	ldr	r3, [pc, #80]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	08db      	lsrs	r3, r3, #3
 800f28a:	f003 0303 	and.w	r3, r3, #3
 800f28e:	4a13      	ldr	r2, [pc, #76]	@ (800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f290:	fa22 f303 	lsr.w	r3, r2, r3
 800f294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f296:	e1c2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f29c:	e1bf      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f29e:	4b0e      	ldr	r3, [pc, #56]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2aa:	d102      	bne.n	800f2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2b0:	e1b5      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2b6:	e1b2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f2b8:	4b07      	ldr	r3, [pc, #28]	@ (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2c4:	d102      	bne.n	800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f2c6:	4b07      	ldr	r3, [pc, #28]	@ (800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2ca:	e1a8      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d0:	e1a5      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d6:	e1a2      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2d8:	58024400 	.word	0x58024400
 800f2dc:	03d09000 	.word	0x03d09000
 800f2e0:	003d0900 	.word	0x003d0900
 800f2e4:	017d7840 	.word	0x017d7840
 800f2e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f2f4:	430b      	orrs	r3, r1
 800f2f6:	d173      	bne.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f2f8:	4b9c      	ldr	r3, [pc, #624]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f300:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f308:	d02f      	beq.n	800f36a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f310:	d863      	bhi.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f314:	2b00      	cmp	r3, #0
 800f316:	d004      	beq.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f31e:	d012      	beq.n	800f346 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f320:	e05b      	b.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f322:	4b92      	ldr	r3, [pc, #584]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f32a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f32e:	d107      	bne.n	800f340 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f330:	f107 0318 	add.w	r3, r7, #24
 800f334:	4618      	mov	r0, r3
 800f336:	f000 f991 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f33e:	e16e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f344:	e16b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f346:	4b89      	ldr	r3, [pc, #548]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f34e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f352:	d107      	bne.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f354:	f107 030c 	add.w	r3, r7, #12
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 fad3 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f362:	e15c      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f368:	e159      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f36a:	4b80      	ldr	r3, [pc, #512]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f36e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f372:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f374:	4b7d      	ldr	r3, [pc, #500]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 0304 	and.w	r3, r3, #4
 800f37c:	2b04      	cmp	r3, #4
 800f37e:	d10c      	bne.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f382:	2b00      	cmp	r3, #0
 800f384:	d109      	bne.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f386:	4b79      	ldr	r3, [pc, #484]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	08db      	lsrs	r3, r3, #3
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	4a77      	ldr	r2, [pc, #476]	@ (800f570 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f392:	fa22 f303 	lsr.w	r3, r2, r3
 800f396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f398:	e01e      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f39a:	4b74      	ldr	r3, [pc, #464]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3a6:	d106      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3ae:	d102      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f3b0:	4b70      	ldr	r3, [pc, #448]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3b4:	e010      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3b6:	4b6d      	ldr	r3, [pc, #436]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f3be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3c2:	d106      	bne.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3ca:	d102      	bne.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f3cc:	4b6a      	ldr	r3, [pc, #424]	@ (800f578 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3d0:	e002      	b.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f3d6:	e122      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f3d8:	e121      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3de:	e11e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f3e8:	430b      	orrs	r3, r1
 800f3ea:	d133      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f3ec:	4b5f      	ldr	r3, [pc, #380]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d004      	beq.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f402:	d012      	beq.n	800f42a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f404:	e023      	b.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f406:	4b59      	ldr	r3, [pc, #356]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f40e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f412:	d107      	bne.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f418:	4618      	mov	r0, r3
 800f41a:	f000 fbc7 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f422:	e0fc      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f424:	2300      	movs	r3, #0
 800f426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f428:	e0f9      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f42a:	4b50      	ldr	r3, [pc, #320]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f436:	d107      	bne.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f438:	f107 0318 	add.w	r3, r7, #24
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 f90d 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f442:	6a3b      	ldr	r3, [r7, #32]
 800f444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f446:	e0ea      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f44c:	e0e7      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f452:	e0e4      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f458:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f45c:	430b      	orrs	r3, r1
 800f45e:	f040 808d 	bne.w	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f462:	4b42      	ldr	r3, [pc, #264]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f466:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f46a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f472:	d06b      	beq.n	800f54c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f47a:	d874      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f482:	d056      	beq.n	800f532 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f48a:	d86c      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f492:	d03b      	beq.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f49a:	d864      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f49e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4a2:	d021      	beq.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4aa:	d85c      	bhi.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4b8:	d004      	beq.n	800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f4ba:	e054      	b.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f4bc:	f000 f8b8 	bl	800f630 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4c2:	e0ac      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4c4:	4b29      	ldr	r3, [pc, #164]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4d0:	d107      	bne.n	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4d2:	f107 0318 	add.w	r3, r7, #24
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 f8c0 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4e0:	e09d      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4e6:	e09a      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4e8:	4b20      	ldr	r3, [pc, #128]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4f4:	d107      	bne.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4f6:	f107 030c 	add.w	r3, r7, #12
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fa02 	bl	800f904 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f504:	e08b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f50a:	e088      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f50c:	4b17      	ldr	r3, [pc, #92]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f003 0304 	and.w	r3, r3, #4
 800f514:	2b04      	cmp	r3, #4
 800f516:	d109      	bne.n	800f52c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f518:	4b14      	ldr	r3, [pc, #80]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	08db      	lsrs	r3, r3, #3
 800f51e:	f003 0303 	and.w	r3, r3, #3
 800f522:	4a13      	ldr	r2, [pc, #76]	@ (800f570 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f524:	fa22 f303 	lsr.w	r3, r2, r3
 800f528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f52a:	e078      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f530:	e075      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f532:	4b0e      	ldr	r3, [pc, #56]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f53e:	d102      	bne.n	800f546 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f540:	4b0c      	ldr	r3, [pc, #48]	@ (800f574 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f544:	e06b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f54a:	e068      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f54c:	4b07      	ldr	r3, [pc, #28]	@ (800f56c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f558:	d102      	bne.n	800f560 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f55a:	4b07      	ldr	r3, [pc, #28]	@ (800f578 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f55e:	e05e      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f564:	e05b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f56a:	e058      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f56c:	58024400 	.word	0x58024400
 800f570:	03d09000 	.word	0x03d09000
 800f574:	003d0900 	.word	0x003d0900
 800f578:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f580:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f584:	430b      	orrs	r3, r1
 800f586:	d148      	bne.n	800f61a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f588:	4b27      	ldr	r3, [pc, #156]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f58c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f590:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f598:	d02a      	beq.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5a0:	d838      	bhi.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5ae:	d00d      	beq.n	800f5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f5b0:	e030      	b.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5be:	d102      	bne.n	800f5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f62c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5c4:	e02b      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ca:	e028      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5cc:	4b16      	ldr	r3, [pc, #88]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5d8:	d107      	bne.n	800f5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fae4 	bl	800fbac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5e8:	e019      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ee:	e016      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5f0:	4b0d      	ldr	r3, [pc, #52]	@ (800f628 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5fc:	d107      	bne.n	800f60e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5fe:	f107 0318 	add.w	r3, r7, #24
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f82a 	bl	800f65c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f60c:	e007      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f612:	e004      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f618:	e001      	b.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f620:	4618      	mov	r0, r3
 800f622:	3740      	adds	r7, #64	@ 0x40
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	58024400 	.word	0x58024400
 800f62c:	017d7840 	.word	0x017d7840

0800f630 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f634:	f7fe f82c 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800f638:	4602      	mov	r2, r0
 800f63a:	4b06      	ldr	r3, [pc, #24]	@ (800f654 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	091b      	lsrs	r3, r3, #4
 800f640:	f003 0307 	and.w	r3, r3, #7
 800f644:	4904      	ldr	r1, [pc, #16]	@ (800f658 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f646:	5ccb      	ldrb	r3, [r1, r3]
 800f648:	f003 031f 	and.w	r3, r3, #31
 800f64c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f650:	4618      	mov	r0, r3
 800f652:	bd80      	pop	{r7, pc}
 800f654:	58024400 	.word	0x58024400
 800f658:	0801b210 	.word	0x0801b210

0800f65c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b089      	sub	sp, #36	@ 0x24
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f664:	4ba1      	ldr	r3, [pc, #644]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f668:	f003 0303 	and.w	r3, r3, #3
 800f66c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f66e:	4b9f      	ldr	r3, [pc, #636]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f672:	0b1b      	lsrs	r3, r3, #12
 800f674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f678:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f67a:	4b9c      	ldr	r3, [pc, #624]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67e:	091b      	lsrs	r3, r3, #4
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f686:	4b99      	ldr	r3, [pc, #612]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f68a:	08db      	lsrs	r3, r3, #3
 800f68c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	fb02 f303 	mul.w	r3, r2, r3
 800f696:	ee07 3a90 	vmov	s15, r3
 800f69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f69e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 8111 	beq.w	800f8cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	f000 8083 	beq.w	800f7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	f200 80a1 	bhi.w	800f7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d003      	beq.n	800f6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d056      	beq.n	800f774 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f6c6:	e099      	b.n	800f7fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6c8:	4b88      	ldr	r3, [pc, #544]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f003 0320 	and.w	r3, r3, #32
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d02d      	beq.n	800f730 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6d4:	4b85      	ldr	r3, [pc, #532]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	08db      	lsrs	r3, r3, #3
 800f6da:	f003 0303 	and.w	r3, r3, #3
 800f6de:	4a84      	ldr	r2, [pc, #528]	@ (800f8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f6e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	ee07 3a90 	vmov	s15, r3
 800f6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	ee07 3a90 	vmov	s15, r3
 800f6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6fe:	4b7b      	ldr	r3, [pc, #492]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f706:	ee07 3a90 	vmov	s15, r3
 800f70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f712:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f71e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f72a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f72e:	e087      	b.n	800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	ee07 3a90 	vmov	s15, r3
 800f736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f73a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f742:	4b6a      	ldr	r3, [pc, #424]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f74a:	ee07 3a90 	vmov	s15, r3
 800f74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f752:	ed97 6a03 	vldr	s12, [r7, #12]
 800f756:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f76e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f772:	e065      	b.n	800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	ee07 3a90 	vmov	s15, r3
 800f77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f77e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f786:	4b59      	ldr	r3, [pc, #356]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f78e:	ee07 3a90 	vmov	s15, r3
 800f792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f796:	ed97 6a03 	vldr	s12, [r7, #12]
 800f79a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7b6:	e043      	b.n	800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7ca:	4b48      	ldr	r3, [pc, #288]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7d2:	ee07 3a90 	vmov	s15, r3
 800f7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7fa:	e021      	b.n	800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	ee07 3a90 	vmov	s15, r3
 800f802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f806:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f8fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f80e:	4b37      	ldr	r3, [pc, #220]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f816:	ee07 3a90 	vmov	s15, r3
 800f81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f822:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f82e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f83a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f83e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f840:	4b2a      	ldr	r3, [pc, #168]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f844:	0a5b      	lsrs	r3, r3, #9
 800f846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f84a:	ee07 3a90 	vmov	s15, r3
 800f84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f85a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f85e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f866:	ee17 2a90 	vmov	r2, s15
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f86e:	4b1f      	ldr	r3, [pc, #124]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f872:	0c1b      	lsrs	r3, r3, #16
 800f874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f878:	ee07 3a90 	vmov	s15, r3
 800f87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f884:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f888:	edd7 6a07 	vldr	s13, [r7, #28]
 800f88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f894:	ee17 2a90 	vmov	r2, s15
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f89c:	4b13      	ldr	r3, [pc, #76]	@ (800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a0:	0e1b      	lsrs	r3, r3, #24
 800f8a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8a6:	ee07 3a90 	vmov	s15, r3
 800f8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8c2:	ee17 2a90 	vmov	r2, s15
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f8ca:	e008      	b.n	800f8de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	609a      	str	r2, [r3, #8]
}
 800f8de:	bf00      	nop
 800f8e0:	3724      	adds	r7, #36	@ 0x24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	58024400 	.word	0x58024400
 800f8f0:	03d09000 	.word	0x03d09000
 800f8f4:	46000000 	.word	0x46000000
 800f8f8:	4c742400 	.word	0x4c742400
 800f8fc:	4a742400 	.word	0x4a742400
 800f900:	4bbebc20 	.word	0x4bbebc20

0800f904 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f904:	b480      	push	{r7}
 800f906:	b089      	sub	sp, #36	@ 0x24
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f90c:	4ba1      	ldr	r3, [pc, #644]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f910:	f003 0303 	and.w	r3, r3, #3
 800f914:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f916:	4b9f      	ldr	r3, [pc, #636]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f91a:	0d1b      	lsrs	r3, r3, #20
 800f91c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f920:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f922:	4b9c      	ldr	r3, [pc, #624]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f926:	0a1b      	lsrs	r3, r3, #8
 800f928:	f003 0301 	and.w	r3, r3, #1
 800f92c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f92e:	4b99      	ldr	r3, [pc, #612]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f932:	08db      	lsrs	r3, r3, #3
 800f934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	fb02 f303 	mul.w	r3, r2, r3
 800f93e:	ee07 3a90 	vmov	s15, r3
 800f942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 8111 	beq.w	800fb74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	2b02      	cmp	r3, #2
 800f956:	f000 8083 	beq.w	800fa60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	f200 80a1 	bhi.w	800faa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d056      	beq.n	800fa1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f96e:	e099      	b.n	800faa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f970:	4b88      	ldr	r3, [pc, #544]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f003 0320 	and.w	r3, r3, #32
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d02d      	beq.n	800f9d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f97c:	4b85      	ldr	r3, [pc, #532]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	08db      	lsrs	r3, r3, #3
 800f982:	f003 0303 	and.w	r3, r3, #3
 800f986:	4a84      	ldr	r2, [pc, #528]	@ (800fb98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f988:	fa22 f303 	lsr.w	r3, r2, r3
 800f98c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	ee07 3a90 	vmov	s15, r3
 800f994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9a6:	4b7b      	ldr	r3, [pc, #492]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ae:	ee07 3a90 	vmov	s15, r3
 800f9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f9d6:	e087      	b.n	800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	ee07 3a90 	vmov	s15, r3
 800f9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fba0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9ea:	4b6a      	ldr	r3, [pc, #424]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f2:	ee07 3a90 	vmov	s15, r3
 800f9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa1a:	e065      	b.n	800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	ee07 3a90 	vmov	s15, r3
 800fa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa2e:	4b59      	ldr	r3, [pc, #356]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa36:	ee07 3a90 	vmov	s15, r3
 800fa3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa5e:	e043      	b.n	800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	ee07 3a90 	vmov	s15, r3
 800fa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fa6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa72:	4b48      	ldr	r3, [pc, #288]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa7a:	ee07 3a90 	vmov	s15, r3
 800fa7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa82:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faa2:	e021      	b.n	800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	ee07 3a90 	vmov	s15, r3
 800faaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fab6:	4b37      	ldr	r3, [pc, #220]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fabe:	ee07 3a90 	vmov	s15, r3
 800fac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800faca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fb9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800face:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fae6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fae8:	4b2a      	ldr	r3, [pc, #168]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faec:	0a5b      	lsrs	r3, r3, #9
 800faee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faf2:	ee07 3a90 	vmov	s15, r3
 800faf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fafe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb02:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb0e:	ee17 2a90 	vmov	r2, s15
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fb16:	4b1f      	ldr	r3, [pc, #124]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb1a:	0c1b      	lsrs	r3, r3, #16
 800fb1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb20:	ee07 3a90 	vmov	s15, r3
 800fb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb30:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb3c:	ee17 2a90 	vmov	r2, s15
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fb44:	4b13      	ldr	r3, [pc, #76]	@ (800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb48:	0e1b      	lsrs	r3, r3, #24
 800fb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb4e:	ee07 3a90 	vmov	s15, r3
 800fb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb6a:	ee17 2a90 	vmov	r2, s15
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fb72:	e008      	b.n	800fb86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	609a      	str	r2, [r3, #8]
}
 800fb86:	bf00      	nop
 800fb88:	3724      	adds	r7, #36	@ 0x24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	58024400 	.word	0x58024400
 800fb98:	03d09000 	.word	0x03d09000
 800fb9c:	46000000 	.word	0x46000000
 800fba0:	4c742400 	.word	0x4c742400
 800fba4:	4a742400 	.word	0x4a742400
 800fba8:	4bbebc20 	.word	0x4bbebc20

0800fbac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b089      	sub	sp, #36	@ 0x24
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fbb4:	4ba0      	ldr	r3, [pc, #640]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbb8:	f003 0303 	and.w	r3, r3, #3
 800fbbc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fbbe:	4b9e      	ldr	r3, [pc, #632]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc2:	091b      	lsrs	r3, r3, #4
 800fbc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbc8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fbca:	4b9b      	ldr	r3, [pc, #620]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fbd4:	4b98      	ldr	r3, [pc, #608]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbd8:	08db      	lsrs	r3, r3, #3
 800fbda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbde:	693a      	ldr	r2, [r7, #16]
 800fbe0:	fb02 f303 	mul.w	r3, r2, r3
 800fbe4:	ee07 3a90 	vmov	s15, r3
 800fbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 8111 	beq.w	800fe1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	f000 8083 	beq.w	800fd06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	f200 80a1 	bhi.w	800fd4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d056      	beq.n	800fcc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fc14:	e099      	b.n	800fd4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc16:	4b88      	ldr	r3, [pc, #544]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f003 0320 	and.w	r3, r3, #32
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d02d      	beq.n	800fc7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc22:	4b85      	ldr	r3, [pc, #532]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	08db      	lsrs	r3, r3, #3
 800fc28:	f003 0303 	and.w	r3, r3, #3
 800fc2c:	4a83      	ldr	r2, [pc, #524]	@ (800fe3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc2e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	ee07 3a90 	vmov	s15, r3
 800fc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc4c:	4b7a      	ldr	r3, [pc, #488]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fc7c:	e087      	b.n	800fd8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	ee07 3a90 	vmov	s15, r3
 800fc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fe44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc90:	4b69      	ldr	r3, [pc, #420]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc98:	ee07 3a90 	vmov	s15, r3
 800fc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fca0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fca4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fcc0:	e065      	b.n	800fd8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	ee07 3a90 	vmov	s15, r3
 800fcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fccc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fe48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fcd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcd4:	4b58      	ldr	r3, [pc, #352]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcdc:	ee07 3a90 	vmov	s15, r3
 800fce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fce4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fce8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd04:	e043      	b.n	800fd8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	ee07 3a90 	vmov	s15, r3
 800fd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fe4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd18:	4b47      	ldr	r3, [pc, #284]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd20:	ee07 3a90 	vmov	s15, r3
 800fd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd2c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd48:	e021      	b.n	800fd8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	ee07 3a90 	vmov	s15, r3
 800fd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd54:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fe44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fd58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd5c:	4b36      	ldr	r3, [pc, #216]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd64:	ee07 3a90 	vmov	s15, r3
 800fd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fe40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fd8e:	4b2a      	ldr	r3, [pc, #168]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd92:	0a5b      	lsrs	r3, r3, #9
 800fd94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd98:	ee07 3a90 	vmov	s15, r3
 800fd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fda4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fda8:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdb4:	ee17 2a90 	vmov	r2, s15
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fdbc:	4b1e      	ldr	r3, [pc, #120]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc0:	0c1b      	lsrs	r3, r3, #16
 800fdc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdc6:	ee07 3a90 	vmov	s15, r3
 800fdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fde2:	ee17 2a90 	vmov	r2, s15
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fdea:	4b13      	ldr	r3, [pc, #76]	@ (800fe38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdee:	0e1b      	lsrs	r3, r3, #24
 800fdf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdf4:	ee07 3a90 	vmov	s15, r3
 800fdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe04:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe10:	ee17 2a90 	vmov	r2, s15
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fe18:	e008      	b.n	800fe2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	609a      	str	r2, [r3, #8]
}
 800fe2c:	bf00      	nop
 800fe2e:	3724      	adds	r7, #36	@ 0x24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	58024400 	.word	0x58024400
 800fe3c:	03d09000 	.word	0x03d09000
 800fe40:	46000000 	.word	0x46000000
 800fe44:	4c742400 	.word	0x4c742400
 800fe48:	4a742400 	.word	0x4a742400
 800fe4c:	4bbebc20 	.word	0x4bbebc20

0800fe50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fe5e:	4b53      	ldr	r3, [pc, #332]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fe60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe62:	f003 0303 	and.w	r3, r3, #3
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	d101      	bne.n	800fe6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e099      	b.n	800ffa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fe6e:	4b4f      	ldr	r3, [pc, #316]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a4e      	ldr	r2, [pc, #312]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fe74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fe78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe7a:	f7f4 ff95 	bl	8004da8 <HAL_GetTick>
 800fe7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe80:	e008      	b.n	800fe94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe82:	f7f4 ff91 	bl	8004da8 <HAL_GetTick>
 800fe86:	4602      	mov	r2, r0
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d901      	bls.n	800fe94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fe90:	2303      	movs	r3, #3
 800fe92:	e086      	b.n	800ffa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe94:	4b45      	ldr	r3, [pc, #276]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1f0      	bne.n	800fe82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fea0:	4b42      	ldr	r3, [pc, #264]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fea4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	031b      	lsls	r3, r3, #12
 800feae:	493f      	ldr	r1, [pc, #252]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800feb0:	4313      	orrs	r3, r2
 800feb2:	628b      	str	r3, [r1, #40]	@ 0x28
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	3b01      	subs	r3, #1
 800feba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	3b01      	subs	r3, #1
 800fec4:	025b      	lsls	r3, r3, #9
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	431a      	orrs	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	3b01      	subs	r3, #1
 800fed0:	041b      	lsls	r3, r3, #16
 800fed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fed6:	431a      	orrs	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	3b01      	subs	r3, #1
 800fede:	061b      	lsls	r3, r3, #24
 800fee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fee4:	4931      	ldr	r1, [pc, #196]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fee6:	4313      	orrs	r3, r2
 800fee8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800feea:	4b30      	ldr	r3, [pc, #192]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800feec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	492d      	ldr	r1, [pc, #180]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fef8:	4313      	orrs	r3, r2
 800fefa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fefc:	4b2b      	ldr	r3, [pc, #172]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800fefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff00:	f023 0220 	bic.w	r2, r3, #32
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	4928      	ldr	r1, [pc, #160]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ff0e:	4b27      	ldr	r3, [pc, #156]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff12:	4a26      	ldr	r2, [pc, #152]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff14:	f023 0310 	bic.w	r3, r3, #16
 800ff18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff1a:	4b24      	ldr	r3, [pc, #144]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff1e:	4b24      	ldr	r3, [pc, #144]	@ (800ffb0 <RCCEx_PLL2_Config+0x160>)
 800ff20:	4013      	ands	r3, r2
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	69d2      	ldr	r2, [r2, #28]
 800ff26:	00d2      	lsls	r2, r2, #3
 800ff28:	4920      	ldr	r1, [pc, #128]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ff2e:	4b1f      	ldr	r3, [pc, #124]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff32:	4a1e      	ldr	r2, [pc, #120]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff34:	f043 0310 	orr.w	r3, r3, #16
 800ff38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ff40:	4b1a      	ldr	r3, [pc, #104]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff44:	4a19      	ldr	r2, [pc, #100]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff4c:	e00f      	b.n	800ff6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d106      	bne.n	800ff62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ff54:	4b15      	ldr	r3, [pc, #84]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff58:	4a14      	ldr	r2, [pc, #80]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff60:	e005      	b.n	800ff6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ff62:	4b12      	ldr	r3, [pc, #72]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff66:	4a11      	ldr	r2, [pc, #68]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ff6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ff6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a0e      	ldr	r2, [pc, #56]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ff78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff7a:	f7f4 ff15 	bl	8004da8 <HAL_GetTick>
 800ff7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff80:	e008      	b.n	800ff94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff82:	f7f4 ff11 	bl	8004da8 <HAL_GetTick>
 800ff86:	4602      	mov	r2, r0
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d901      	bls.n	800ff94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ff90:	2303      	movs	r3, #3
 800ff92:	e006      	b.n	800ffa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff94:	4b05      	ldr	r3, [pc, #20]	@ (800ffac <RCCEx_PLL2_Config+0x15c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d0f0      	beq.n	800ff82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	58024400 	.word	0x58024400
 800ffb0:	ffff0007 	.word	0xffff0007

0800ffb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ffc2:	4b53      	ldr	r3, [pc, #332]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 800ffc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc6:	f003 0303 	and.w	r3, r3, #3
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d101      	bne.n	800ffd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e099      	b.n	8010106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ffd2:	4b4f      	ldr	r3, [pc, #316]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a4e      	ldr	r2, [pc, #312]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 800ffd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ffdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffde:	f7f4 fee3 	bl	8004da8 <HAL_GetTick>
 800ffe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffe4:	e008      	b.n	800fff8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffe6:	f7f4 fedf 	bl	8004da8 <HAL_GetTick>
 800ffea:	4602      	mov	r2, r0
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d901      	bls.n	800fff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fff4:	2303      	movs	r3, #3
 800fff6:	e086      	b.n	8010106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fff8:	4b45      	ldr	r3, [pc, #276]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1f0      	bne.n	800ffe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010004:	4b42      	ldr	r3, [pc, #264]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010008:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	051b      	lsls	r3, r3, #20
 8010012:	493f      	ldr	r1, [pc, #252]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010014:	4313      	orrs	r3, r2
 8010016:	628b      	str	r3, [r1, #40]	@ 0x28
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	3b01      	subs	r3, #1
 801001e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	689b      	ldr	r3, [r3, #8]
 8010026:	3b01      	subs	r3, #1
 8010028:	025b      	lsls	r3, r3, #9
 801002a:	b29b      	uxth	r3, r3
 801002c:	431a      	orrs	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	3b01      	subs	r3, #1
 8010034:	041b      	lsls	r3, r3, #16
 8010036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801003a:	431a      	orrs	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	691b      	ldr	r3, [r3, #16]
 8010040:	3b01      	subs	r3, #1
 8010042:	061b      	lsls	r3, r3, #24
 8010044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010048:	4931      	ldr	r1, [pc, #196]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 801004a:	4313      	orrs	r3, r2
 801004c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801004e:	4b30      	ldr	r3, [pc, #192]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010052:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	492d      	ldr	r1, [pc, #180]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 801005c:	4313      	orrs	r3, r2
 801005e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010060:	4b2b      	ldr	r3, [pc, #172]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010064:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	699b      	ldr	r3, [r3, #24]
 801006c:	4928      	ldr	r1, [pc, #160]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 801006e:	4313      	orrs	r3, r2
 8010070:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010072:	4b27      	ldr	r3, [pc, #156]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010076:	4a26      	ldr	r2, [pc, #152]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801007c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801007e:	4b24      	ldr	r3, [pc, #144]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010082:	4b24      	ldr	r3, [pc, #144]	@ (8010114 <RCCEx_PLL3_Config+0x160>)
 8010084:	4013      	ands	r3, r2
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	69d2      	ldr	r2, [r2, #28]
 801008a:	00d2      	lsls	r2, r2, #3
 801008c:	4920      	ldr	r1, [pc, #128]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 801008e:	4313      	orrs	r3, r2
 8010090:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010092:	4b1f      	ldr	r3, [pc, #124]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010096:	4a1e      	ldr	r2, [pc, #120]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 8010098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801009c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80100a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a8:	4a19      	ldr	r2, [pc, #100]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80100ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100b0:	e00f      	b.n	80100d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d106      	bne.n	80100c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80100b8:	4b15      	ldr	r3, [pc, #84]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100bc:	4a14      	ldr	r2, [pc, #80]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80100c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80100c4:	e005      	b.n	80100d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80100c6:	4b12      	ldr	r3, [pc, #72]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ca:	4a11      	ldr	r2, [pc, #68]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80100d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80100d2:	4b0f      	ldr	r3, [pc, #60]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a0e      	ldr	r2, [pc, #56]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100de:	f7f4 fe63 	bl	8004da8 <HAL_GetTick>
 80100e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100e4:	e008      	b.n	80100f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80100e6:	f7f4 fe5f 	bl	8004da8 <HAL_GetTick>
 80100ea:	4602      	mov	r2, r0
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d901      	bls.n	80100f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100f4:	2303      	movs	r3, #3
 80100f6:	e006      	b.n	8010106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100f8:	4b05      	ldr	r3, [pc, #20]	@ (8010110 <RCCEx_PLL3_Config+0x15c>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010100:	2b00      	cmp	r3, #0
 8010102:	d0f0      	beq.n	80100e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010104:	7bfb      	ldrb	r3, [r7, #15]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	58024400 	.word	0x58024400
 8010114:	ffff0007 	.word	0xffff0007

08010118 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d071      	beq.n	801020e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7f3 f9b4 	bl	80034ac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2202      	movs	r2, #2
 8010148:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f003 0310 	and.w	r3, r3, #16
 8010156:	2b10      	cmp	r3, #16
 8010158:	d050      	beq.n	80101fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	22ca      	movs	r2, #202	@ 0xca
 8010160:	625a      	str	r2, [r3, #36]	@ 0x24
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2253      	movs	r2, #83	@ 0x53
 8010168:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fa4a 	bl	8010604 <RTC_EnterInitMode>
 8010170:	4603      	mov	r3, r0
 8010172:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010174:	7bfb      	ldrb	r3, [r7, #15]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d124      	bne.n	80101c4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6899      	ldr	r1, [r3, #8]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	4b24      	ldr	r3, [pc, #144]	@ (8010218 <HAL_RTC_Init+0x100>)
 8010186:	400b      	ands	r3, r1
 8010188:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6899      	ldr	r1, [r3, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	431a      	orrs	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	431a      	orrs	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	430a      	orrs	r2, r1
 80101a6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	0419      	lsls	r1, r3, #16
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68da      	ldr	r2, [r3, #12]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	430a      	orrs	r2, r1
 80101b8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fa56 	bl	801066c <RTC_ExitInitMode>
 80101c0:	4603      	mov	r3, r0
 80101c2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d113      	bne.n	80101f2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f022 0203 	bic.w	r2, r2, #3
 80101d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	69da      	ldr	r2, [r3, #28]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	431a      	orrs	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	430a      	orrs	r2, r1
 80101f0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	22ff      	movs	r2, #255	@ 0xff
 80101f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80101fa:	e001      	b.n	8010200 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010200:	7bfb      	ldrb	r3, [r7, #15]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d103      	bne.n	801020e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2201      	movs	r2, #1
 801020a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 801020e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	ff8fffbf 	.word	0xff8fffbf

0801021c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801022e:	2b01      	cmp	r3, #1
 8010230:	d101      	bne.n	8010236 <HAL_RTC_SetTime+0x1a>
 8010232:	2302      	movs	r3, #2
 8010234:	e089      	b.n	801034a <HAL_RTC_SetTime+0x12e>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2202      	movs	r2, #2
 8010242:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	22ca      	movs	r2, #202	@ 0xca
 801024c:	625a      	str	r2, [r3, #36]	@ 0x24
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2253      	movs	r2, #83	@ 0x53
 8010254:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f000 f9d4 	bl	8010604 <RTC_EnterInitMode>
 801025c:	4603      	mov	r3, r0
 801025e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010260:	7cfb      	ldrb	r3, [r7, #19]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d161      	bne.n	801032a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d126      	bne.n	80102ba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	689b      	ldr	r3, [r3, #8]
 8010272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010276:	2b00      	cmp	r3, #0
 8010278:	d102      	bne.n	8010280 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2200      	movs	r2, #0
 801027e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	4618      	mov	r0, r3
 8010286:	f000 fa2f 	bl	80106e8 <RTC_ByteToBcd2>
 801028a:	4603      	mov	r3, r0
 801028c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	785b      	ldrb	r3, [r3, #1]
 8010292:	4618      	mov	r0, r3
 8010294:	f000 fa28 	bl	80106e8 <RTC_ByteToBcd2>
 8010298:	4603      	mov	r3, r0
 801029a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801029c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	789b      	ldrb	r3, [r3, #2]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f000 fa20 	bl	80106e8 <RTC_ByteToBcd2>
 80102a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80102aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	78db      	ldrb	r3, [r3, #3]
 80102b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80102b4:	4313      	orrs	r3, r2
 80102b6:	617b      	str	r3, [r7, #20]
 80102b8:	e018      	b.n	80102ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	2200      	movs	r2, #0
 80102cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	785b      	ldrb	r3, [r3, #1]
 80102d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80102da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80102dc:	68ba      	ldr	r2, [r7, #8]
 80102de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80102e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	78db      	ldrb	r3, [r3, #3]
 80102e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80102e8:	4313      	orrs	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	6979      	ldr	r1, [r7, #20]
 80102f2:	4b18      	ldr	r3, [pc, #96]	@ (8010354 <HAL_RTC_SetTime+0x138>)
 80102f4:	400b      	ands	r3, r1
 80102f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	689a      	ldr	r2, [r3, #8]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010306:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6899      	ldr	r1, [r3, #8]
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	68da      	ldr	r2, [r3, #12]
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	431a      	orrs	r2, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	430a      	orrs	r2, r1
 801031e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f000 f9a3 	bl	801066c <RTC_ExitInitMode>
 8010326:	4603      	mov	r3, r0
 8010328:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	22ff      	movs	r2, #255	@ 0xff
 8010330:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010332:	7cfb      	ldrb	r3, [r7, #19]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d103      	bne.n	8010340 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2201      	movs	r2, #1
 801033c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2200      	movs	r2, #0
 8010344:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010348:	7cfb      	ldrb	r3, [r7, #19]
}
 801034a:	4618      	mov	r0, r3
 801034c:	371c      	adds	r7, #28
 801034e:	46bd      	mov	sp, r7
 8010350:	bd90      	pop	{r4, r7, pc}
 8010352:	bf00      	nop
 8010354:	007f7f7f 	.word	0x007f7f7f

08010358 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	4b22      	ldr	r3, [pc, #136]	@ (801040c <HAL_RTC_GetTime+0xb4>)
 8010384:	4013      	ands	r3, r2
 8010386:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	0c1b      	lsrs	r3, r3, #16
 801038c:	b2db      	uxtb	r3, r3
 801038e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010392:	b2da      	uxtb	r2, r3
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	0a1b      	lsrs	r3, r3, #8
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103a2:	b2da      	uxtb	r2, r3
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	0d9b      	lsrs	r3, r3, #22
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	f003 0301 	and.w	r3, r3, #1
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d11a      	bne.n	8010402 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 f9a9 	bl	8010728 <RTC_Bcd2ToByte>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	785b      	ldrb	r3, [r3, #1]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f000 f9a0 	bl	8010728 <RTC_Bcd2ToByte>
 80103e8:	4603      	mov	r3, r0
 80103ea:	461a      	mov	r2, r3
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	789b      	ldrb	r3, [r3, #2]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 f997 	bl	8010728 <RTC_Bcd2ToByte>
 80103fa:	4603      	mov	r3, r0
 80103fc:	461a      	mov	r2, r3
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3718      	adds	r7, #24
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	007f7f7f 	.word	0x007f7f7f

08010410 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010410:	b590      	push	{r4, r7, lr}
 8010412:	b087      	sub	sp, #28
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010422:	2b01      	cmp	r3, #1
 8010424:	d101      	bne.n	801042a <HAL_RTC_SetDate+0x1a>
 8010426:	2302      	movs	r3, #2
 8010428:	e073      	b.n	8010512 <HAL_RTC_SetDate+0x102>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2202      	movs	r2, #2
 8010436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10e      	bne.n	801045e <HAL_RTC_SetDate+0x4e>
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	785b      	ldrb	r3, [r3, #1]
 8010444:	f003 0310 	and.w	r3, r3, #16
 8010448:	2b00      	cmp	r3, #0
 801044a:	d008      	beq.n	801045e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	785b      	ldrb	r3, [r3, #1]
 8010450:	f023 0310 	bic.w	r3, r3, #16
 8010454:	b2db      	uxtb	r3, r3
 8010456:	330a      	adds	r3, #10
 8010458:	b2da      	uxtb	r2, r3
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d11c      	bne.n	801049e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	78db      	ldrb	r3, [r3, #3]
 8010468:	4618      	mov	r0, r3
 801046a:	f000 f93d 	bl	80106e8 <RTC_ByteToBcd2>
 801046e:	4603      	mov	r3, r0
 8010470:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	785b      	ldrb	r3, [r3, #1]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 f936 	bl	80106e8 <RTC_ByteToBcd2>
 801047c:	4603      	mov	r3, r0
 801047e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010480:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	789b      	ldrb	r3, [r3, #2]
 8010486:	4618      	mov	r0, r3
 8010488:	f000 f92e 	bl	80106e8 <RTC_ByteToBcd2>
 801048c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801048e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010498:	4313      	orrs	r3, r2
 801049a:	617b      	str	r3, [r7, #20]
 801049c:	e00e      	b.n	80104bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	78db      	ldrb	r3, [r3, #3]
 80104a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	785b      	ldrb	r3, [r3, #1]
 80104a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80104aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80104ac:	68ba      	ldr	r2, [r7, #8]
 80104ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80104b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80104b8:	4313      	orrs	r3, r2
 80104ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	22ca      	movs	r2, #202	@ 0xca
 80104c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2253      	movs	r2, #83	@ 0x53
 80104ca:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f000 f899 	bl	8010604 <RTC_EnterInitMode>
 80104d2:	4603      	mov	r3, r0
 80104d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80104d6:	7cfb      	ldrb	r3, [r7, #19]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10a      	bne.n	80104f2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	6979      	ldr	r1, [r7, #20]
 80104e2:	4b0e      	ldr	r3, [pc, #56]	@ (801051c <HAL_RTC_SetDate+0x10c>)
 80104e4:	400b      	ands	r3, r1
 80104e6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	f000 f8bf 	bl	801066c <RTC_ExitInitMode>
 80104ee:	4603      	mov	r3, r0
 80104f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	22ff      	movs	r2, #255	@ 0xff
 80104f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80104fa:	7cfb      	ldrb	r3, [r7, #19]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d103      	bne.n	8010508 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2201      	movs	r2, #1
 8010504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010510:	7cfb      	ldrb	r3, [r7, #19]


}
 8010512:	4618      	mov	r0, r3
 8010514:	371c      	adds	r7, #28
 8010516:	46bd      	mov	sp, r7
 8010518:	bd90      	pop	{r4, r7, pc}
 801051a:	bf00      	nop
 801051c:	00ffff3f 	.word	0x00ffff3f

08010520 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	685a      	ldr	r2, [r3, #4]
 8010532:	4b21      	ldr	r3, [pc, #132]	@ (80105b8 <HAL_RTC_GetDate+0x98>)
 8010534:	4013      	ands	r3, r2
 8010536:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	0c1b      	lsrs	r3, r3, #16
 801053c:	b2da      	uxtb	r2, r3
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	0a1b      	lsrs	r3, r3, #8
 8010546:	b2db      	uxtb	r3, r3
 8010548:	f003 031f 	and.w	r3, r3, #31
 801054c:	b2da      	uxtb	r2, r3
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	b2db      	uxtb	r3, r3
 8010556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801055a:	b2da      	uxtb	r2, r3
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	0b5b      	lsrs	r3, r3, #13
 8010564:	b2db      	uxtb	r3, r3
 8010566:	f003 0307 	and.w	r3, r3, #7
 801056a:	b2da      	uxtb	r2, r3
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d11a      	bne.n	80105ac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	78db      	ldrb	r3, [r3, #3]
 801057a:	4618      	mov	r0, r3
 801057c:	f000 f8d4 	bl	8010728 <RTC_Bcd2ToByte>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	785b      	ldrb	r3, [r3, #1]
 801058c:	4618      	mov	r0, r3
 801058e:	f000 f8cb 	bl	8010728 <RTC_Bcd2ToByte>
 8010592:	4603      	mov	r3, r0
 8010594:	461a      	mov	r2, r3
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	789b      	ldrb	r3, [r3, #2]
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 f8c2 	bl	8010728 <RTC_Bcd2ToByte>
 80105a4:	4603      	mov	r3, r0
 80105a6:	461a      	mov	r2, r3
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	00ffff3f 	.word	0x00ffff3f

080105bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010600 <HAL_RTC_WaitForSynchro+0x44>)
 80105ca:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80105cc:	f7f4 fbec 	bl	8004da8 <HAL_GetTick>
 80105d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80105d2:	e009      	b.n	80105e8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80105d4:	f7f4 fbe8 	bl	8004da8 <HAL_GetTick>
 80105d8:	4602      	mov	r2, r0
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80105e2:	d901      	bls.n	80105e8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80105e4:	2303      	movs	r3, #3
 80105e6:	e007      	b.n	80105f8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	f003 0320 	and.w	r3, r3, #32
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d0ee      	beq.n	80105d4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3710      	adds	r7, #16
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	0003ff5f 	.word	0x0003ff5f

08010604 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801060c:	2300      	movs	r3, #0
 801060e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801061a:	2b00      	cmp	r3, #0
 801061c:	d120      	bne.n	8010660 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f04f 32ff 	mov.w	r2, #4294967295
 8010626:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8010628:	f7f4 fbbe 	bl	8004da8 <HAL_GetTick>
 801062c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801062e:	e00d      	b.n	801064c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010630:	f7f4 fbba 	bl	8004da8 <HAL_GetTick>
 8010634:	4602      	mov	r2, r0
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801063e:	d905      	bls.n	801064c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010640:	2303      	movs	r3, #3
 8010642:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2203      	movs	r2, #3
 8010648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010656:	2b00      	cmp	r3, #0
 8010658:	d102      	bne.n	8010660 <RTC_EnterInitMode+0x5c>
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	2b03      	cmp	r3, #3
 801065e:	d1e7      	bne.n	8010630 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010660:	7bfb      	ldrb	r3, [r7, #15]
}
 8010662:	4618      	mov	r0, r3
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
	...

0801066c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010678:	4b1a      	ldr	r3, [pc, #104]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	4a19      	ldr	r2, [pc, #100]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 801067e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010682:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010684:	4b17      	ldr	r3, [pc, #92]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	f003 0320 	and.w	r3, r3, #32
 801068c:	2b00      	cmp	r3, #0
 801068e:	d10c      	bne.n	80106aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff ff93 	bl	80105bc <HAL_RTC_WaitForSynchro>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01e      	beq.n	80106da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2203      	movs	r2, #3
 80106a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80106a4:	2303      	movs	r3, #3
 80106a6:	73fb      	strb	r3, [r7, #15]
 80106a8:	e017      	b.n	80106da <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80106aa:	4b0e      	ldr	r3, [pc, #56]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	4a0d      	ldr	r2, [pc, #52]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 80106b0:	f023 0320 	bic.w	r3, r3, #32
 80106b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7ff ff80 	bl	80105bc <HAL_RTC_WaitForSynchro>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d005      	beq.n	80106ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2203      	movs	r2, #3
 80106c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80106ca:	2303      	movs	r3, #3
 80106cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80106ce:	4b05      	ldr	r3, [pc, #20]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	4a04      	ldr	r2, [pc, #16]	@ (80106e4 <RTC_ExitInitMode+0x78>)
 80106d4:	f043 0320 	orr.w	r3, r3, #32
 80106d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80106da:	7bfb      	ldrb	r3, [r7, #15]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	58004000 	.word	0x58004000

080106e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80106f2:	2300      	movs	r3, #0
 80106f4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80106f6:	79fb      	ldrb	r3, [r7, #7]
 80106f8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80106fa:	e005      	b.n	8010708 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	3301      	adds	r3, #1
 8010700:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8010702:	7afb      	ldrb	r3, [r7, #11]
 8010704:	3b0a      	subs	r3, #10
 8010706:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8010708:	7afb      	ldrb	r3, [r7, #11]
 801070a:	2b09      	cmp	r3, #9
 801070c:	d8f6      	bhi.n	80106fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	b2db      	uxtb	r3, r3
 8010712:	011b      	lsls	r3, r3, #4
 8010714:	b2da      	uxtb	r2, r3
 8010716:	7afb      	ldrb	r3, [r7, #11]
 8010718:	4313      	orrs	r3, r2
 801071a:	b2db      	uxtb	r3, r3
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010732:	79fb      	ldrb	r3, [r7, #7]
 8010734:	091b      	lsrs	r3, r3, #4
 8010736:	b2db      	uxtb	r3, r3
 8010738:	461a      	mov	r2, r3
 801073a:	0092      	lsls	r2, r2, #2
 801073c:	4413      	add	r3, r2
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010742:	79fb      	ldrb	r3, [r7, #7]
 8010744:	f003 030f 	and.w	r3, r3, #15
 8010748:	b2da      	uxtb	r2, r3
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	4413      	add	r3, r2
 801074e:	b2db      	uxtb	r3, r3
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08a      	sub	sp, #40	@ 0x28
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d101      	bne.n	801076e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801076a:	2301      	movs	r3, #1
 801076c:	e09f      	b.n	80108ae <HAL_SD_Init+0x152>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d12f      	bne.n	80107da <HAL_SD_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	761a      	strb	r2, [r3, #24]
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
    }
#endif /*USE_SD_TRANSCEIVER */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
    /* Reset Callback pointers in HAL_SD_STATE_RESET only */
    hsd->TxCpltCallback    = HAL_SD_TxCpltCallback;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	4a4d      	ldr	r2, [pc, #308]	@ (80108b8 <HAL_SD_Init+0x15c>)
 8010784:	67da      	str	r2, [r3, #124]	@ 0x7c
    hsd->RxCpltCallback    = HAL_SD_RxCpltCallback;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4a4c      	ldr	r2, [pc, #304]	@ (80108bc <HAL_SD_Init+0x160>)
 801078a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsd->ErrorCallback     = HAL_SD_ErrorCallback;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4a4b      	ldr	r2, [pc, #300]	@ (80108c0 <HAL_SD_Init+0x164>)
 8010792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsd->AbortCpltCallback = HAL_SD_AbortCallback;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4a4a      	ldr	r2, [pc, #296]	@ (80108c4 <HAL_SD_Init+0x168>)
 801079a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hsd->Read_DMADblBuf0CpltCallback = HAL_SDEx_Read_DMADoubleBuf0CpltCallback;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4a49      	ldr	r2, [pc, #292]	@ (80108c8 <HAL_SD_Init+0x16c>)
 80107a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hsd->Read_DMADblBuf1CpltCallback = HAL_SDEx_Read_DMADoubleBuf1CpltCallback;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a48      	ldr	r2, [pc, #288]	@ (80108cc <HAL_SD_Init+0x170>)
 80107aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hsd->Write_DMADblBuf0CpltCallback = HAL_SDEx_Write_DMADoubleBuf0CpltCallback;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a47      	ldr	r2, [pc, #284]	@ (80108d0 <HAL_SD_Init+0x174>)
 80107b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsd->Write_DMADblBuf1CpltCallback = HAL_SDEx_Write_DMADoubleBuf1CpltCallback;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a46      	ldr	r2, [pc, #280]	@ (80108d4 <HAL_SD_Init+0x178>)
 80107ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    {
      hsd->DriveTransceiver_1_8V_Callback = HAL_SD_DriveTransceiver_1_8V_Callback;
    }
#endif /* USE_SD_TRANSCEIVER */

    if (hsd->MspInitCallback == NULL)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d103      	bne.n	80107d0 <HAL_SD_Init+0x74>
    {
      hsd->MspInitCallback = HAL_SD_MspInit;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a43      	ldr	r2, [pc, #268]	@ (80108d8 <HAL_SD_Init+0x17c>)
 80107cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2204      	movs	r2, #4
 80107de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 f87a 	bl	80108dc <HAL_SD_InitCard>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <HAL_SD_Init+0x96>
  {
    return HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e05d      	b.n	80108ae <HAL_SD_Init+0x152>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80107f2:	f107 0308 	add.w	r3, r7, #8
 80107f6:	4619      	mov	r1, r3
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fdd7 	bl	80113ac <HAL_SD_GetCardStatus>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <HAL_SD_Init+0xac>
  {
    return HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	e052      	b.n	80108ae <HAL_SD_Init+0x152>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8010808:	7e3b      	ldrb	r3, [r7, #24]
 801080a:	b2db      	uxtb	r3, r3
 801080c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801080e:	7e7b      	ldrb	r3, [r7, #25]
 8010810:	b2db      	uxtb	r3, r3
 8010812:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010818:	2b01      	cmp	r3, #1
 801081a:	d10a      	bne.n	8010832 <HAL_SD_Init+0xd6>
 801081c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <HAL_SD_Init+0xcc>
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <HAL_SD_Init+0xd6>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801082e:	659a      	str	r2, [r3, #88]	@ 0x58
 8010830:	e00b      	b.n	801084a <HAL_SD_Init+0xee>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010836:	2b01      	cmp	r3, #1
 8010838:	d104      	bne.n	8010844 <HAL_SD_Init+0xe8>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010840:	659a      	str	r2, [r3, #88]	@ 0x58
 8010842:	e002      	b.n	801084a <HAL_SD_Init+0xee>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	4619      	mov	r1, r3
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 fe95 	bl	8011580 <HAL_SD_ConfigWideBusOperation>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 801085c:	2301      	movs	r3, #1
 801085e:	e026      	b.n	80108ae <HAL_SD_Init+0x152>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8010860:	f7f4 faa2 	bl	8004da8 <HAL_GetTick>
 8010864:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8010866:	e011      	b.n	801088c <HAL_SD_Init+0x130>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010868:	f7f4 fa9e 	bl	8004da8 <HAL_GetTick>
 801086c:	4602      	mov	r2, r0
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010876:	d109      	bne.n	801088c <HAL_SD_Init+0x130>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801087e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8010888:	2303      	movs	r3, #3
 801088a:	e010      	b.n	80108ae <HAL_SD_Init+0x152>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 ff89 	bl	80117a4 <HAL_SD_GetCardState>
 8010892:	4603      	mov	r3, r0
 8010894:	2b04      	cmp	r3, #4
 8010896:	d1e7      	bne.n	8010868 <HAL_SD_Init+0x10c>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3728      	adds	r7, #40	@ 0x28
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	08014e21 	.word	0x08014e21
 80108bc:	08014e35 	.word	0x08014e35
 80108c0:	08011051 	.word	0x08011051
 80108c4:	08014e0d 	.word	0x08014e0d
 80108c8:	08012079 	.word	0x08012079
 80108cc:	0801208d 	.word	0x0801208d
 80108d0:	080120a1 	.word	0x080120a1
 80108d4:	080120b5 	.word	0x080120b5
 80108d8:	08003599 	.word	0x08003599

080108dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80108dc:	b590      	push	{r4, r7, lr}
 80108de:	b08d      	sub	sp, #52	@ 0x34
 80108e0:	af02      	add	r7, sp, #8
 80108e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80108e8:	2300      	movs	r3, #0
 80108ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80108ec:	2300      	movs	r3, #0
 80108ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80108f0:	2300      	movs	r3, #0
 80108f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80108f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80108f8:	f04f 0100 	mov.w	r1, #0
 80108fc:	f7fe f918 	bl	800eb30 <HAL_RCCEx_GetPeriphCLKFreq>
 8010900:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8010902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010904:	2b00      	cmp	r3, #0
 8010906:	d109      	bne.n	801091c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2201      	movs	r2, #1
 801090c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8010916:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8010918:	2301      	movs	r3, #1
 801091a:	e070      	b.n	80109fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091e:	0a1b      	lsrs	r3, r3, #8
 8010920:	4a39      	ldr	r2, [pc, #228]	@ (8010a08 <HAL_SD_InitCard+0x12c>)
 8010922:	fba2 2303 	umull	r2, r3, r2, r3
 8010926:	091b      	lsrs	r3, r3, #4
 8010928:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681c      	ldr	r4, [r3, #0]
 801092e:	466a      	mov	r2, sp
 8010930:	f107 0318 	add.w	r3, r7, #24
 8010934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010938:	e882 0003 	stmia.w	r2, {r0, r1}
 801093c:	f107 030c 	add.w	r3, r7, #12
 8010940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010942:	4620      	mov	r0, r4
 8010944:	f003 fc06 	bl	8014154 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4618      	mov	r0, r3
 801094e:	f003 fc49 	bl	80141e4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d005      	beq.n	8010964 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010962:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8010964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010966:	2b00      	cmp	r3, #0
 8010968:	d007      	beq.n	801097a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801096a:	4a28      	ldr	r2, [pc, #160]	@ (8010a0c <HAL_SD_InitCard+0x130>)
 801096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010972:	3301      	adds	r3, #1
 8010974:	4618      	mov	r0, r3
 8010976:	f7f4 fa23 	bl	8004dc0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f001 f800 	bl	8011980 <SD_PowerON>
 8010980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010982:	6a3b      	ldr	r3, [r7, #32]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00b      	beq.n	80109a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010994:	6a3b      	ldr	r3, [r7, #32]
 8010996:	431a      	orrs	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	e02e      	b.n	80109fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 ff1f 	bl	80117e4 <SD_InitCard>
 80109a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d00b      	beq.n	80109c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	431a      	orrs	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80109c2:	2301      	movs	r3, #1
 80109c4:	e01b      	b.n	80109fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80109ce:	4618      	mov	r0, r3
 80109d0:	f003 fc9e 	bl	8014310 <SDMMC_CmdBlockLength>
 80109d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00f      	beq.n	80109fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a0b      	ldr	r2, [pc, #44]	@ (8010a10 <HAL_SD_InitCard+0x134>)
 80109e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	431a      	orrs	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2201      	movs	r2, #1
 80109f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	e000      	b.n	80109fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	372c      	adds	r7, #44	@ 0x2c
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd90      	pop	{r4, r7, pc}
 8010a06:	bf00      	nop
 8010a08:	014f8b59 	.word	0x014f8b59
 8010a0c:	00012110 	.word	0x00012110
 8010a10:	1fe00fff 	.word	0x1fe00fff

08010a14 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b08c      	sub	sp, #48	@ 0x30
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	607a      	str	r2, [r7, #4]
 8010a20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d107      	bne.n	8010a3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a30:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e08d      	b.n	8010b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	f040 8086 	bne.w	8010b56 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	441a      	add	r2, r3
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d907      	bls.n	8010a6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a62:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e074      	b.n	8010b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2203      	movs	r2, #3
 8010a72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	025a      	lsls	r2, r3, #9
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d002      	beq.n	8010a9a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8010a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a96:	025b      	lsls	r3, r3, #9
 8010a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	025b      	lsls	r3, r3, #9
 8010aa4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010aa6:	2390      	movs	r3, #144	@ 0x90
 8010aa8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010aaa:	2302      	movs	r3, #2
 8010aac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f107 0210 	add.w	r2, r7, #16
 8010abe:	4611      	mov	r1, r2
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f003 fbf9 	bl	80142b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	68da      	ldr	r2, [r3, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ad4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d90a      	bls.n	8010b02 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2282      	movs	r2, #130	@ 0x82
 8010af0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010af8:	4618      	mov	r0, r3
 8010afa:	f003 fc4f 	bl	801439c <SDMMC_CmdReadMultiBlock>
 8010afe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010b00:	e009      	b.n	8010b16 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2281      	movs	r2, #129	@ 0x81
 8010b06:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f003 fc21 	bl	8014356 <SDMMC_CmdReadSingleBlock>
 8010b14:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d012      	beq.n	8010b42 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a0f      	ldr	r2, [pc, #60]	@ (8010b60 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8010b22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2a:	431a      	orrs	r2, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e00a      	b.n	8010b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8010b50:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8010b52:	2300      	movs	r3, #0
 8010b54:	e000      	b.n	8010b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8010b56:	2302      	movs	r3, #2
  }
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3730      	adds	r7, #48	@ 0x30
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	1fe00fff 	.word	0x1fe00fff

08010b64 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08c      	sub	sp, #48	@ 0x30
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d107      	bne.n	8010b8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b80:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e08d      	b.n	8010ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	2b01      	cmp	r3, #1
 8010b96:	f040 8086 	bne.w	8010ca6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	441a      	add	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d907      	bls.n	8010bbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bb2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e074      	b.n	8010ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2203      	movs	r2, #3
 8010bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	025a      	lsls	r2, r3, #9
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d002      	beq.n	8010bea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8010be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010be6:	025b      	lsls	r3, r3, #9
 8010be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010bea:	f04f 33ff 	mov.w	r3, #4294967295
 8010bee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	025b      	lsls	r3, r3, #9
 8010bf4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010bf6:	2390      	movs	r3, #144	@ 0x90
 8010bf8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010c02:	2300      	movs	r3, #0
 8010c04:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f107 0210 	add.w	r2, r7, #16
 8010c0e:	4611      	mov	r1, r2
 8010c10:	4618      	mov	r0, r3
 8010c12:	f003 fb51 	bl	80142b8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	68da      	ldr	r2, [r3, #12]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c24:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2201      	movs	r2, #1
 8010c34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d90a      	bls.n	8010c52 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	22a0      	movs	r2, #160	@ 0xa0
 8010c40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f003 fbed 	bl	8014428 <SDMMC_CmdWriteMultiBlock>
 8010c4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010c50:	e009      	b.n	8010c66 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2290      	movs	r2, #144	@ 0x90
 8010c56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f003 fbbf 	bl	80143e2 <SDMMC_CmdWriteSingleBlock>
 8010c64:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d012      	beq.n	8010c92 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a0f      	ldr	r2, [pc, #60]	@ (8010cb0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8010c72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c7a:	431a      	orrs	r2, r3
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	e00a      	b.n	8010ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8010ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	e000      	b.n	8010ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8010ca6:	2302      	movs	r3, #2
  }
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3730      	adds	r7, #48	@ 0x30
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	1fe00fff 	.word	0x1fe00fff

08010cb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d008      	beq.n	8010ce2 <HAL_SD_IRQHandler+0x2e>
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f003 0308 	and.w	r3, r3, #8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d003      	beq.n	8010ce2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f001 f93c 	bl	8011f58 <SD_Read_IT>
 8010ce0:	e1b0      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 80b6 	beq.w	8010e5e <HAL_SD_IRQHandler+0x1aa>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	4b5e      	ldr	r3, [pc, #376]	@ (8010e80 <HAL_SD_IRQHandler+0x1cc>)
 8010d08:	400b      	ands	r3, r1
 8010d0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8010d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	68da      	ldr	r2, [r3, #12]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010d2a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f003 0308 	and.w	r3, r3, #8
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d03d      	beq.n	8010db2 <HAL_SD_IRQHandler+0xfe>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f003 0302 	and.w	r3, r3, #2
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d104      	bne.n	8010d4a <HAL_SD_IRQHandler+0x96>
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f003 0320 	and.w	r3, r3, #32
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f003 fb8e 	bl	8014470 <SDMMC_CmdStopTransfer>
 8010d54:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00a      	beq.n	8010d72 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	431a      	orrs	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	4798      	blx	r3
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a43      	ldr	r2, [pc, #268]	@ (8010e84 <HAL_SD_IRQHandler+0x1d0>)
 8010d78:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f003 0301 	and.w	r3, r3, #1
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d104      	bne.n	8010d9c <HAL_SD_IRQHandler+0xe8>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f003 0302 	and.w	r3, r3, #2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d005      	beq.n	8010da8 <HAL_SD_IRQHandler+0xf4>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	4798      	blx	r3
 8010da6:	e14d      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
      }
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8010db0:	e148      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 8143 	beq.w	8011044 <HAL_SD_IRQHandler+0x390>
      hsd->Instance->DLEN = 0;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f003 0302 	and.w	r3, r3, #2
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d104      	bne.n	8010dea <HAL_SD_IRQHandler+0x136>
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f003 0320 	and.w	r3, r3, #32
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d013      	beq.n	8010e12 <HAL_SD_IRQHandler+0x15e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f003 fb3e 	bl	8014470 <SDMMC_CmdStopTransfer>
 8010df4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00a      	beq.n	8010e12 <HAL_SD_IRQHandler+0x15e>
          hsd->ErrorCode |= errorstate;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	431a      	orrs	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->ErrorCallback(hsd);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	4798      	blx	r3
      hsd->State = HAL_SD_STATE_READY;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2201      	movs	r2, #1
 8010e16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f003 0310 	and.w	r3, r3, #16
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d104      	bne.n	8010e34 <HAL_SD_IRQHandler+0x180>
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f003 0320 	and.w	r3, r3, #32
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <HAL_SD_IRQHandler+0x188>
        hsd->TxCpltCallback(hsd);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	4798      	blx	r3
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f003 0301 	and.w	r3, r3, #1
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d105      	bne.n	8010e52 <HAL_SD_IRQHandler+0x19e>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f003 0302 	and.w	r3, r3, #2
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 80f9 	beq.w	8011044 <HAL_SD_IRQHandler+0x390>
        hsd->RxCpltCallback(hsd);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	4798      	blx	r3
}
 8010e5c:	e0f2      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00d      	beq.n	8010e88 <HAL_SD_IRQHandler+0x1d4>
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f003 0308 	and.w	r3, r3, #8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d008      	beq.n	8010e88 <HAL_SD_IRQHandler+0x1d4>
    SD_Write_IT(hsd);
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f001 f8b4 	bl	8011fe4 <SD_Write_IT>
 8010e7c:	e0e2      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
 8010e7e:	bf00      	nop
 8010e80:	ffff3ec5 	.word	0xffff3ec5
 8010e84:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e8e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f000 80a1 	beq.w	8010fda <HAL_SD_IRQHandler+0x326>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e9e:	f003 0302 	and.w	r3, r3, #2
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eaa:	f043 0202 	orr.w	r2, r3, #2
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eb8:	f003 0308 	and.w	r3, r3, #8
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d005      	beq.n	8010ecc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ec4:	f043 0208 	orr.w	r2, r3, #8
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ed2:	f003 0320 	and.w	r3, r3, #32
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d005      	beq.n	8010ee6 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ede:	f043 0220 	orr.w	r2, r3, #32
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eec:	f003 0310 	and.w	r3, r3, #16
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d005      	beq.n	8010f00 <HAL_SD_IRQHandler+0x24c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ef8:	f043 0210 	orr.w	r2, r3, #16
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a51      	ldr	r2, [pc, #324]	@ (801104c <HAL_SD_IRQHandler+0x398>)
 8010f06:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010f16:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	68da      	ldr	r2, [r3, #12]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010f26:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010f36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	68da      	ldr	r2, [r3, #12]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010f46:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f003 fa8f 	bl	8014470 <SDMMC_CmdStopTransfer>
 8010f52:	4602      	mov	r2, r0
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f58:	431a      	orrs	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	68da      	ldr	r2, [r3, #12]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010f6c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f76:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f003 0308 	and.w	r3, r3, #8
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d00c      	beq.n	8010f9c <HAL_SD_IRQHandler+0x2e8>
      hsd->State = HAL_SD_STATE_READY;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2201      	movs	r2, #1
 8010f86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->ErrorCallback(hsd);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	4798      	blx	r3
}
 8010f9a:	e053      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d04e      	beq.n	8011044 <HAL_SD_IRQHandler+0x390>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d04a      	beq.n	8011044 <HAL_SD_IRQHandler+0x390>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8010fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->ErrorCallback(hsd);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	4798      	blx	r3
}
 8010fd8:	e034      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d02d      	beq.n	8011044 <HAL_SD_IRQHandler+0x390>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ff8:	f003 0304 	and.w	r3, r3, #4
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d110      	bne.n	8011022 <HAL_SD_IRQHandler+0x36e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f003 0320 	and.w	r3, r3, #32
 8011006:	2b00      	cmp	r3, #0
 8011008:	d005      	beq.n	8011016 <HAL_SD_IRQHandler+0x362>
        hsd->Write_DMADblBuf1CpltCallback(hsd);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	4798      	blx	r3
}
 8011014:	e016      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
        hsd->Read_DMADblBuf1CpltCallback(hsd);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	4798      	blx	r3
}
 8011020:	e010      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f003 0320 	and.w	r3, r3, #32
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <HAL_SD_IRQHandler+0x384>
        hsd->Write_DMADblBuf0CpltCallback(hsd);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	4798      	blx	r3
}
 8011036:	e005      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
        hsd->Read_DMADblBuf0CpltCallback(hsd);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	4798      	blx	r3
}
 8011042:	e7ff      	b.n	8011044 <HAL_SD_IRQHandler+0x390>
 8011044:	bf00      	nop
 8011046:	3710      	adds	r7, #16
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	18000f3a 	.word	0x18000f3a

08011050 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011072:	0f9b      	lsrs	r3, r3, #30
 8011074:	b2da      	uxtb	r2, r3
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801107e:	0e9b      	lsrs	r3, r3, #26
 8011080:	b2db      	uxtb	r3, r3
 8011082:	f003 030f 	and.w	r3, r3, #15
 8011086:	b2da      	uxtb	r2, r3
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011090:	0e1b      	lsrs	r3, r3, #24
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	b2da      	uxtb	r2, r3
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110a2:	0c1b      	lsrs	r3, r3, #16
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110ae:	0a1b      	lsrs	r3, r3, #8
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110ba:	b2da      	uxtb	r2, r3
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80110c4:	0d1b      	lsrs	r3, r3, #20
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80110d0:	0c1b      	lsrs	r3, r3, #16
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	f003 030f 	and.w	r3, r3, #15
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80110e2:	0bdb      	lsrs	r3, r3, #15
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	f003 0301 	and.w	r3, r3, #1
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80110f4:	0b9b      	lsrs	r3, r3, #14
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011106:	0b5b      	lsrs	r3, r3, #13
 8011108:	b2db      	uxtb	r3, r3
 801110a:	f003 0301 	and.w	r3, r3, #1
 801110e:	b2da      	uxtb	r2, r3
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011118:	0b1b      	lsrs	r3, r3, #12
 801111a:	b2db      	uxtb	r3, r3
 801111c:	f003 0301 	and.w	r3, r3, #1
 8011120:	b2da      	uxtb	r2, r3
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2200      	movs	r2, #0
 801112a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011130:	2b00      	cmp	r3, #0
 8011132:	d163      	bne.n	80111fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011138:	009a      	lsls	r2, r3, #2
 801113a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801113e:	4013      	ands	r3, r2
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8011144:	0f92      	lsrs	r2, r2, #30
 8011146:	431a      	orrs	r2, r3
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011150:	0edb      	lsrs	r3, r3, #27
 8011152:	b2db      	uxtb	r3, r3
 8011154:	f003 0307 	and.w	r3, r3, #7
 8011158:	b2da      	uxtb	r2, r3
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011162:	0e1b      	lsrs	r3, r3, #24
 8011164:	b2db      	uxtb	r3, r3
 8011166:	f003 0307 	and.w	r3, r3, #7
 801116a:	b2da      	uxtb	r2, r3
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011174:	0d5b      	lsrs	r3, r3, #21
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f003 0307 	and.w	r3, r3, #7
 801117c:	b2da      	uxtb	r2, r3
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011186:	0c9b      	lsrs	r3, r3, #18
 8011188:	b2db      	uxtb	r3, r3
 801118a:	f003 0307 	and.w	r3, r3, #7
 801118e:	b2da      	uxtb	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011198:	0bdb      	lsrs	r3, r3, #15
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f003 0307 	and.w	r3, r3, #7
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	7e1b      	ldrb	r3, [r3, #24]
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	f003 0307 	and.w	r3, r3, #7
 80111ba:	3302      	adds	r3, #2
 80111bc:	2201      	movs	r2, #1
 80111be:	fa02 f303 	lsl.w	r3, r2, r3
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80111c6:	fb03 f202 	mul.w	r2, r3, r2
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	7a1b      	ldrb	r3, [r3, #8]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	f003 030f 	and.w	r3, r3, #15
 80111d8:	2201      	movs	r2, #1
 80111da:	409a      	lsls	r2, r3
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80111e8:	0a52      	lsrs	r2, r2, #9
 80111ea:	fb03 f202 	mul.w	r2, r3, r2
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80111fa:	e031      	b.n	8011260 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011200:	2b01      	cmp	r3, #1
 8011202:	d11d      	bne.n	8011240 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011208:	041b      	lsls	r3, r3, #16
 801120a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011212:	0c1b      	lsrs	r3, r3, #16
 8011214:	431a      	orrs	r2, r3
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	3301      	adds	r3, #1
 8011220:	029a      	lsls	r2, r3, #10
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011234:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	655a      	str	r2, [r3, #84]	@ 0x54
 801123e:	e00f      	b.n	8011260 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4a58      	ldr	r2, [pc, #352]	@ (80113a8 <HAL_SD_GetCardCSD+0x344>)
 8011246:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801124c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2201      	movs	r2, #1
 8011258:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	e09d      	b.n	801139c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011264:	0b9b      	lsrs	r3, r3, #14
 8011266:	b2db      	uxtb	r3, r3
 8011268:	f003 0301 	and.w	r3, r3, #1
 801126c:	b2da      	uxtb	r2, r3
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011276:	09db      	lsrs	r3, r3, #7
 8011278:	b2db      	uxtb	r3, r3
 801127a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801127e:	b2da      	uxtb	r2, r3
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801128e:	b2da      	uxtb	r2, r3
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011298:	0fdb      	lsrs	r3, r3, #31
 801129a:	b2da      	uxtb	r2, r3
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112a4:	0f5b      	lsrs	r3, r3, #29
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f003 0303 	and.w	r3, r3, #3
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112b6:	0e9b      	lsrs	r3, r3, #26
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	f003 0307 	and.w	r3, r3, #7
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112c8:	0d9b      	lsrs	r3, r3, #22
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	f003 030f 	and.w	r3, r3, #15
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112da:	0d5b      	lsrs	r3, r3, #21
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f003 0301 	and.w	r3, r3, #1
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112f6:	0c1b      	lsrs	r3, r3, #16
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	f003 0301 	and.w	r3, r3, #1
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801130a:	0bdb      	lsrs	r3, r3, #15
 801130c:	b2db      	uxtb	r3, r3
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	b2da      	uxtb	r2, r3
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801131e:	0b9b      	lsrs	r3, r3, #14
 8011320:	b2db      	uxtb	r3, r3
 8011322:	f003 0301 	and.w	r3, r3, #1
 8011326:	b2da      	uxtb	r2, r3
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011332:	0b5b      	lsrs	r3, r3, #13
 8011334:	b2db      	uxtb	r3, r3
 8011336:	f003 0301 	and.w	r3, r3, #1
 801133a:	b2da      	uxtb	r2, r3
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011346:	0b1b      	lsrs	r3, r3, #12
 8011348:	b2db      	uxtb	r3, r3
 801134a:	f003 0301 	and.w	r3, r3, #1
 801134e:	b2da      	uxtb	r2, r3
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801135a:	0a9b      	lsrs	r3, r3, #10
 801135c:	b2db      	uxtb	r3, r3
 801135e:	f003 0303 	and.w	r3, r3, #3
 8011362:	b2da      	uxtb	r2, r3
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801136e:	0a1b      	lsrs	r3, r3, #8
 8011370:	b2db      	uxtb	r3, r3
 8011372:	f003 0303 	and.w	r3, r3, #3
 8011376:	b2da      	uxtb	r2, r3
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011382:	085b      	lsrs	r3, r3, #1
 8011384:	b2db      	uxtb	r3, r3
 8011386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801138a:	b2da      	uxtb	r2, r3
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2201      	movs	r2, #1
 8011396:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801139a:	2300      	movs	r3, #0
}
 801139c:	4618      	mov	r0, r3
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	1fe00fff 	.word	0x1fe00fff

080113ac <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b094      	sub	sp, #80	@ 0x50
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	d101      	bne.n	80113cc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80113c8:	2301      	movs	r3, #1
 80113ca:	e0a7      	b.n	801151c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80113cc:	f107 0308 	add.w	r3, r7, #8
 80113d0:	4619      	mov	r1, r3
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fb62 	bl	8011a9c <SD_SendSDStatus>
 80113d8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80113da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d011      	beq.n	8011404 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a4f      	ldr	r2, [pc, #316]	@ (8011524 <HAL_SD_GetCardStatus+0x178>)
 80113e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113ee:	431a      	orrs	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2201      	movs	r2, #1
 80113f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80113fc:	2301      	movs	r3, #1
 80113fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011402:	e070      	b.n	80114e6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	099b      	lsrs	r3, r3, #6
 8011408:	b2db      	uxtb	r3, r3
 801140a:	f003 0303 	and.w	r3, r3, #3
 801140e:	b2da      	uxtb	r2, r3
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	095b      	lsrs	r3, r3, #5
 8011418:	b2db      	uxtb	r3, r3
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	b2da      	uxtb	r2, r3
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	0a1b      	lsrs	r3, r3, #8
 8011428:	b29b      	uxth	r3, r3
 801142a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801142e:	b29a      	uxth	r2, r3
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	0e1b      	lsrs	r3, r3, #24
 8011434:	b29b      	uxth	r3, r3
 8011436:	4313      	orrs	r3, r2
 8011438:	b29a      	uxth	r2, r3
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	061a      	lsls	r2, r3, #24
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	021b      	lsls	r3, r3, #8
 8011446:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801144a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	0a1b      	lsrs	r3, r3, #8
 8011450:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8011454:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	0e1b      	lsrs	r3, r3, #24
 801145a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	b2da      	uxtb	r2, r3
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	0a1b      	lsrs	r3, r3, #8
 801146c:	b2da      	uxtb	r2, r3
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	0d1b      	lsrs	r3, r3, #20
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 030f 	and.w	r3, r3, #15
 801147c:	b2da      	uxtb	r2, r3
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	0c1b      	lsrs	r3, r3, #16
 8011486:	b29b      	uxth	r3, r3
 8011488:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801148c:	b29a      	uxth	r2, r3
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	b29b      	uxth	r3, r3
 8011492:	b2db      	uxtb	r3, r3
 8011494:	b29b      	uxth	r3, r3
 8011496:	4313      	orrs	r3, r2
 8011498:	b29a      	uxth	r2, r3
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	0a9b      	lsrs	r3, r3, #10
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	0a1b      	lsrs	r3, r3, #8
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	f003 0303 	and.w	r3, r3, #3
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	091b      	lsrs	r3, r3, #4
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	f003 030f 	and.w	r3, r3, #15
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f003 030f 	and.w	r3, r3, #15
 80114d6:	b2da      	uxtb	r2, r3
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	0e1b      	lsrs	r3, r3, #24
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80114ee:	4618      	mov	r0, r3
 80114f0:	f002 ff0e 	bl	8014310 <SDMMC_CmdBlockLength>
 80114f4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80114f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00d      	beq.n	8011518 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a08      	ldr	r2, [pc, #32]	@ (8011524 <HAL_SD_GetCardStatus+0x178>)
 8011502:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011508:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2201      	movs	r2, #1
 801150e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8011518:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801151c:	4618      	mov	r0, r3
 801151e:	3750      	adds	r7, #80	@ 0x50
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	1fe00fff 	.word	0x1fe00fff

08011528 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b08d      	sub	sp, #52	@ 0x34
 8011584:	af02      	add	r7, sp, #8
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2203      	movs	r2, #3
 8011594:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801159c:	2b03      	cmp	r3, #3
 801159e:	d02e      	beq.n	80115fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80115a6:	d106      	bne.n	80115b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80115b4:	e029      	b.n	801160a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80115bc:	d10a      	bne.n	80115d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fb64 	bl	8011c8c <SD_WideBus_Enable>
 80115c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	431a      	orrs	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80115d2:	e01a      	b.n	801160a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10a      	bne.n	80115f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fba1 	bl	8011d22 <SD_WideBus_Disable>
 80115e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	431a      	orrs	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80115ee:	e00c      	b.n	801160a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80115fc:	e005      	b.n	801160a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011602:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801160e:	2b00      	cmp	r3, #0
 8011610:	d007      	beq.n	8011622 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	4a5f      	ldr	r2, [pc, #380]	@ (8011794 <HAL_SD_ConfigWideBusOperation+0x214>)
 8011618:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011620:	e096      	b.n	8011750 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011622:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8011626:	f04f 0100 	mov.w	r1, #0
 801162a:	f7fd fa81 	bl	800eb30 <HAL_RCCEx_GetPeriphCLKFreq>
 801162e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	2b00      	cmp	r3, #0
 8011634:	f000 8083 	beq.w	801173e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	691b      	ldr	r3, [r3, #16]
 801164c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	695a      	ldr	r2, [r3, #20]
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	4950      	ldr	r1, [pc, #320]	@ (8011798 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011656:	fba1 1303 	umull	r1, r3, r1, r3
 801165a:	0e1b      	lsrs	r3, r3, #24
 801165c:	429a      	cmp	r2, r3
 801165e:	d303      	bcc.n	8011668 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	695b      	ldr	r3, [r3, #20]
 8011664:	61bb      	str	r3, [r7, #24]
 8011666:	e05a      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801166c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011670:	d103      	bne.n	801167a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	695b      	ldr	r3, [r3, #20]
 8011676:	61bb      	str	r3, [r7, #24]
 8011678:	e051      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801167e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011682:	d126      	bne.n	80116d2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	695b      	ldr	r3, [r3, #20]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10e      	bne.n	80116aa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	4a43      	ldr	r2, [pc, #268]	@ (801179c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d906      	bls.n	80116a2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	4a40      	ldr	r2, [pc, #256]	@ (8011798 <HAL_SD_ConfigWideBusOperation+0x218>)
 8011698:	fba2 2303 	umull	r2, r3, r2, r3
 801169c:	0e5b      	lsrs	r3, r3, #25
 801169e:	61bb      	str	r3, [r7, #24]
 80116a0:	e03d      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	695b      	ldr	r3, [r3, #20]
 80116a6:	61bb      	str	r3, [r7, #24]
 80116a8:	e039      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	695b      	ldr	r3, [r3, #20]
 80116ae:	005b      	lsls	r3, r3, #1
 80116b0:	69fa      	ldr	r2, [r7, #28]
 80116b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116b6:	4a39      	ldr	r2, [pc, #228]	@ (801179c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d906      	bls.n	80116ca <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	4a36      	ldr	r2, [pc, #216]	@ (8011798 <HAL_SD_ConfigWideBusOperation+0x218>)
 80116c0:	fba2 2303 	umull	r2, r3, r2, r3
 80116c4:	0e5b      	lsrs	r3, r3, #25
 80116c6:	61bb      	str	r3, [r7, #24]
 80116c8:	e029      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	695b      	ldr	r3, [r3, #20]
 80116ce:	61bb      	str	r3, [r7, #24]
 80116d0:	e025      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	695b      	ldr	r3, [r3, #20]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d10e      	bne.n	80116f8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	4a30      	ldr	r2, [pc, #192]	@ (80117a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d906      	bls.n	80116f0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	4a2c      	ldr	r2, [pc, #176]	@ (8011798 <HAL_SD_ConfigWideBusOperation+0x218>)
 80116e6:	fba2 2303 	umull	r2, r3, r2, r3
 80116ea:	0e1b      	lsrs	r3, r3, #24
 80116ec:	61bb      	str	r3, [r7, #24]
 80116ee:	e016      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	61bb      	str	r3, [r7, #24]
 80116f6:	e012      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	69fa      	ldr	r2, [r7, #28]
 8011700:	fbb2 f3f3 	udiv	r3, r2, r3
 8011704:	4a26      	ldr	r2, [pc, #152]	@ (80117a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d906      	bls.n	8011718 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	4a22      	ldr	r2, [pc, #136]	@ (8011798 <HAL_SD_ConfigWideBusOperation+0x218>)
 801170e:	fba2 2303 	umull	r2, r3, r2, r3
 8011712:	0e1b      	lsrs	r3, r3, #24
 8011714:	61bb      	str	r3, [r7, #24]
 8011716:	e002      	b.n	801171e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681c      	ldr	r4, [r3, #0]
 8011722:	466a      	mov	r2, sp
 8011724:	f107 0314 	add.w	r3, r7, #20
 8011728:	e893 0003 	ldmia.w	r3, {r0, r1}
 801172c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011730:	f107 0308 	add.w	r3, r7, #8
 8011734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011736:	4620      	mov	r0, r4
 8011738:	f002 fd0c 	bl	8014154 <SDMMC_Init>
 801173c:	e008      	b.n	8011750 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011742:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011758:	4618      	mov	r0, r3
 801175a:	f002 fdd9 	bl	8014310 <SDMMC_CmdBlockLength>
 801175e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011760:	6a3b      	ldr	r3, [r7, #32]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00c      	beq.n	8011780 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a0a      	ldr	r2, [pc, #40]	@ (8011794 <HAL_SD_ConfigWideBusOperation+0x214>)
 801176c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011772:	6a3b      	ldr	r3, [r7, #32]
 8011774:	431a      	orrs	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 801177a:	2301      	movs	r3, #1
 801177c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8011788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801178c:	4618      	mov	r0, r3
 801178e:	372c      	adds	r7, #44	@ 0x2c
 8011790:	46bd      	mov	sp, r7
 8011792:	bd90      	pop	{r4, r7, pc}
 8011794:	1fe00fff 	.word	0x1fe00fff
 8011798:	55e63b89 	.word	0x55e63b89
 801179c:	02faf080 	.word	0x02faf080
 80117a0:	017d7840 	.word	0x017d7840

080117a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80117ac:	2300      	movs	r3, #0
 80117ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80117b0:	f107 030c 	add.w	r3, r7, #12
 80117b4:	4619      	mov	r1, r3
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 fa40 	bl	8011c3c <SD_SendStatus>
 80117bc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d005      	beq.n	80117d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	431a      	orrs	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	0a5b      	lsrs	r3, r3, #9
 80117d4:	f003 030f 	and.w	r3, r3, #15
 80117d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80117da:	693b      	ldr	r3, [r7, #16]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3718      	adds	r7, #24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b090      	sub	sp, #64	@ 0x40
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80117ec:	2300      	movs	r3, #0
 80117ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80117f0:	f7f3 fada 	bl	8004da8 <HAL_GetTick>
 80117f4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f002 fd03 	bl	8014206 <SDMMC_GetPowerState>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d102      	bne.n	801180c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011806:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801180a:	e0b5      	b.n	8011978 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011810:	2b03      	cmp	r3, #3
 8011812:	d02e      	beq.n	8011872 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4618      	mov	r0, r3
 801181a:	f002 ff4e 	bl	80146ba <SDMMC_CmdSendCID>
 801181e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8011820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <SD_InitCard+0x46>
    {
      return errorstate;
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	e0a6      	b.n	8011978 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2100      	movs	r1, #0
 8011830:	4618      	mov	r0, r3
 8011832:	f002 fd2e 	bl	8014292 <SDMMC_GetResponse>
 8011836:	4602      	mov	r2, r0
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2104      	movs	r1, #4
 8011842:	4618      	mov	r0, r3
 8011844:	f002 fd25 	bl	8014292 <SDMMC_GetResponse>
 8011848:	4602      	mov	r2, r0
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2108      	movs	r1, #8
 8011854:	4618      	mov	r0, r3
 8011856:	f002 fd1c 	bl	8014292 <SDMMC_GetResponse>
 801185a:	4602      	mov	r2, r0
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	210c      	movs	r1, #12
 8011866:	4618      	mov	r0, r3
 8011868:	f002 fd13 	bl	8014292 <SDMMC_GetResponse>
 801186c:	4602      	mov	r2, r0
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011876:	2b03      	cmp	r3, #3
 8011878:	d01d      	beq.n	80118b6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801187a:	e019      	b.n	80118b0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f107 020a 	add.w	r2, r7, #10
 8011884:	4611      	mov	r1, r2
 8011886:	4618      	mov	r0, r3
 8011888:	f002 ff56 	bl	8014738 <SDMMC_CmdSetRelAdd>
 801188c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <SD_InitCard+0xb4>
      {
        return errorstate;
 8011894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011896:	e06f      	b.n	8011978 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8011898:	f7f3 fa86 	bl	8004da8 <HAL_GetTick>
 801189c:	4602      	mov	r2, r0
 801189e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d902      	bls.n	80118b0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80118aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80118ae:	e063      	b.n	8011978 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80118b0:	897b      	ldrh	r3, [r7, #10]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d0e2      	beq.n	801187c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118ba:	2b03      	cmp	r3, #3
 80118bc:	d036      	beq.n	801192c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80118be:	897b      	ldrh	r3, [r7, #10]
 80118c0:	461a      	mov	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118ce:	041b      	lsls	r3, r3, #16
 80118d0:	4619      	mov	r1, r3
 80118d2:	4610      	mov	r0, r2
 80118d4:	f002 ff10 	bl	80146f8 <SDMMC_CmdSendCSD>
 80118d8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80118da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <SD_InitCard+0x100>
    {
      return errorstate;
 80118e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e2:	e049      	b.n	8011978 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2100      	movs	r1, #0
 80118ea:	4618      	mov	r0, r3
 80118ec:	f002 fcd1 	bl	8014292 <SDMMC_GetResponse>
 80118f0:	4602      	mov	r2, r0
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2104      	movs	r1, #4
 80118fc:	4618      	mov	r0, r3
 80118fe:	f002 fcc8 	bl	8014292 <SDMMC_GetResponse>
 8011902:	4602      	mov	r2, r0
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2108      	movs	r1, #8
 801190e:	4618      	mov	r0, r3
 8011910:	f002 fcbf 	bl	8014292 <SDMMC_GetResponse>
 8011914:	4602      	mov	r2, r0
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	210c      	movs	r1, #12
 8011920:	4618      	mov	r0, r3
 8011922:	f002 fcb6 	bl	8014292 <SDMMC_GetResponse>
 8011926:	4602      	mov	r2, r0
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2104      	movs	r1, #4
 8011932:	4618      	mov	r0, r3
 8011934:	f002 fcad 	bl	8014292 <SDMMC_GetResponse>
 8011938:	4603      	mov	r3, r0
 801193a:	0d1a      	lsrs	r2, r3, #20
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011940:	f107 030c 	add.w	r3, r7, #12
 8011944:	4619      	mov	r1, r3
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7ff fb8c 	bl	8011064 <HAL_SD_GetCardCSD>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d002      	beq.n	8011958 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011952:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011956:	e00f      	b.n	8011978 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681a      	ldr	r2, [r3, #0]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011960:	041b      	lsls	r3, r3, #16
 8011962:	4619      	mov	r1, r3
 8011964:	4610      	mov	r0, r2
 8011966:	f002 fdbf 	bl	80144e8 <SDMMC_CmdSelDesel>
 801196a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 801196c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <SD_InitCard+0x192>
  {
    return errorstate;
 8011972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011974:	e000      	b.n	8011978 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3740      	adds	r7, #64	@ 0x40
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011988:	2300      	movs	r3, #0
 801198a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801198c:	2300      	movs	r3, #0
 801198e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011990:	2300      	movs	r3, #0
 8011992:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4618      	mov	r0, r3
 801199a:	f002 fdc8 	bl	801452e <SDMMC_CmdGoIdleState>
 801199e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d001      	beq.n	80119aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	e072      	b.n	8011a90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f002 fddb 	bl	801456a <SDMMC_CmdOperCond>
 80119b4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80119bc:	d10d      	bne.n	80119da <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f002 fdb0 	bl	801452e <SDMMC_CmdGoIdleState>
 80119ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d004      	beq.n	80119e0 <SD_PowerON+0x60>
    {
      return errorstate;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	e05a      	b.n	8011a90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2201      	movs	r2, #1
 80119de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d137      	bne.n	8011a58 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2100      	movs	r1, #0
 80119ee:	4618      	mov	r0, r3
 80119f0:	f002 fddb 	bl	80145aa <SDMMC_CmdAppCommand>
 80119f4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d02d      	beq.n	8011a58 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80119fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011a00:	e046      	b.n	8011a90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2100      	movs	r1, #0
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f002 fdce 	bl	80145aa <SDMMC_CmdAppCommand>
 8011a0e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d001      	beq.n	8011a1a <SD_PowerON+0x9a>
    {
      return errorstate;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	e03a      	b.n	8011a90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	491e      	ldr	r1, [pc, #120]	@ (8011a98 <SD_PowerON+0x118>)
 8011a20:	4618      	mov	r0, r3
 8011a22:	f002 fde5 	bl	80145f0 <SDMMC_CmdAppOperCommand>
 8011a26:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d002      	beq.n	8011a34 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011a2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8011a32:	e02d      	b.n	8011a90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2100      	movs	r1, #0
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f002 fc29 	bl	8014292 <SDMMC_GetResponse>
 8011a40:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	0fdb      	lsrs	r3, r3, #31
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d101      	bne.n	8011a4e <SD_PowerON+0xce>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e000      	b.n	8011a50 <SD_PowerON+0xd0>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	613b      	str	r3, [r7, #16]

    count++;
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	3301      	adds	r3, #1
 8011a56:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d802      	bhi.n	8011a68 <SD_PowerON+0xe8>
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d0cc      	beq.n	8011a02 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d902      	bls.n	8011a78 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011a72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011a76:	e00b      	b.n	8011a90 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d002      	beq.n	8011a8e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8011a8e:	2300      	movs	r3, #0
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3718      	adds	r7, #24
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	c1100000 	.word	0xc1100000

08011a9c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b08c      	sub	sp, #48	@ 0x30
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011aa6:	f7f3 f97f 	bl	8004da8 <HAL_GetTick>
 8011aaa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f002 fbeb 	bl	8014292 <SDMMC_GetResponse>
 8011abc:	4603      	mov	r3, r0
 8011abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011ac2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011ac6:	d102      	bne.n	8011ace <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011ac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011acc:	e0b0      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2140      	movs	r1, #64	@ 0x40
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f002 fc1b 	bl	8014310 <SDMMC_CmdBlockLength>
 8011ada:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011adc:	6a3b      	ldr	r3, [r7, #32]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d005      	beq.n	8011aee <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8011aea:	6a3b      	ldr	r3, [r7, #32]
 8011aec:	e0a0      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011af6:	041b      	lsls	r3, r3, #16
 8011af8:	4619      	mov	r1, r3
 8011afa:	4610      	mov	r0, r2
 8011afc:	f002 fd55 	bl	80145aa <SDMMC_CmdAppCommand>
 8011b00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d005      	beq.n	8011b14 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	e08d      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011b14:	f04f 33ff 	mov.w	r3, #4294967295
 8011b18:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8011b1a:	2340      	movs	r3, #64	@ 0x40
 8011b1c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8011b1e:	2360      	movs	r3, #96	@ 0x60
 8011b20:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011b22:	2302      	movs	r3, #2
 8011b24:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011b26:	2300      	movs	r3, #0
 8011b28:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f107 0208 	add.w	r2, r7, #8
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 fbbd 	bl	80142b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f002 fe3d 	bl	80147c2 <SDMMC_CmdStatusRegister>
 8011b48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d02b      	beq.n	8011ba8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	e069      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d013      	beq.n	8011b92 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b6e:	e00d      	b.n	8011b8c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f002 fb17 	bl	80141a8 <SDMMC_ReadFIFO>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7e:	601a      	str	r2, [r3, #0]
        pData++;
 8011b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b82:	3304      	adds	r3, #4
 8011b84:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8011b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b88:	3301      	adds	r3, #1
 8011b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8e:	2b07      	cmp	r3, #7
 8011b90:	d9ee      	bls.n	8011b70 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011b92:	f7f3 f909 	bl	8004da8 <HAL_GetTick>
 8011b96:	4602      	mov	r2, r0
 8011b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba0:	d102      	bne.n	8011ba8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011ba2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011ba6:	e043      	b.n	8011c30 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bae:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d0d2      	beq.n	8011b5c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bbc:	f003 0308 	and.w	r3, r3, #8
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d001      	beq.n	8011bc8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011bc4:	2308      	movs	r3, #8
 8011bc6:	e033      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bce:	f003 0302 	and.w	r3, r3, #2
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d001      	beq.n	8011bda <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011bd6:	2302      	movs	r3, #2
 8011bd8:	e02a      	b.n	8011c30 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011be0:	f003 0320 	and.w	r3, r3, #32
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d017      	beq.n	8011c18 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8011be8:	2320      	movs	r3, #32
 8011bea:	e021      	b.n	8011c30 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f002 fad9 	bl	80141a8 <SDMMC_ReadFIFO>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfa:	601a      	str	r2, [r3, #0]
    pData++;
 8011bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfe:	3304      	adds	r3, #4
 8011c00:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011c02:	f7f3 f8d1 	bl	8004da8 <HAL_GetTick>
 8011c06:	4602      	mov	r2, r0
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c10:	d102      	bne.n	8011c18 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011c12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011c16:	e00b      	b.n	8011c30 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1e2      	bne.n	8011bec <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a03      	ldr	r2, [pc, #12]	@ (8011c38 <SD_SendSDStatus+0x19c>)
 8011c2c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3730      	adds	r7, #48	@ 0x30
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	18000f3a 	.word	0x18000f3a

08011c3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d102      	bne.n	8011c52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011c4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011c50:	e018      	b.n	8011c84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c5a:	041b      	lsls	r3, r3, #16
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	4610      	mov	r0, r2
 8011c60:	f002 fd8c 	bl	801477c <SDMMC_CmdSendStatus>
 8011c64:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	e009      	b.n	8011c84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2100      	movs	r1, #0
 8011c76:	4618      	mov	r0, r3
 8011c78:	f002 fb0b 	bl	8014292 <SDMMC_GetResponse>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3710      	adds	r7, #16
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b086      	sub	sp, #24
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011c94:	2300      	movs	r3, #0
 8011c96:	60fb      	str	r3, [r7, #12]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f002 faf5 	bl	8014292 <SDMMC_GetResponse>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011cb2:	d102      	bne.n	8011cba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011cb8:	e02f      	b.n	8011d1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011cba:	f107 030c 	add.w	r3, r7, #12
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f879 	bl	8011db8 <SD_FindSCR>
 8011cc6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	e023      	b.n	8011d1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d01c      	beq.n	8011d16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ce4:	041b      	lsls	r3, r3, #16
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	4610      	mov	r0, r2
 8011cea:	f002 fc5e 	bl	80145aa <SDMMC_CmdAppCommand>
 8011cee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d001      	beq.n	8011cfa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	e00f      	b.n	8011d1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2102      	movs	r1, #2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f002 fc95 	bl	8014630 <SDMMC_CmdBusWidth>
 8011d06:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	e003      	b.n	8011d1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011d12:	2300      	movs	r3, #0
 8011d14:	e001      	b.n	8011d1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011d16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3718      	adds	r7, #24
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b086      	sub	sp, #24
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	2100      	movs	r1, #0
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f002 faaa 	bl	8014292 <SDMMC_GetResponse>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011d48:	d102      	bne.n	8011d50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011d4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011d4e:	e02f      	b.n	8011db0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011d50:	f107 030c 	add.w	r3, r7, #12
 8011d54:	4619      	mov	r1, r3
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f82e 	bl	8011db8 <SD_FindSCR>
 8011d5c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	e023      	b.n	8011db0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d01c      	beq.n	8011dac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d7a:	041b      	lsls	r3, r3, #16
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4610      	mov	r0, r2
 8011d80:	f002 fc13 	bl	80145aa <SDMMC_CmdAppCommand>
 8011d84:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d001      	beq.n	8011d90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	e00f      	b.n	8011db0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2100      	movs	r1, #0
 8011d96:	4618      	mov	r0, r3
 8011d98:	f002 fc4a 	bl	8014630 <SDMMC_CmdBusWidth>
 8011d9c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d001      	beq.n	8011da8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	e003      	b.n	8011db0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011da8:	2300      	movs	r3, #0
 8011daa:	e001      	b.n	8011db0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011dac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b08e      	sub	sp, #56	@ 0x38
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011dc2:	f7f2 fff1 	bl	8004da8 <HAL_GetTick>
 8011dc6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8011dcc:	2300      	movs	r3, #0
 8011dce:	60bb      	str	r3, [r7, #8]
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2108      	movs	r1, #8
 8011dde:	4618      	mov	r0, r3
 8011de0:	f002 fa96 	bl	8014310 <SDMMC_CmdBlockLength>
 8011de4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d001      	beq.n	8011df0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dee:	e0ad      	b.n	8011f4c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011df8:	041b      	lsls	r3, r3, #16
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	f002 fbd4 	bl	80145aa <SDMMC_CmdAppCommand>
 8011e02:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d001      	beq.n	8011e0e <SD_FindSCR+0x56>
  {
    return errorstate;
 8011e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e0c:	e09e      	b.n	8011f4c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011e14:	2308      	movs	r3, #8
 8011e16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011e18:	2330      	movs	r3, #48	@ 0x30
 8011e1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011e20:	2300      	movs	r3, #0
 8011e22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011e24:	2301      	movs	r3, #1
 8011e26:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f107 0210 	add.w	r2, r7, #16
 8011e30:	4611      	mov	r1, r2
 8011e32:	4618      	mov	r0, r3
 8011e34:	f002 fa40 	bl	80142b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f002 fc1a 	bl	8014676 <SDMMC_CmdSendSCR>
 8011e42:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d027      	beq.n	8011e9a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e4c:	e07e      	b.n	8011f4c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d113      	bne.n	8011e84 <SD_FindSCR+0xcc>
 8011e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d110      	bne.n	8011e84 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	4618      	mov	r0, r3
 8011e68:	f002 f99e 	bl	80141a8 <SDMMC_ReadFIFO>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f002 f997 	bl	80141a8 <SDMMC_ReadFIFO>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	60fb      	str	r3, [r7, #12]
      index++;
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e80:	3301      	adds	r3, #1
 8011e82:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011e84:	f7f2 ff90 	bl	8004da8 <HAL_GetTick>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e92:	d102      	bne.n	8011e9a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011e94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011e98:	e058      	b.n	8011f4c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ea0:	f240 532a 	movw	r3, #1322	@ 0x52a
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d0d1      	beq.n	8011e4e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011eb0:	f003 0308 	and.w	r3, r3, #8
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d005      	beq.n	8011ec4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2208      	movs	r2, #8
 8011ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011ec0:	2308      	movs	r3, #8
 8011ec2:	e043      	b.n	8011f4c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011eca:	f003 0302 	and.w	r3, r3, #2
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d005      	beq.n	8011ede <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011eda:	2302      	movs	r3, #2
 8011edc:	e036      	b.n	8011f4c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ee4:	f003 0320 	and.w	r3, r3, #32
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d005      	beq.n	8011ef8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2220      	movs	r2, #32
 8011ef2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011ef4:	2320      	movs	r3, #32
 8011ef6:	e029      	b.n	8011f4c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a15      	ldr	r2, [pc, #84]	@ (8011f54 <SD_FindSCR+0x19c>)
 8011efe:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	061a      	lsls	r2, r3, #24
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	021b      	lsls	r3, r3, #8
 8011f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	0a1b      	lsrs	r3, r3, #8
 8011f12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011f16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	0e1b      	lsrs	r3, r3, #24
 8011f1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f20:	601a      	str	r2, [r3, #0]
    scr++;
 8011f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f24:	3304      	adds	r3, #4
 8011f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	061a      	lsls	r2, r3, #24
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	021b      	lsls	r3, r3, #8
 8011f30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	0a1b      	lsrs	r3, r3, #8
 8011f3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011f3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	0e1b      	lsrs	r3, r3, #24
 8011f44:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f48:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3738      	adds	r7, #56	@ 0x38
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	18000f3a 	.word	0x18000f3a

08011f58 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b086      	sub	sp, #24
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f64:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f6a:	2b1f      	cmp	r3, #31
 8011f6c:	d936      	bls.n	8011fdc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8011f6e:	2300      	movs	r3, #0
 8011f70:	617b      	str	r3, [r7, #20]
 8011f72:	e027      	b.n	8011fc4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f002 f915 	bl	80141a8 <SDMMC_ReadFIFO>
 8011f7e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	b2da      	uxtb	r2, r3
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	0a1b      	lsrs	r3, r3, #8
 8011f92:	b2da      	uxtb	r2, r3
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	0c1b      	lsrs	r3, r3, #16
 8011fa2:	b2da      	uxtb	r2, r3
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	3301      	adds	r3, #1
 8011fac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	0e1b      	lsrs	r3, r3, #24
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	617b      	str	r3, [r7, #20]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2b07      	cmp	r3, #7
 8011fc8:	d9d4      	bls.n	8011f74 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	693a      	ldr	r2, [r7, #16]
 8011fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fd4:	f1a3 0220 	sub.w	r2, r3, #32
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8011fdc:	bf00      	nop
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	69db      	ldr	r3, [r3, #28]
 8011ff0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6a1b      	ldr	r3, [r3, #32]
 8011ff6:	2b1f      	cmp	r3, #31
 8011ff8:	d93a      	bls.n	8012070 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	617b      	str	r3, [r7, #20]
 8011ffe:	e02b      	b.n	8012058 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	60fb      	str	r3, [r7, #12]
      tmp++;
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	3301      	adds	r3, #1
 801200a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	021a      	lsls	r2, r3, #8
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	4313      	orrs	r3, r2
 8012016:	60fb      	str	r3, [r7, #12]
      tmp++;
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	3301      	adds	r3, #1
 801201c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	041a      	lsls	r2, r3, #16
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	4313      	orrs	r3, r2
 8012028:	60fb      	str	r3, [r7, #12]
      tmp++;
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	3301      	adds	r3, #1
 801202e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	061a      	lsls	r2, r3, #24
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	4313      	orrs	r3, r2
 801203a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	3301      	adds	r3, #1
 8012040:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f107 020c 	add.w	r2, r7, #12
 801204a:	4611      	mov	r1, r2
 801204c:	4618      	mov	r0, r3
 801204e:	f002 f8b8 	bl	80141c2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	3301      	adds	r3, #1
 8012056:	617b      	str	r3, [r7, #20]
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2b07      	cmp	r3, #7
 801205c:	d9d0      	bls.n	8012000 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	693a      	ldr	r2, [r7, #16]
 8012062:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6a1b      	ldr	r3, [r3, #32]
 8012068:	f1a3 0220 	sub.w	r2, r3, #32
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	621a      	str	r2, [r3, #32]
  }
}
 8012070:	bf00      	nop
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8012080:	bf00      	nop
 8012082:	370c      	adds	r7, #12
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8012094:	bf00      	nop
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80120a8:	bf00      	nop
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr

080120b4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80120bc:	bf00      	nop
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d101      	bne.n	80120dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80120d8:	2301      	movs	r3, #1
 80120da:	e03c      	b.n	8012156 <HAL_SDRAM_Init+0x8e>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d117      	bne.n	8012118 <HAL_SDRAM_Init+0x50>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    if (hsdram->MspInitCallback == NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d102      	bne.n	80120fe <HAL_SDRAM_Init+0x36>
    {
      hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	4a19      	ldr	r2, [pc, #100]	@ (8012160 <HAL_SDRAM_Init+0x98>)
 80120fc:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4a18      	ldr	r2, [pc, #96]	@ (8012164 <HAL_SDRAM_Init+0x9c>)
 8012102:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4a18      	ldr	r2, [pc, #96]	@ (8012168 <HAL_SDRAM_Init+0xa0>)
 8012108:	641a      	str	r2, [r3, #64]	@ 0x40
    hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4a17      	ldr	r2, [pc, #92]	@ (801216c <HAL_SDRAM_Init+0xa4>)
 801210e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	4798      	blx	r3
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2202      	movs	r2, #2
 801211c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3304      	adds	r3, #4
 8012128:	4619      	mov	r1, r3
 801212a:	4610      	mov	r0, r2
 801212c:	f001 ff10 	bl	8013f50 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6818      	ldr	r0, [r3, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	461a      	mov	r2, r3
 801213a:	6839      	ldr	r1, [r7, #0]
 801213c:	f001 ff64 	bl	8014008 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8012140:	4b0b      	ldr	r3, [pc, #44]	@ (8012170 <HAL_SDRAM_Init+0xa8>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4a0a      	ldr	r2, [pc, #40]	@ (8012170 <HAL_SDRAM_Init+0xa8>)
 8012146:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801214a:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	08000c89 	.word	0x08000c89
 8012164:	08012175 	.word	0x08012175
 8012168:	08012189 	.word	0x08012189
 801216c:	0801219d 	.word	0x0801219d
 8012170:	52004000 	.word	0x52004000

08012174 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 801217c:	bf00      	nop
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <HAL_SDRAM_DMA_XferCpltCallback>:
  * @param  hmdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  UNUSED(hmdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferCpltCallback could be implemented in the user file
   */
}
 8012190:	bf00      	nop
 8012192:	370c      	adds	r7, #12
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <HAL_SDRAM_DMA_XferErrorCallback>:
  * @brief  DMA transfer complete error callback.
  * @param  hmdma DMA handle
  * @retval None
  */
__weak void HAL_SDRAM_DMA_XferErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  UNUSED(hmdma);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
   */
}
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80121c2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80121c4:	7dfb      	ldrb	r3, [r7, #23]
 80121c6:	2b02      	cmp	r3, #2
 80121c8:	d101      	bne.n	80121ce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80121ca:	2302      	movs	r3, #2
 80121cc:	e021      	b.n	8012212 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80121ce:	7dfb      	ldrb	r3, [r7, #23]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d002      	beq.n	80121da <HAL_SDRAM_SendCommand+0x2a>
 80121d4:	7dfb      	ldrb	r3, [r7, #23]
 80121d6:	2b05      	cmp	r3, #5
 80121d8:	d118      	bne.n	801220c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2202      	movs	r2, #2
 80121de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	68b9      	ldr	r1, [r7, #8]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f001 ff76 	bl	80140dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d104      	bne.n	8012202 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2205      	movs	r2, #5
 80121fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012200:	e006      	b.n	8012210 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801220a:	e001      	b.n	8012210 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801220c:	2301      	movs	r3, #1
 801220e:	e000      	b.n	8012212 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3718      	adds	r7, #24
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b082      	sub	sp, #8
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801222a:	b2db      	uxtb	r3, r3
 801222c:	2b02      	cmp	r3, #2
 801222e:	d101      	bne.n	8012234 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8012230:	2302      	movs	r3, #2
 8012232:	e016      	b.n	8012262 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801223a:	b2db      	uxtb	r3, r3
 801223c:	2b01      	cmp	r3, #1
 801223e:	d10f      	bne.n	8012260 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2202      	movs	r2, #2
 8012244:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	4618      	mov	r0, r3
 8012250:	f001 ff68 	bl	8014124 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2201      	movs	r2, #1
 8012258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801225c:	2300      	movs	r3, #0
 801225e:	e000      	b.n	8012262 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8012260:	2301      	movs	r3, #1
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d101      	bne.n	801227e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801227a:	2301      	movs	r3, #1
 801227c:	e054      	b.n	8012328 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b00      	cmp	r3, #0
 8012288:	d111      	bne.n	80122ae <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2200      	movs	r2, #0
 801228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f001 fcca 	bl	8013c2c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4a23      	ldr	r2, [pc, #140]	@ (8012330 <HAL_TIM_Base_Init+0xc4>)
 80122a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2202      	movs	r2, #2
 80122b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	3304      	adds	r3, #4
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f000 ff89 	bl	80131d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2201      	movs	r2, #1
 80122d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2201      	movs	r2, #1
 80122e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2201      	movs	r2, #1
 80122ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2201      	movs	r2, #1
 80122f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2201      	movs	r2, #1
 8012302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2201      	movs	r2, #1
 801230a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2201      	movs	r2, #1
 8012312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2201      	movs	r2, #1
 801231a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2201      	movs	r2, #1
 8012322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	08004905 	.word	0x08004905

08012334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012342:	b2db      	uxtb	r3, r3
 8012344:	2b01      	cmp	r3, #1
 8012346:	d001      	beq.n	801234c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	e04c      	b.n	80123e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2202      	movs	r2, #2
 8012350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	4a26      	ldr	r2, [pc, #152]	@ (80123f4 <HAL_TIM_Base_Start+0xc0>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d022      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012366:	d01d      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4a22      	ldr	r2, [pc, #136]	@ (80123f8 <HAL_TIM_Base_Start+0xc4>)
 801236e:	4293      	cmp	r3, r2
 8012370:	d018      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a21      	ldr	r2, [pc, #132]	@ (80123fc <HAL_TIM_Base_Start+0xc8>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d013      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a1f      	ldr	r2, [pc, #124]	@ (8012400 <HAL_TIM_Base_Start+0xcc>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d00e      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a1e      	ldr	r2, [pc, #120]	@ (8012404 <HAL_TIM_Base_Start+0xd0>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d009      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a1c      	ldr	r2, [pc, #112]	@ (8012408 <HAL_TIM_Base_Start+0xd4>)
 8012396:	4293      	cmp	r3, r2
 8012398:	d004      	beq.n	80123a4 <HAL_TIM_Base_Start+0x70>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a1b      	ldr	r2, [pc, #108]	@ (801240c <HAL_TIM_Base_Start+0xd8>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d115      	bne.n	80123d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	689a      	ldr	r2, [r3, #8]
 80123aa:	4b19      	ldr	r3, [pc, #100]	@ (8012410 <HAL_TIM_Base_Start+0xdc>)
 80123ac:	4013      	ands	r3, r2
 80123ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2b06      	cmp	r3, #6
 80123b4:	d015      	beq.n	80123e2 <HAL_TIM_Base_Start+0xae>
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123bc:	d011      	beq.n	80123e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f042 0201 	orr.w	r2, r2, #1
 80123cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123ce:	e008      	b.n	80123e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f042 0201 	orr.w	r2, r2, #1
 80123de:	601a      	str	r2, [r3, #0]
 80123e0:	e000      	b.n	80123e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	40010000 	.word	0x40010000
 80123f8:	40000400 	.word	0x40000400
 80123fc:	40000800 	.word	0x40000800
 8012400:	40000c00 	.word	0x40000c00
 8012404:	40010400 	.word	0x40010400
 8012408:	40001800 	.word	0x40001800
 801240c:	40014000 	.word	0x40014000
 8012410:	00010007 	.word	0x00010007

08012414 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012414:	b480      	push	{r7}
 8012416:	b083      	sub	sp, #12
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	6a1a      	ldr	r2, [r3, #32]
 8012422:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012426:	4013      	ands	r3, r2
 8012428:	2b00      	cmp	r3, #0
 801242a:	d10f      	bne.n	801244c <HAL_TIM_Base_Stop+0x38>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	6a1a      	ldr	r2, [r3, #32]
 8012432:	f240 4344 	movw	r3, #1092	@ 0x444
 8012436:	4013      	ands	r3, r2
 8012438:	2b00      	cmp	r3, #0
 801243a:	d107      	bne.n	801244c <HAL_TIM_Base_Stop+0x38>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f022 0201 	bic.w	r2, r2, #1
 801244a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	370c      	adds	r7, #12
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr
	...

08012464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b01      	cmp	r3, #1
 8012476:	d001      	beq.n	801247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012478:	2301      	movs	r3, #1
 801247a:	e054      	b.n	8012526 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2202      	movs	r2, #2
 8012480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	68da      	ldr	r2, [r3, #12]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f042 0201 	orr.w	r2, r2, #1
 8012492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4a26      	ldr	r2, [pc, #152]	@ (8012534 <HAL_TIM_Base_Start_IT+0xd0>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d022      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80124a6:	d01d      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4a22      	ldr	r2, [pc, #136]	@ (8012538 <HAL_TIM_Base_Start_IT+0xd4>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d018      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4a21      	ldr	r2, [pc, #132]	@ (801253c <HAL_TIM_Base_Start_IT+0xd8>)
 80124b8:	4293      	cmp	r3, r2
 80124ba:	d013      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	4a1f      	ldr	r2, [pc, #124]	@ (8012540 <HAL_TIM_Base_Start_IT+0xdc>)
 80124c2:	4293      	cmp	r3, r2
 80124c4:	d00e      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4a1e      	ldr	r2, [pc, #120]	@ (8012544 <HAL_TIM_Base_Start_IT+0xe0>)
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d009      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4a1c      	ldr	r2, [pc, #112]	@ (8012548 <HAL_TIM_Base_Start_IT+0xe4>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d004      	beq.n	80124e4 <HAL_TIM_Base_Start_IT+0x80>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	4a1b      	ldr	r2, [pc, #108]	@ (801254c <HAL_TIM_Base_Start_IT+0xe8>)
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d115      	bne.n	8012510 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	689a      	ldr	r2, [r3, #8]
 80124ea:	4b19      	ldr	r3, [pc, #100]	@ (8012550 <HAL_TIM_Base_Start_IT+0xec>)
 80124ec:	4013      	ands	r3, r2
 80124ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2b06      	cmp	r3, #6
 80124f4:	d015      	beq.n	8012522 <HAL_TIM_Base_Start_IT+0xbe>
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124fc:	d011      	beq.n	8012522 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f042 0201 	orr.w	r2, r2, #1
 801250c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801250e:	e008      	b.n	8012522 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	f042 0201 	orr.w	r2, r2, #1
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	e000      	b.n	8012524 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	40010000 	.word	0x40010000
 8012538:	40000400 	.word	0x40000400
 801253c:	40000800 	.word	0x40000800
 8012540:	40000c00 	.word	0x40000c00
 8012544:	40010400 	.word	0x40010400
 8012548:	40001800 	.word	0x40001800
 801254c:	40014000 	.word	0x40014000
 8012550:	00010007 	.word	0x00010007

08012554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d101      	bne.n	8012566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	e054      	b.n	8012610 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801256c:	b2db      	uxtb	r3, r3
 801256e:	2b00      	cmp	r3, #0
 8012570:	d111      	bne.n	8012596 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 fb56 	bl	8013c2c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012584:	2b00      	cmp	r3, #0
 8012586:	d102      	bne.n	801258e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	4a23      	ldr	r2, [pc, #140]	@ (8012618 <HAL_TIM_PWM_Init+0xc4>)
 801258c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2202      	movs	r2, #2
 801259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	3304      	adds	r3, #4
 80125a6:	4619      	mov	r1, r3
 80125a8:	4610      	mov	r0, r2
 80125aa:	f000 fe15 	bl	80131d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2201      	movs	r2, #1
 80125ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2201      	movs	r2, #1
 80125c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2201      	movs	r2, #1
 80125ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2201      	movs	r2, #1
 80125d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2201      	movs	r2, #1
 80125da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2201      	movs	r2, #1
 80125e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2201      	movs	r2, #1
 80125ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2201      	movs	r2, #1
 80125f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2201      	movs	r2, #1
 80125fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2201      	movs	r2, #1
 8012602:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2201      	movs	r2, #1
 801260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801260e:	2300      	movs	r3, #0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	0801261d 	.word	0x0801261d

0801261c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012624:	bf00      	nop
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d109      	bne.n	8012654 <HAL_TIM_PWM_Start+0x24>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012646:	b2db      	uxtb	r3, r3
 8012648:	2b01      	cmp	r3, #1
 801264a:	bf14      	ite	ne
 801264c:	2301      	movne	r3, #1
 801264e:	2300      	moveq	r3, #0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	e03c      	b.n	80126ce <HAL_TIM_PWM_Start+0x9e>
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	2b04      	cmp	r3, #4
 8012658:	d109      	bne.n	801266e <HAL_TIM_PWM_Start+0x3e>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012660:	b2db      	uxtb	r3, r3
 8012662:	2b01      	cmp	r3, #1
 8012664:	bf14      	ite	ne
 8012666:	2301      	movne	r3, #1
 8012668:	2300      	moveq	r3, #0
 801266a:	b2db      	uxtb	r3, r3
 801266c:	e02f      	b.n	80126ce <HAL_TIM_PWM_Start+0x9e>
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2b08      	cmp	r3, #8
 8012672:	d109      	bne.n	8012688 <HAL_TIM_PWM_Start+0x58>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801267a:	b2db      	uxtb	r3, r3
 801267c:	2b01      	cmp	r3, #1
 801267e:	bf14      	ite	ne
 8012680:	2301      	movne	r3, #1
 8012682:	2300      	moveq	r3, #0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	e022      	b.n	80126ce <HAL_TIM_PWM_Start+0x9e>
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b0c      	cmp	r3, #12
 801268c:	d109      	bne.n	80126a2 <HAL_TIM_PWM_Start+0x72>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012694:	b2db      	uxtb	r3, r3
 8012696:	2b01      	cmp	r3, #1
 8012698:	bf14      	ite	ne
 801269a:	2301      	movne	r3, #1
 801269c:	2300      	moveq	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	e015      	b.n	80126ce <HAL_TIM_PWM_Start+0x9e>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	2b10      	cmp	r3, #16
 80126a6:	d109      	bne.n	80126bc <HAL_TIM_PWM_Start+0x8c>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	bf14      	ite	ne
 80126b4:	2301      	movne	r3, #1
 80126b6:	2300      	moveq	r3, #0
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	e008      	b.n	80126ce <HAL_TIM_PWM_Start+0x9e>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	bf14      	ite	ne
 80126c8:	2301      	movne	r3, #1
 80126ca:	2300      	moveq	r3, #0
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80126d2:	2301      	movs	r3, #1
 80126d4:	e0a1      	b.n	801281a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d104      	bne.n	80126e6 <HAL_TIM_PWM_Start+0xb6>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2202      	movs	r2, #2
 80126e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80126e4:	e023      	b.n	801272e <HAL_TIM_PWM_Start+0xfe>
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	2b04      	cmp	r3, #4
 80126ea:	d104      	bne.n	80126f6 <HAL_TIM_PWM_Start+0xc6>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2202      	movs	r2, #2
 80126f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80126f4:	e01b      	b.n	801272e <HAL_TIM_PWM_Start+0xfe>
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	2b08      	cmp	r3, #8
 80126fa:	d104      	bne.n	8012706 <HAL_TIM_PWM_Start+0xd6>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2202      	movs	r2, #2
 8012700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012704:	e013      	b.n	801272e <HAL_TIM_PWM_Start+0xfe>
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	2b0c      	cmp	r3, #12
 801270a:	d104      	bne.n	8012716 <HAL_TIM_PWM_Start+0xe6>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2202      	movs	r2, #2
 8012710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012714:	e00b      	b.n	801272e <HAL_TIM_PWM_Start+0xfe>
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	2b10      	cmp	r3, #16
 801271a:	d104      	bne.n	8012726 <HAL_TIM_PWM_Start+0xf6>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2202      	movs	r2, #2
 8012720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012724:	e003      	b.n	801272e <HAL_TIM_PWM_Start+0xfe>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2202      	movs	r2, #2
 801272a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2201      	movs	r2, #1
 8012734:	6839      	ldr	r1, [r7, #0]
 8012736:	4618      	mov	r0, r3
 8012738:	f001 fa52 	bl	8013be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4a38      	ldr	r2, [pc, #224]	@ (8012824 <HAL_TIM_PWM_Start+0x1f4>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d013      	beq.n	801276e <HAL_TIM_PWM_Start+0x13e>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4a37      	ldr	r2, [pc, #220]	@ (8012828 <HAL_TIM_PWM_Start+0x1f8>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d00e      	beq.n	801276e <HAL_TIM_PWM_Start+0x13e>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4a35      	ldr	r2, [pc, #212]	@ (801282c <HAL_TIM_PWM_Start+0x1fc>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d009      	beq.n	801276e <HAL_TIM_PWM_Start+0x13e>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4a34      	ldr	r2, [pc, #208]	@ (8012830 <HAL_TIM_PWM_Start+0x200>)
 8012760:	4293      	cmp	r3, r2
 8012762:	d004      	beq.n	801276e <HAL_TIM_PWM_Start+0x13e>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4a32      	ldr	r2, [pc, #200]	@ (8012834 <HAL_TIM_PWM_Start+0x204>)
 801276a:	4293      	cmp	r3, r2
 801276c:	d101      	bne.n	8012772 <HAL_TIM_PWM_Start+0x142>
 801276e:	2301      	movs	r3, #1
 8012770:	e000      	b.n	8012774 <HAL_TIM_PWM_Start+0x144>
 8012772:	2300      	movs	r3, #0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d007      	beq.n	8012788 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012786:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a25      	ldr	r2, [pc, #148]	@ (8012824 <HAL_TIM_PWM_Start+0x1f4>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d022      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801279a:	d01d      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a25      	ldr	r2, [pc, #148]	@ (8012838 <HAL_TIM_PWM_Start+0x208>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d018      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a24      	ldr	r2, [pc, #144]	@ (801283c <HAL_TIM_PWM_Start+0x20c>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d013      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4a22      	ldr	r2, [pc, #136]	@ (8012840 <HAL_TIM_PWM_Start+0x210>)
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d00e      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4a1a      	ldr	r2, [pc, #104]	@ (8012828 <HAL_TIM_PWM_Start+0x1f8>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d009      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a1e      	ldr	r2, [pc, #120]	@ (8012844 <HAL_TIM_PWM_Start+0x214>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d004      	beq.n	80127d8 <HAL_TIM_PWM_Start+0x1a8>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	4a16      	ldr	r2, [pc, #88]	@ (801282c <HAL_TIM_PWM_Start+0x1fc>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d115      	bne.n	8012804 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	689a      	ldr	r2, [r3, #8]
 80127de:	4b1a      	ldr	r3, [pc, #104]	@ (8012848 <HAL_TIM_PWM_Start+0x218>)
 80127e0:	4013      	ands	r3, r2
 80127e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b06      	cmp	r3, #6
 80127e8:	d015      	beq.n	8012816 <HAL_TIM_PWM_Start+0x1e6>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127f0:	d011      	beq.n	8012816 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f042 0201 	orr.w	r2, r2, #1
 8012800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012802:	e008      	b.n	8012816 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f042 0201 	orr.w	r2, r2, #1
 8012812:	601a      	str	r2, [r3, #0]
 8012814:	e000      	b.n	8012818 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	40010000 	.word	0x40010000
 8012828:	40010400 	.word	0x40010400
 801282c:	40014000 	.word	0x40014000
 8012830:	40014400 	.word	0x40014400
 8012834:	40014800 	.word	0x40014800
 8012838:	40000400 	.word	0x40000400
 801283c:	40000800 	.word	0x40000800
 8012840:	40000c00 	.word	0x40000c00
 8012844:	40001800 	.word	0x40001800
 8012848:	00010007 	.word	0x00010007

0801284c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2200      	movs	r2, #0
 801285c:	6839      	ldr	r1, [r7, #0]
 801285e:	4618      	mov	r0, r3
 8012860:	f001 f9be 	bl	8013be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4a3e      	ldr	r2, [pc, #248]	@ (8012964 <HAL_TIM_PWM_Stop+0x118>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d013      	beq.n	8012896 <HAL_TIM_PWM_Stop+0x4a>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4a3d      	ldr	r2, [pc, #244]	@ (8012968 <HAL_TIM_PWM_Stop+0x11c>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d00e      	beq.n	8012896 <HAL_TIM_PWM_Stop+0x4a>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4a3b      	ldr	r2, [pc, #236]	@ (801296c <HAL_TIM_PWM_Stop+0x120>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d009      	beq.n	8012896 <HAL_TIM_PWM_Stop+0x4a>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4a3a      	ldr	r2, [pc, #232]	@ (8012970 <HAL_TIM_PWM_Stop+0x124>)
 8012888:	4293      	cmp	r3, r2
 801288a:	d004      	beq.n	8012896 <HAL_TIM_PWM_Stop+0x4a>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a38      	ldr	r2, [pc, #224]	@ (8012974 <HAL_TIM_PWM_Stop+0x128>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d101      	bne.n	801289a <HAL_TIM_PWM_Stop+0x4e>
 8012896:	2301      	movs	r3, #1
 8012898:	e000      	b.n	801289c <HAL_TIM_PWM_Stop+0x50>
 801289a:	2300      	movs	r3, #0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d017      	beq.n	80128d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	6a1a      	ldr	r2, [r3, #32]
 80128a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80128aa:	4013      	ands	r3, r2
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d10f      	bne.n	80128d0 <HAL_TIM_PWM_Stop+0x84>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	6a1a      	ldr	r2, [r3, #32]
 80128b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80128ba:	4013      	ands	r3, r2
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d107      	bne.n	80128d0 <HAL_TIM_PWM_Stop+0x84>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80128ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	6a1a      	ldr	r2, [r3, #32]
 80128d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80128da:	4013      	ands	r3, r2
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d10f      	bne.n	8012900 <HAL_TIM_PWM_Stop+0xb4>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	6a1a      	ldr	r2, [r3, #32]
 80128e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80128ea:	4013      	ands	r3, r2
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d107      	bne.n	8012900 <HAL_TIM_PWM_Stop+0xb4>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f022 0201 	bic.w	r2, r2, #1
 80128fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d104      	bne.n	8012910 <HAL_TIM_PWM_Stop+0xc4>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2201      	movs	r2, #1
 801290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801290e:	e023      	b.n	8012958 <HAL_TIM_PWM_Stop+0x10c>
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	2b04      	cmp	r3, #4
 8012914:	d104      	bne.n	8012920 <HAL_TIM_PWM_Stop+0xd4>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2201      	movs	r2, #1
 801291a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801291e:	e01b      	b.n	8012958 <HAL_TIM_PWM_Stop+0x10c>
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b08      	cmp	r3, #8
 8012924:	d104      	bne.n	8012930 <HAL_TIM_PWM_Stop+0xe4>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2201      	movs	r2, #1
 801292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801292e:	e013      	b.n	8012958 <HAL_TIM_PWM_Stop+0x10c>
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2b0c      	cmp	r3, #12
 8012934:	d104      	bne.n	8012940 <HAL_TIM_PWM_Stop+0xf4>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2201      	movs	r2, #1
 801293a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801293e:	e00b      	b.n	8012958 <HAL_TIM_PWM_Stop+0x10c>
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	2b10      	cmp	r3, #16
 8012944:	d104      	bne.n	8012950 <HAL_TIM_PWM_Stop+0x104>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2201      	movs	r2, #1
 801294a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801294e:	e003      	b.n	8012958 <HAL_TIM_PWM_Stop+0x10c>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	40010000 	.word	0x40010000
 8012968:	40010400 	.word	0x40010400
 801296c:	40014000 	.word	0x40014000
 8012970:	40014400 	.word	0x40014400
 8012974:	40014800 	.word	0x40014800

08012978 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d101      	bne.n	801298c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8012988:	2301      	movs	r3, #1
 801298a:	e04c      	b.n	8012a26 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012992:	b2db      	uxtb	r3, r3
 8012994:	2b00      	cmp	r3, #0
 8012996:	d111      	bne.n	80129bc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f001 f943 	bl	8013c2c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d102      	bne.n	80129b4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4a1f      	ldr	r2, [pc, #124]	@ (8012a30 <HAL_TIM_OnePulse_Init+0xb8>)
 80129b2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2202      	movs	r2, #2
 80129c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	3304      	adds	r3, #4
 80129cc:	4619      	mov	r1, r3
 80129ce:	4610      	mov	r0, r2
 80129d0:	f000 fc02 	bl	80131d8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f022 0208 	bic.w	r2, r2, #8
 80129e2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	6819      	ldr	r1, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	430a      	orrs	r2, r1
 80129f2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2201      	movs	r2, #1
 80129f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2201      	movs	r2, #1
 8012a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2201      	movs	r2, #1
 8012a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2201      	movs	r2, #1
 8012a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2201      	movs	r2, #1
 8012a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012a24:	2300      	movs	r3, #0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	08012a35 	.word	0x08012a35

08012a34 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8012a3c:	bf00      	nop
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	691b      	ldr	r3, [r3, #16]
 8012a5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	f003 0302 	and.w	r3, r3, #2
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d026      	beq.n	8012ab8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	f003 0302 	and.w	r3, r3, #2
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d021      	beq.n	8012ab8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f06f 0202 	mvn.w	r2, #2
 8012a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2201      	movs	r2, #1
 8012a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	699b      	ldr	r3, [r3, #24]
 8012a8a:	f003 0303 	and.w	r3, r3, #3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d005      	beq.n	8012a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	4798      	blx	r3
 8012a9c:	e009      	b.n	8012ab2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	f003 0304 	and.w	r3, r3, #4
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d026      	beq.n	8012b10 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f003 0304 	and.w	r3, r3, #4
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d021      	beq.n	8012b10 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f06f 0204 	mvn.w	r2, #4
 8012ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2202      	movs	r2, #2
 8012ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	699b      	ldr	r3, [r3, #24]
 8012ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d005      	beq.n	8012af6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	4798      	blx	r3
 8012af4:	e009      	b.n	8012b0a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	f003 0308 	and.w	r3, r3, #8
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d026      	beq.n	8012b68 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	f003 0308 	and.w	r3, r3, #8
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d021      	beq.n	8012b68 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f06f 0208 	mvn.w	r2, #8
 8012b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2204      	movs	r2, #4
 8012b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	69db      	ldr	r3, [r3, #28]
 8012b3a:	f003 0303 	and.w	r3, r3, #3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d005      	beq.n	8012b4e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	4798      	blx	r3
 8012b4c:	e009      	b.n	8012b62 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	f003 0310 	and.w	r3, r3, #16
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d026      	beq.n	8012bc0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f003 0310 	and.w	r3, r3, #16
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d021      	beq.n	8012bc0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f06f 0210 	mvn.w	r2, #16
 8012b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2208      	movs	r2, #8
 8012b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	69db      	ldr	r3, [r3, #28]
 8012b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d005      	beq.n	8012ba6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	4798      	blx	r3
 8012ba4:	e009      	b.n	8012bba <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	f003 0301 	and.w	r3, r3, #1
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00e      	beq.n	8012be8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f003 0301 	and.w	r3, r3, #1
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d009      	beq.n	8012be8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f06f 0201 	mvn.w	r2, #1
 8012bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d104      	bne.n	8012bfc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d00e      	beq.n	8012c1a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d009      	beq.n	8012c1a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00e      	beq.n	8012c42 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d009      	beq.n	8012c42 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00e      	beq.n	8012c6a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d009      	beq.n	8012c6a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	f003 0320 	and.w	r3, r3, #32
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d00e      	beq.n	8012c92 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f003 0320 	and.w	r3, r3, #32
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d009      	beq.n	8012c92 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f06f 0220 	mvn.w	r2, #32
 8012c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012c92:	bf00      	nop
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
	...

08012c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d101      	bne.n	8012cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012cb6:	2302      	movs	r3, #2
 8012cb8:	e0ff      	b.n	8012eba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2b14      	cmp	r3, #20
 8012cc6:	f200 80f0 	bhi.w	8012eaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012cca:	a201      	add	r2, pc, #4	@ (adr r2, 8012cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cd0:	08012d25 	.word	0x08012d25
 8012cd4:	08012eab 	.word	0x08012eab
 8012cd8:	08012eab 	.word	0x08012eab
 8012cdc:	08012eab 	.word	0x08012eab
 8012ce0:	08012d65 	.word	0x08012d65
 8012ce4:	08012eab 	.word	0x08012eab
 8012ce8:	08012eab 	.word	0x08012eab
 8012cec:	08012eab 	.word	0x08012eab
 8012cf0:	08012da7 	.word	0x08012da7
 8012cf4:	08012eab 	.word	0x08012eab
 8012cf8:	08012eab 	.word	0x08012eab
 8012cfc:	08012eab 	.word	0x08012eab
 8012d00:	08012de7 	.word	0x08012de7
 8012d04:	08012eab 	.word	0x08012eab
 8012d08:	08012eab 	.word	0x08012eab
 8012d0c:	08012eab 	.word	0x08012eab
 8012d10:	08012e29 	.word	0x08012e29
 8012d14:	08012eab 	.word	0x08012eab
 8012d18:	08012eab 	.word	0x08012eab
 8012d1c:	08012eab 	.word	0x08012eab
 8012d20:	08012e69 	.word	0x08012e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	68b9      	ldr	r1, [r7, #8]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 fafa 	bl	8013324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	699a      	ldr	r2, [r3, #24]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f042 0208 	orr.w	r2, r2, #8
 8012d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	699a      	ldr	r2, [r3, #24]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	f022 0204 	bic.w	r2, r2, #4
 8012d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	6999      	ldr	r1, [r3, #24]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	691a      	ldr	r2, [r3, #16]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	430a      	orrs	r2, r1
 8012d60:	619a      	str	r2, [r3, #24]
      break;
 8012d62:	e0a5      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68b9      	ldr	r1, [r7, #8]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 fb6a 	bl	8013444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	699a      	ldr	r2, [r3, #24]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	699a      	ldr	r2, [r3, #24]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6999      	ldr	r1, [r3, #24]
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	691b      	ldr	r3, [r3, #16]
 8012d9a:	021a      	lsls	r2, r3, #8
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	430a      	orrs	r2, r1
 8012da2:	619a      	str	r2, [r3, #24]
      break;
 8012da4:	e084      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	68b9      	ldr	r1, [r7, #8]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f000 fbd3 	bl	8013558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	69da      	ldr	r2, [r3, #28]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f042 0208 	orr.w	r2, r2, #8
 8012dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	69da      	ldr	r2, [r3, #28]
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f022 0204 	bic.w	r2, r2, #4
 8012dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	69d9      	ldr	r1, [r3, #28]
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	691a      	ldr	r2, [r3, #16]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	430a      	orrs	r2, r1
 8012de2:	61da      	str	r2, [r3, #28]
      break;
 8012de4:	e064      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	68b9      	ldr	r1, [r7, #8]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f000 fc3b 	bl	8013668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	69da      	ldr	r2, [r3, #28]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	69da      	ldr	r2, [r3, #28]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	69d9      	ldr	r1, [r3, #28]
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	021a      	lsls	r2, r3, #8
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	430a      	orrs	r2, r1
 8012e24:	61da      	str	r2, [r3, #28]
      break;
 8012e26:	e043      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	68b9      	ldr	r1, [r7, #8]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f000 fc84 	bl	801373c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f042 0208 	orr.w	r2, r2, #8
 8012e42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f022 0204 	bic.w	r2, r2, #4
 8012e52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	691a      	ldr	r2, [r3, #16]
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	430a      	orrs	r2, r1
 8012e64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012e66:	e023      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68b9      	ldr	r1, [r7, #8]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f000 fcc8 	bl	8013804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012e82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012e92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	691b      	ldr	r3, [r3, #16]
 8012e9e:	021a      	lsls	r2, r3, #8
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	430a      	orrs	r2, r1
 8012ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012ea8:	e002      	b.n	8012eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	75fb      	strb	r3, [r7, #23]
      break;
 8012eae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop

08012ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d101      	bne.n	8012ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8012edc:	2302      	movs	r3, #2
 8012ede:	e0dc      	b.n	801309a <HAL_TIM_ConfigClockSource+0x1d6>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2202      	movs	r2, #2
 8012eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012ef8:	68ba      	ldr	r2, [r7, #8]
 8012efa:	4b6a      	ldr	r3, [pc, #424]	@ (80130a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012efc:	4013      	ands	r3, r2
 8012efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	4a64      	ldr	r2, [pc, #400]	@ (80130a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f16:	4293      	cmp	r3, r2
 8012f18:	f000 80a9 	beq.w	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012f1c:	4a62      	ldr	r2, [pc, #392]	@ (80130a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	f200 80ae 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f24:	4a61      	ldr	r2, [pc, #388]	@ (80130ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	f000 80a1 	beq.w	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012f2c:	4a5f      	ldr	r2, [pc, #380]	@ (80130ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	f200 80a6 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f34:	4a5e      	ldr	r2, [pc, #376]	@ (80130b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	f000 8099 	beq.w	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80130b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	f200 809e 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012f48:	f000 8091 	beq.w	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012f4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012f50:	f200 8096 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f58:	f000 8089 	beq.w	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f60:	f200 808e 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012f68:	d03e      	beq.n	8012fe8 <HAL_TIM_ConfigClockSource+0x124>
 8012f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012f6e:	f200 8087 	bhi.w	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012f76:	f000 8086 	beq.w	8013086 <HAL_TIM_ConfigClockSource+0x1c2>
 8012f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012f7e:	d87f      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f80:	2b70      	cmp	r3, #112	@ 0x70
 8012f82:	d01a      	beq.n	8012fba <HAL_TIM_ConfigClockSource+0xf6>
 8012f84:	2b70      	cmp	r3, #112	@ 0x70
 8012f86:	d87b      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f88:	2b60      	cmp	r3, #96	@ 0x60
 8012f8a:	d050      	beq.n	801302e <HAL_TIM_ConfigClockSource+0x16a>
 8012f8c:	2b60      	cmp	r3, #96	@ 0x60
 8012f8e:	d877      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f90:	2b50      	cmp	r3, #80	@ 0x50
 8012f92:	d03c      	beq.n	801300e <HAL_TIM_ConfigClockSource+0x14a>
 8012f94:	2b50      	cmp	r3, #80	@ 0x50
 8012f96:	d873      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012f98:	2b40      	cmp	r3, #64	@ 0x40
 8012f9a:	d058      	beq.n	801304e <HAL_TIM_ConfigClockSource+0x18a>
 8012f9c:	2b40      	cmp	r3, #64	@ 0x40
 8012f9e:	d86f      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa0:	2b30      	cmp	r3, #48	@ 0x30
 8012fa2:	d064      	beq.n	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012fa4:	2b30      	cmp	r3, #48	@ 0x30
 8012fa6:	d86b      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fa8:	2b20      	cmp	r3, #32
 8012faa:	d060      	beq.n	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012fac:	2b20      	cmp	r3, #32
 8012fae:	d867      	bhi.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d05c      	beq.n	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012fb4:	2b10      	cmp	r3, #16
 8012fb6:	d05a      	beq.n	801306e <HAL_TIM_ConfigClockSource+0x1aa>
 8012fb8:	e062      	b.n	8013080 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012fca:	f000 fde9 	bl	8013ba0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	68ba      	ldr	r2, [r7, #8]
 8012fe4:	609a      	str	r2, [r3, #8]
      break;
 8012fe6:	e04f      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012ff8:	f000 fdd2 	bl	8013ba0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	689a      	ldr	r2, [r3, #8]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801300a:	609a      	str	r2, [r3, #8]
      break;
 801300c:	e03c      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801301a:	461a      	mov	r2, r3
 801301c:	f000 fd42 	bl	8013aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	2150      	movs	r1, #80	@ 0x50
 8013026:	4618      	mov	r0, r3
 8013028:	f000 fd9c 	bl	8013b64 <TIM_ITRx_SetConfig>
      break;
 801302c:	e02c      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801303a:	461a      	mov	r2, r3
 801303c:	f000 fd61 	bl	8013b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2160      	movs	r1, #96	@ 0x60
 8013046:	4618      	mov	r0, r3
 8013048:	f000 fd8c 	bl	8013b64 <TIM_ITRx_SetConfig>
      break;
 801304c:	e01c      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801305a:	461a      	mov	r2, r3
 801305c:	f000 fd22 	bl	8013aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	2140      	movs	r1, #64	@ 0x40
 8013066:	4618      	mov	r0, r3
 8013068:	f000 fd7c 	bl	8013b64 <TIM_ITRx_SetConfig>
      break;
 801306c:	e00c      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4619      	mov	r1, r3
 8013078:	4610      	mov	r0, r2
 801307a:	f000 fd73 	bl	8013b64 <TIM_ITRx_SetConfig>
      break;
 801307e:	e003      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013080:	2301      	movs	r3, #1
 8013082:	73fb      	strb	r3, [r7, #15]
      break;
 8013084:	e000      	b.n	8013088 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2201      	movs	r2, #1
 801308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013098:	7bfb      	ldrb	r3, [r7, #15]
}
 801309a:	4618      	mov	r0, r3
 801309c:	3710      	adds	r7, #16
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	ffceff88 	.word	0xffceff88
 80130a8:	00100040 	.word	0x00100040
 80130ac:	00100030 	.word	0x00100030
 80130b0:	00100020 	.word	0x00100020

080130b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d101      	bne.n	80130cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80130c8:	2302      	movs	r3, #2
 80130ca:	e031      	b.n	8013130 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2202      	movs	r2, #2
 80130d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80130dc:	6839      	ldr	r1, [r7, #0]
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 fbf6 	bl	80138d0 <TIM_SlaveTimer_SetConfig>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d009      	beq.n	80130fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2201      	movs	r2, #1
 80130ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80130fa:	2301      	movs	r3, #1
 80130fc:	e018      	b.n	8013130 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	68da      	ldr	r2, [r3, #12]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801310c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68da      	ldr	r2, [r3, #12]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801311c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2201      	movs	r2, #1
 8013122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2200      	movs	r2, #0
 801312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3708      	adds	r7, #8
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8013140:	bf00      	nop
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013154:	bf00      	nop
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr

08013160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013168:	bf00      	nop
 801316a:	370c      	adds	r7, #12
 801316c:	46bd      	mov	sp, r7
 801316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013172:	4770      	bx	lr

08013174 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013174:	b480      	push	{r7}
 8013176:	b083      	sub	sp, #12
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801317c:	bf00      	nop
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr

08013188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013190:	bf00      	nop
 8013192:	370c      	adds	r7, #12
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr

0801319c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80131a4:	bf00      	nop
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80131cc:	bf00      	nop
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80131d8:	b480      	push	{r7}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	4a46      	ldr	r2, [pc, #280]	@ (8013304 <TIM_Base_SetConfig+0x12c>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d013      	beq.n	8013218 <TIM_Base_SetConfig+0x40>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80131f6:	d00f      	beq.n	8013218 <TIM_Base_SetConfig+0x40>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	4a43      	ldr	r2, [pc, #268]	@ (8013308 <TIM_Base_SetConfig+0x130>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d00b      	beq.n	8013218 <TIM_Base_SetConfig+0x40>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	4a42      	ldr	r2, [pc, #264]	@ (801330c <TIM_Base_SetConfig+0x134>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d007      	beq.n	8013218 <TIM_Base_SetConfig+0x40>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4a41      	ldr	r2, [pc, #260]	@ (8013310 <TIM_Base_SetConfig+0x138>)
 801320c:	4293      	cmp	r3, r2
 801320e:	d003      	beq.n	8013218 <TIM_Base_SetConfig+0x40>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a40      	ldr	r2, [pc, #256]	@ (8013314 <TIM_Base_SetConfig+0x13c>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d108      	bne.n	801322a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801321e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	68fa      	ldr	r2, [r7, #12]
 8013226:	4313      	orrs	r3, r2
 8013228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4a35      	ldr	r2, [pc, #212]	@ (8013304 <TIM_Base_SetConfig+0x12c>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d01f      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013238:	d01b      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4a32      	ldr	r2, [pc, #200]	@ (8013308 <TIM_Base_SetConfig+0x130>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d017      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	4a31      	ldr	r2, [pc, #196]	@ (801330c <TIM_Base_SetConfig+0x134>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d013      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	4a30      	ldr	r2, [pc, #192]	@ (8013310 <TIM_Base_SetConfig+0x138>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d00f      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4a2f      	ldr	r2, [pc, #188]	@ (8013314 <TIM_Base_SetConfig+0x13c>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d00b      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4a2e      	ldr	r2, [pc, #184]	@ (8013318 <TIM_Base_SetConfig+0x140>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d007      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	4a2d      	ldr	r2, [pc, #180]	@ (801331c <TIM_Base_SetConfig+0x144>)
 8013266:	4293      	cmp	r3, r2
 8013268:	d003      	beq.n	8013272 <TIM_Base_SetConfig+0x9a>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	4a2c      	ldr	r2, [pc, #176]	@ (8013320 <TIM_Base_SetConfig+0x148>)
 801326e:	4293      	cmp	r3, r2
 8013270:	d108      	bne.n	8013284 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	4313      	orrs	r3, r2
 8013282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	695b      	ldr	r3, [r3, #20]
 801328e:	4313      	orrs	r3, r2
 8013290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	689a      	ldr	r2, [r3, #8]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	681a      	ldr	r2, [r3, #0]
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4a16      	ldr	r2, [pc, #88]	@ (8013304 <TIM_Base_SetConfig+0x12c>)
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d00f      	beq.n	80132d0 <TIM_Base_SetConfig+0xf8>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4a18      	ldr	r2, [pc, #96]	@ (8013314 <TIM_Base_SetConfig+0x13c>)
 80132b4:	4293      	cmp	r3, r2
 80132b6:	d00b      	beq.n	80132d0 <TIM_Base_SetConfig+0xf8>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	4a17      	ldr	r2, [pc, #92]	@ (8013318 <TIM_Base_SetConfig+0x140>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d007      	beq.n	80132d0 <TIM_Base_SetConfig+0xf8>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	4a16      	ldr	r2, [pc, #88]	@ (801331c <TIM_Base_SetConfig+0x144>)
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d003      	beq.n	80132d0 <TIM_Base_SetConfig+0xf8>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	4a15      	ldr	r2, [pc, #84]	@ (8013320 <TIM_Base_SetConfig+0x148>)
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d103      	bne.n	80132d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	691a      	ldr	r2, [r3, #16]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2201      	movs	r2, #1
 80132dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	691b      	ldr	r3, [r3, #16]
 80132e2:	f003 0301 	and.w	r3, r3, #1
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d105      	bne.n	80132f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	f023 0201 	bic.w	r2, r3, #1
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	611a      	str	r2, [r3, #16]
  }
}
 80132f6:	bf00      	nop
 80132f8:	3714      	adds	r7, #20
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	40010000 	.word	0x40010000
 8013308:	40000400 	.word	0x40000400
 801330c:	40000800 	.word	0x40000800
 8013310:	40000c00 	.word	0x40000c00
 8013314:	40010400 	.word	0x40010400
 8013318:	40014000 	.word	0x40014000
 801331c:	40014400 	.word	0x40014400
 8013320:	40014800 	.word	0x40014800

08013324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013324:	b480      	push	{r7}
 8013326:	b087      	sub	sp, #28
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6a1b      	ldr	r3, [r3, #32]
 8013332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6a1b      	ldr	r3, [r3, #32]
 8013338:	f023 0201 	bic.w	r2, r3, #1
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	699b      	ldr	r3, [r3, #24]
 801334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	4b37      	ldr	r3, [pc, #220]	@ (801342c <TIM_OC1_SetConfig+0x108>)
 8013350:	4013      	ands	r3, r2
 8013352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f023 0303 	bic.w	r3, r3, #3
 801335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	68fa      	ldr	r2, [r7, #12]
 8013362:	4313      	orrs	r3, r2
 8013364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	f023 0302 	bic.w	r3, r3, #2
 801336c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	697a      	ldr	r2, [r7, #20]
 8013374:	4313      	orrs	r3, r2
 8013376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	4a2d      	ldr	r2, [pc, #180]	@ (8013430 <TIM_OC1_SetConfig+0x10c>)
 801337c:	4293      	cmp	r3, r2
 801337e:	d00f      	beq.n	80133a0 <TIM_OC1_SetConfig+0x7c>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	4a2c      	ldr	r2, [pc, #176]	@ (8013434 <TIM_OC1_SetConfig+0x110>)
 8013384:	4293      	cmp	r3, r2
 8013386:	d00b      	beq.n	80133a0 <TIM_OC1_SetConfig+0x7c>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4a2b      	ldr	r2, [pc, #172]	@ (8013438 <TIM_OC1_SetConfig+0x114>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d007      	beq.n	80133a0 <TIM_OC1_SetConfig+0x7c>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	4a2a      	ldr	r2, [pc, #168]	@ (801343c <TIM_OC1_SetConfig+0x118>)
 8013394:	4293      	cmp	r3, r2
 8013396:	d003      	beq.n	80133a0 <TIM_OC1_SetConfig+0x7c>
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4a29      	ldr	r2, [pc, #164]	@ (8013440 <TIM_OC1_SetConfig+0x11c>)
 801339c:	4293      	cmp	r3, r2
 801339e:	d10c      	bne.n	80133ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	f023 0308 	bic.w	r3, r3, #8
 80133a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	4313      	orrs	r3, r2
 80133b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	f023 0304 	bic.w	r3, r3, #4
 80133b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	4a1c      	ldr	r2, [pc, #112]	@ (8013430 <TIM_OC1_SetConfig+0x10c>)
 80133be:	4293      	cmp	r3, r2
 80133c0:	d00f      	beq.n	80133e2 <TIM_OC1_SetConfig+0xbe>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	4a1b      	ldr	r2, [pc, #108]	@ (8013434 <TIM_OC1_SetConfig+0x110>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d00b      	beq.n	80133e2 <TIM_OC1_SetConfig+0xbe>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4a1a      	ldr	r2, [pc, #104]	@ (8013438 <TIM_OC1_SetConfig+0x114>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d007      	beq.n	80133e2 <TIM_OC1_SetConfig+0xbe>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4a19      	ldr	r2, [pc, #100]	@ (801343c <TIM_OC1_SetConfig+0x118>)
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d003      	beq.n	80133e2 <TIM_OC1_SetConfig+0xbe>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	4a18      	ldr	r2, [pc, #96]	@ (8013440 <TIM_OC1_SetConfig+0x11c>)
 80133de:	4293      	cmp	r3, r2
 80133e0:	d111      	bne.n	8013406 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80133e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80133f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	695b      	ldr	r3, [r3, #20]
 80133f6:	693a      	ldr	r2, [r7, #16]
 80133f8:	4313      	orrs	r3, r2
 80133fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	4313      	orrs	r3, r2
 8013404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	685a      	ldr	r2, [r3, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	621a      	str	r2, [r3, #32]
}
 8013420:	bf00      	nop
 8013422:	371c      	adds	r7, #28
 8013424:	46bd      	mov	sp, r7
 8013426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342a:	4770      	bx	lr
 801342c:	fffeff8f 	.word	0xfffeff8f
 8013430:	40010000 	.word	0x40010000
 8013434:	40010400 	.word	0x40010400
 8013438:	40014000 	.word	0x40014000
 801343c:	40014400 	.word	0x40014400
 8013440:	40014800 	.word	0x40014800

08013444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013444:	b480      	push	{r7}
 8013446:	b087      	sub	sp, #28
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a1b      	ldr	r3, [r3, #32]
 8013452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6a1b      	ldr	r3, [r3, #32]
 8013458:	f023 0210 	bic.w	r2, r3, #16
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	699b      	ldr	r3, [r3, #24]
 801346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	4b34      	ldr	r3, [pc, #208]	@ (8013540 <TIM_OC2_SetConfig+0xfc>)
 8013470:	4013      	ands	r3, r2
 8013472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801347a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	021b      	lsls	r3, r3, #8
 8013482:	68fa      	ldr	r2, [r7, #12]
 8013484:	4313      	orrs	r3, r2
 8013486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	f023 0320 	bic.w	r3, r3, #32
 801348e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	689b      	ldr	r3, [r3, #8]
 8013494:	011b      	lsls	r3, r3, #4
 8013496:	697a      	ldr	r2, [r7, #20]
 8013498:	4313      	orrs	r3, r2
 801349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	4a29      	ldr	r2, [pc, #164]	@ (8013544 <TIM_OC2_SetConfig+0x100>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d003      	beq.n	80134ac <TIM_OC2_SetConfig+0x68>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	4a28      	ldr	r2, [pc, #160]	@ (8013548 <TIM_OC2_SetConfig+0x104>)
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d10d      	bne.n	80134c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80134b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	011b      	lsls	r3, r3, #4
 80134ba:	697a      	ldr	r2, [r7, #20]
 80134bc:	4313      	orrs	r3, r2
 80134be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80134c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a1e      	ldr	r2, [pc, #120]	@ (8013544 <TIM_OC2_SetConfig+0x100>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d00f      	beq.n	80134f0 <TIM_OC2_SetConfig+0xac>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a1d      	ldr	r2, [pc, #116]	@ (8013548 <TIM_OC2_SetConfig+0x104>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d00b      	beq.n	80134f0 <TIM_OC2_SetConfig+0xac>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4a1c      	ldr	r2, [pc, #112]	@ (801354c <TIM_OC2_SetConfig+0x108>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d007      	beq.n	80134f0 <TIM_OC2_SetConfig+0xac>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	4a1b      	ldr	r2, [pc, #108]	@ (8013550 <TIM_OC2_SetConfig+0x10c>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d003      	beq.n	80134f0 <TIM_OC2_SetConfig+0xac>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	4a1a      	ldr	r2, [pc, #104]	@ (8013554 <TIM_OC2_SetConfig+0x110>)
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d113      	bne.n	8013518 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80134f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80134fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	693a      	ldr	r2, [r7, #16]
 8013508:	4313      	orrs	r3, r2
 801350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	693a      	ldr	r2, [r7, #16]
 8013514:	4313      	orrs	r3, r2
 8013516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	68fa      	ldr	r2, [r7, #12]
 8013522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	685a      	ldr	r2, [r3, #4]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	697a      	ldr	r2, [r7, #20]
 8013530:	621a      	str	r2, [r3, #32]
}
 8013532:	bf00      	nop
 8013534:	371c      	adds	r7, #28
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop
 8013540:	feff8fff 	.word	0xfeff8fff
 8013544:	40010000 	.word	0x40010000
 8013548:	40010400 	.word	0x40010400
 801354c:	40014000 	.word	0x40014000
 8013550:	40014400 	.word	0x40014400
 8013554:	40014800 	.word	0x40014800

08013558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013558:	b480      	push	{r7}
 801355a:	b087      	sub	sp, #28
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6a1b      	ldr	r3, [r3, #32]
 8013566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6a1b      	ldr	r3, [r3, #32]
 801356c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	69db      	ldr	r3, [r3, #28]
 801357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	4b33      	ldr	r3, [pc, #204]	@ (8013650 <TIM_OC3_SetConfig+0xf8>)
 8013584:	4013      	ands	r3, r2
 8013586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f023 0303 	bic.w	r3, r3, #3
 801358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	4313      	orrs	r3, r2
 8013598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80135a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	689b      	ldr	r3, [r3, #8]
 80135a6:	021b      	lsls	r3, r3, #8
 80135a8:	697a      	ldr	r2, [r7, #20]
 80135aa:	4313      	orrs	r3, r2
 80135ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a28      	ldr	r2, [pc, #160]	@ (8013654 <TIM_OC3_SetConfig+0xfc>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d003      	beq.n	80135be <TIM_OC3_SetConfig+0x66>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4a27      	ldr	r2, [pc, #156]	@ (8013658 <TIM_OC3_SetConfig+0x100>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d10d      	bne.n	80135da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80135c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	021b      	lsls	r3, r3, #8
 80135cc:	697a      	ldr	r2, [r7, #20]
 80135ce:	4313      	orrs	r3, r2
 80135d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80135d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4a1d      	ldr	r2, [pc, #116]	@ (8013654 <TIM_OC3_SetConfig+0xfc>)
 80135de:	4293      	cmp	r3, r2
 80135e0:	d00f      	beq.n	8013602 <TIM_OC3_SetConfig+0xaa>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	4a1c      	ldr	r2, [pc, #112]	@ (8013658 <TIM_OC3_SetConfig+0x100>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d00b      	beq.n	8013602 <TIM_OC3_SetConfig+0xaa>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4a1b      	ldr	r2, [pc, #108]	@ (801365c <TIM_OC3_SetConfig+0x104>)
 80135ee:	4293      	cmp	r3, r2
 80135f0:	d007      	beq.n	8013602 <TIM_OC3_SetConfig+0xaa>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4a1a      	ldr	r2, [pc, #104]	@ (8013660 <TIM_OC3_SetConfig+0x108>)
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d003      	beq.n	8013602 <TIM_OC3_SetConfig+0xaa>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4a19      	ldr	r2, [pc, #100]	@ (8013664 <TIM_OC3_SetConfig+0x10c>)
 80135fe:	4293      	cmp	r3, r2
 8013600:	d113      	bne.n	801362a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	695b      	ldr	r3, [r3, #20]
 8013616:	011b      	lsls	r3, r3, #4
 8013618:	693a      	ldr	r2, [r7, #16]
 801361a:	4313      	orrs	r3, r2
 801361c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	011b      	lsls	r3, r3, #4
 8013624:	693a      	ldr	r2, [r7, #16]
 8013626:	4313      	orrs	r3, r2
 8013628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	693a      	ldr	r2, [r7, #16]
 801362e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	685a      	ldr	r2, [r3, #4]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	621a      	str	r2, [r3, #32]
}
 8013644:	bf00      	nop
 8013646:	371c      	adds	r7, #28
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr
 8013650:	fffeff8f 	.word	0xfffeff8f
 8013654:	40010000 	.word	0x40010000
 8013658:	40010400 	.word	0x40010400
 801365c:	40014000 	.word	0x40014000
 8013660:	40014400 	.word	0x40014400
 8013664:	40014800 	.word	0x40014800

08013668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013668:	b480      	push	{r7}
 801366a:	b087      	sub	sp, #28
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6a1b      	ldr	r3, [r3, #32]
 8013676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6a1b      	ldr	r3, [r3, #32]
 801367c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	69db      	ldr	r3, [r3, #28]
 801368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013690:	68fa      	ldr	r2, [r7, #12]
 8013692:	4b24      	ldr	r3, [pc, #144]	@ (8013724 <TIM_OC4_SetConfig+0xbc>)
 8013694:	4013      	ands	r3, r2
 8013696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	021b      	lsls	r3, r3, #8
 80136a6:	68fa      	ldr	r2, [r7, #12]
 80136a8:	4313      	orrs	r3, r2
 80136aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80136b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	689b      	ldr	r3, [r3, #8]
 80136b8:	031b      	lsls	r3, r3, #12
 80136ba:	693a      	ldr	r2, [r7, #16]
 80136bc:	4313      	orrs	r3, r2
 80136be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a19      	ldr	r2, [pc, #100]	@ (8013728 <TIM_OC4_SetConfig+0xc0>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d00f      	beq.n	80136e8 <TIM_OC4_SetConfig+0x80>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4a18      	ldr	r2, [pc, #96]	@ (801372c <TIM_OC4_SetConfig+0xc4>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d00b      	beq.n	80136e8 <TIM_OC4_SetConfig+0x80>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a17      	ldr	r2, [pc, #92]	@ (8013730 <TIM_OC4_SetConfig+0xc8>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d007      	beq.n	80136e8 <TIM_OC4_SetConfig+0x80>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a16      	ldr	r2, [pc, #88]	@ (8013734 <TIM_OC4_SetConfig+0xcc>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d003      	beq.n	80136e8 <TIM_OC4_SetConfig+0x80>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a15      	ldr	r2, [pc, #84]	@ (8013738 <TIM_OC4_SetConfig+0xd0>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d109      	bne.n	80136fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80136ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	019b      	lsls	r3, r3, #6
 80136f6:	697a      	ldr	r2, [r7, #20]
 80136f8:	4313      	orrs	r3, r2
 80136fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	697a      	ldr	r2, [r7, #20]
 8013700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	685a      	ldr	r2, [r3, #4]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	693a      	ldr	r2, [r7, #16]
 8013714:	621a      	str	r2, [r3, #32]
}
 8013716:	bf00      	nop
 8013718:	371c      	adds	r7, #28
 801371a:	46bd      	mov	sp, r7
 801371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop
 8013724:	feff8fff 	.word	0xfeff8fff
 8013728:	40010000 	.word	0x40010000
 801372c:	40010400 	.word	0x40010400
 8013730:	40014000 	.word	0x40014000
 8013734:	40014400 	.word	0x40014400
 8013738:	40014800 	.word	0x40014800

0801373c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801373c:	b480      	push	{r7}
 801373e:	b087      	sub	sp, #28
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6a1b      	ldr	r3, [r3, #32]
 8013750:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013764:	68fa      	ldr	r2, [r7, #12]
 8013766:	4b21      	ldr	r3, [pc, #132]	@ (80137ec <TIM_OC5_SetConfig+0xb0>)
 8013768:	4013      	ands	r3, r2
 801376a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	68fa      	ldr	r2, [r7, #12]
 8013772:	4313      	orrs	r3, r2
 8013774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801377c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	689b      	ldr	r3, [r3, #8]
 8013782:	041b      	lsls	r3, r3, #16
 8013784:	693a      	ldr	r2, [r7, #16]
 8013786:	4313      	orrs	r3, r2
 8013788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4a18      	ldr	r2, [pc, #96]	@ (80137f0 <TIM_OC5_SetConfig+0xb4>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d00f      	beq.n	80137b2 <TIM_OC5_SetConfig+0x76>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a17      	ldr	r2, [pc, #92]	@ (80137f4 <TIM_OC5_SetConfig+0xb8>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d00b      	beq.n	80137b2 <TIM_OC5_SetConfig+0x76>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4a16      	ldr	r2, [pc, #88]	@ (80137f8 <TIM_OC5_SetConfig+0xbc>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d007      	beq.n	80137b2 <TIM_OC5_SetConfig+0x76>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4a15      	ldr	r2, [pc, #84]	@ (80137fc <TIM_OC5_SetConfig+0xc0>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d003      	beq.n	80137b2 <TIM_OC5_SetConfig+0x76>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a14      	ldr	r2, [pc, #80]	@ (8013800 <TIM_OC5_SetConfig+0xc4>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d109      	bne.n	80137c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80137b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	695b      	ldr	r3, [r3, #20]
 80137be:	021b      	lsls	r3, r3, #8
 80137c0:	697a      	ldr	r2, [r7, #20]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	697a      	ldr	r2, [r7, #20]
 80137ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	68fa      	ldr	r2, [r7, #12]
 80137d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	685a      	ldr	r2, [r3, #4]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	693a      	ldr	r2, [r7, #16]
 80137de:	621a      	str	r2, [r3, #32]
}
 80137e0:	bf00      	nop
 80137e2:	371c      	adds	r7, #28
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr
 80137ec:	fffeff8f 	.word	0xfffeff8f
 80137f0:	40010000 	.word	0x40010000
 80137f4:	40010400 	.word	0x40010400
 80137f8:	40014000 	.word	0x40014000
 80137fc:	40014400 	.word	0x40014400
 8013800:	40014800 	.word	0x40014800

08013804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013804:	b480      	push	{r7}
 8013806:	b087      	sub	sp, #28
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6a1b      	ldr	r3, [r3, #32]
 8013812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	4b22      	ldr	r3, [pc, #136]	@ (80138b8 <TIM_OC6_SetConfig+0xb4>)
 8013830:	4013      	ands	r3, r2
 8013832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	021b      	lsls	r3, r3, #8
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	4313      	orrs	r3, r2
 801383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	051b      	lsls	r3, r3, #20
 801384e:	693a      	ldr	r2, [r7, #16]
 8013850:	4313      	orrs	r3, r2
 8013852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4a19      	ldr	r2, [pc, #100]	@ (80138bc <TIM_OC6_SetConfig+0xb8>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d00f      	beq.n	801387c <TIM_OC6_SetConfig+0x78>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4a18      	ldr	r2, [pc, #96]	@ (80138c0 <TIM_OC6_SetConfig+0xbc>)
 8013860:	4293      	cmp	r3, r2
 8013862:	d00b      	beq.n	801387c <TIM_OC6_SetConfig+0x78>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4a17      	ldr	r2, [pc, #92]	@ (80138c4 <TIM_OC6_SetConfig+0xc0>)
 8013868:	4293      	cmp	r3, r2
 801386a:	d007      	beq.n	801387c <TIM_OC6_SetConfig+0x78>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4a16      	ldr	r2, [pc, #88]	@ (80138c8 <TIM_OC6_SetConfig+0xc4>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d003      	beq.n	801387c <TIM_OC6_SetConfig+0x78>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4a15      	ldr	r2, [pc, #84]	@ (80138cc <TIM_OC6_SetConfig+0xc8>)
 8013878:	4293      	cmp	r3, r2
 801387a:	d109      	bne.n	8013890 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	695b      	ldr	r3, [r3, #20]
 8013888:	029b      	lsls	r3, r3, #10
 801388a:	697a      	ldr	r2, [r7, #20]
 801388c:	4313      	orrs	r3, r2
 801388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	697a      	ldr	r2, [r7, #20]
 8013894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	685a      	ldr	r2, [r3, #4]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	693a      	ldr	r2, [r7, #16]
 80138a8:	621a      	str	r2, [r3, #32]
}
 80138aa:	bf00      	nop
 80138ac:	371c      	adds	r7, #28
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	feff8fff 	.word	0xfeff8fff
 80138bc:	40010000 	.word	0x40010000
 80138c0:	40010400 	.word	0x40010400
 80138c4:	40014000 	.word	0x40014000
 80138c8:	40014400 	.word	0x40014400
 80138cc:	40014800 	.word	0x40014800

080138d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b086      	sub	sp, #24
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80138da:	2300      	movs	r3, #0
 80138dc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	4b65      	ldr	r3, [pc, #404]	@ (8013a80 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80138ea:	4013      	ands	r3, r2
 80138ec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	693a      	ldr	r2, [r7, #16]
 80138f4:	4313      	orrs	r3, r2
 80138f6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	4b62      	ldr	r3, [pc, #392]	@ (8013a84 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80138fc:	4013      	ands	r3, r2
 80138fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	693a      	ldr	r2, [r7, #16]
 8013906:	4313      	orrs	r3, r2
 8013908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	693a      	ldr	r2, [r7, #16]
 8013910:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4a5c      	ldr	r2, [pc, #368]	@ (8013a88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8013918:	4293      	cmp	r3, r2
 801391a:	f000 80ab 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801391e:	4a5a      	ldr	r2, [pc, #360]	@ (8013a88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8013920:	4293      	cmp	r3, r2
 8013922:	f200 80a4 	bhi.w	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801392a:	f000 80a3 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801392e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013932:	f200 809c 	bhi.w	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013936:	4a55      	ldr	r2, [pc, #340]	@ (8013a8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8013938:	4293      	cmp	r3, r2
 801393a:	f000 809b 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801393e:	4a53      	ldr	r2, [pc, #332]	@ (8013a8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8013940:	4293      	cmp	r3, r2
 8013942:	f200 8094 	bhi.w	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013946:	4a52      	ldr	r2, [pc, #328]	@ (8013a90 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8013948:	4293      	cmp	r3, r2
 801394a:	f000 8093 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801394e:	4a50      	ldr	r2, [pc, #320]	@ (8013a90 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8013950:	4293      	cmp	r3, r2
 8013952:	f200 808c 	bhi.w	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013956:	4a4f      	ldr	r2, [pc, #316]	@ (8013a94 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8013958:	4293      	cmp	r3, r2
 801395a:	f000 808b 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801395e:	4a4d      	ldr	r2, [pc, #308]	@ (8013a94 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8013960:	4293      	cmp	r3, r2
 8013962:	f200 8084 	bhi.w	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013966:	4a4c      	ldr	r2, [pc, #304]	@ (8013a98 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8013968:	4293      	cmp	r3, r2
 801396a:	f000 8083 	beq.w	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801396e:	4a4a      	ldr	r2, [pc, #296]	@ (8013a98 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d87c      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013974:	4a49      	ldr	r2, [pc, #292]	@ (8013a9c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8013976:	4293      	cmp	r3, r2
 8013978:	d07c      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801397a:	4a48      	ldr	r2, [pc, #288]	@ (8013a9c <TIM_SlaveTimer_SetConfig+0x1cc>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d876      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013980:	4a47      	ldr	r2, [pc, #284]	@ (8013aa0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d076      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013986:	4a46      	ldr	r2, [pc, #280]	@ (8013aa0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8013988:	4293      	cmp	r3, r2
 801398a:	d870      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 801398c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013990:	d070      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8013992:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013996:	d86a      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 8013998:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801399c:	d06a      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 801399e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80139a2:	d864      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139a4:	2b70      	cmp	r3, #112	@ 0x70
 80139a6:	d01a      	beq.n	80139de <TIM_SlaveTimer_SetConfig+0x10e>
 80139a8:	2b70      	cmp	r3, #112	@ 0x70
 80139aa:	d860      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139ac:	2b60      	cmp	r3, #96	@ 0x60
 80139ae:	d054      	beq.n	8013a5a <TIM_SlaveTimer_SetConfig+0x18a>
 80139b0:	2b60      	cmp	r3, #96	@ 0x60
 80139b2:	d85c      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139b4:	2b50      	cmp	r3, #80	@ 0x50
 80139b6:	d046      	beq.n	8013a46 <TIM_SlaveTimer_SetConfig+0x176>
 80139b8:	2b50      	cmp	r3, #80	@ 0x50
 80139ba:	d858      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139bc:	2b40      	cmp	r3, #64	@ 0x40
 80139be:	d019      	beq.n	80139f4 <TIM_SlaveTimer_SetConfig+0x124>
 80139c0:	2b40      	cmp	r3, #64	@ 0x40
 80139c2:	d854      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139c4:	2b30      	cmp	r3, #48	@ 0x30
 80139c6:	d055      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139c8:	2b30      	cmp	r3, #48	@ 0x30
 80139ca:	d850      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139cc:	2b20      	cmp	r3, #32
 80139ce:	d051      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139d0:	2b20      	cmp	r3, #32
 80139d2:	d84c      	bhi.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d04d      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139d8:	2b10      	cmp	r3, #16
 80139da:	d04b      	beq.n	8013a74 <TIM_SlaveTimer_SetConfig+0x1a4>
 80139dc:	e047      	b.n	8013a6e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80139ee:	f000 f8d7 	bl	8013ba0 <TIM_ETR_SetConfig>
      break;
 80139f2:	e040      	b.n	8013a76 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b05      	cmp	r3, #5
 80139fa:	d101      	bne.n	8013a00 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80139fc:	2301      	movs	r3, #1
 80139fe:	e03b      	b.n	8013a78 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	6a1a      	ldr	r2, [r3, #32]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f022 0201 	bic.w	r2, r2, #1
 8013a16:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	699b      	ldr	r3, [r3, #24]
 8013a1e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013a26:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	691b      	ldr	r3, [r3, #16]
 8013a2c:	011b      	lsls	r3, r3, #4
 8013a2e:	68ba      	ldr	r2, [r7, #8]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	68ba      	ldr	r2, [r7, #8]
 8013a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	621a      	str	r2, [r3, #32]
      break;
 8013a44:	e017      	b.n	8013a76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a52:	461a      	mov	r2, r3
 8013a54:	f000 f826 	bl	8013aa4 <TIM_TI1_ConfigInputStage>
      break;
 8013a58:	e00d      	b.n	8013a76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a66:	461a      	mov	r2, r3
 8013a68:	f000 f84b 	bl	8013b02 <TIM_TI2_ConfigInputStage>
      break;
 8013a6c:	e003      	b.n	8013a76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	75fb      	strb	r3, [r7, #23]
      break;
 8013a72:	e000      	b.n	8013a76 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8013a74:	bf00      	nop
  }

  return status;
 8013a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	ffcfff8f 	.word	0xffcfff8f
 8013a84:	fffefff8 	.word	0xfffefff8
 8013a88:	00200010 	.word	0x00200010
 8013a8c:	00100070 	.word	0x00100070
 8013a90:	00100060 	.word	0x00100060
 8013a94:	00100050 	.word	0x00100050
 8013a98:	00100040 	.word	0x00100040
 8013a9c:	00100030 	.word	0x00100030
 8013aa0:	00100020 	.word	0x00100020

08013aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b087      	sub	sp, #28
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6a1b      	ldr	r3, [r3, #32]
 8013ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6a1b      	ldr	r3, [r3, #32]
 8013aba:	f023 0201 	bic.w	r2, r3, #1
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	699b      	ldr	r3, [r3, #24]
 8013ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	011b      	lsls	r3, r3, #4
 8013ad4:	693a      	ldr	r2, [r7, #16]
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	f023 030a 	bic.w	r3, r3, #10
 8013ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013ae2:	697a      	ldr	r2, [r7, #20]
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	621a      	str	r2, [r3, #32]
}
 8013af6:	bf00      	nop
 8013af8:	371c      	adds	r7, #28
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr

08013b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b02:	b480      	push	{r7}
 8013b04:	b087      	sub	sp, #28
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	60f8      	str	r0, [r7, #12]
 8013b0a:	60b9      	str	r1, [r7, #8]
 8013b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	6a1b      	ldr	r3, [r3, #32]
 8013b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	6a1b      	ldr	r3, [r3, #32]
 8013b18:	f023 0210 	bic.w	r2, r3, #16
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	031b      	lsls	r3, r3, #12
 8013b32:	693a      	ldr	r2, [r7, #16]
 8013b34:	4313      	orrs	r3, r2
 8013b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	011b      	lsls	r3, r3, #4
 8013b44:	697a      	ldr	r2, [r7, #20]
 8013b46:	4313      	orrs	r3, r2
 8013b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	693a      	ldr	r2, [r7, #16]
 8013b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	697a      	ldr	r2, [r7, #20]
 8013b54:	621a      	str	r2, [r3, #32]
}
 8013b56:	bf00      	nop
 8013b58:	371c      	adds	r7, #28
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
	...

08013b64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	689b      	ldr	r3, [r3, #8]
 8013b72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	4b09      	ldr	r3, [pc, #36]	@ (8013b9c <TIM_ITRx_SetConfig+0x38>)
 8013b78:	4013      	ands	r3, r2
 8013b7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b7c:	683a      	ldr	r2, [r7, #0]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4313      	orrs	r3, r2
 8013b82:	f043 0307 	orr.w	r3, r3, #7
 8013b86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	609a      	str	r2, [r3, #8]
}
 8013b8e:	bf00      	nop
 8013b90:	3714      	adds	r7, #20
 8013b92:	46bd      	mov	sp, r7
 8013b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b98:	4770      	bx	lr
 8013b9a:	bf00      	nop
 8013b9c:	ffcfff8f 	.word	0xffcfff8f

08013ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b087      	sub	sp, #28
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
 8013bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	021a      	lsls	r2, r3, #8
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	431a      	orrs	r2, r3
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	697a      	ldr	r2, [r7, #20]
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	697a      	ldr	r2, [r7, #20]
 8013bd2:	609a      	str	r2, [r3, #8]
}
 8013bd4:	bf00      	nop
 8013bd6:	371c      	adds	r7, #28
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013be0:	b480      	push	{r7}
 8013be2:	b087      	sub	sp, #28
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	f003 031f 	and.w	r3, r3, #31
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8013bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6a1a      	ldr	r2, [r3, #32]
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	43db      	mvns	r3, r3
 8013c02:	401a      	ands	r2, r3
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	6a1a      	ldr	r2, [r3, #32]
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	f003 031f 	and.w	r3, r3, #31
 8013c12:	6879      	ldr	r1, [r7, #4]
 8013c14:	fa01 f303 	lsl.w	r3, r1, r3
 8013c18:	431a      	orrs	r2, r3
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	621a      	str	r2, [r3, #32]
}
 8013c1e:	bf00      	nop
 8013c20:	371c      	adds	r7, #28
 8013c22:	46bd      	mov	sp, r7
 8013c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c28:	4770      	bx	lr
	...

08013c2c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4a1e      	ldr	r2, [pc, #120]	@ (8013cb0 <TIM_ResetCallback+0x84>)
 8013c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8013cb4 <TIM_ResetCallback+0x88>)
 8013c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	4a1c      	ldr	r2, [pc, #112]	@ (8013cb8 <TIM_ResetCallback+0x8c>)
 8013c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8013cbc <TIM_ResetCallback+0x90>)
 8013c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4a1a      	ldr	r2, [pc, #104]	@ (8013cc0 <TIM_ResetCallback+0x94>)
 8013c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	4a19      	ldr	r2, [pc, #100]	@ (8013cc4 <TIM_ResetCallback+0x98>)
 8013c60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4a18      	ldr	r2, [pc, #96]	@ (8013cc8 <TIM_ResetCallback+0x9c>)
 8013c68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a17      	ldr	r2, [pc, #92]	@ (8013ccc <TIM_ResetCallback+0xa0>)
 8013c70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	4a16      	ldr	r2, [pc, #88]	@ (8013cd0 <TIM_ResetCallback+0xa4>)
 8013c78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4a15      	ldr	r2, [pc, #84]	@ (8013cd4 <TIM_ResetCallback+0xa8>)
 8013c80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4a14      	ldr	r2, [pc, #80]	@ (8013cd8 <TIM_ResetCallback+0xac>)
 8013c88:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4a13      	ldr	r2, [pc, #76]	@ (8013cdc <TIM_ResetCallback+0xb0>)
 8013c90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	4a12      	ldr	r2, [pc, #72]	@ (8013ce0 <TIM_ResetCallback+0xb4>)
 8013c98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4a11      	ldr	r2, [pc, #68]	@ (8013ce4 <TIM_ResetCallback+0xb8>)
 8013ca0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8013ca4:	bf00      	nop
 8013ca6:	370c      	adds	r7, #12
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cae:	4770      	bx	lr
 8013cb0:	08003065 	.word	0x08003065
 8013cb4:	08013139 	.word	0x08013139
 8013cb8:	080030d9 	.word	0x080030d9
 8013cbc:	080131b1 	.word	0x080131b1
 8013cc0:	08013161 	.word	0x08013161
 8013cc4:	08013175 	.word	0x08013175
 8013cc8:	0801314d 	.word	0x0801314d
 8013ccc:	08013189 	.word	0x08013189
 8013cd0:	0801319d 	.word	0x0801319d
 8013cd4:	080131c5 	.word	0x080131c5
 8013cd8:	08013f01 	.word	0x08013f01
 8013cdc:	08013f15 	.word	0x08013f15
 8013ce0:	08013f29 	.word	0x08013f29
 8013ce4:	08013f3d 	.word	0x08013f3d

08013ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d101      	bne.n	8013d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013cfc:	2302      	movs	r3, #2
 8013cfe:	e06d      	b.n	8013ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2201      	movs	r2, #1
 8013d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2202      	movs	r2, #2
 8013d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	689b      	ldr	r3, [r3, #8]
 8013d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4a30      	ldr	r2, [pc, #192]	@ (8013de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d004      	beq.n	8013d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8013dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d30:	4293      	cmp	r3, r2
 8013d32:	d108      	bne.n	8013d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	4313      	orrs	r3, r2
 8013d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68fa      	ldr	r2, [r7, #12]
 8013d54:	4313      	orrs	r3, r2
 8013d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	68fa      	ldr	r2, [r7, #12]
 8013d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	4a20      	ldr	r2, [pc, #128]	@ (8013de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d022      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d72:	d01d      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4a1d      	ldr	r2, [pc, #116]	@ (8013df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d018      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4a1c      	ldr	r2, [pc, #112]	@ (8013df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d013      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8013df8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d00e      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a15      	ldr	r2, [pc, #84]	@ (8013dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d009      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	4a16      	ldr	r2, [pc, #88]	@ (8013dfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d004      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4a15      	ldr	r2, [pc, #84]	@ (8013e00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d10c      	bne.n	8013dca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	689b      	ldr	r3, [r3, #8]
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013dda:	2300      	movs	r3, #0
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3714      	adds	r7, #20
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr
 8013de8:	40010000 	.word	0x40010000
 8013dec:	40010400 	.word	0x40010400
 8013df0:	40000400 	.word	0x40000400
 8013df4:	40000800 	.word	0x40000800
 8013df8:	40000c00 	.word	0x40000c00
 8013dfc:	40001800 	.word	0x40001800
 8013e00:	40014000 	.word	0x40014000

08013e04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b085      	sub	sp, #20
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d101      	bne.n	8013e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	e065      	b.n	8013eec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2201      	movs	r2, #1
 8013e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	68db      	ldr	r3, [r3, #12]
 8013e32:	4313      	orrs	r3, r2
 8013e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	689b      	ldr	r3, [r3, #8]
 8013e40:	4313      	orrs	r3, r2
 8013e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	695b      	ldr	r3, [r3, #20]
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e86:	4313      	orrs	r3, r2
 8013e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	699b      	ldr	r3, [r3, #24]
 8013e94:	041b      	lsls	r3, r3, #16
 8013e96:	4313      	orrs	r3, r2
 8013e98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	4a16      	ldr	r2, [pc, #88]	@ (8013ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d004      	beq.n	8013eae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a14      	ldr	r2, [pc, #80]	@ (8013efc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d115      	bne.n	8013eda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eb8:	051b      	lsls	r3, r3, #20
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	69db      	ldr	r3, [r3, #28]
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	6a1b      	ldr	r3, [r3, #32]
 8013ed6:	4313      	orrs	r3, r2
 8013ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013eea:	2300      	movs	r3, #0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3714      	adds	r7, #20
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr
 8013ef8:	40010000 	.word	0x40010000
 8013efc:	40010400 	.word	0x40010400

08013f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013f08:	bf00      	nop
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8013f1c:	bf00      	nop
 8013f1e:	370c      	adds	r7, #12
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr

08013f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b083      	sub	sp, #12
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013f30:	bf00      	nop
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr

08013f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b083      	sub	sp, #12
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013f44:	bf00      	nop
 8013f46:	370c      	adds	r7, #12
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013f50:	b480      	push	{r7}
 8013f52:	b083      	sub	sp, #12
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d121      	bne.n	8013fa6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	4b27      	ldr	r3, [pc, #156]	@ (8014004 <FMC_SDRAM_Init+0xb4>)
 8013f68:	4013      	ands	r3, r2
 8013f6a:	683a      	ldr	r2, [r7, #0]
 8013f6c:	6851      	ldr	r1, [r2, #4]
 8013f6e:	683a      	ldr	r2, [r7, #0]
 8013f70:	6892      	ldr	r2, [r2, #8]
 8013f72:	4311      	orrs	r1, r2
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	68d2      	ldr	r2, [r2, #12]
 8013f78:	4311      	orrs	r1, r2
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	6912      	ldr	r2, [r2, #16]
 8013f7e:	4311      	orrs	r1, r2
 8013f80:	683a      	ldr	r2, [r7, #0]
 8013f82:	6952      	ldr	r2, [r2, #20]
 8013f84:	4311      	orrs	r1, r2
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	6992      	ldr	r2, [r2, #24]
 8013f8a:	4311      	orrs	r1, r2
 8013f8c:	683a      	ldr	r2, [r7, #0]
 8013f8e:	69d2      	ldr	r2, [r2, #28]
 8013f90:	4311      	orrs	r1, r2
 8013f92:	683a      	ldr	r2, [r7, #0]
 8013f94:	6a12      	ldr	r2, [r2, #32]
 8013f96:	4311      	orrs	r1, r2
 8013f98:	683a      	ldr	r2, [r7, #0]
 8013f9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013f9c:	430a      	orrs	r2, r1
 8013f9e:	431a      	orrs	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	601a      	str	r2, [r3, #0]
 8013fa4:	e026      	b.n	8013ff4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	69d9      	ldr	r1, [r3, #28]
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	6a1b      	ldr	r3, [r3, #32]
 8013fb6:	4319      	orrs	r1, r3
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fbc:	430b      	orrs	r3, r1
 8013fbe:	431a      	orrs	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	685a      	ldr	r2, [r3, #4]
 8013fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8014004 <FMC_SDRAM_Init+0xb4>)
 8013fca:	4013      	ands	r3, r2
 8013fcc:	683a      	ldr	r2, [r7, #0]
 8013fce:	6851      	ldr	r1, [r2, #4]
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	6892      	ldr	r2, [r2, #8]
 8013fd4:	4311      	orrs	r1, r2
 8013fd6:	683a      	ldr	r2, [r7, #0]
 8013fd8:	68d2      	ldr	r2, [r2, #12]
 8013fda:	4311      	orrs	r1, r2
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	6912      	ldr	r2, [r2, #16]
 8013fe0:	4311      	orrs	r1, r2
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	6952      	ldr	r2, [r2, #20]
 8013fe6:	4311      	orrs	r1, r2
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	6992      	ldr	r2, [r2, #24]
 8013fec:	430a      	orrs	r2, r1
 8013fee:	431a      	orrs	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	370c      	adds	r7, #12
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	ffff8000 	.word	0xffff8000

08014008 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d128      	bne.n	801406c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	689b      	ldr	r3, [r3, #8]
 801401e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	1e59      	subs	r1, r3, #1
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	3b01      	subs	r3, #1
 801402e:	011b      	lsls	r3, r3, #4
 8014030:	4319      	orrs	r1, r3
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	3b01      	subs	r3, #1
 8014038:	021b      	lsls	r3, r3, #8
 801403a:	4319      	orrs	r1, r3
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	3b01      	subs	r3, #1
 8014042:	031b      	lsls	r3, r3, #12
 8014044:	4319      	orrs	r1, r3
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	691b      	ldr	r3, [r3, #16]
 801404a:	3b01      	subs	r3, #1
 801404c:	041b      	lsls	r3, r3, #16
 801404e:	4319      	orrs	r1, r3
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	695b      	ldr	r3, [r3, #20]
 8014054:	3b01      	subs	r3, #1
 8014056:	051b      	lsls	r3, r3, #20
 8014058:	4319      	orrs	r1, r3
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	699b      	ldr	r3, [r3, #24]
 801405e:	3b01      	subs	r3, #1
 8014060:	061b      	lsls	r3, r3, #24
 8014062:	430b      	orrs	r3, r1
 8014064:	431a      	orrs	r2, r3
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	609a      	str	r2, [r3, #8]
 801406a:	e02d      	b.n	80140c8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	689a      	ldr	r2, [r3, #8]
 8014070:	4b19      	ldr	r3, [pc, #100]	@ (80140d8 <FMC_SDRAM_Timing_Init+0xd0>)
 8014072:	4013      	ands	r3, r2
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	68d2      	ldr	r2, [r2, #12]
 8014078:	3a01      	subs	r2, #1
 801407a:	0311      	lsls	r1, r2, #12
 801407c:	68ba      	ldr	r2, [r7, #8]
 801407e:	6952      	ldr	r2, [r2, #20]
 8014080:	3a01      	subs	r2, #1
 8014082:	0512      	lsls	r2, r2, #20
 8014084:	430a      	orrs	r2, r1
 8014086:	431a      	orrs	r2, r3
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	1e59      	subs	r1, r3, #1
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	3b01      	subs	r3, #1
 80140a0:	011b      	lsls	r3, r3, #4
 80140a2:	4319      	orrs	r1, r3
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	689b      	ldr	r3, [r3, #8]
 80140a8:	3b01      	subs	r3, #1
 80140aa:	021b      	lsls	r3, r3, #8
 80140ac:	4319      	orrs	r1, r3
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	3b01      	subs	r3, #1
 80140b4:	041b      	lsls	r3, r3, #16
 80140b6:	4319      	orrs	r1, r3
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	699b      	ldr	r3, [r3, #24]
 80140bc:	3b01      	subs	r3, #1
 80140be:	061b      	lsls	r3, r3, #24
 80140c0:	430b      	orrs	r3, r1
 80140c2:	431a      	orrs	r2, r3
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80140c8:	2300      	movs	r3, #0
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3714      	adds	r7, #20
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	ff0f0fff 	.word	0xff0f0fff

080140dc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80140dc:	b480      	push	{r7}
 80140de:	b085      	sub	sp, #20
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	691a      	ldr	r2, [r3, #16]
 80140ec:	4b0c      	ldr	r3, [pc, #48]	@ (8014120 <FMC_SDRAM_SendCommand+0x44>)
 80140ee:	4013      	ands	r3, r2
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	6811      	ldr	r1, [r2, #0]
 80140f4:	68ba      	ldr	r2, [r7, #8]
 80140f6:	6852      	ldr	r2, [r2, #4]
 80140f8:	4311      	orrs	r1, r2
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	6892      	ldr	r2, [r2, #8]
 80140fe:	3a01      	subs	r2, #1
 8014100:	0152      	lsls	r2, r2, #5
 8014102:	4311      	orrs	r1, r2
 8014104:	68ba      	ldr	r2, [r7, #8]
 8014106:	68d2      	ldr	r2, [r2, #12]
 8014108:	0252      	lsls	r2, r2, #9
 801410a:	430a      	orrs	r2, r1
 801410c:	431a      	orrs	r2, r3
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	ffc00000 	.word	0xffc00000

08014124 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	695a      	ldr	r2, [r3, #20]
 8014132:	4b07      	ldr	r3, [pc, #28]	@ (8014150 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8014134:	4013      	ands	r3, r2
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	0052      	lsls	r2, r2, #1
 801413a:	431a      	orrs	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	370c      	adds	r7, #12
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	ffffc001 	.word	0xffffc001

08014154 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014154:	b084      	sub	sp, #16
 8014156:	b480      	push	{r7}
 8014158:	b085      	sub	sp, #20
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
 801415e:	f107 001c 	add.w	r0, r7, #28
 8014162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8014166:	2300      	movs	r3, #0
 8014168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801416a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801416c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801416e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8014170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8014172:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8014174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8014176:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801417a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	4313      	orrs	r3, r2
 8014180:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	685a      	ldr	r2, [r3, #4]
 8014186:	4b07      	ldr	r3, [pc, #28]	@ (80141a4 <SDMMC_Init+0x50>)
 8014188:	4013      	ands	r3, r2
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	431a      	orrs	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	3714      	adds	r7, #20
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	b004      	add	sp, #16
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	ffc02c00 	.word	0xffc02c00

080141a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	370c      	adds	r7, #12
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80141c2:	b480      	push	{r7}
 80141c4:	b083      	sub	sp, #12
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
 80141ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	370c      	adds	r7, #12
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr

080141e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80141e4:	b480      	push	{r7}
 80141e6:	b083      	sub	sp, #12
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f043 0203 	orr.w	r2, r3, #3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80141f8:	2300      	movs	r3, #0
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	370c      	adds	r7, #12
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr

08014206 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8014206:	b480      	push	{r7}
 8014208:	b083      	sub	sp, #12
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f003 0303 	and.w	r3, r3, #3
}
 8014216:	4618      	mov	r0, r3
 8014218:	370c      	adds	r7, #12
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
	...

08014224 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8014224:	b480      	push	{r7}
 8014226:	b085      	sub	sp, #20
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801422e:	2300      	movs	r3, #0
 8014230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014242:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8014248:	431a      	orrs	r2, r3
                       Command->CPSM);
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801424e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014250:	68fa      	ldr	r2, [r7, #12]
 8014252:	4313      	orrs	r3, r2
 8014254:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	68da      	ldr	r2, [r3, #12]
 801425a:	4b06      	ldr	r3, [pc, #24]	@ (8014274 <SDMMC_SendCommand+0x50>)
 801425c:	4013      	ands	r3, r2
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	431a      	orrs	r2, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014266:	2300      	movs	r3, #0
}
 8014268:	4618      	mov	r0, r3
 801426a:	3714      	adds	r7, #20
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr
 8014274:	fffee0c0 	.word	0xfffee0c0

08014278 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	691b      	ldr	r3, [r3, #16]
 8014284:	b2db      	uxtb	r3, r3
}
 8014286:	4618      	mov	r0, r3
 8014288:	370c      	adds	r7, #12
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr

08014292 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014292:	b480      	push	{r7}
 8014294:	b085      	sub	sp, #20
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	3314      	adds	r3, #20
 80142a0:	461a      	mov	r2, r3
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	4413      	add	r3, r2
 80142a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3714      	adds	r7, #20
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	4770      	bx	lr

080142b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b085      	sub	sp, #20
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	681a      	ldr	r2, [r3, #0]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	685a      	ldr	r2, [r3, #4]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80142de:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80142e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80142ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	4313      	orrs	r3, r2
 80142f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	431a      	orrs	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8014302:	2300      	movs	r3, #0

}
 8014304:	4618      	mov	r0, r3
 8014306:	3714      	adds	r7, #20
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b088      	sub	sp, #32
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801431e:	2310      	movs	r3, #16
 8014320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014328:	2300      	movs	r3, #0
 801432a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801432c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014330:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014332:	f107 0308 	add.w	r3, r7, #8
 8014336:	4619      	mov	r1, r3
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f7ff ff73 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014342:	2110      	movs	r1, #16
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 fa5f 	bl	8014808 <SDMMC_GetCmdResp1>
 801434a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801434c:	69fb      	ldr	r3, [r7, #28]
}
 801434e:	4618      	mov	r0, r3
 8014350:	3720      	adds	r7, #32
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8014356:	b580      	push	{r7, lr}
 8014358:	b088      	sub	sp, #32
 801435a:	af00      	add	r7, sp, #0
 801435c:	6078      	str	r0, [r7, #4]
 801435e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8014364:	2311      	movs	r3, #17
 8014366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801436c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801436e:	2300      	movs	r3, #0
 8014370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014378:	f107 0308 	add.w	r3, r7, #8
 801437c:	4619      	mov	r1, r3
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f7ff ff50 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014388:	2111      	movs	r1, #17
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f000 fa3c 	bl	8014808 <SDMMC_GetCmdResp1>
 8014390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014392:	69fb      	ldr	r3, [r7, #28]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3720      	adds	r7, #32
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b088      	sub	sp, #32
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80143aa:	2312      	movs	r3, #18
 80143ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80143b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143b4:	2300      	movs	r3, #0
 80143b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80143bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80143be:	f107 0308 	add.w	r3, r7, #8
 80143c2:	4619      	mov	r1, r3
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f7ff ff2d 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80143ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143ce:	2112      	movs	r1, #18
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f000 fa19 	bl	8014808 <SDMMC_GetCmdResp1>
 80143d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80143d8:	69fb      	ldr	r3, [r7, #28]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3720      	adds	r7, #32
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}

080143e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80143e2:	b580      	push	{r7, lr}
 80143e4:	b088      	sub	sp, #32
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	6078      	str	r0, [r7, #4]
 80143ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80143f0:	2318      	movs	r3, #24
 80143f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80143f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143fa:	2300      	movs	r3, #0
 80143fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014404:	f107 0308 	add.w	r3, r7, #8
 8014408:	4619      	mov	r1, r3
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7ff ff0a 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014414:	2118      	movs	r1, #24
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f000 f9f6 	bl	8014808 <SDMMC_GetCmdResp1>
 801441c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801441e:	69fb      	ldr	r3, [r7, #28]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3720      	adds	r7, #32
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}

08014428 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b088      	sub	sp, #32
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8014436:	2319      	movs	r3, #25
 8014438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801443a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801443e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014440:	2300      	movs	r3, #0
 8014442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801444a:	f107 0308 	add.w	r3, r7, #8
 801444e:	4619      	mov	r1, r3
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7ff fee7 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8014456:	f241 3288 	movw	r2, #5000	@ 0x1388
 801445a:	2119      	movs	r1, #25
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 f9d3 	bl	8014808 <SDMMC_GetCmdResp1>
 8014462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014464:	69fb      	ldr	r3, [r7, #28]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3720      	adds	r7, #32
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
	...

08014470 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b088      	sub	sp, #32
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014478:	2300      	movs	r3, #0
 801447a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801447c:	230c      	movs	r3, #12
 801447e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014486:	2300      	movs	r3, #0
 8014488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801448a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801448e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	68db      	ldr	r3, [r3, #12]
 8014494:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144a8:	f107 0308 	add.w	r3, r7, #8
 80144ac:	4619      	mov	r1, r3
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7ff feb8 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80144b4:	4a0b      	ldr	r2, [pc, #44]	@ (80144e4 <SDMMC_CmdStopTransfer+0x74>)
 80144b6:	210c      	movs	r1, #12
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f000 f9a5 	bl	8014808 <SDMMC_GetCmdResp1>
 80144be:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68db      	ldr	r3, [r3, #12]
 80144c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80144d2:	d101      	bne.n	80144d8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80144d4:	2300      	movs	r3, #0
 80144d6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80144d8:	69fb      	ldr	r3, [r7, #28]
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3720      	adds	r7, #32
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	05f5e100 	.word	0x05f5e100

080144e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b088      	sub	sp, #32
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80144f6:	2307      	movs	r3, #7
 80144f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80144fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014500:	2300      	movs	r3, #0
 8014502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801450a:	f107 0308 	add.w	r3, r7, #8
 801450e:	4619      	mov	r1, r3
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f7ff fe87 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014516:	f241 3288 	movw	r2, #5000	@ 0x1388
 801451a:	2107      	movs	r1, #7
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 f973 	bl	8014808 <SDMMC_GetCmdResp1>
 8014522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014524:	69fb      	ldr	r3, [r7, #28]
}
 8014526:	4618      	mov	r0, r3
 8014528:	3720      	adds	r7, #32
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}

0801452e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b088      	sub	sp, #32
 8014532:	af00      	add	r7, sp, #0
 8014534:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014536:	2300      	movs	r3, #0
 8014538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801453a:	2300      	movs	r3, #0
 801453c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801453e:	2300      	movs	r3, #0
 8014540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014542:	2300      	movs	r3, #0
 8014544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801454a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801454c:	f107 0308 	add.w	r3, r7, #8
 8014550:	4619      	mov	r1, r3
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f7ff fe66 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f000 fb97 	bl	8014c8c <SDMMC_GetCmdError>
 801455e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014560:	69fb      	ldr	r3, [r7, #28]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3720      	adds	r7, #32
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}

0801456a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801456a:	b580      	push	{r7, lr}
 801456c:	b088      	sub	sp, #32
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014572:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8014576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014578:	2308      	movs	r3, #8
 801457a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801457c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014582:	2300      	movs	r3, #0
 8014584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801458a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801458c:	f107 0308 	add.w	r3, r7, #8
 8014590:	4619      	mov	r1, r3
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7ff fe46 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f000 fb29 	bl	8014bf0 <SDMMC_GetCmdResp7>
 801459e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145a0:	69fb      	ldr	r3, [r7, #28]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3720      	adds	r7, #32
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b088      	sub	sp, #32
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
 80145b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80145b8:	2337      	movs	r3, #55	@ 0x37
 80145ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80145bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80145c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145c2:	2300      	movs	r3, #0
 80145c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80145ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145cc:	f107 0308 	add.w	r3, r7, #8
 80145d0:	4619      	mov	r1, r3
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff fe26 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80145d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80145dc:	2137      	movs	r1, #55	@ 0x37
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 f912 	bl	8014808 <SDMMC_GetCmdResp1>
 80145e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145e6:	69fb      	ldr	r3, [r7, #28]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3720      	adds	r7, #32
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80145fe:	2329      	movs	r3, #41	@ 0x29
 8014600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014608:	2300      	movs	r3, #0
 801460a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801460c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014610:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014612:	f107 0308 	add.w	r3, r7, #8
 8014616:	4619      	mov	r1, r3
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7ff fe03 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fa2e 	bl	8014a80 <SDMMC_GetCmdResp3>
 8014624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014626:	69fb      	ldr	r3, [r7, #28]
}
 8014628:	4618      	mov	r0, r3
 801462a:	3720      	adds	r7, #32
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b088      	sub	sp, #32
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801463e:	2306      	movs	r3, #6
 8014640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014648:	2300      	movs	r3, #0
 801464a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801464c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014652:	f107 0308 	add.w	r3, r7, #8
 8014656:	4619      	mov	r1, r3
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f7ff fde3 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014662:	2106      	movs	r1, #6
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 f8cf 	bl	8014808 <SDMMC_GetCmdResp1>
 801466a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801466c:	69fb      	ldr	r3, [r7, #28]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3720      	adds	r7, #32
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}

08014676 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b088      	sub	sp, #32
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801467e:	2300      	movs	r3, #0
 8014680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014682:	2333      	movs	r3, #51	@ 0x33
 8014684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801468a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801468c:	2300      	movs	r3, #0
 801468e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014696:	f107 0308 	add.w	r3, r7, #8
 801469a:	4619      	mov	r1, r3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff fdc1 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80146a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146a6:	2133      	movs	r1, #51	@ 0x33
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 f8ad 	bl	8014808 <SDMMC_GetCmdResp1>
 80146ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146b0:	69fb      	ldr	r3, [r7, #28]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3720      	adds	r7, #32
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b088      	sub	sp, #32
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80146c2:	2300      	movs	r3, #0
 80146c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80146c6:	2302      	movs	r3, #2
 80146c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80146ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80146ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146d0:	2300      	movs	r3, #0
 80146d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80146d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146da:	f107 0308 	add.w	r3, r7, #8
 80146de:	4619      	mov	r1, r3
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7ff fd9f 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 f980 	bl	80149ec <SDMMC_GetCmdResp2>
 80146ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146ee:	69fb      	ldr	r3, [r7, #28]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3720      	adds	r7, #32
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b088      	sub	sp, #32
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014706:	2309      	movs	r3, #9
 8014708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801470a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801470e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014710:	2300      	movs	r3, #0
 8014712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801471a:	f107 0308 	add.w	r3, r7, #8
 801471e:	4619      	mov	r1, r3
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7ff fd7f 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f000 f960 	bl	80149ec <SDMMC_GetCmdResp2>
 801472c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801472e:	69fb      	ldr	r3, [r7, #28]
}
 8014730:	4618      	mov	r0, r3
 8014732:	3720      	adds	r7, #32
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b088      	sub	sp, #32
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014742:	2300      	movs	r3, #0
 8014744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8014746:	2303      	movs	r3, #3
 8014748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801474a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801474e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014750:	2300      	movs	r3, #0
 8014752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801475a:	f107 0308 	add.w	r3, r7, #8
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff fd5f 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014766:	683a      	ldr	r2, [r7, #0]
 8014768:	2103      	movs	r1, #3
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 f9c8 	bl	8014b00 <SDMMC_GetCmdResp6>
 8014770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014772:	69fb      	ldr	r3, [r7, #28]
}
 8014774:	4618      	mov	r0, r3
 8014776:	3720      	adds	r7, #32
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801478a:	230d      	movs	r3, #13
 801478c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801478e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014794:	2300      	movs	r3, #0
 8014796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801479c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801479e:	f107 0308 	add.w	r3, r7, #8
 80147a2:	4619      	mov	r1, r3
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7ff fd3d 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80147aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80147ae:	210d      	movs	r1, #13
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f000 f829 	bl	8014808 <SDMMC_GetCmdResp1>
 80147b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147b8:	69fb      	ldr	r3, [r7, #28]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3720      	adds	r7, #32
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b088      	sub	sp, #32
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80147ca:	2300      	movs	r3, #0
 80147cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80147ce:	230d      	movs	r3, #13
 80147d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80147d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80147d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147d8:	2300      	movs	r3, #0
 80147da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147e2:	f107 0308 	add.w	r3, r7, #8
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7ff fd1b 	bl	8014224 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80147ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80147f2:	210d      	movs	r1, #13
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 f807 	bl	8014808 <SDMMC_GetCmdResp1>
 80147fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147fc:	69fb      	ldr	r3, [r7, #28]
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3720      	adds	r7, #32
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
	...

08014808 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b088      	sub	sp, #32
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	460b      	mov	r3, r1
 8014812:	607a      	str	r2, [r7, #4]
 8014814:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8014816:	4b70      	ldr	r3, [pc, #448]	@ (80149d8 <SDMMC_GetCmdResp1+0x1d0>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	4a70      	ldr	r2, [pc, #448]	@ (80149dc <SDMMC_GetCmdResp1+0x1d4>)
 801481c:	fba2 2303 	umull	r2, r3, r2, r3
 8014820:	0a5a      	lsrs	r2, r3, #9
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	fb02 f303 	mul.w	r3, r2, r3
 8014828:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	1e5a      	subs	r2, r3, #1
 801482e:	61fa      	str	r2, [r7, #28]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d102      	bne.n	801483a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014834:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014838:	e0c9      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801483e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014840:	69ba      	ldr	r2, [r7, #24]
 8014842:	4b67      	ldr	r3, [pc, #412]	@ (80149e0 <SDMMC_GetCmdResp1+0x1d8>)
 8014844:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014846:	2b00      	cmp	r3, #0
 8014848:	d0ef      	beq.n	801482a <SDMMC_GetCmdResp1+0x22>
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014850:	2b00      	cmp	r3, #0
 8014852:	d1ea      	bne.n	801482a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014858:	f003 0304 	and.w	r3, r3, #4
 801485c:	2b00      	cmp	r3, #0
 801485e:	d004      	beq.n	801486a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2204      	movs	r2, #4
 8014864:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014866:	2304      	movs	r3, #4
 8014868:	e0b1      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801486e:	f003 0301 	and.w	r3, r3, #1
 8014872:	2b00      	cmp	r3, #0
 8014874:	d004      	beq.n	8014880 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2201      	movs	r2, #1
 801487a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801487c:	2301      	movs	r3, #1
 801487e:	e0a6      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	4a58      	ldr	r2, [pc, #352]	@ (80149e4 <SDMMC_GetCmdResp1+0x1dc>)
 8014884:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff fcf6 	bl	8014278 <SDMMC_GetCommandResponse>
 801488c:	4603      	mov	r3, r0
 801488e:	461a      	mov	r2, r3
 8014890:	7afb      	ldrb	r3, [r7, #11]
 8014892:	4293      	cmp	r3, r2
 8014894:	d001      	beq.n	801489a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014896:	2301      	movs	r3, #1
 8014898:	e099      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801489a:	2100      	movs	r1, #0
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f7ff fcf8 	bl	8014292 <SDMMC_GetResponse>
 80148a2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80148a4:	697a      	ldr	r2, [r7, #20]
 80148a6:	4b50      	ldr	r3, [pc, #320]	@ (80149e8 <SDMMC_GetCmdResp1+0x1e0>)
 80148a8:	4013      	ands	r3, r2
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d101      	bne.n	80148b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80148ae:	2300      	movs	r3, #0
 80148b0:	e08d      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	da02      	bge.n	80148be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80148b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80148bc:	e087      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d001      	beq.n	80148cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80148c8:	2340      	movs	r3, #64	@ 0x40
 80148ca:	e080      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d001      	beq.n	80148da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80148d6:	2380      	movs	r3, #128	@ 0x80
 80148d8:	e079      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d002      	beq.n	80148ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80148e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80148e8:	e071      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d002      	beq.n	80148fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80148f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80148f8:	e069      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014900:	2b00      	cmp	r3, #0
 8014902:	d002      	beq.n	801490a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014908:	e061      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014914:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014918:	e059      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014920:	2b00      	cmp	r3, #0
 8014922:	d002      	beq.n	801492a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014928:	e051      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014930:	2b00      	cmp	r3, #0
 8014932:	d002      	beq.n	801493a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014938:	e049      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014940:	2b00      	cmp	r3, #0
 8014942:	d002      	beq.n	801494a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014948:	e041      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014950:	2b00      	cmp	r3, #0
 8014952:	d002      	beq.n	801495a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014958:	e039      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014968:	e031      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014970:	2b00      	cmp	r3, #0
 8014972:	d002      	beq.n	801497a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014974:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8014978:	e029      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014980:	2b00      	cmp	r3, #0
 8014982:	d002      	beq.n	801498a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014984:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014988:	e021      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014994:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014998:	e019      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d002      	beq.n	80149aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80149a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80149a8:	e011      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80149b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80149b8:	e009      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	f003 0308 	and.w	r3, r3, #8
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d002      	beq.n	80149ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80149c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80149c8:	e001      	b.n	80149ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80149ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3720      	adds	r7, #32
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	24000228 	.word	0x24000228
 80149dc:	10624dd3 	.word	0x10624dd3
 80149e0:	00200045 	.word	0x00200045
 80149e4:	002000c5 	.word	0x002000c5
 80149e8:	fdffe008 	.word	0xfdffe008

080149ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b085      	sub	sp, #20
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80149f4:	4b1f      	ldr	r3, [pc, #124]	@ (8014a74 <SDMMC_GetCmdResp2+0x88>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	4a1f      	ldr	r2, [pc, #124]	@ (8014a78 <SDMMC_GetCmdResp2+0x8c>)
 80149fa:	fba2 2303 	umull	r2, r3, r2, r3
 80149fe:	0a5b      	lsrs	r3, r3, #9
 8014a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014a04:	fb02 f303 	mul.w	r3, r2, r3
 8014a08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	1e5a      	subs	r2, r3, #1
 8014a0e:	60fa      	str	r2, [r7, #12]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d102      	bne.n	8014a1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014a18:	e026      	b.n	8014a68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d0ef      	beq.n	8014a0a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d1ea      	bne.n	8014a0a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a38:	f003 0304 	and.w	r3, r3, #4
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d004      	beq.n	8014a4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2204      	movs	r2, #4
 8014a44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a46:	2304      	movs	r3, #4
 8014a48:	e00e      	b.n	8014a68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a4e:	f003 0301 	and.w	r3, r3, #1
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d004      	beq.n	8014a60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2201      	movs	r2, #1
 8014a5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e003      	b.n	8014a68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	4a06      	ldr	r2, [pc, #24]	@ (8014a7c <SDMMC_GetCmdResp2+0x90>)
 8014a64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014a66:	2300      	movs	r3, #0
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3714      	adds	r7, #20
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr
 8014a74:	24000228 	.word	0x24000228
 8014a78:	10624dd3 	.word	0x10624dd3
 8014a7c:	002000c5 	.word	0x002000c5

08014a80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014a80:	b480      	push	{r7}
 8014a82:	b085      	sub	sp, #20
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014a88:	4b1a      	ldr	r3, [pc, #104]	@ (8014af4 <SDMMC_GetCmdResp3+0x74>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8014af8 <SDMMC_GetCmdResp3+0x78>)
 8014a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8014a92:	0a5b      	lsrs	r3, r3, #9
 8014a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014a98:	fb02 f303 	mul.w	r3, r2, r3
 8014a9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	1e5a      	subs	r2, r3, #1
 8014aa2:	60fa      	str	r2, [r7, #12]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d102      	bne.n	8014aae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014aa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014aac:	e01b      	b.n	8014ae6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ab2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d0ef      	beq.n	8014a9e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d1ea      	bne.n	8014a9e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014acc:	f003 0304 	and.w	r3, r3, #4
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d004      	beq.n	8014ade <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2204      	movs	r2, #4
 8014ad8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ada:	2304      	movs	r3, #4
 8014adc:	e003      	b.n	8014ae6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4a06      	ldr	r2, [pc, #24]	@ (8014afc <SDMMC_GetCmdResp3+0x7c>)
 8014ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014ae4:	2300      	movs	r3, #0
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3714      	adds	r7, #20
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	24000228 	.word	0x24000228
 8014af8:	10624dd3 	.word	0x10624dd3
 8014afc:	002000c5 	.word	0x002000c5

08014b00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b088      	sub	sp, #32
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	460b      	mov	r3, r1
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b0e:	4b35      	ldr	r3, [pc, #212]	@ (8014be4 <SDMMC_GetCmdResp6+0xe4>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4a35      	ldr	r2, [pc, #212]	@ (8014be8 <SDMMC_GetCmdResp6+0xe8>)
 8014b14:	fba2 2303 	umull	r2, r3, r2, r3
 8014b18:	0a5b      	lsrs	r3, r3, #9
 8014b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b1e:	fb02 f303 	mul.w	r3, r2, r3
 8014b22:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	1e5a      	subs	r2, r3, #1
 8014b28:	61fa      	str	r2, [r7, #28]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d102      	bne.n	8014b34 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b2e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014b32:	e052      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b38:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d0ef      	beq.n	8014b24 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d1ea      	bne.n	8014b24 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b52:	f003 0304 	and.w	r3, r3, #4
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d004      	beq.n	8014b64 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2204      	movs	r2, #4
 8014b5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b60:	2304      	movs	r3, #4
 8014b62:	e03a      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b68:	f003 0301 	and.w	r3, r3, #1
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d004      	beq.n	8014b7a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2201      	movs	r2, #1
 8014b74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b76:	2301      	movs	r3, #1
 8014b78:	e02f      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	f7ff fb7c 	bl	8014278 <SDMMC_GetCommandResponse>
 8014b80:	4603      	mov	r3, r0
 8014b82:	461a      	mov	r2, r3
 8014b84:	7afb      	ldrb	r3, [r7, #11]
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d001      	beq.n	8014b8e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e025      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	4a16      	ldr	r2, [pc, #88]	@ (8014bec <SDMMC_GetCmdResp6+0xec>)
 8014b92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014b94:	2100      	movs	r1, #0
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f7ff fb7b 	bl	8014292 <SDMMC_GetResponse>
 8014b9c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d106      	bne.n	8014bb6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	0c1b      	lsrs	r3, r3, #16
 8014bac:	b29a      	uxth	r2, r3
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e011      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d002      	beq.n	8014bc6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014bc4:	e009      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d002      	beq.n	8014bd6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014bd4:	e001      	b.n	8014bda <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3720      	adds	r7, #32
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	24000228 	.word	0x24000228
 8014be8:	10624dd3 	.word	0x10624dd3
 8014bec:	002000c5 	.word	0x002000c5

08014bf0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014bf8:	4b22      	ldr	r3, [pc, #136]	@ (8014c84 <SDMMC_GetCmdResp7+0x94>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	4a22      	ldr	r2, [pc, #136]	@ (8014c88 <SDMMC_GetCmdResp7+0x98>)
 8014bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8014c02:	0a5b      	lsrs	r3, r3, #9
 8014c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014c08:	fb02 f303 	mul.w	r3, r2, r3
 8014c0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	1e5a      	subs	r2, r3, #1
 8014c12:	60fa      	str	r2, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d102      	bne.n	8014c1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014c1c:	e02c      	b.n	8014c78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d0ef      	beq.n	8014c0e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d1ea      	bne.n	8014c0e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c3c:	f003 0304 	and.w	r3, r3, #4
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d004      	beq.n	8014c4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2204      	movs	r2, #4
 8014c48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c4a:	2304      	movs	r3, #4
 8014c4c:	e014      	b.n	8014c78 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c52:	f003 0301 	and.w	r3, r3, #1
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d004      	beq.n	8014c64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c60:	2301      	movs	r3, #1
 8014c62:	e009      	b.n	8014c78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d002      	beq.n	8014c76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2240      	movs	r2, #64	@ 0x40
 8014c74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014c76:	2300      	movs	r3, #0

}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3714      	adds	r7, #20
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr
 8014c84:	24000228 	.word	0x24000228
 8014c88:	10624dd3 	.word	0x10624dd3

08014c8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b085      	sub	sp, #20
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014c94:	4b11      	ldr	r3, [pc, #68]	@ (8014cdc <SDMMC_GetCmdError+0x50>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4a11      	ldr	r2, [pc, #68]	@ (8014ce0 <SDMMC_GetCmdError+0x54>)
 8014c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c9e:	0a5b      	lsrs	r3, r3, #9
 8014ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014ca4:	fb02 f303 	mul.w	r3, r2, r3
 8014ca8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	1e5a      	subs	r2, r3, #1
 8014cae:	60fa      	str	r2, [r7, #12]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d102      	bne.n	8014cba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014cb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014cb8:	e009      	b.n	8014cce <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d0f1      	beq.n	8014caa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	4a06      	ldr	r2, [pc, #24]	@ (8014ce4 <SDMMC_GetCmdError+0x58>)
 8014cca:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3714      	adds	r7, #20
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	24000228 	.word	0x24000228
 8014ce0:	10624dd3 	.word	0x10624dd3
 8014ce4:	002000c5 	.word	0x002000c5

08014ce8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014cec:	4904      	ldr	r1, [pc, #16]	@ (8014d00 <MX_FATFS_Init+0x18>)
 8014cee:	4805      	ldr	r0, [pc, #20]	@ (8014d04 <MX_FATFS_Init+0x1c>)
 8014cf0:	f004 fc34 	bl	801955c <FATFS_LinkDriver>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	4b03      	ldr	r3, [pc, #12]	@ (8014d08 <MX_FATFS_Init+0x20>)
 8014cfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014cfc:	bf00      	nop
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	24000fc4 	.word	0x24000fc4
 8014d04:	0801b228 	.word	0x0801b228
 8014d08:	24000fc0 	.word	0x24000fc0

08014d0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014d10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr

08014d1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014d22:	2300      	movs	r3, #0
 8014d24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014d26:	f000 f896 	bl	8014e56 <BSP_SD_IsDetected>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d001      	beq.n	8014d34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014d30:	2302      	movs	r3, #2
 8014d32:	e012      	b.n	8014d5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014d34:	480b      	ldr	r0, [pc, #44]	@ (8014d64 <BSP_SD_Init+0x48>)
 8014d36:	f7fb fd11 	bl	801075c <HAL_SD_Init>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014d3e:	79fb      	ldrb	r3, [r7, #7]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d109      	bne.n	8014d58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014d48:	4806      	ldr	r0, [pc, #24]	@ (8014d64 <BSP_SD_Init+0x48>)
 8014d4a:	f7fc fc19 	bl	8011580 <HAL_SD_ConfigWideBusOperation>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d001      	beq.n	8014d58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014d54:	2301      	movs	r3, #1
 8014d56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014d58:	79fb      	ldrb	r3, [r7, #7]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3708      	adds	r7, #8
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	24000c18 	.word	0x24000c18

08014d68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b086      	sub	sp, #24
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014d74:	2300      	movs	r3, #0
 8014d76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	68ba      	ldr	r2, [r7, #8]
 8014d7c:	68f9      	ldr	r1, [r7, #12]
 8014d7e:	4806      	ldr	r0, [pc, #24]	@ (8014d98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014d80:	f7fb fe48 	bl	8010a14 <HAL_SD_ReadBlocks_DMA>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d001      	beq.n	8014d8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3718      	adds	r7, #24
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	24000c18 	.word	0x24000c18

08014d9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014da8:	2300      	movs	r3, #0
 8014daa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	68f9      	ldr	r1, [r7, #12]
 8014db2:	4806      	ldr	r0, [pc, #24]	@ (8014dcc <BSP_SD_WriteBlocks_DMA+0x30>)
 8014db4:	f7fb fed6 	bl	8010b64 <HAL_SD_WriteBlocks_DMA>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d001      	beq.n	8014dc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	24000c18 	.word	0x24000c18

08014dd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014dd4:	4805      	ldr	r0, [pc, #20]	@ (8014dec <BSP_SD_GetCardState+0x1c>)
 8014dd6:	f7fc fce5 	bl	80117a4 <HAL_SD_GetCardState>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b04      	cmp	r3, #4
 8014dde:	bf14      	ite	ne
 8014de0:	2301      	movne	r3, #1
 8014de2:	2300      	moveq	r3, #0
 8014de4:	b2db      	uxtb	r3, r3
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	24000c18 	.word	0x24000c18

08014df0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	4803      	ldr	r0, [pc, #12]	@ (8014e08 <BSP_SD_GetCardInfo+0x18>)
 8014dfc:	f7fc fb94 	bl	8011528 <HAL_SD_GetCardInfo>
}
 8014e00:	bf00      	nop
 8014e02:	3708      	adds	r7, #8
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	24000c18 	.word	0x24000c18

08014e0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8014e14:	f000 f818 	bl	8014e48 <BSP_SD_AbortCallback>
}
 8014e18:	bf00      	nop
 8014e1a:	3708      	adds	r7, #8
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014e28:	f000 fa4a 	bl	80152c0 <BSP_SD_WriteCpltCallback>
}
 8014e2c:	bf00      	nop
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014e3c:	f000 fa4c 	bl	80152d8 <BSP_SD_ReadCpltCallback>
}
 8014e40:	bf00      	nop
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	af00      	add	r7, sp, #0

}
 8014e4c:	bf00      	nop
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr

08014e56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b082      	sub	sp, #8
 8014e5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014e60:	f000 f80c 	bl	8014e7c <BSP_PlatformIsDetected>
 8014e64:	4603      	mov	r3, r0
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d101      	bne.n	8014e6e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	b2db      	uxtb	r3, r3
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
	...

08014e7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014e82:	2301      	movs	r3, #1
 8014e84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014e86:	2108      	movs	r1, #8
 8014e88:	4806      	ldr	r0, [pc, #24]	@ (8014ea4 <BSP_PlatformIsDetected+0x28>)
 8014e8a:	f7f4 fdeb 	bl	8009a64 <HAL_GPIO_ReadPin>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d001      	beq.n	8014e98 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014e94:	2300      	movs	r3, #0
 8014e96:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
  //  status = HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) ;
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014e98:	79fb      	ldrb	r3, [r7, #7]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3708      	adds	r7, #8
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	58021800 	.word	0x58021800

08014ea8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014eb0:	f7ef ff7a 	bl	8004da8 <HAL_GetTick>
 8014eb4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014eb6:	e006      	b.n	8014ec6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014eb8:	f7ff ff8a 	bl	8014dd0 <BSP_SD_GetCardState>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d101      	bne.n	8014ec6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	e009      	b.n	8014eda <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014ec6:	f7ef ff6f 	bl	8004da8 <HAL_GetTick>
 8014eca:	4602      	mov	r2, r0
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	687a      	ldr	r2, [r7, #4]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d8f0      	bhi.n	8014eb8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
	...

08014ee4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	4603      	mov	r3, r0
 8014eec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014eee:	4b0b      	ldr	r3, [pc, #44]	@ (8014f1c <SD_CheckStatus+0x38>)
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014ef4:	f7ff ff6c 	bl	8014dd0 <BSP_SD_GetCardState>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d107      	bne.n	8014f0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014efe:	4b07      	ldr	r3, [pc, #28]	@ (8014f1c <SD_CheckStatus+0x38>)
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	f023 0301 	bic.w	r3, r3, #1
 8014f08:	b2da      	uxtb	r2, r3
 8014f0a:	4b04      	ldr	r3, [pc, #16]	@ (8014f1c <SD_CheckStatus+0x38>)
 8014f0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014f0e:	4b03      	ldr	r3, [pc, #12]	@ (8014f1c <SD_CheckStatus+0x38>)
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	b2db      	uxtb	r3, r3
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	24000235 	.word	0x24000235

08014f20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	4603      	mov	r3, r0
 8014f28:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014f2a:	f7ff fef7 	bl	8014d1c <BSP_SD_Init>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d107      	bne.n	8014f44 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014f34:	79fb      	ldrb	r3, [r7, #7]
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7ff ffd4 	bl	8014ee4 <SD_CheckStatus>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	461a      	mov	r2, r3
 8014f40:	4b04      	ldr	r3, [pc, #16]	@ (8014f54 <SD_initialize+0x34>)
 8014f42:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014f44:	4b03      	ldr	r3, [pc, #12]	@ (8014f54 <SD_initialize+0x34>)
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	b2db      	uxtb	r3, r3
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	24000235 	.word	0x24000235

08014f58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff ffbd 	bl	8014ee4 <SD_CheckStatus>
 8014f6a:	4603      	mov	r3, r0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b088      	sub	sp, #32
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60b9      	str	r1, [r7, #8]
 8014f7c:	607a      	str	r2, [r7, #4]
 8014f7e:	603b      	str	r3, [r7, #0]
 8014f80:	4603      	mov	r3, r0
 8014f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014f84:	2301      	movs	r3, #1
 8014f86:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014f88:	f247 5030 	movw	r0, #30000	@ 0x7530
 8014f8c:	f7ff ff8c 	bl	8014ea8 <SD_CheckStatusWithTimeout>
 8014f90:	4603      	mov	r3, r0
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	da01      	bge.n	8014f9a <SD_read+0x26>
  {
    return res;
 8014f96:	7ffb      	ldrb	r3, [r7, #31]
 8014f98:	e08b      	b.n	80150b2 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	f003 0303 	and.w	r3, r3, #3
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d13b      	bne.n	801501c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014fa4:	683a      	ldr	r2, [r7, #0]
 8014fa6:	6879      	ldr	r1, [r7, #4]
 8014fa8:	68b8      	ldr	r0, [r7, #8]
 8014faa:	f7ff fedd 	bl	8014d68 <BSP_SD_ReadBlocks_DMA>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d17d      	bne.n	80150b0 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014fb4:	4b41      	ldr	r3, [pc, #260]	@ (80150bc <SD_read+0x148>)
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014fba:	f7ef fef5 	bl	8004da8 <HAL_GetTick>
 8014fbe:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014fc0:	bf00      	nop
 8014fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80150bc <SD_read+0x148>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d108      	bne.n	8014fdc <SD_read+0x68>
 8014fca:	f7ef feed 	bl	8004da8 <HAL_GetTick>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	1ad3      	subs	r3, r2, r3
 8014fd4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d9f2      	bls.n	8014fc2 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014fdc:	4b37      	ldr	r3, [pc, #220]	@ (80150bc <SD_read+0x148>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d102      	bne.n	8014fea <SD_read+0x76>
      {
        res = RES_ERROR;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	77fb      	strb	r3, [r7, #31]
 8014fe8:	e062      	b.n	80150b0 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8014fea:	4b34      	ldr	r3, [pc, #208]	@ (80150bc <SD_read+0x148>)
 8014fec:	2200      	movs	r2, #0
 8014fee:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014ff0:	f7ef feda 	bl	8004da8 <HAL_GetTick>
 8014ff4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ff6:	e007      	b.n	8015008 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014ff8:	f7ff feea 	bl	8014dd0 <BSP_SD_GetCardState>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <SD_read+0x94>
          {
            res = RES_OK;
 8015002:	2300      	movs	r3, #0
 8015004:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015006:	e053      	b.n	80150b0 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015008:	f7ef fece 	bl	8004da8 <HAL_GetTick>
 801500c:	4602      	mov	r2, r0
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015016:	4293      	cmp	r3, r2
 8015018:	d9ee      	bls.n	8014ff8 <SD_read+0x84>
 801501a:	e049      	b.n	80150b0 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801501c:	2300      	movs	r3, #0
 801501e:	61bb      	str	r3, [r7, #24]
 8015020:	e037      	b.n	8015092 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	1c5a      	adds	r2, r3, #1
 8015026:	607a      	str	r2, [r7, #4]
 8015028:	2201      	movs	r2, #1
 801502a:	4619      	mov	r1, r3
 801502c:	4824      	ldr	r0, [pc, #144]	@ (80150c0 <SD_read+0x14c>)
 801502e:	f7ff fe9b 	bl	8014d68 <BSP_SD_ReadBlocks_DMA>
 8015032:	4603      	mov	r3, r0
 8015034:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015036:	7fbb      	ldrb	r3, [r7, #30]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d12f      	bne.n	801509c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801503c:	f7ef feb4 	bl	8004da8 <HAL_GetTick>
 8015040:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015042:	bf00      	nop
 8015044:	4b1d      	ldr	r3, [pc, #116]	@ (80150bc <SD_read+0x148>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d108      	bne.n	801505e <SD_read+0xea>
 801504c:	f7ef feac 	bl	8004da8 <HAL_GetTick>
 8015050:	4602      	mov	r2, r0
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	f247 522f 	movw	r2, #29999	@ 0x752f
 801505a:	4293      	cmp	r3, r2
 801505c:	d9f2      	bls.n	8015044 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801505e:	4b17      	ldr	r3, [pc, #92]	@ (80150bc <SD_read+0x148>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <SD_read+0xf8>
          {
            res = RES_ERROR;
 8015066:	2301      	movs	r3, #1
 8015068:	77fb      	strb	r3, [r7, #31]
            break;
 801506a:	e018      	b.n	801509e <SD_read+0x12a>
          }
          ReadStatus = 0;
 801506c:	4b13      	ldr	r3, [pc, #76]	@ (80150bc <SD_read+0x148>)
 801506e:	2200      	movs	r2, #0
 8015070:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	4a12      	ldr	r2, [pc, #72]	@ (80150c0 <SD_read+0x14c>)
 8015076:	4618      	mov	r0, r3
 8015078:	4611      	mov	r1, r2
 801507a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801507e:	461a      	mov	r2, r3
 8015080:	f004 fcf5 	bl	8019a6e <memcpy>
          buff += BLOCKSIZE;
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801508a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	3301      	adds	r3, #1
 8015090:	61bb      	str	r3, [r7, #24]
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	429a      	cmp	r2, r3
 8015098:	d8c3      	bhi.n	8015022 <SD_read+0xae>
 801509a:	e000      	b.n	801509e <SD_read+0x12a>
        }
        else
        {
          break;
 801509c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	683a      	ldr	r2, [r7, #0]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d104      	bne.n	80150b0 <SD_read+0x13c>
 80150a6:	7fbb      	ldrb	r3, [r7, #30]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d101      	bne.n	80150b0 <SD_read+0x13c>
        res = RES_OK;
 80150ac:	2300      	movs	r3, #0
 80150ae:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 80150b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3720      	adds	r7, #32
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	240011e4 	.word	0x240011e4
 80150c0:	24000fe0 	.word	0x24000fe0

080150c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b088      	sub	sp, #32
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60b9      	str	r1, [r7, #8]
 80150cc:	607a      	str	r2, [r7, #4]
 80150ce:	603b      	str	r3, [r7, #0]
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80150d4:	2301      	movs	r3, #1
 80150d6:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80150d8:	4b4b      	ldr	r3, [pc, #300]	@ (8015208 <SD_write+0x144>)
 80150da:	2200      	movs	r2, #0
 80150dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80150de:	f247 5030 	movw	r0, #30000	@ 0x7530
 80150e2:	f7ff fee1 	bl	8014ea8 <SD_CheckStatusWithTimeout>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	da01      	bge.n	80150f0 <SD_write+0x2c>
  {
    return res;
 80150ec:	7ffb      	ldrb	r3, [r7, #31]
 80150ee:	e087      	b.n	8015200 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	f003 0303 	and.w	r3, r3, #3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d138      	bne.n	801516c <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80150fa:	683a      	ldr	r2, [r7, #0]
 80150fc:	6879      	ldr	r1, [r7, #4]
 80150fe:	68b8      	ldr	r0, [r7, #8]
 8015100:	f7ff fe4c 	bl	8014d9c <BSP_SD_WriteBlocks_DMA>
 8015104:	4603      	mov	r3, r0
 8015106:	2b00      	cmp	r3, #0
 8015108:	d179      	bne.n	80151fe <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801510a:	f7ef fe4d 	bl	8004da8 <HAL_GetTick>
 801510e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015110:	bf00      	nop
 8015112:	4b3d      	ldr	r3, [pc, #244]	@ (8015208 <SD_write+0x144>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d108      	bne.n	801512c <SD_write+0x68>
 801511a:	f7ef fe45 	bl	8004da8 <HAL_GetTick>
 801511e:	4602      	mov	r2, r0
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	1ad3      	subs	r3, r2, r3
 8015124:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015128:	4293      	cmp	r3, r2
 801512a:	d9f2      	bls.n	8015112 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801512c:	4b36      	ldr	r3, [pc, #216]	@ (8015208 <SD_write+0x144>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d102      	bne.n	801513a <SD_write+0x76>
      {
        res = RES_ERROR;
 8015134:	2301      	movs	r3, #1
 8015136:	77fb      	strb	r3, [r7, #31]
 8015138:	e061      	b.n	80151fe <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801513a:	4b33      	ldr	r3, [pc, #204]	@ (8015208 <SD_write+0x144>)
 801513c:	2200      	movs	r2, #0
 801513e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015140:	f7ef fe32 	bl	8004da8 <HAL_GetTick>
 8015144:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015146:	e007      	b.n	8015158 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015148:	f7ff fe42 	bl	8014dd0 <BSP_SD_GetCardState>
 801514c:	4603      	mov	r3, r0
 801514e:	2b00      	cmp	r3, #0
 8015150:	d102      	bne.n	8015158 <SD_write+0x94>
          {
            res = RES_OK;
 8015152:	2300      	movs	r3, #0
 8015154:	77fb      	strb	r3, [r7, #31]
            break;
 8015156:	e052      	b.n	80151fe <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015158:	f7ef fe26 	bl	8004da8 <HAL_GetTick>
 801515c:	4602      	mov	r2, r0
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	1ad3      	subs	r3, r2, r3
 8015162:	f247 522f 	movw	r2, #29999	@ 0x752f
 8015166:	4293      	cmp	r3, r2
 8015168:	d9ee      	bls.n	8015148 <SD_write+0x84>
 801516a:	e048      	b.n	80151fe <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801516c:	2300      	movs	r3, #0
 801516e:	61bb      	str	r3, [r7, #24]
 8015170:	e034      	b.n	80151dc <SD_write+0x118>
      {
        WriteStatus = 0;
 8015172:	4b25      	ldr	r3, [pc, #148]	@ (8015208 <SD_write+0x144>)
 8015174:	2200      	movs	r2, #0
 8015176:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8015178:	4a24      	ldr	r2, [pc, #144]	@ (801520c <SD_write+0x148>)
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	4610      	mov	r0, r2
 801517e:	4619      	mov	r1, r3
 8015180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015184:	461a      	mov	r2, r3
 8015186:	f004 fc72 	bl	8019a6e <memcpy>
        buff += BLOCKSIZE;
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8015190:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	1c5a      	adds	r2, r3, #1
 8015196:	607a      	str	r2, [r7, #4]
 8015198:	2201      	movs	r2, #1
 801519a:	4619      	mov	r1, r3
 801519c:	481b      	ldr	r0, [pc, #108]	@ (801520c <SD_write+0x148>)
 801519e:	f7ff fdfd 	bl	8014d9c <BSP_SD_WriteBlocks_DMA>
 80151a2:	4603      	mov	r3, r0
 80151a4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80151a6:	7fbb      	ldrb	r3, [r7, #30]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d11c      	bne.n	80151e6 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80151ac:	f7ef fdfc 	bl	8004da8 <HAL_GetTick>
 80151b0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80151b2:	bf00      	nop
 80151b4:	4b14      	ldr	r3, [pc, #80]	@ (8015208 <SD_write+0x144>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d108      	bne.n	80151ce <SD_write+0x10a>
 80151bc:	f7ef fdf4 	bl	8004da8 <HAL_GetTick>
 80151c0:	4602      	mov	r2, r0
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d9f2      	bls.n	80151b4 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 80151ce:	4b0e      	ldr	r3, [pc, #56]	@ (8015208 <SD_write+0x144>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d009      	beq.n	80151ea <SD_write+0x126>
      for (i = 0; i < count; i++)
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	3301      	adds	r3, #1
 80151da:	61bb      	str	r3, [r7, #24]
 80151dc:	69bb      	ldr	r3, [r7, #24]
 80151de:	683a      	ldr	r2, [r7, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d8c6      	bhi.n	8015172 <SD_write+0xae>
 80151e4:	e002      	b.n	80151ec <SD_write+0x128>
          }

        }
        else
        {
          break;
 80151e6:	bf00      	nop
 80151e8:	e000      	b.n	80151ec <SD_write+0x128>
            break;
 80151ea:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	683a      	ldr	r2, [r7, #0]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d104      	bne.n	80151fe <SD_write+0x13a>
 80151f4:	7fbb      	ldrb	r3, [r7, #30]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d101      	bne.n	80151fe <SD_write+0x13a>
        res = RES_OK;
 80151fa:	2300      	movs	r3, #0
 80151fc:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 80151fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8015200:	4618      	mov	r0, r3
 8015202:	3720      	adds	r7, #32
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	240011e0 	.word	0x240011e0
 801520c:	24000fe0 	.word	0x24000fe0

08015210 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08c      	sub	sp, #48	@ 0x30
 8015214:	af00      	add	r7, sp, #0
 8015216:	4603      	mov	r3, r0
 8015218:	603a      	str	r2, [r7, #0]
 801521a:	71fb      	strb	r3, [r7, #7]
 801521c:	460b      	mov	r3, r1
 801521e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015220:	2301      	movs	r3, #1
 8015222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015226:	4b25      	ldr	r3, [pc, #148]	@ (80152bc <SD_ioctl+0xac>)
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	b2db      	uxtb	r3, r3
 801522c:	f003 0301 	and.w	r3, r3, #1
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <SD_ioctl+0x28>
 8015234:	2303      	movs	r3, #3
 8015236:	e03c      	b.n	80152b2 <SD_ioctl+0xa2>

  switch (cmd)
 8015238:	79bb      	ldrb	r3, [r7, #6]
 801523a:	2b03      	cmp	r3, #3
 801523c:	d834      	bhi.n	80152a8 <SD_ioctl+0x98>
 801523e:	a201      	add	r2, pc, #4	@ (adr r2, 8015244 <SD_ioctl+0x34>)
 8015240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015244:	08015255 	.word	0x08015255
 8015248:	0801525d 	.word	0x0801525d
 801524c:	08015275 	.word	0x08015275
 8015250:	0801528f 	.word	0x0801528f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015254:	2300      	movs	r3, #0
 8015256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801525a:	e028      	b.n	80152ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801525c:	f107 0308 	add.w	r3, r7, #8
 8015260:	4618      	mov	r0, r3
 8015262:	f7ff fdc5 	bl	8014df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015266:	6a3a      	ldr	r2, [r7, #32]
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801526c:	2300      	movs	r3, #0
 801526e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015272:	e01c      	b.n	80152ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015274:	f107 0308 	add.w	r3, r7, #8
 8015278:	4618      	mov	r0, r3
 801527a:	f7ff fdb9 	bl	8014df0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015280:	b29a      	uxth	r2, r3
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015286:	2300      	movs	r3, #0
 8015288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801528c:	e00f      	b.n	80152ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801528e:	f107 0308 	add.w	r3, r7, #8
 8015292:	4618      	mov	r0, r3
 8015294:	f7ff fdac 	bl	8014df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801529a:	0a5a      	lsrs	r2, r3, #9
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80152a0:	2300      	movs	r3, #0
 80152a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80152a6:	e002      	b.n	80152ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80152a8:	2304      	movs	r3, #4
 80152aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80152ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3730      	adds	r7, #48	@ 0x30
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	24000235 	.word	0x24000235

080152c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80152c0:	b480      	push	{r7}
 80152c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80152c4:	4b03      	ldr	r3, [pc, #12]	@ (80152d4 <BSP_SD_WriteCpltCallback+0x14>)
 80152c6:	2201      	movs	r2, #1
 80152c8:	601a      	str	r2, [r3, #0]
}
 80152ca:	bf00      	nop
 80152cc:	46bd      	mov	sp, r7
 80152ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d2:	4770      	bx	lr
 80152d4:	240011e0 	.word	0x240011e0

080152d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80152d8:	b480      	push	{r7}
 80152da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80152dc:	4b03      	ldr	r3, [pc, #12]	@ (80152ec <BSP_SD_ReadCpltCallback+0x14>)
 80152de:	2201      	movs	r2, #1
 80152e0:	601a      	str	r2, [r3, #0]
}
 80152e2:	bf00      	nop
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr
 80152ec:	240011e4 	.word	0x240011e4

080152f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b084      	sub	sp, #16
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	4603      	mov	r3, r0
 80152f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80152fa:	79fb      	ldrb	r3, [r7, #7]
 80152fc:	4a08      	ldr	r2, [pc, #32]	@ (8015320 <disk_status+0x30>)
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4413      	add	r3, r2
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	79fa      	ldrb	r2, [r7, #7]
 8015308:	4905      	ldr	r1, [pc, #20]	@ (8015320 <disk_status+0x30>)
 801530a:	440a      	add	r2, r1
 801530c:	7a12      	ldrb	r2, [r2, #8]
 801530e:	4610      	mov	r0, r2
 8015310:	4798      	blx	r3
 8015312:	4603      	mov	r3, r0
 8015314:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015316:	7bfb      	ldrb	r3, [r7, #15]
}
 8015318:	4618      	mov	r0, r3
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	24001670 	.word	0x24001670

08015324 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	4603      	mov	r3, r0
 801532c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801532e:	2300      	movs	r3, #0
 8015330:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015332:	79fb      	ldrb	r3, [r7, #7]
 8015334:	4a0e      	ldr	r2, [pc, #56]	@ (8015370 <disk_initialize+0x4c>)
 8015336:	5cd3      	ldrb	r3, [r2, r3]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d114      	bne.n	8015366 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801533c:	79fb      	ldrb	r3, [r7, #7]
 801533e:	4a0c      	ldr	r2, [pc, #48]	@ (8015370 <disk_initialize+0x4c>)
 8015340:	009b      	lsls	r3, r3, #2
 8015342:	4413      	add	r3, r2
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	79fa      	ldrb	r2, [r7, #7]
 801534a:	4909      	ldr	r1, [pc, #36]	@ (8015370 <disk_initialize+0x4c>)
 801534c:	440a      	add	r2, r1
 801534e:	7a12      	ldrb	r2, [r2, #8]
 8015350:	4610      	mov	r0, r2
 8015352:	4798      	blx	r3
 8015354:	4603      	mov	r3, r0
 8015356:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8015358:	7bfb      	ldrb	r3, [r7, #15]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d103      	bne.n	8015366 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801535e:	79fb      	ldrb	r3, [r7, #7]
 8015360:	4a03      	ldr	r2, [pc, #12]	@ (8015370 <disk_initialize+0x4c>)
 8015362:	2101      	movs	r1, #1
 8015364:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8015366:	7bfb      	ldrb	r3, [r7, #15]
}
 8015368:	4618      	mov	r0, r3
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	24001670 	.word	0x24001670

08015374 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b087      	sub	sp, #28
 8015378:	af00      	add	r7, sp, #0
 801537a:	60b9      	str	r1, [r7, #8]
 801537c:	607a      	str	r2, [r7, #4]
 801537e:	603b      	str	r3, [r7, #0]
 8015380:	4603      	mov	r3, r0
 8015382:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015384:	7bfb      	ldrb	r3, [r7, #15]
 8015386:	4a0a      	ldr	r2, [pc, #40]	@ (80153b0 <disk_read+0x3c>)
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	4413      	add	r3, r2
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	689c      	ldr	r4, [r3, #8]
 8015390:	7bfb      	ldrb	r3, [r7, #15]
 8015392:	4a07      	ldr	r2, [pc, #28]	@ (80153b0 <disk_read+0x3c>)
 8015394:	4413      	add	r3, r2
 8015396:	7a18      	ldrb	r0, [r3, #8]
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	68b9      	ldr	r1, [r7, #8]
 801539e:	47a0      	blx	r4
 80153a0:	4603      	mov	r3, r0
 80153a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	371c      	adds	r7, #28
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd90      	pop	{r4, r7, pc}
 80153ae:	bf00      	nop
 80153b0:	24001670 	.word	0x24001670

080153b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b087      	sub	sp, #28
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60b9      	str	r1, [r7, #8]
 80153bc:	607a      	str	r2, [r7, #4]
 80153be:	603b      	str	r3, [r7, #0]
 80153c0:	4603      	mov	r3, r0
 80153c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80153c4:	7bfb      	ldrb	r3, [r7, #15]
 80153c6:	4a0a      	ldr	r2, [pc, #40]	@ (80153f0 <disk_write+0x3c>)
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	4413      	add	r3, r2
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	68dc      	ldr	r4, [r3, #12]
 80153d0:	7bfb      	ldrb	r3, [r7, #15]
 80153d2:	4a07      	ldr	r2, [pc, #28]	@ (80153f0 <disk_write+0x3c>)
 80153d4:	4413      	add	r3, r2
 80153d6:	7a18      	ldrb	r0, [r3, #8]
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	687a      	ldr	r2, [r7, #4]
 80153dc:	68b9      	ldr	r1, [r7, #8]
 80153de:	47a0      	blx	r4
 80153e0:	4603      	mov	r3, r0
 80153e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80153e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	371c      	adds	r7, #28
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd90      	pop	{r4, r7, pc}
 80153ee:	bf00      	nop
 80153f0:	24001670 	.word	0x24001670

080153f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	4603      	mov	r3, r0
 80153fc:	603a      	str	r2, [r7, #0]
 80153fe:	71fb      	strb	r3, [r7, #7]
 8015400:	460b      	mov	r3, r1
 8015402:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015404:	79fb      	ldrb	r3, [r7, #7]
 8015406:	4a09      	ldr	r2, [pc, #36]	@ (801542c <disk_ioctl+0x38>)
 8015408:	009b      	lsls	r3, r3, #2
 801540a:	4413      	add	r3, r2
 801540c:	685b      	ldr	r3, [r3, #4]
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	79fa      	ldrb	r2, [r7, #7]
 8015412:	4906      	ldr	r1, [pc, #24]	@ (801542c <disk_ioctl+0x38>)
 8015414:	440a      	add	r2, r1
 8015416:	7a10      	ldrb	r0, [r2, #8]
 8015418:	79b9      	ldrb	r1, [r7, #6]
 801541a:	683a      	ldr	r2, [r7, #0]
 801541c:	4798      	blx	r3
 801541e:	4603      	mov	r3, r0
 8015420:	73fb      	strb	r3, [r7, #15]
  return res;
 8015422:	7bfb      	ldrb	r3, [r7, #15]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	24001670 	.word	0x24001670

08015430 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015430:	b480      	push	{r7}
 8015432:	b085      	sub	sp, #20
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	3301      	adds	r3, #1
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015440:	89fb      	ldrh	r3, [r7, #14]
 8015442:	021b      	lsls	r3, r3, #8
 8015444:	b21a      	sxth	r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	b21b      	sxth	r3, r3
 801544c:	4313      	orrs	r3, r2
 801544e:	b21b      	sxth	r3, r3
 8015450:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015452:	89fb      	ldrh	r3, [r7, #14]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3714      	adds	r7, #20
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015460:	b480      	push	{r7}
 8015462:	b085      	sub	sp, #20
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	3303      	adds	r3, #3
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	021b      	lsls	r3, r3, #8
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	3202      	adds	r2, #2
 8015478:	7812      	ldrb	r2, [r2, #0]
 801547a:	4313      	orrs	r3, r2
 801547c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	021b      	lsls	r3, r3, #8
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	3201      	adds	r2, #1
 8015486:	7812      	ldrb	r2, [r2, #0]
 8015488:	4313      	orrs	r3, r2
 801548a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	021b      	lsls	r3, r3, #8
 8015490:	687a      	ldr	r2, [r7, #4]
 8015492:	7812      	ldrb	r2, [r2, #0]
 8015494:	4313      	orrs	r3, r2
 8015496:	60fb      	str	r3, [r7, #12]
	return rv;
 8015498:	68fb      	ldr	r3, [r7, #12]
}
 801549a:	4618      	mov	r0, r3
 801549c:	3714      	adds	r7, #20
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr

080154a6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80154a6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80154aa:	b09d      	sub	sp, #116	@ 0x74
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80154b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80154b2:	3307      	adds	r3, #7
 80154b4:	781b      	ldrb	r3, [r3, #0]
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	2200      	movs	r2, #0
 80154ba:	469a      	mov	sl, r3
 80154bc:	4693      	mov	fp, r2
 80154be:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80154c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80154c6:	f04f 0000 	mov.w	r0, #0
 80154ca:	f04f 0100 	mov.w	r1, #0
 80154ce:	0219      	lsls	r1, r3, #8
 80154d0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80154d4:	0210      	lsls	r0, r2, #8
 80154d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80154d8:	3306      	adds	r3, #6
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	2200      	movs	r2, #0
 80154e0:	461c      	mov	r4, r3
 80154e2:	4615      	mov	r5, r2
 80154e4:	ea40 0804 	orr.w	r8, r0, r4
 80154e8:	ea41 0905 	orr.w	r9, r1, r5
 80154ec:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80154f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80154f4:	f04f 0000 	mov.w	r0, #0
 80154f8:	f04f 0100 	mov.w	r1, #0
 80154fc:	0219      	lsls	r1, r3, #8
 80154fe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015502:	0210      	lsls	r0, r2, #8
 8015504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015506:	3305      	adds	r3, #5
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	b2db      	uxtb	r3, r3
 801550c:	2200      	movs	r2, #0
 801550e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015510:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8015512:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8015516:	4623      	mov	r3, r4
 8015518:	4303      	orrs	r3, r0
 801551a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801551c:	462b      	mov	r3, r5
 801551e:	430b      	orrs	r3, r1
 8015520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015522:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8015526:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 801552a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801552e:	f04f 0000 	mov.w	r0, #0
 8015532:	f04f 0100 	mov.w	r1, #0
 8015536:	0219      	lsls	r1, r3, #8
 8015538:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801553c:	0210      	lsls	r0, r2, #8
 801553e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015540:	3304      	adds	r3, #4
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	b2db      	uxtb	r3, r3
 8015546:	2200      	movs	r2, #0
 8015548:	653b      	str	r3, [r7, #80]	@ 0x50
 801554a:	657a      	str	r2, [r7, #84]	@ 0x54
 801554c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8015550:	4623      	mov	r3, r4
 8015552:	4303      	orrs	r3, r0
 8015554:	623b      	str	r3, [r7, #32]
 8015556:	462b      	mov	r3, r5
 8015558:	430b      	orrs	r3, r1
 801555a:	627b      	str	r3, [r7, #36]	@ 0x24
 801555c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8015560:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8015564:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8015568:	f04f 0000 	mov.w	r0, #0
 801556c:	f04f 0100 	mov.w	r1, #0
 8015570:	0219      	lsls	r1, r3, #8
 8015572:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015576:	0210      	lsls	r0, r2, #8
 8015578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801557a:	3303      	adds	r3, #3
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2200      	movs	r2, #0
 8015582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015584:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8015586:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 801558a:	4623      	mov	r3, r4
 801558c:	4303      	orrs	r3, r0
 801558e:	61bb      	str	r3, [r7, #24]
 8015590:	462b      	mov	r3, r5
 8015592:	430b      	orrs	r3, r1
 8015594:	61fb      	str	r3, [r7, #28]
 8015596:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801559a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 801559e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80155a2:	f04f 0000 	mov.w	r0, #0
 80155a6:	f04f 0100 	mov.w	r1, #0
 80155aa:	0219      	lsls	r1, r3, #8
 80155ac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80155b0:	0210      	lsls	r0, r2, #8
 80155b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155b4:	3302      	adds	r3, #2
 80155b6:	781b      	ldrb	r3, [r3, #0]
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	2200      	movs	r2, #0
 80155bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80155be:	647a      	str	r2, [r7, #68]	@ 0x44
 80155c0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80155c4:	4623      	mov	r3, r4
 80155c6:	4303      	orrs	r3, r0
 80155c8:	613b      	str	r3, [r7, #16]
 80155ca:	462b      	mov	r3, r5
 80155cc:	430b      	orrs	r3, r1
 80155ce:	617b      	str	r3, [r7, #20]
 80155d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80155d4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80155d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80155dc:	f04f 0200 	mov.w	r2, #0
 80155e0:	f04f 0300 	mov.w	r3, #0
 80155e4:	020b      	lsls	r3, r1, #8
 80155e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80155ea:	0202      	lsls	r2, r0, #8
 80155ec:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80155ee:	3101      	adds	r1, #1
 80155f0:	7809      	ldrb	r1, [r1, #0]
 80155f2:	b2c9      	uxtb	r1, r1
 80155f4:	2000      	movs	r0, #0
 80155f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80155f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80155fa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80155fe:	4621      	mov	r1, r4
 8015600:	4311      	orrs	r1, r2
 8015602:	60b9      	str	r1, [r7, #8]
 8015604:	4629      	mov	r1, r5
 8015606:	4319      	orrs	r1, r3
 8015608:	60f9      	str	r1, [r7, #12]
 801560a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801560e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8015612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015616:	f04f 0200 	mov.w	r2, #0
 801561a:	f04f 0300 	mov.w	r3, #0
 801561e:	020b      	lsls	r3, r1, #8
 8015620:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015624:	0202      	lsls	r2, r0, #8
 8015626:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8015628:	7809      	ldrb	r1, [r1, #0]
 801562a:	b2c9      	uxtb	r1, r1
 801562c:	2000      	movs	r0, #0
 801562e:	6339      	str	r1, [r7, #48]	@ 0x30
 8015630:	6378      	str	r0, [r7, #52]	@ 0x34
 8015632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8015636:	4621      	mov	r1, r4
 8015638:	4311      	orrs	r1, r2
 801563a:	6039      	str	r1, [r7, #0]
 801563c:	4629      	mov	r1, r5
 801563e:	4319      	orrs	r1, r3
 8015640:	6079      	str	r1, [r7, #4]
 8015642:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015646:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 801564a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 801564e:	4610      	mov	r0, r2
 8015650:	4619      	mov	r1, r3
 8015652:	3774      	adds	r7, #116	@ 0x74
 8015654:	46bd      	mov	sp, r7
 8015656:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801565a:	4770      	bx	lr

0801565c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	460b      	mov	r3, r1
 8015666:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	1c5a      	adds	r2, r3, #1
 801566c:	607a      	str	r2, [r7, #4]
 801566e:	887a      	ldrh	r2, [r7, #2]
 8015670:	b2d2      	uxtb	r2, r2
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	887b      	ldrh	r3, [r7, #2]
 8015676:	0a1b      	lsrs	r3, r3, #8
 8015678:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	1c5a      	adds	r2, r3, #1
 801567e:	607a      	str	r2, [r7, #4]
 8015680:	887a      	ldrh	r2, [r7, #2]
 8015682:	b2d2      	uxtb	r2, r2
 8015684:	701a      	strb	r2, [r3, #0]
}
 8015686:	bf00      	nop
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015692:	b480      	push	{r7}
 8015694:	b083      	sub	sp, #12
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	1c5a      	adds	r2, r3, #1
 80156a0:	607a      	str	r2, [r7, #4]
 80156a2:	683a      	ldr	r2, [r7, #0]
 80156a4:	b2d2      	uxtb	r2, r2
 80156a6:	701a      	strb	r2, [r3, #0]
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	0a1b      	lsrs	r3, r3, #8
 80156ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	1c5a      	adds	r2, r3, #1
 80156b2:	607a      	str	r2, [r7, #4]
 80156b4:	683a      	ldr	r2, [r7, #0]
 80156b6:	b2d2      	uxtb	r2, r2
 80156b8:	701a      	strb	r2, [r3, #0]
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	0a1b      	lsrs	r3, r3, #8
 80156be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	1c5a      	adds	r2, r3, #1
 80156c4:	607a      	str	r2, [r7, #4]
 80156c6:	683a      	ldr	r2, [r7, #0]
 80156c8:	b2d2      	uxtb	r2, r2
 80156ca:	701a      	strb	r2, [r3, #0]
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	0a1b      	lsrs	r3, r3, #8
 80156d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	1c5a      	adds	r2, r3, #1
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	683a      	ldr	r2, [r7, #0]
 80156da:	b2d2      	uxtb	r2, r2
 80156dc:	701a      	strb	r2, [r3, #0]
}
 80156de:	bf00      	nop
 80156e0:	370c      	adds	r7, #12
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80156ea:	b480      	push	{r7}
 80156ec:	b085      	sub	sp, #20
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	60f8      	str	r0, [r7, #12]
 80156f2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	1c5a      	adds	r2, r3, #1
 80156fa:	60fa      	str	r2, [r7, #12]
 80156fc:	783a      	ldrb	r2, [r7, #0]
 80156fe:	701a      	strb	r2, [r3, #0]
 8015700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015704:	f04f 0200 	mov.w	r2, #0
 8015708:	f04f 0300 	mov.w	r3, #0
 801570c:	0a02      	lsrs	r2, r0, #8
 801570e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015712:	0a0b      	lsrs	r3, r1, #8
 8015714:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	1c5a      	adds	r2, r3, #1
 801571c:	60fa      	str	r2, [r7, #12]
 801571e:	783a      	ldrb	r2, [r7, #0]
 8015720:	701a      	strb	r2, [r3, #0]
 8015722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015726:	f04f 0200 	mov.w	r2, #0
 801572a:	f04f 0300 	mov.w	r3, #0
 801572e:	0a02      	lsrs	r2, r0, #8
 8015730:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015734:	0a0b      	lsrs	r3, r1, #8
 8015736:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	1c5a      	adds	r2, r3, #1
 801573e:	60fa      	str	r2, [r7, #12]
 8015740:	783a      	ldrb	r2, [r7, #0]
 8015742:	701a      	strb	r2, [r3, #0]
 8015744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015748:	f04f 0200 	mov.w	r2, #0
 801574c:	f04f 0300 	mov.w	r3, #0
 8015750:	0a02      	lsrs	r2, r0, #8
 8015752:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015756:	0a0b      	lsrs	r3, r1, #8
 8015758:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	60fa      	str	r2, [r7, #12]
 8015762:	783a      	ldrb	r2, [r7, #0]
 8015764:	701a      	strb	r2, [r3, #0]
 8015766:	e9d7 0100 	ldrd	r0, r1, [r7]
 801576a:	f04f 0200 	mov.w	r2, #0
 801576e:	f04f 0300 	mov.w	r3, #0
 8015772:	0a02      	lsrs	r2, r0, #8
 8015774:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015778:	0a0b      	lsrs	r3, r1, #8
 801577a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	1c5a      	adds	r2, r3, #1
 8015782:	60fa      	str	r2, [r7, #12]
 8015784:	783a      	ldrb	r2, [r7, #0]
 8015786:	701a      	strb	r2, [r3, #0]
 8015788:	e9d7 0100 	ldrd	r0, r1, [r7]
 801578c:	f04f 0200 	mov.w	r2, #0
 8015790:	f04f 0300 	mov.w	r3, #0
 8015794:	0a02      	lsrs	r2, r0, #8
 8015796:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801579a:	0a0b      	lsrs	r3, r1, #8
 801579c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	1c5a      	adds	r2, r3, #1
 80157a4:	60fa      	str	r2, [r7, #12]
 80157a6:	783a      	ldrb	r2, [r7, #0]
 80157a8:	701a      	strb	r2, [r3, #0]
 80157aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80157ae:	f04f 0200 	mov.w	r2, #0
 80157b2:	f04f 0300 	mov.w	r3, #0
 80157b6:	0a02      	lsrs	r2, r0, #8
 80157b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80157bc:	0a0b      	lsrs	r3, r1, #8
 80157be:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	1c5a      	adds	r2, r3, #1
 80157c6:	60fa      	str	r2, [r7, #12]
 80157c8:	783a      	ldrb	r2, [r7, #0]
 80157ca:	701a      	strb	r2, [r3, #0]
 80157cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80157d0:	f04f 0200 	mov.w	r2, #0
 80157d4:	f04f 0300 	mov.w	r3, #0
 80157d8:	0a02      	lsrs	r2, r0, #8
 80157da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80157de:	0a0b      	lsrs	r3, r1, #8
 80157e0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	1c5a      	adds	r2, r3, #1
 80157e8:	60fa      	str	r2, [r7, #12]
 80157ea:	783a      	ldrb	r2, [r7, #0]
 80157ec:	701a      	strb	r2, [r3, #0]
}
 80157ee:	bf00      	nop
 80157f0:	3714      	adds	r7, #20
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80157fa:	b480      	push	{r7}
 80157fc:	b087      	sub	sp, #28
 80157fe:	af00      	add	r7, sp, #0
 8015800:	60f8      	str	r0, [r7, #12]
 8015802:	60b9      	str	r1, [r7, #8]
 8015804:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00d      	beq.n	8015830 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015814:	693a      	ldr	r2, [r7, #16]
 8015816:	1c53      	adds	r3, r2, #1
 8015818:	613b      	str	r3, [r7, #16]
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	1c59      	adds	r1, r3, #1
 801581e:	6179      	str	r1, [r7, #20]
 8015820:	7812      	ldrb	r2, [r2, #0]
 8015822:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	3b01      	subs	r3, #1
 8015828:	607b      	str	r3, [r7, #4]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1f1      	bne.n	8015814 <mem_cpy+0x1a>
	}
}
 8015830:	bf00      	nop
 8015832:	371c      	adds	r7, #28
 8015834:	46bd      	mov	sp, r7
 8015836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583a:	4770      	bx	lr

0801583c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801583c:	b480      	push	{r7}
 801583e:	b087      	sub	sp, #28
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	1c5a      	adds	r2, r3, #1
 8015850:	617a      	str	r2, [r7, #20]
 8015852:	68ba      	ldr	r2, [r7, #8]
 8015854:	b2d2      	uxtb	r2, r2
 8015856:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3b01      	subs	r3, #1
 801585c:	607b      	str	r3, [r7, #4]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1f3      	bne.n	801584c <mem_set+0x10>
}
 8015864:	bf00      	nop
 8015866:	bf00      	nop
 8015868:	371c      	adds	r7, #28
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr

08015872 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015872:	b480      	push	{r7}
 8015874:	b089      	sub	sp, #36	@ 0x24
 8015876:	af00      	add	r7, sp, #0
 8015878:	60f8      	str	r0, [r7, #12]
 801587a:	60b9      	str	r1, [r7, #8]
 801587c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	61fb      	str	r3, [r7, #28]
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015886:	2300      	movs	r3, #0
 8015888:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	1c5a      	adds	r2, r3, #1
 801588e:	61fa      	str	r2, [r7, #28]
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	4619      	mov	r1, r3
 8015894:	69bb      	ldr	r3, [r7, #24]
 8015896:	1c5a      	adds	r2, r3, #1
 8015898:	61ba      	str	r2, [r7, #24]
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	1acb      	subs	r3, r1, r3
 801589e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	3b01      	subs	r3, #1
 80158a4:	607b      	str	r3, [r7, #4]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <mem_cmp+0x40>
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d0eb      	beq.n	801588a <mem_cmp+0x18>

	return r;
 80158b2:	697b      	ldr	r3, [r7, #20]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3724      	adds	r7, #36	@ 0x24
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80158ca:	e002      	b.n	80158d2 <chk_chr+0x12>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	3301      	adds	r3, #1
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d005      	beq.n	80158e6 <chk_chr+0x26>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	461a      	mov	r2, r3
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	4293      	cmp	r3, r2
 80158e4:	d1f2      	bne.n	80158cc <chk_chr+0xc>
	return *str;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	781b      	ldrb	r3, [r3, #0]
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr
	...

080158f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015902:	2300      	movs	r3, #0
 8015904:	60bb      	str	r3, [r7, #8]
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	60fb      	str	r3, [r7, #12]
 801590a:	e029      	b.n	8015960 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801590c:	4a27      	ldr	r2, [pc, #156]	@ (80159ac <chk_lock+0xb4>)
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	011b      	lsls	r3, r3, #4
 8015912:	4413      	add	r3, r2
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d01d      	beq.n	8015956 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801591a:	4a24      	ldr	r2, [pc, #144]	@ (80159ac <chk_lock+0xb4>)
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	011b      	lsls	r3, r3, #4
 8015920:	4413      	add	r3, r2
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	429a      	cmp	r2, r3
 801592a:	d116      	bne.n	801595a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801592c:	4a1f      	ldr	r2, [pc, #124]	@ (80159ac <chk_lock+0xb4>)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	011b      	lsls	r3, r3, #4
 8015932:	4413      	add	r3, r2
 8015934:	3304      	adds	r3, #4
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801593c:	429a      	cmp	r2, r3
 801593e:	d10c      	bne.n	801595a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015940:	4a1a      	ldr	r2, [pc, #104]	@ (80159ac <chk_lock+0xb4>)
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	011b      	lsls	r3, r3, #4
 8015946:	4413      	add	r3, r2
 8015948:	3308      	adds	r3, #8
 801594a:	681a      	ldr	r2, [r3, #0]
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8015950:	429a      	cmp	r2, r3
 8015952:	d102      	bne.n	801595a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015954:	e007      	b.n	8015966 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015956:	2301      	movs	r3, #1
 8015958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	3301      	adds	r3, #1
 801595e:	60fb      	str	r3, [r7, #12]
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2b01      	cmp	r3, #1
 8015964:	d9d2      	bls.n	801590c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	2b02      	cmp	r3, #2
 801596a:	d109      	bne.n	8015980 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d102      	bne.n	8015978 <chk_lock+0x80>
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	2b02      	cmp	r3, #2
 8015976:	d101      	bne.n	801597c <chk_lock+0x84>
 8015978:	2300      	movs	r3, #0
 801597a:	e010      	b.n	801599e <chk_lock+0xa6>
 801597c:	2312      	movs	r3, #18
 801597e:	e00e      	b.n	801599e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d108      	bne.n	8015998 <chk_lock+0xa0>
 8015986:	4a09      	ldr	r2, [pc, #36]	@ (80159ac <chk_lock+0xb4>)
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	011b      	lsls	r3, r3, #4
 801598c:	4413      	add	r3, r2
 801598e:	330c      	adds	r3, #12
 8015990:	881b      	ldrh	r3, [r3, #0]
 8015992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015996:	d101      	bne.n	801599c <chk_lock+0xa4>
 8015998:	2310      	movs	r3, #16
 801599a:	e000      	b.n	801599e <chk_lock+0xa6>
 801599c:	2300      	movs	r3, #0
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3714      	adds	r7, #20
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	240011f0 	.word	0x240011f0

080159b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80159b0:	b480      	push	{r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159b6:	2300      	movs	r3, #0
 80159b8:	607b      	str	r3, [r7, #4]
 80159ba:	e002      	b.n	80159c2 <enq_lock+0x12>
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	3301      	adds	r3, #1
 80159c0:	607b      	str	r3, [r7, #4]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2b01      	cmp	r3, #1
 80159c6:	d806      	bhi.n	80159d6 <enq_lock+0x26>
 80159c8:	4a09      	ldr	r2, [pc, #36]	@ (80159f0 <enq_lock+0x40>)
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	011b      	lsls	r3, r3, #4
 80159ce:	4413      	add	r3, r2
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d1f2      	bne.n	80159bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2b02      	cmp	r3, #2
 80159da:	bf14      	ite	ne
 80159dc:	2301      	movne	r3, #1
 80159de:	2300      	moveq	r3, #0
 80159e0:	b2db      	uxtb	r3, r3
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	370c      	adds	r7, #12
 80159e6:	46bd      	mov	sp, r7
 80159e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	240011f0 	.word	0x240011f0

080159f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b085      	sub	sp, #20
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80159fe:	2300      	movs	r3, #0
 8015a00:	60fb      	str	r3, [r7, #12]
 8015a02:	e01f      	b.n	8015a44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015a04:	4a41      	ldr	r2, [pc, #260]	@ (8015b0c <inc_lock+0x118>)
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	011b      	lsls	r3, r3, #4
 8015a0a:	4413      	add	r3, r2
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d113      	bne.n	8015a3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015a16:	4a3d      	ldr	r2, [pc, #244]	@ (8015b0c <inc_lock+0x118>)
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	011b      	lsls	r3, r3, #4
 8015a1c:	4413      	add	r3, r2
 8015a1e:	3304      	adds	r3, #4
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d109      	bne.n	8015a3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015a2a:	4a38      	ldr	r2, [pc, #224]	@ (8015b0c <inc_lock+0x118>)
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	011b      	lsls	r3, r3, #4
 8015a30:	4413      	add	r3, r2
 8015a32:	3308      	adds	r3, #8
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d006      	beq.n	8015a4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3301      	adds	r3, #1
 8015a42:	60fb      	str	r3, [r7, #12]
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b01      	cmp	r3, #1
 8015a48:	d9dc      	bls.n	8015a04 <inc_lock+0x10>
 8015a4a:	e000      	b.n	8015a4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015a4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2b02      	cmp	r3, #2
 8015a52:	d132      	bne.n	8015aba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015a54:	2300      	movs	r3, #0
 8015a56:	60fb      	str	r3, [r7, #12]
 8015a58:	e002      	b.n	8015a60 <inc_lock+0x6c>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	60fb      	str	r3, [r7, #12]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	2b01      	cmp	r3, #1
 8015a64:	d806      	bhi.n	8015a74 <inc_lock+0x80>
 8015a66:	4a29      	ldr	r2, [pc, #164]	@ (8015b0c <inc_lock+0x118>)
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	011b      	lsls	r3, r3, #4
 8015a6c:	4413      	add	r3, r2
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d1f2      	bne.n	8015a5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2b02      	cmp	r3, #2
 8015a78:	d101      	bne.n	8015a7e <inc_lock+0x8a>
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	e040      	b.n	8015b00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	4922      	ldr	r1, [pc, #136]	@ (8015b0c <inc_lock+0x118>)
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	011b      	lsls	r3, r3, #4
 8015a88:	440b      	add	r3, r1
 8015a8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	689a      	ldr	r2, [r3, #8]
 8015a90:	491e      	ldr	r1, [pc, #120]	@ (8015b0c <inc_lock+0x118>)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	011b      	lsls	r3, r3, #4
 8015a96:	440b      	add	r3, r1
 8015a98:	3304      	adds	r3, #4
 8015a9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015aa0:	491a      	ldr	r1, [pc, #104]	@ (8015b0c <inc_lock+0x118>)
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	011b      	lsls	r3, r3, #4
 8015aa6:	440b      	add	r3, r1
 8015aa8:	3308      	adds	r3, #8
 8015aaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015aac:	4a17      	ldr	r2, [pc, #92]	@ (8015b0c <inc_lock+0x118>)
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	011b      	lsls	r3, r3, #4
 8015ab2:	4413      	add	r3, r2
 8015ab4:	330c      	adds	r3, #12
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d009      	beq.n	8015ad4 <inc_lock+0xe0>
 8015ac0:	4a12      	ldr	r2, [pc, #72]	@ (8015b0c <inc_lock+0x118>)
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	011b      	lsls	r3, r3, #4
 8015ac6:	4413      	add	r3, r2
 8015ac8:	330c      	adds	r3, #12
 8015aca:	881b      	ldrh	r3, [r3, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d001      	beq.n	8015ad4 <inc_lock+0xe0>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	e015      	b.n	8015b00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d108      	bne.n	8015aec <inc_lock+0xf8>
 8015ada:	4a0c      	ldr	r2, [pc, #48]	@ (8015b0c <inc_lock+0x118>)
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	011b      	lsls	r3, r3, #4
 8015ae0:	4413      	add	r3, r2
 8015ae2:	330c      	adds	r3, #12
 8015ae4:	881b      	ldrh	r3, [r3, #0]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	e001      	b.n	8015af0 <inc_lock+0xfc>
 8015aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015af0:	4906      	ldr	r1, [pc, #24]	@ (8015b0c <inc_lock+0x118>)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	011b      	lsls	r3, r3, #4
 8015af6:	440b      	add	r3, r1
 8015af8:	330c      	adds	r3, #12
 8015afa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	3301      	adds	r3, #1
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3714      	adds	r7, #20
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr
 8015b0c:	240011f0 	.word	0x240011f0

08015b10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	607b      	str	r3, [r7, #4]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d825      	bhi.n	8015b70 <dec_lock+0x60>
		n = Files[i].ctr;
 8015b24:	4a17      	ldr	r2, [pc, #92]	@ (8015b84 <dec_lock+0x74>)
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	011b      	lsls	r3, r3, #4
 8015b2a:	4413      	add	r3, r2
 8015b2c:	330c      	adds	r3, #12
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015b32:	89fb      	ldrh	r3, [r7, #14]
 8015b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b38:	d101      	bne.n	8015b3e <dec_lock+0x2e>
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015b3e:	89fb      	ldrh	r3, [r7, #14]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d002      	beq.n	8015b4a <dec_lock+0x3a>
 8015b44:	89fb      	ldrh	r3, [r7, #14]
 8015b46:	3b01      	subs	r3, #1
 8015b48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8015b84 <dec_lock+0x74>)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	011b      	lsls	r3, r3, #4
 8015b50:	4413      	add	r3, r2
 8015b52:	330c      	adds	r3, #12
 8015b54:	89fa      	ldrh	r2, [r7, #14]
 8015b56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015b58:	89fb      	ldrh	r3, [r7, #14]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d105      	bne.n	8015b6a <dec_lock+0x5a>
 8015b5e:	4a09      	ldr	r2, [pc, #36]	@ (8015b84 <dec_lock+0x74>)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	011b      	lsls	r3, r3, #4
 8015b64:	4413      	add	r3, r2
 8015b66:	2200      	movs	r2, #0
 8015b68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	737b      	strb	r3, [r7, #13]
 8015b6e:	e001      	b.n	8015b74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015b70:	2302      	movs	r3, #2
 8015b72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3714      	adds	r7, #20
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop
 8015b84:	240011f0 	.word	0x240011f0

08015b88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b085      	sub	sp, #20
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015b90:	2300      	movs	r3, #0
 8015b92:	60fb      	str	r3, [r7, #12]
 8015b94:	e010      	b.n	8015bb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015b96:	4a0d      	ldr	r2, [pc, #52]	@ (8015bcc <clear_lock+0x44>)
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	011b      	lsls	r3, r3, #4
 8015b9c:	4413      	add	r3, r2
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d105      	bne.n	8015bb2 <clear_lock+0x2a>
 8015ba6:	4a09      	ldr	r2, [pc, #36]	@ (8015bcc <clear_lock+0x44>)
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	011b      	lsls	r3, r3, #4
 8015bac:	4413      	add	r3, r2
 8015bae:	2200      	movs	r2, #0
 8015bb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	60fb      	str	r3, [r7, #12]
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2b01      	cmp	r3, #1
 8015bbc:	d9eb      	bls.n	8015b96 <clear_lock+0xe>
	}
}
 8015bbe:	bf00      	nop
 8015bc0:	bf00      	nop
 8015bc2:	3714      	adds	r7, #20
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr
 8015bcc:	240011f0 	.word	0x240011f0

08015bd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	78db      	ldrb	r3, [r3, #3]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d034      	beq.n	8015c4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015be8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	7858      	ldrb	r0, [r3, #1]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	697a      	ldr	r2, [r7, #20]
 8015bf8:	f7ff fbdc 	bl	80153b4 <disk_write>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015c02:	2301      	movs	r3, #1
 8015c04:	73fb      	strb	r3, [r7, #15]
 8015c06:	e022      	b.n	8015c4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c12:	697a      	ldr	r2, [r7, #20]
 8015c14:	1ad2      	subs	r2, r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6a1b      	ldr	r3, [r3, #32]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d217      	bcs.n	8015c4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	789b      	ldrb	r3, [r3, #2]
 8015c22:	613b      	str	r3, [r7, #16]
 8015c24:	e010      	b.n	8015c48 <sync_window+0x78>
					wsect += fs->fsize;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6a1b      	ldr	r3, [r3, #32]
 8015c2a:	697a      	ldr	r2, [r7, #20]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	7858      	ldrb	r0, [r3, #1]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	697a      	ldr	r2, [r7, #20]
 8015c3e:	f7ff fbb9 	bl	80153b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	3b01      	subs	r3, #1
 8015c46:	613b      	str	r3, [r7, #16]
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d8eb      	bhi.n	8015c26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3718      	adds	r7, #24
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015c62:	2300      	movs	r3, #0
 8015c64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015c6a:	683a      	ldr	r2, [r7, #0]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d01b      	beq.n	8015ca8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7ff ffad 	bl	8015bd0 <sync_window>
 8015c76:	4603      	mov	r3, r0
 8015c78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015c7a:	7bfb      	ldrb	r3, [r7, #15]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d113      	bne.n	8015ca8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	7858      	ldrb	r0, [r3, #1]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	683a      	ldr	r2, [r7, #0]
 8015c8e:	f7ff fb71 	bl	8015374 <disk_read>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d004      	beq.n	8015ca2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015c98:	f04f 33ff 	mov.w	r3, #4294967295
 8015c9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	683a      	ldr	r2, [r7, #0]
 8015ca6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8015ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3710      	adds	r7, #16
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
	...

08015cb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7ff ff87 	bl	8015bd0 <sync_window>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015cc6:	7bfb      	ldrb	r3, [r7, #15]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d158      	bne.n	8015d7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	2b03      	cmp	r3, #3
 8015cd2:	d148      	bne.n	8015d66 <sync_fs+0xb2>
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	791b      	ldrb	r3, [r3, #4]
 8015cd8:	2b01      	cmp	r3, #1
 8015cda:	d144      	bne.n	8015d66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	3338      	adds	r3, #56	@ 0x38
 8015ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7ff fda8 	bl	801583c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	3338      	adds	r3, #56	@ 0x38
 8015cf0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015cf4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7ff fcaf 	bl	801565c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	3338      	adds	r3, #56	@ 0x38
 8015d02:	4921      	ldr	r1, [pc, #132]	@ (8015d88 <sync_fs+0xd4>)
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7ff fcc4 	bl	8015692 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	3338      	adds	r3, #56	@ 0x38
 8015d0e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015d12:	491e      	ldr	r1, [pc, #120]	@ (8015d8c <sync_fs+0xd8>)
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff fcbc 	bl	8015692 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	3338      	adds	r3, #56	@ 0x38
 8015d1e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	4619      	mov	r1, r3
 8015d28:	4610      	mov	r0, r2
 8015d2a:	f7ff fcb2 	bl	8015692 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	3338      	adds	r3, #56	@ 0x38
 8015d32:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	695b      	ldr	r3, [r3, #20]
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	f7ff fca8 	bl	8015692 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d46:	1c5a      	adds	r2, r3, #1
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	7858      	ldrb	r0, [r3, #1]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	f7ff fb2a 	bl	80153b4 <disk_write>
			fs->fsi_flag = 0;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2200      	movs	r2, #0
 8015d64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	785b      	ldrb	r3, [r3, #1]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7ff fb40 	bl	80153f4 <disk_ioctl>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d001      	beq.n	8015d7e <sync_fs+0xca>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3710      	adds	r7, #16
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	41615252 	.word	0x41615252
 8015d8c:	61417272 	.word	0x61417272

08015d90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b083      	sub	sp, #12
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	3b02      	subs	r3, #2
 8015d9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	69db      	ldr	r3, [r3, #28]
 8015da4:	3b02      	subs	r3, #2
 8015da6:	683a      	ldr	r2, [r7, #0]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d301      	bcc.n	8015db0 <clust2sect+0x20>
 8015dac:	2300      	movs	r3, #0
 8015dae:	e008      	b.n	8015dc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	895b      	ldrh	r3, [r3, #10]
 8015db4:	461a      	mov	r2, r3
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	fb03 f202 	mul.w	r2, r3, r2
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015dc0:	4413      	add	r3, r2
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	370c      	adds	r7, #12
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr
	...

08015dd0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b088      	sub	sp, #32
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015dda:	6879      	ldr	r1, [r7, #4]
 8015ddc:	6809      	ldr	r1, [r1, #0]
 8015dde:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015de0:	6839      	ldr	r1, [r7, #0]
 8015de2:	2901      	cmp	r1, #1
 8015de4:	d904      	bls.n	8015df0 <get_fat+0x20>
 8015de6:	69b9      	ldr	r1, [r7, #24]
 8015de8:	69c9      	ldr	r1, [r1, #28]
 8015dea:	6838      	ldr	r0, [r7, #0]
 8015dec:	4288      	cmp	r0, r1
 8015dee:	d302      	bcc.n	8015df6 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015df0:	2301      	movs	r3, #1
 8015df2:	61fb      	str	r3, [r7, #28]
 8015df4:	e100      	b.n	8015ff8 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015df6:	f04f 31ff 	mov.w	r1, #4294967295
 8015dfa:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8015dfc:	69b9      	ldr	r1, [r7, #24]
 8015dfe:	7809      	ldrb	r1, [r1, #0]
 8015e00:	3901      	subs	r1, #1
 8015e02:	2903      	cmp	r1, #3
 8015e04:	f200 80ec 	bhi.w	8015fe0 <get_fat+0x210>
 8015e08:	a001      	add	r0, pc, #4	@ (adr r0, 8015e10 <get_fat+0x40>)
 8015e0a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015e0e:	bf00      	nop
 8015e10:	08015e21 	.word	0x08015e21
 8015e14:	08015ea7 	.word	0x08015ea7
 8015e18:	08015edd 	.word	0x08015edd
 8015e1c:	08015f15 	.word	0x08015f15
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	60fb      	str	r3, [r7, #12]
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	085b      	lsrs	r3, r3, #1
 8015e28:	68fa      	ldr	r2, [r7, #12]
 8015e2a:	4413      	add	r3, r2
 8015e2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	0a5b      	lsrs	r3, r3, #9
 8015e36:	4413      	add	r3, r2
 8015e38:	4619      	mov	r1, r3
 8015e3a:	69b8      	ldr	r0, [r7, #24]
 8015e3c:	f7ff ff0c 	bl	8015c58 <move_window>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	f040 80cf 	bne.w	8015fe6 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	1c5a      	adds	r2, r3, #1
 8015e4c:	60fa      	str	r2, [r7, #12]
 8015e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e52:	69ba      	ldr	r2, [r7, #24]
 8015e54:	4413      	add	r3, r2
 8015e56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015e5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	0a5b      	lsrs	r3, r3, #9
 8015e64:	4413      	add	r3, r2
 8015e66:	4619      	mov	r1, r3
 8015e68:	69b8      	ldr	r0, [r7, #24]
 8015e6a:	f7ff fef5 	bl	8015c58 <move_window>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	f040 80ba 	bne.w	8015fea <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e7c:	69ba      	ldr	r2, [r7, #24]
 8015e7e:	4413      	add	r3, r2
 8015e80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015e84:	021b      	lsls	r3, r3, #8
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	4313      	orrs	r3, r2
 8015e8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	f003 0301 	and.w	r3, r3, #1
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d002      	beq.n	8015e9c <get_fat+0xcc>
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	091b      	lsrs	r3, r3, #4
 8015e9a:	e002      	b.n	8015ea2 <get_fat+0xd2>
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015ea2:	61fb      	str	r3, [r7, #28]
			break;
 8015ea4:	e0a8      	b.n	8015ff8 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015ea6:	69bb      	ldr	r3, [r7, #24]
 8015ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	0a1b      	lsrs	r3, r3, #8
 8015eae:	4413      	add	r3, r2
 8015eb0:	4619      	mov	r1, r3
 8015eb2:	69b8      	ldr	r0, [r7, #24]
 8015eb4:	f7ff fed0 	bl	8015c58 <move_window>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f040 8097 	bne.w	8015fee <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8015ece:	4413      	add	r3, r2
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ff faad 	bl	8015430 <ld_word>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	61fb      	str	r3, [r7, #28]
			break;
 8015eda:	e08d      	b.n	8015ff8 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	09db      	lsrs	r3, r3, #7
 8015ee4:	4413      	add	r3, r2
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	69b8      	ldr	r0, [r7, #24]
 8015eea:	f7ff feb5 	bl	8015c58 <move_window>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d17e      	bne.n	8015ff2 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	009b      	lsls	r3, r3, #2
 8015efe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8015f02:	4413      	add	r3, r2
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff faab 	bl	8015460 <ld_dword>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8015f10:	61fb      	str	r3, [r7, #28]
			break;
 8015f12:	e071      	b.n	8015ff8 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8015f14:	6879      	ldr	r1, [r7, #4]
 8015f16:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8015f1a:	4301      	orrs	r1, r0
 8015f1c:	d060      	beq.n	8015fe0 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8015f1e:	6879      	ldr	r1, [r7, #4]
 8015f20:	6889      	ldr	r1, [r1, #8]
 8015f22:	6838      	ldr	r0, [r7, #0]
 8015f24:	1a41      	subs	r1, r0, r1
 8015f26:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8015f28:	6879      	ldr	r1, [r7, #4]
 8015f2a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8015f2e:	1e42      	subs	r2, r0, #1
 8015f30:	f141 33ff 	adc.w	r3, r1, #4294967295
 8015f34:	f04f 0000 	mov.w	r0, #0
 8015f38:	f04f 0100 	mov.w	r1, #0
 8015f3c:	0a50      	lsrs	r0, r2, #9
 8015f3e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8015f42:	0a59      	lsrs	r1, r3, #9
 8015f44:	4602      	mov	r2, r0
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	895b      	ldrh	r3, [r3, #10]
 8015f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f4e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	79db      	ldrb	r3, [r3, #7]
 8015f54:	2b02      	cmp	r3, #2
 8015f56:	d10e      	bne.n	8015f76 <get_fat+0x1a6>
					if (cofs <= clen) {
 8015f58:	697a      	ldr	r2, [r7, #20]
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d80a      	bhi.n	8015f76 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8015f60:	697a      	ldr	r2, [r7, #20]
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d002      	beq.n	8015f6e <get_fat+0x19e>
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	e001      	b.n	8015f72 <get_fat+0x1a2>
 8015f6e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015f72:	61fb      	str	r3, [r7, #28]
						break;
 8015f74:	e040      	b.n	8015ff8 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	79db      	ldrb	r3, [r3, #7]
 8015f7a:	2b03      	cmp	r3, #3
 8015f7c:	d108      	bne.n	8015f90 <get_fat+0x1c0>
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	699b      	ldr	r3, [r3, #24]
 8015f82:	697a      	ldr	r2, [r7, #20]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d203      	bcs.n	8015f90 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	3301      	adds	r3, #1
 8015f8c:	61fb      	str	r3, [r7, #28]
					break;
 8015f8e:	e033      	b.n	8015ff8 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	79db      	ldrb	r3, [r3, #7]
 8015f94:	2b02      	cmp	r3, #2
 8015f96:	d023      	beq.n	8015fe0 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	69db      	ldr	r3, [r3, #28]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d003      	beq.n	8015fa8 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8015fa0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015fa4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8015fa6:	e027      	b.n	8015ff8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	09db      	lsrs	r3, r3, #7
 8015fb0:	4413      	add	r3, r2
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	69b8      	ldr	r0, [r7, #24]
 8015fb6:	f7ff fe4f 	bl	8015c58 <move_window>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d11a      	bne.n	8015ff6 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8015fce:	4413      	add	r3, r2
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7ff fa45 	bl	8015460 <ld_dword>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015fdc:	61fb      	str	r3, [r7, #28]
					break;
 8015fde:	e00b      	b.n	8015ff8 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	61fb      	str	r3, [r7, #28]
 8015fe4:	e008      	b.n	8015ff8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fe6:	bf00      	nop
 8015fe8:	e006      	b.n	8015ff8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fea:	bf00      	nop
 8015fec:	e004      	b.n	8015ff8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015fee:	bf00      	nop
 8015ff0:	e002      	b.n	8015ff8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ff2:	bf00      	nop
 8015ff4:	e000      	b.n	8015ff8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ff6:	bf00      	nop
		}
	}

	return val;
 8015ff8:	69fb      	ldr	r3, [r7, #28]
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	3720      	adds	r7, #32
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop

08016004 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016004:	b590      	push	{r4, r7, lr}
 8016006:	b089      	sub	sp, #36	@ 0x24
 8016008:	af00      	add	r7, sp, #0
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016010:	2302      	movs	r3, #2
 8016012:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	2b01      	cmp	r3, #1
 8016018:	f240 80dd 	bls.w	80161d6 <put_fat+0x1d2>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	69db      	ldr	r3, [r3, #28]
 8016020:	68ba      	ldr	r2, [r7, #8]
 8016022:	429a      	cmp	r2, r3
 8016024:	f080 80d7 	bcs.w	80161d6 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	2b04      	cmp	r3, #4
 801602e:	f300 80d2 	bgt.w	80161d6 <put_fat+0x1d2>
 8016032:	2b03      	cmp	r3, #3
 8016034:	f280 8093 	bge.w	801615e <put_fat+0x15a>
 8016038:	2b01      	cmp	r3, #1
 801603a:	d002      	beq.n	8016042 <put_fat+0x3e>
 801603c:	2b02      	cmp	r3, #2
 801603e:	d06e      	beq.n	801611e <put_fat+0x11a>
 8016040:	e0c9      	b.n	80161d6 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	61bb      	str	r3, [r7, #24]
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	085b      	lsrs	r3, r3, #1
 801604a:	69ba      	ldr	r2, [r7, #24]
 801604c:	4413      	add	r3, r2
 801604e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	0a5b      	lsrs	r3, r3, #9
 8016058:	4413      	add	r3, r2
 801605a:	4619      	mov	r1, r3
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f7ff fdfb 	bl	8015c58 <move_window>
 8016062:	4603      	mov	r3, r0
 8016064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016066:	7ffb      	ldrb	r3, [r7, #31]
 8016068:	2b00      	cmp	r3, #0
 801606a:	f040 80ad 	bne.w	80161c8 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	1c59      	adds	r1, r3, #1
 8016078:	61b9      	str	r1, [r7, #24]
 801607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801607e:	4413      	add	r3, r2
 8016080:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	f003 0301 	and.w	r3, r3, #1
 8016088:	2b00      	cmp	r3, #0
 801608a:	d00d      	beq.n	80160a8 <put_fat+0xa4>
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	b25b      	sxtb	r3, r3
 8016092:	f003 030f 	and.w	r3, r3, #15
 8016096:	b25a      	sxtb	r2, r3
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	b2db      	uxtb	r3, r3
 801609c:	011b      	lsls	r3, r3, #4
 801609e:	b25b      	sxtb	r3, r3
 80160a0:	4313      	orrs	r3, r2
 80160a2:	b25b      	sxtb	r3, r3
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	e001      	b.n	80160ac <put_fat+0xa8>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	697a      	ldr	r2, [r7, #20]
 80160ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2201      	movs	r2, #1
 80160b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80160ba:	69bb      	ldr	r3, [r7, #24]
 80160bc:	0a5b      	lsrs	r3, r3, #9
 80160be:	4413      	add	r3, r2
 80160c0:	4619      	mov	r1, r3
 80160c2:	68f8      	ldr	r0, [r7, #12]
 80160c4:	f7ff fdc8 	bl	8015c58 <move_window>
 80160c8:	4603      	mov	r3, r0
 80160ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160cc:	7ffb      	ldrb	r3, [r7, #31]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d17c      	bne.n	80161cc <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80160d8:	69bb      	ldr	r3, [r7, #24]
 80160da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160de:	4413      	add	r3, r2
 80160e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	f003 0301 	and.w	r3, r3, #1
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d003      	beq.n	80160f4 <put_fat+0xf0>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	091b      	lsrs	r3, r3, #4
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	e00e      	b.n	8016112 <put_fat+0x10e>
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	b25b      	sxtb	r3, r3
 80160fa:	f023 030f 	bic.w	r3, r3, #15
 80160fe:	b25a      	sxtb	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	0a1b      	lsrs	r3, r3, #8
 8016104:	b25b      	sxtb	r3, r3
 8016106:	f003 030f 	and.w	r3, r3, #15
 801610a:	b25b      	sxtb	r3, r3
 801610c:	4313      	orrs	r3, r2
 801610e:	b25b      	sxtb	r3, r3
 8016110:	b2db      	uxtb	r3, r3
 8016112:	697a      	ldr	r2, [r7, #20]
 8016114:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2201      	movs	r2, #1
 801611a:	70da      	strb	r2, [r3, #3]
			break;
 801611c:	e05b      	b.n	80161d6 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	0a1b      	lsrs	r3, r3, #8
 8016126:	4413      	add	r3, r2
 8016128:	4619      	mov	r1, r3
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f7ff fd94 	bl	8015c58 <move_window>
 8016130:	4603      	mov	r3, r0
 8016132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016134:	7ffb      	ldrb	r3, [r7, #31]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d14a      	bne.n	80161d0 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8016148:	4413      	add	r3, r2
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	b292      	uxth	r2, r2
 801614e:	4611      	mov	r1, r2
 8016150:	4618      	mov	r0, r3
 8016152:	f7ff fa83 	bl	801565c <st_word>
			fs->wflag = 1;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2201      	movs	r2, #1
 801615a:	70da      	strb	r2, [r3, #3]
			break;
 801615c:	e03b      	b.n	80161d6 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	09db      	lsrs	r3, r3, #7
 8016166:	4413      	add	r3, r2
 8016168:	4619      	mov	r1, r3
 801616a:	68f8      	ldr	r0, [r7, #12]
 801616c:	f7ff fd74 	bl	8015c58 <move_window>
 8016170:	4603      	mov	r3, r0
 8016172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016174:	7ffb      	ldrb	r3, [r7, #31]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d12c      	bne.n	80161d4 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	2b04      	cmp	r3, #4
 8016180:	d012      	beq.n	80161a8 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	009b      	lsls	r3, r3, #2
 8016192:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8016196:	4413      	add	r3, r2
 8016198:	4618      	mov	r0, r3
 801619a:	f7ff f961 	bl	8015460 <ld_dword>
 801619e:	4603      	mov	r3, r0
 80161a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80161a4:	4323      	orrs	r3, r4
 80161a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	009b      	lsls	r3, r3, #2
 80161b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80161b6:	4413      	add	r3, r2
 80161b8:	6879      	ldr	r1, [r7, #4]
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7ff fa69 	bl	8015692 <st_dword>
			fs->wflag = 1;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2201      	movs	r2, #1
 80161c4:	70da      	strb	r2, [r3, #3]
			break;
 80161c6:	e006      	b.n	80161d6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80161c8:	bf00      	nop
 80161ca:	e004      	b.n	80161d6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80161cc:	bf00      	nop
 80161ce:	e002      	b.n	80161d6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80161d0:	bf00      	nop
 80161d2:	e000      	b.n	80161d6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80161d4:	bf00      	nop
		}
	}
	return res;
 80161d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3724      	adds	r7, #36	@ 0x24
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd90      	pop	{r4, r7, pc}

080161e0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b08a      	sub	sp, #40	@ 0x28
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	60f8      	str	r0, [r7, #12]
 80161e8:	60b9      	str	r1, [r7, #8]
 80161ea:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	3b02      	subs	r3, #2
 80161f0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	69db      	ldr	r3, [r3, #28]
 80161f6:	3b02      	subs	r3, #2
 80161f8:	68ba      	ldr	r2, [r7, #8]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d301      	bcc.n	8016202 <find_bitmap+0x22>
 80161fe:	2300      	movs	r3, #0
 8016200:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	61fb      	str	r3, [r7, #28]
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	61bb      	str	r3, [r7, #24]
 801620a:	2300      	movs	r3, #0
 801620c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	0b1b      	lsrs	r3, r3, #12
 8016216:	4413      	add	r3, r2
 8016218:	4619      	mov	r1, r3
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f7ff fd1c 	bl	8015c58 <move_window>
 8016220:	4603      	mov	r3, r0
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <find_bitmap+0x4c>
 8016226:	f04f 33ff 	mov.w	r3, #4294967295
 801622a:	e051      	b.n	80162d0 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	08db      	lsrs	r3, r3, #3
 8016230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016234:	623b      	str	r3, [r7, #32]
 8016236:	69fb      	ldr	r3, [r7, #28]
 8016238:	f003 0307 	and.w	r3, r3, #7
 801623c:	2201      	movs	r2, #1
 801623e:	fa02 f303 	lsl.w	r3, r2, r3
 8016242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8016246:	68fa      	ldr	r2, [r7, #12]
 8016248:	6a3b      	ldr	r3, [r7, #32]
 801624a:	4413      	add	r3, r2
 801624c:	3338      	adds	r3, #56	@ 0x38
 801624e:	781a      	ldrb	r2, [r3, #0]
 8016250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016254:	4013      	ands	r3, r2
 8016256:	74fb      	strb	r3, [r7, #19]
 8016258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	3301      	adds	r3, #1
 8016266:	61fb      	str	r3, [r7, #28]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	69db      	ldr	r3, [r3, #28]
 801626c:	3b02      	subs	r3, #2
 801626e:	69fa      	ldr	r2, [r7, #28]
 8016270:	429a      	cmp	r2, r3
 8016272:	d307      	bcc.n	8016284 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8016274:	2300      	movs	r3, #0
 8016276:	61fb      	str	r3, [r7, #28]
 8016278:	2300      	movs	r3, #0
 801627a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801627e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016282:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8016284:	7cfb      	ldrb	r3, [r7, #19]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d109      	bne.n	801629e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	3301      	adds	r3, #1
 801628e:	617b      	str	r3, [r7, #20]
 8016290:	697a      	ldr	r2, [r7, #20]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	429a      	cmp	r2, r3
 8016296:	d106      	bne.n	80162a6 <find_bitmap+0xc6>
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	3302      	adds	r3, #2
 801629c:	e018      	b.n	80162d0 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 801629e:	69fb      	ldr	r3, [r7, #28]
 80162a0:	61bb      	str	r3, [r7, #24]
 80162a2:	2300      	movs	r3, #0
 80162a4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80162a6:	69fa      	ldr	r2, [r7, #28]
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d101      	bne.n	80162b2 <find_bitmap+0xd2>
 80162ae:	2300      	movs	r3, #0
 80162b0:	e00e      	b.n	80162d0 <find_bitmap+0xf0>
			} while (bm);
 80162b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d1c5      	bne.n	8016246 <find_bitmap+0x66>
			bm = 1;
 80162ba:	2301      	movs	r3, #1
 80162bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80162c0:	6a3b      	ldr	r3, [r7, #32]
 80162c2:	3301      	adds	r3, #1
 80162c4:	623b      	str	r3, [r7, #32]
 80162c6:	6a3b      	ldr	r3, [r7, #32]
 80162c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162cc:	d3bb      	bcc.n	8016246 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80162ce:	e79e      	b.n	801620e <find_bitmap+0x2e>
	}
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	3728      	adds	r7, #40	@ 0x28
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b088      	sub	sp, #32
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
 80162e4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	3b02      	subs	r3, #2
 80162ea:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	0b1b      	lsrs	r3, r3, #12
 80162f4:	4413      	add	r3, r2
 80162f6:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	08db      	lsrs	r3, r3, #3
 80162fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016300:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	f003 0307 	and.w	r3, r3, #7
 8016308:	2201      	movs	r2, #1
 801630a:	fa02 f303 	lsl.w	r3, r2, r3
 801630e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	1c5a      	adds	r2, r3, #1
 8016314:	617a      	str	r2, [r7, #20]
 8016316:	4619      	mov	r1, r3
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f7ff fc9d 	bl	8015c58 <move_window>
 801631e:	4603      	mov	r3, r0
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <change_bitmap+0x50>
 8016324:	2301      	movs	r3, #1
 8016326:	e03d      	b.n	80163a4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8016328:	68fa      	ldr	r2, [r7, #12]
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	4413      	add	r3, r2
 801632e:	3338      	adds	r3, #56	@ 0x38
 8016330:	781a      	ldrb	r2, [r3, #0]
 8016332:	7ffb      	ldrb	r3, [r7, #31]
 8016334:	4013      	ands	r3, r2
 8016336:	b2db      	uxtb	r3, r3
 8016338:	2b00      	cmp	r3, #0
 801633a:	bf14      	ite	ne
 801633c:	2301      	movne	r3, #1
 801633e:	2300      	moveq	r3, #0
 8016340:	b2db      	uxtb	r3, r3
 8016342:	461a      	mov	r2, r3
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	4293      	cmp	r3, r2
 8016348:	d101      	bne.n	801634e <change_bitmap+0x76>
 801634a:	2302      	movs	r3, #2
 801634c:	e02a      	b.n	80163a4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	4413      	add	r3, r2
 8016354:	3338      	adds	r3, #56	@ 0x38
 8016356:	781a      	ldrb	r2, [r3, #0]
 8016358:	7ffb      	ldrb	r3, [r7, #31]
 801635a:	4053      	eors	r3, r2
 801635c:	b2d9      	uxtb	r1, r3
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	4413      	add	r3, r2
 8016364:	3338      	adds	r3, #56	@ 0x38
 8016366:	460a      	mov	r2, r1
 8016368:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2201      	movs	r2, #1
 801636e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	3b01      	subs	r3, #1
 8016374:	607b      	str	r3, [r7, #4]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d101      	bne.n	8016380 <change_bitmap+0xa8>
 801637c:	2300      	movs	r3, #0
 801637e:	e011      	b.n	80163a4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8016380:	7ffb      	ldrb	r3, [r7, #31]
 8016382:	005b      	lsls	r3, r3, #1
 8016384:	77fb      	strb	r3, [r7, #31]
 8016386:	7ffb      	ldrb	r3, [r7, #31]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d1cd      	bne.n	8016328 <change_bitmap+0x50>
			bm = 1;
 801638c:	2301      	movs	r3, #1
 801638e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	3301      	adds	r3, #1
 8016394:	61bb      	str	r3, [r7, #24]
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801639c:	d3c4      	bcc.n	8016328 <change_bitmap+0x50>
		i = 0;
 801639e:	2300      	movs	r3, #0
 80163a0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80163a2:	e7b5      	b.n	8016310 <change_bitmap+0x38>
	}
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3720      	adds	r7, #32
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b086      	sub	sp, #24
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	79db      	ldrb	r3, [r3, #7]
 80163b8:	2b03      	cmp	r3, #3
 80163ba:	d121      	bne.n	8016400 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	689b      	ldr	r3, [r3, #8]
 80163c0:	617b      	str	r3, [r7, #20]
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	699b      	ldr	r3, [r3, #24]
 80163c6:	613b      	str	r3, [r7, #16]
 80163c8:	e014      	b.n	80163f4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6818      	ldr	r0, [r3, #0]
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	3301      	adds	r3, #1
 80163d2:	461a      	mov	r2, r3
 80163d4:	6979      	ldr	r1, [r7, #20]
 80163d6:	f7ff fe15 	bl	8016004 <put_fat>
 80163da:	4603      	mov	r3, r0
 80163dc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80163de:	7bfb      	ldrb	r3, [r7, #15]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d001      	beq.n	80163e8 <fill_first_frag+0x3c>
 80163e4:	7bfb      	ldrb	r3, [r7, #15]
 80163e6:	e00c      	b.n	8016402 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	3301      	adds	r3, #1
 80163ec:	617b      	str	r3, [r7, #20]
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	3b01      	subs	r3, #1
 80163f2:	613b      	str	r3, [r7, #16]
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1e7      	bne.n	80163ca <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2200      	movs	r2, #0
 80163fe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3718      	adds	r7, #24
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b086      	sub	sp, #24
 801640e:	af00      	add	r7, sp, #0
 8016410:	60f8      	str	r0, [r7, #12]
 8016412:	60b9      	str	r1, [r7, #8]
 8016414:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8016416:	e020      	b.n	801645a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6818      	ldr	r0, [r3, #0]
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	69db      	ldr	r3, [r3, #28]
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	1ad3      	subs	r3, r2, r3
 8016424:	1c59      	adds	r1, r3, #1
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	69db      	ldr	r3, [r3, #28]
 801642a:	2b01      	cmp	r3, #1
 801642c:	d905      	bls.n	801643a <fill_last_frag+0x30>
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	69db      	ldr	r3, [r3, #28]
 8016432:	68ba      	ldr	r2, [r7, #8]
 8016434:	1ad3      	subs	r3, r2, r3
 8016436:	3302      	adds	r3, #2
 8016438:	e000      	b.n	801643c <fill_last_frag+0x32>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	461a      	mov	r2, r3
 801643e:	f7ff fde1 	bl	8016004 <put_fat>
 8016442:	4603      	mov	r3, r0
 8016444:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8016446:	7dfb      	ldrb	r3, [r7, #23]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d001      	beq.n	8016450 <fill_last_frag+0x46>
 801644c:	7dfb      	ldrb	r3, [r7, #23]
 801644e:	e009      	b.n	8016464 <fill_last_frag+0x5a>
		obj->n_frag--;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	69db      	ldr	r3, [r3, #28]
 8016454:	1e5a      	subs	r2, r3, #1
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	69db      	ldr	r3, [r3, #28]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1da      	bne.n	8016418 <fill_last_frag+0xe>
	}
	return FR_OK;
 8016462:	2300      	movs	r3, #0
}
 8016464:	4618      	mov	r0, r3
 8016466:	3718      	adds	r7, #24
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b08a      	sub	sp, #40	@ 0x28
 8016470:	af00      	add	r7, sp, #0
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016478:	2300      	movs	r3, #0
 801647a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	627b      	str	r3, [r7, #36]	@ 0x24
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	2b01      	cmp	r3, #1
 801648e:	d904      	bls.n	801649a <remove_chain+0x2e>
 8016490:	69bb      	ldr	r3, [r7, #24]
 8016492:	69db      	ldr	r3, [r3, #28]
 8016494:	68ba      	ldr	r2, [r7, #8]
 8016496:	429a      	cmp	r2, r3
 8016498:	d301      	bcc.n	801649e <remove_chain+0x32>
 801649a:	2302      	movs	r3, #2
 801649c:	e096      	b.n	80165cc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d014      	beq.n	80164ce <remove_chain+0x62>
 80164a4:	69bb      	ldr	r3, [r7, #24]
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	2b04      	cmp	r3, #4
 80164aa:	d103      	bne.n	80164b4 <remove_chain+0x48>
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	79db      	ldrb	r3, [r3, #7]
 80164b0:	2b02      	cmp	r3, #2
 80164b2:	d00c      	beq.n	80164ce <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80164b4:	f04f 32ff 	mov.w	r2, #4294967295
 80164b8:	6879      	ldr	r1, [r7, #4]
 80164ba:	69b8      	ldr	r0, [r7, #24]
 80164bc:	f7ff fda2 	bl	8016004 <put_fat>
 80164c0:	4603      	mov	r3, r0
 80164c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80164c4:	7ffb      	ldrb	r3, [r7, #31]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d001      	beq.n	80164ce <remove_chain+0x62>
 80164ca:	7ffb      	ldrb	r3, [r7, #31]
 80164cc:	e07e      	b.n	80165cc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80164ce:	68b9      	ldr	r1, [r7, #8]
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f7ff fc7d 	bl	8015dd0 <get_fat>
 80164d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d055      	beq.n	801658a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d101      	bne.n	80164e8 <remove_chain+0x7c>
 80164e4:	2302      	movs	r3, #2
 80164e6:	e071      	b.n	80165cc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ee:	d101      	bne.n	80164f4 <remove_chain+0x88>
 80164f0:	2301      	movs	r3, #1
 80164f2:	e06b      	b.n	80165cc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	2b04      	cmp	r3, #4
 80164fa:	d00b      	beq.n	8016514 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80164fc:	2200      	movs	r2, #0
 80164fe:	68b9      	ldr	r1, [r7, #8]
 8016500:	69b8      	ldr	r0, [r7, #24]
 8016502:	f7ff fd7f 	bl	8016004 <put_fat>
 8016506:	4603      	mov	r3, r0
 8016508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801650a:	7ffb      	ldrb	r3, [r7, #31]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d001      	beq.n	8016514 <remove_chain+0xa8>
 8016510:	7ffb      	ldrb	r3, [r7, #31]
 8016512:	e05b      	b.n	80165cc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	699a      	ldr	r2, [r3, #24]
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	69db      	ldr	r3, [r3, #28]
 801651c:	3b02      	subs	r3, #2
 801651e:	429a      	cmp	r2, r3
 8016520:	d20b      	bcs.n	801653a <remove_chain+0xce>
			fs->free_clst++;
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	699b      	ldr	r3, [r3, #24]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801652c:	69bb      	ldr	r3, [r7, #24]
 801652e:	791b      	ldrb	r3, [r3, #4]
 8016530:	f043 0301 	orr.w	r3, r3, #1
 8016534:	b2da      	uxtb	r2, r3
 8016536:	69bb      	ldr	r3, [r7, #24]
 8016538:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 801653a:	6a3b      	ldr	r3, [r7, #32]
 801653c:	3301      	adds	r3, #1
 801653e:	697a      	ldr	r2, [r7, #20]
 8016540:	429a      	cmp	r2, r3
 8016542:	d102      	bne.n	801654a <remove_chain+0xde>
			ecl = nxt;
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	623b      	str	r3, [r7, #32]
 8016548:	e017      	b.n	801657a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	2b04      	cmp	r3, #4
 8016550:	d10f      	bne.n	8016572 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8016552:	6a3a      	ldr	r2, [r7, #32]
 8016554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016556:	1ad3      	subs	r3, r2, r3
 8016558:	1c5a      	adds	r2, r3, #1
 801655a:	2300      	movs	r3, #0
 801655c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801655e:	69b8      	ldr	r0, [r7, #24]
 8016560:	f7ff feba 	bl	80162d8 <change_bitmap>
 8016564:	4603      	mov	r3, r0
 8016566:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8016568:	7ffb      	ldrb	r3, [r7, #31]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d001      	beq.n	8016572 <remove_chain+0x106>
 801656e:	7ffb      	ldrb	r3, [r7, #31]
 8016570:	e02c      	b.n	80165cc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8016572:	697b      	ldr	r3, [r7, #20]
 8016574:	623b      	str	r3, [r7, #32]
 8016576:	6a3b      	ldr	r3, [r7, #32]
 8016578:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	69db      	ldr	r3, [r3, #28]
 8016582:	68ba      	ldr	r2, [r7, #8]
 8016584:	429a      	cmp	r2, r3
 8016586:	d3a2      	bcc.n	80164ce <remove_chain+0x62>
 8016588:	e000      	b.n	801658c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 801658a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 801658c:	69bb      	ldr	r3, [r7, #24]
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	2b04      	cmp	r3, #4
 8016592:	d11a      	bne.n	80165ca <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d103      	bne.n	80165a2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2200      	movs	r2, #0
 801659e:	71da      	strb	r2, [r3, #7]
 80165a0:	e013      	b.n	80165ca <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	79db      	ldrb	r3, [r3, #7]
 80165a6:	2b03      	cmp	r3, #3
 80165a8:	d10f      	bne.n	80165ca <remove_chain+0x15e>
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	689b      	ldr	r3, [r3, #8]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d30a      	bcc.n	80165ca <remove_chain+0x15e>
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	689a      	ldr	r2, [r3, #8]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	699b      	ldr	r3, [r3, #24]
 80165bc:	4413      	add	r3, r2
 80165be:	687a      	ldr	r2, [r7, #4]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d802      	bhi.n	80165ca <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2202      	movs	r2, #2
 80165c8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80165ca:	2300      	movs	r3, #0
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3728      	adds	r7, #40	@ 0x28
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b088      	sub	sp, #32
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d10d      	bne.n	8016606 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	695b      	ldr	r3, [r3, #20]
 80165ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d004      	beq.n	8016600 <create_chain+0x2c>
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	69db      	ldr	r3, [r3, #28]
 80165fa:	69ba      	ldr	r2, [r7, #24]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d31b      	bcc.n	8016638 <create_chain+0x64>
 8016600:	2301      	movs	r3, #1
 8016602:	61bb      	str	r3, [r7, #24]
 8016604:	e018      	b.n	8016638 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016606:	6839      	ldr	r1, [r7, #0]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7ff fbe1 	bl	8015dd0 <get_fat>
 801660e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d801      	bhi.n	801661a <create_chain+0x46>
 8016616:	2301      	movs	r3, #1
 8016618:	e0d9      	b.n	80167ce <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016620:	d101      	bne.n	8016626 <create_chain+0x52>
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	e0d3      	b.n	80167ce <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016626:	693b      	ldr	r3, [r7, #16]
 8016628:	69db      	ldr	r3, [r3, #28]
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	429a      	cmp	r2, r3
 801662e:	d201      	bcs.n	8016634 <create_chain+0x60>
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	e0cc      	b.n	80167ce <create_chain+0x1fa>
		scl = clst;
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	2b04      	cmp	r3, #4
 801663e:	d164      	bne.n	801670a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8016640:	2201      	movs	r2, #1
 8016642:	69b9      	ldr	r1, [r7, #24]
 8016644:	6938      	ldr	r0, [r7, #16]
 8016646:	f7ff fdcb 	bl	80161e0 <find_bitmap>
 801664a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d003      	beq.n	801665a <create_chain+0x86>
 8016652:	69fb      	ldr	r3, [r7, #28]
 8016654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016658:	d101      	bne.n	801665e <create_chain+0x8a>
 801665a:	69fb      	ldr	r3, [r7, #28]
 801665c:	e0b7      	b.n	80167ce <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 801665e:	2301      	movs	r3, #1
 8016660:	2201      	movs	r2, #1
 8016662:	69f9      	ldr	r1, [r7, #28]
 8016664:	6938      	ldr	r0, [r7, #16]
 8016666:	f7ff fe37 	bl	80162d8 <change_bitmap>
 801666a:	4603      	mov	r3, r0
 801666c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 801666e:	7dfb      	ldrb	r3, [r7, #23]
 8016670:	2b02      	cmp	r3, #2
 8016672:	d101      	bne.n	8016678 <create_chain+0xa4>
 8016674:	2301      	movs	r3, #1
 8016676:	e0aa      	b.n	80167ce <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8016678:	7dfb      	ldrb	r3, [r7, #23]
 801667a:	2b01      	cmp	r3, #1
 801667c:	d102      	bne.n	8016684 <create_chain+0xb0>
 801667e:	f04f 33ff 	mov.w	r3, #4294967295
 8016682:	e0a4      	b.n	80167ce <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d103      	bne.n	8016692 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2202      	movs	r2, #2
 801668e:	71da      	strb	r2, [r3, #7]
 8016690:	e011      	b.n	80166b6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	79db      	ldrb	r3, [r3, #7]
 8016696:	2b02      	cmp	r3, #2
 8016698:	d10d      	bne.n	80166b6 <create_chain+0xe2>
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	3301      	adds	r3, #1
 801669e:	69fa      	ldr	r2, [r7, #28]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d008      	beq.n	80166b6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	689b      	ldr	r3, [r3, #8]
 80166a8:	69ba      	ldr	r2, [r7, #24]
 80166aa:	1ad2      	subs	r2, r2, r3
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2203      	movs	r2, #3
 80166b4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	79db      	ldrb	r3, [r3, #7]
 80166ba:	2b02      	cmp	r3, #2
 80166bc:	d064      	beq.n	8016788 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	3301      	adds	r3, #1
 80166c2:	69fa      	ldr	r2, [r7, #28]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d10b      	bne.n	80166e0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	69db      	ldr	r3, [r3, #28]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d003      	beq.n	80166d8 <create_chain+0x104>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	69db      	ldr	r3, [r3, #28]
 80166d4:	3301      	adds	r3, #1
 80166d6:	e000      	b.n	80166da <create_chain+0x106>
 80166d8:	2302      	movs	r3, #2
 80166da:	687a      	ldr	r2, [r7, #4]
 80166dc:	61d3      	str	r3, [r2, #28]
 80166de:	e053      	b.n	8016788 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	69db      	ldr	r3, [r3, #28]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d102      	bne.n	80166ee <create_chain+0x11a>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2201      	movs	r2, #1
 80166ec:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80166ee:	69fa      	ldr	r2, [r7, #28]
 80166f0:	6839      	ldr	r1, [r7, #0]
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7ff fe89 	bl	801640a <fill_last_frag>
 80166f8:	4603      	mov	r3, r0
 80166fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80166fc:	7dfb      	ldrb	r3, [r7, #23]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d142      	bne.n	8016788 <create_chain+0x1b4>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2201      	movs	r2, #1
 8016706:	61da      	str	r2, [r3, #28]
 8016708:	e03e      	b.n	8016788 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	3301      	adds	r3, #1
 8016712:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	69db      	ldr	r3, [r3, #28]
 8016718:	69fa      	ldr	r2, [r7, #28]
 801671a:	429a      	cmp	r2, r3
 801671c:	d307      	bcc.n	801672e <create_chain+0x15a>
				ncl = 2;
 801671e:	2302      	movs	r3, #2
 8016720:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016722:	69fa      	ldr	r2, [r7, #28]
 8016724:	69bb      	ldr	r3, [r7, #24]
 8016726:	429a      	cmp	r2, r3
 8016728:	d901      	bls.n	801672e <create_chain+0x15a>
 801672a:	2300      	movs	r3, #0
 801672c:	e04f      	b.n	80167ce <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801672e:	69f9      	ldr	r1, [r7, #28]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7ff fb4d 	bl	8015dd0 <get_fat>
 8016736:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00e      	beq.n	801675c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	2b01      	cmp	r3, #1
 8016742:	d003      	beq.n	801674c <create_chain+0x178>
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801674a:	d101      	bne.n	8016750 <create_chain+0x17c>
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	e03e      	b.n	80167ce <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8016750:	69fa      	ldr	r2, [r7, #28]
 8016752:	69bb      	ldr	r3, [r7, #24]
 8016754:	429a      	cmp	r2, r3
 8016756:	d1da      	bne.n	801670e <create_chain+0x13a>
 8016758:	2300      	movs	r3, #0
 801675a:	e038      	b.n	80167ce <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 801675c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801675e:	f04f 32ff 	mov.w	r2, #4294967295
 8016762:	69f9      	ldr	r1, [r7, #28]
 8016764:	6938      	ldr	r0, [r7, #16]
 8016766:	f7ff fc4d 	bl	8016004 <put_fat>
 801676a:	4603      	mov	r3, r0
 801676c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801676e:	7dfb      	ldrb	r3, [r7, #23]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d109      	bne.n	8016788 <create_chain+0x1b4>
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d006      	beq.n	8016788 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801677a:	69fa      	ldr	r2, [r7, #28]
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	6938      	ldr	r0, [r7, #16]
 8016780:	f7ff fc40 	bl	8016004 <put_fat>
 8016784:	4603      	mov	r3, r0
 8016786:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016788:	7dfb      	ldrb	r3, [r7, #23]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d116      	bne.n	80167bc <create_chain+0x1e8>
		fs->last_clst = ncl;
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	69fa      	ldr	r2, [r7, #28]
 8016792:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	699a      	ldr	r2, [r3, #24]
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	69db      	ldr	r3, [r3, #28]
 801679c:	3b02      	subs	r3, #2
 801679e:	429a      	cmp	r2, r3
 80167a0:	d804      	bhi.n	80167ac <create_chain+0x1d8>
 80167a2:	693b      	ldr	r3, [r7, #16]
 80167a4:	699b      	ldr	r3, [r3, #24]
 80167a6:	1e5a      	subs	r2, r3, #1
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	791b      	ldrb	r3, [r3, #4]
 80167b0:	f043 0301 	orr.w	r3, r3, #1
 80167b4:	b2da      	uxtb	r2, r3
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	711a      	strb	r2, [r3, #4]
 80167ba:	e007      	b.n	80167cc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80167bc:	7dfb      	ldrb	r3, [r7, #23]
 80167be:	2b01      	cmp	r3, #1
 80167c0:	d102      	bne.n	80167c8 <create_chain+0x1f4>
 80167c2:	f04f 33ff 	mov.w	r3, #4294967295
 80167c6:	e000      	b.n	80167ca <create_chain+0x1f6>
 80167c8:	2301      	movs	r3, #1
 80167ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80167cc:	69fb      	ldr	r3, [r7, #28]
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3720      	adds	r7, #32
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}

080167d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80167d6:	b5b0      	push	{r4, r5, r7, lr}
 80167d8:	b088      	sub	sp, #32
 80167da:	af00      	add	r7, sp, #0
 80167dc:	60f8      	str	r0, [r7, #12]
 80167de:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80167ec:	3304      	adds	r3, #4
 80167ee:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80167f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167f4:	f04f 0000 	mov.w	r0, #0
 80167f8:	f04f 0100 	mov.w	r1, #0
 80167fc:	0a50      	lsrs	r0, r2, #9
 80167fe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8016802:	0a59      	lsrs	r1, r3, #9
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	895b      	ldrh	r3, [r3, #10]
 8016808:	b29b      	uxth	r3, r3
 801680a:	2200      	movs	r2, #0
 801680c:	461c      	mov	r4, r3
 801680e:	4615      	mov	r5, r2
 8016810:	4622      	mov	r2, r4
 8016812:	462b      	mov	r3, r5
 8016814:	f7e9 fdb4 	bl	8000380 <__aeabi_uldivmod>
 8016818:	4602      	mov	r2, r0
 801681a:	460b      	mov	r3, r1
 801681c:	4613      	mov	r3, r2
 801681e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016820:	69bb      	ldr	r3, [r7, #24]
 8016822:	1d1a      	adds	r2, r3, #4
 8016824:	61ba      	str	r2, [r7, #24]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d101      	bne.n	8016834 <clmt_clust+0x5e>
 8016830:	2300      	movs	r3, #0
 8016832:	e010      	b.n	8016856 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8016834:	69fa      	ldr	r2, [r7, #28]
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	429a      	cmp	r2, r3
 801683a:	d307      	bcc.n	801684c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 801683c:	69fa      	ldr	r2, [r7, #28]
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	1ad3      	subs	r3, r2, r3
 8016842:	61fb      	str	r3, [r7, #28]
 8016844:	69bb      	ldr	r3, [r7, #24]
 8016846:	3304      	adds	r3, #4
 8016848:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801684a:	e7e9      	b.n	8016820 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 801684c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801684e:	69bb      	ldr	r3, [r7, #24]
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	69fb      	ldr	r3, [r7, #28]
 8016854:	4413      	add	r3, r2
}
 8016856:	4618      	mov	r0, r3
 8016858:	3720      	adds	r7, #32
 801685a:	46bd      	mov	sp, r7
 801685c:	bdb0      	pop	{r4, r5, r7, pc}

0801685e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b086      	sub	sp, #24
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	2b04      	cmp	r3, #4
 8016874:	d102      	bne.n	801687c <dir_sdi+0x1e>
 8016876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801687a:	e001      	b.n	8016880 <dir_sdi+0x22>
 801687c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	429a      	cmp	r2, r3
 8016884:	d904      	bls.n	8016890 <dir_sdi+0x32>
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	f003 031f 	and.w	r3, r3, #31
 801688c:	2b00      	cmp	r3, #0
 801688e:	d001      	beq.n	8016894 <dir_sdi+0x36>
		return FR_INT_ERR;
 8016890:	2302      	movs	r3, #2
 8016892:	e066      	b.n	8016962 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	683a      	ldr	r2, [r7, #0]
 8016898:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d109      	bne.n	80168ba <dir_sdi+0x5c>
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	781b      	ldrb	r3, [r3, #0]
 80168aa:	2b02      	cmp	r3, #2
 80168ac:	d905      	bls.n	80168ba <dir_sdi+0x5c>
		clst = fs->dirbase;
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168b2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2200      	movs	r2, #0
 80168b8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80168ba:	697b      	ldr	r3, [r7, #20]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d10c      	bne.n	80168da <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	095b      	lsrs	r3, r3, #5
 80168c4:	693a      	ldr	r2, [r7, #16]
 80168c6:	8912      	ldrh	r2, [r2, #8]
 80168c8:	4293      	cmp	r3, r2
 80168ca:	d301      	bcc.n	80168d0 <dir_sdi+0x72>
 80168cc:	2302      	movs	r3, #2
 80168ce:	e048      	b.n	8016962 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80168d8:	e029      	b.n	801692e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	895b      	ldrh	r3, [r3, #10]
 80168de:	025b      	lsls	r3, r3, #9
 80168e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80168e2:	e019      	b.n	8016918 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6979      	ldr	r1, [r7, #20]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ff fa71 	bl	8015dd0 <get_fat>
 80168ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168f6:	d101      	bne.n	80168fc <dir_sdi+0x9e>
 80168f8:	2301      	movs	r3, #1
 80168fa:	e032      	b.n	8016962 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d904      	bls.n	801690c <dir_sdi+0xae>
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	69db      	ldr	r3, [r3, #28]
 8016906:	697a      	ldr	r2, [r7, #20]
 8016908:	429a      	cmp	r2, r3
 801690a:	d301      	bcc.n	8016910 <dir_sdi+0xb2>
 801690c:	2302      	movs	r3, #2
 801690e:	e028      	b.n	8016962 <dir_sdi+0x104>
			ofs -= csz;
 8016910:	683a      	ldr	r2, [r7, #0]
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	1ad3      	subs	r3, r2, r3
 8016916:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016918:	683a      	ldr	r2, [r7, #0]
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	429a      	cmp	r2, r3
 801691e:	d2e1      	bcs.n	80168e4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8016920:	6979      	ldr	r1, [r7, #20]
 8016922:	6938      	ldr	r0, [r7, #16]
 8016924:	f7ff fa34 	bl	8015d90 <clust2sect>
 8016928:	4602      	mov	r2, r0
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	697a      	ldr	r2, [r7, #20]
 8016932:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016938:	2b00      	cmp	r3, #0
 801693a:	d101      	bne.n	8016940 <dir_sdi+0xe2>
 801693c:	2302      	movs	r3, #2
 801693e:	e010      	b.n	8016962 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	0a5b      	lsrs	r3, r3, #9
 8016948:	441a      	add	r2, r3
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801695a:	441a      	add	r2, r3
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8016960:	2300      	movs	r3, #0
}
 8016962:	4618      	mov	r0, r3
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b086      	sub	sp, #24
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
 8016972:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801697e:	3320      	adds	r3, #32
 8016980:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016986:	2b00      	cmp	r3, #0
 8016988:	d00b      	beq.n	80169a2 <dir_next+0x38>
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	2b04      	cmp	r3, #4
 8016990:	d102      	bne.n	8016998 <dir_next+0x2e>
 8016992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016996:	e001      	b.n	801699c <dir_next+0x32>
 8016998:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d801      	bhi.n	80169a6 <dir_next+0x3c>
 80169a2:	2304      	movs	r3, #4
 80169a4:	e0b2      	b.n	8016b0c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	f040 80a0 	bne.w	8016af2 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d10b      	bne.n	80169dc <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	095b      	lsrs	r3, r3, #5
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	8912      	ldrh	r2, [r2, #8]
 80169cc:	4293      	cmp	r3, r2
 80169ce:	f0c0 8090 	bcc.w	8016af2 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80169d8:	2304      	movs	r3, #4
 80169da:	e097      	b.n	8016b0c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	0a5b      	lsrs	r3, r3, #9
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	8952      	ldrh	r2, [r2, #10]
 80169e4:	3a01      	subs	r2, #1
 80169e6:	4013      	ands	r3, r2
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	f040 8082 	bne.w	8016af2 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80169f4:	4619      	mov	r1, r3
 80169f6:	4610      	mov	r0, r2
 80169f8:	f7ff f9ea 	bl	8015dd0 <get_fat>
 80169fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d801      	bhi.n	8016a08 <dir_next+0x9e>
 8016a04:	2302      	movs	r3, #2
 8016a06:	e081      	b.n	8016b0c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016a08:	697b      	ldr	r3, [r7, #20]
 8016a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a0e:	d101      	bne.n	8016a14 <dir_next+0xaa>
 8016a10:	2301      	movs	r3, #1
 8016a12:	e07b      	b.n	8016b0c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	69db      	ldr	r3, [r3, #28]
 8016a18:	697a      	ldr	r2, [r7, #20]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d35f      	bcc.n	8016ade <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d104      	bne.n	8016a2e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2200      	movs	r2, #0
 8016a28:	639a      	str	r2, [r3, #56]	@ 0x38
 8016a2a:	2304      	movs	r3, #4
 8016a2c:	e06e      	b.n	8016b0c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a34:	4619      	mov	r1, r3
 8016a36:	4610      	mov	r0, r2
 8016a38:	f7ff fdcc 	bl	80165d4 <create_chain>
 8016a3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d101      	bne.n	8016a48 <dir_next+0xde>
 8016a44:	2307      	movs	r3, #7
 8016a46:	e061      	b.n	8016b0c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d101      	bne.n	8016a52 <dir_next+0xe8>
 8016a4e:	2302      	movs	r3, #2
 8016a50:	e05c      	b.n	8016b0c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a58:	d101      	bne.n	8016a5e <dir_next+0xf4>
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	e056      	b.n	8016b0c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	79db      	ldrb	r3, [r3, #7]
 8016a62:	f043 0304 	orr.w	r3, r3, #4
 8016a66:	b2da      	uxtb	r2, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016a6c:	68f8      	ldr	r0, [r7, #12]
 8016a6e:	f7ff f8af 	bl	8015bd0 <sync_window>
 8016a72:	4603      	mov	r3, r0
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d001      	beq.n	8016a7c <dir_next+0x112>
 8016a78:	2301      	movs	r3, #1
 8016a7a:	e047      	b.n	8016b0c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	3338      	adds	r3, #56	@ 0x38
 8016a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016a84:	2100      	movs	r1, #0
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fe fed8 	bl	801583c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	613b      	str	r3, [r7, #16]
 8016a90:	6979      	ldr	r1, [r7, #20]
 8016a92:	68f8      	ldr	r0, [r7, #12]
 8016a94:	f7ff f97c 	bl	8015d90 <clust2sect>
 8016a98:	4602      	mov	r2, r0
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8016a9e:	e012      	b.n	8016ac6 <dir_next+0x15c>
						fs->wflag = 1;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	f7ff f892 	bl	8015bd0 <sync_window>
 8016aac:	4603      	mov	r3, r0
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d001      	beq.n	8016ab6 <dir_next+0x14c>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e02a      	b.n	8016b0c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	613b      	str	r3, [r7, #16]
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ac0:	1c5a      	adds	r2, r3, #1
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	895b      	ldrh	r3, [r3, #10]
 8016aca:	461a      	mov	r2, r3
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	d3e6      	bcc.n	8016aa0 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	1ad2      	subs	r2, r2, r3
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	697a      	ldr	r2, [r7, #20]
 8016ae2:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8016ae4:	6979      	ldr	r1, [r7, #20]
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f7ff f952 	bl	8015d90 <clust2sect>
 8016aec:	4602      	mov	r2, r0
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	68ba      	ldr	r2, [r7, #8]
 8016af6:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8016afe:	68bb      	ldr	r3, [r7, #8]
 8016b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b04:	441a      	add	r2, r3
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8016b0a:	2300      	movs	r3, #0
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3718      	adds	r7, #24
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b086      	sub	sp, #24
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016b24:	2100      	movs	r1, #0
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f7ff fe99 	bl	801685e <dir_sdi>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016b30:	7dfb      	ldrb	r3, [r7, #23]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d140      	bne.n	8016bb8 <dir_alloc+0xa4>
		n = 0;
 8016b36:	2300      	movs	r3, #0
 8016b38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b3e:	4619      	mov	r1, r3
 8016b40:	68f8      	ldr	r0, [r7, #12]
 8016b42:	f7ff f889 	bl	8015c58 <move_window>
 8016b46:	4603      	mov	r3, r0
 8016b48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d132      	bne.n	8016bb6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	2b04      	cmp	r3, #4
 8016b56:	d108      	bne.n	8016b6a <dir_alloc+0x56>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016b5c:	781b      	ldrb	r3, [r3, #0]
 8016b5e:	b25b      	sxtb	r3, r3
 8016b60:	43db      	mvns	r3, r3
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	09db      	lsrs	r3, r3, #7
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	e00f      	b.n	8016b8a <dir_alloc+0x76>
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016b6e:	781b      	ldrb	r3, [r3, #0]
 8016b70:	2be5      	cmp	r3, #229	@ 0xe5
 8016b72:	d004      	beq.n	8016b7e <dir_alloc+0x6a>
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016b78:	781b      	ldrb	r3, [r3, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d101      	bne.n	8016b82 <dir_alloc+0x6e>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	e000      	b.n	8016b84 <dir_alloc+0x70>
 8016b82:	2300      	movs	r3, #0
 8016b84:	f003 0301 	and.w	r3, r3, #1
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d007      	beq.n	8016b9e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	3301      	adds	r3, #1
 8016b92:	613b      	str	r3, [r7, #16]
 8016b94:	693a      	ldr	r2, [r7, #16]
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	d102      	bne.n	8016ba2 <dir_alloc+0x8e>
 8016b9c:	e00c      	b.n	8016bb8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016ba2:	2101      	movs	r1, #1
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f7ff fee0 	bl	801696a <dir_next>
 8016baa:	4603      	mov	r3, r0
 8016bac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016bae:	7dfb      	ldrb	r3, [r7, #23]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d0c2      	beq.n	8016b3a <dir_alloc+0x26>
 8016bb4:	e000      	b.n	8016bb8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8016bb6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016bb8:	7dfb      	ldrb	r3, [r7, #23]
 8016bba:	2b04      	cmp	r3, #4
 8016bbc:	d101      	bne.n	8016bc2 <dir_alloc+0xae>
 8016bbe:	2307      	movs	r3, #7
 8016bc0:	75fb      	strb	r3, [r7, #23]
	return res;
 8016bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3718      	adds	r7, #24
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b084      	sub	sp, #16
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	331a      	adds	r3, #26
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7fe fc28 	bl	8015430 <ld_word>
 8016be0:	4603      	mov	r3, r0
 8016be2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b03      	cmp	r3, #3
 8016bea:	d109      	bne.n	8016c00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	3314      	adds	r3, #20
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7fe fc1d 	bl	8015430 <ld_word>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	041b      	lsls	r3, r3, #16
 8016bfa:	68fa      	ldr	r2, [r7, #12]
 8016bfc:	4313      	orrs	r3, r2
 8016bfe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016c00:	68fb      	ldr	r3, [r7, #12]
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b084      	sub	sp, #16
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	60f8      	str	r0, [r7, #12]
 8016c12:	60b9      	str	r1, [r7, #8]
 8016c14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016c16:	68bb      	ldr	r3, [r7, #8]
 8016c18:	331a      	adds	r3, #26
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	b292      	uxth	r2, r2
 8016c1e:	4611      	mov	r1, r2
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7fe fd1b 	bl	801565c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	2b03      	cmp	r3, #3
 8016c2c:	d109      	bne.n	8016c42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	f103 0214 	add.w	r2, r3, #20
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	0c1b      	lsrs	r3, r3, #16
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	4610      	mov	r0, r2
 8016c3e:	f7fe fd0d 	bl	801565c <st_word>
	}
}
 8016c42:	bf00      	nop
 8016c44:	3710      	adds	r7, #16
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
	...

08016c4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016c4c:	b590      	push	{r4, r7, lr}
 8016c4e:	b087      	sub	sp, #28
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	331a      	adds	r3, #26
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fe fbe8 	bl	8015430 <ld_word>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d001      	beq.n	8016c6a <cmp_lfn+0x1e>
 8016c66:	2300      	movs	r3, #0
 8016c68:	e059      	b.n	8016d1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016c6a:	683b      	ldr	r3, [r7, #0]
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016c72:	1e5a      	subs	r2, r3, #1
 8016c74:	4613      	mov	r3, r2
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	4413      	add	r3, r2
 8016c7a:	009b      	lsls	r3, r3, #2
 8016c7c:	4413      	add	r3, r2
 8016c7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016c80:	2301      	movs	r3, #1
 8016c82:	81fb      	strh	r3, [r7, #14]
 8016c84:	2300      	movs	r3, #0
 8016c86:	613b      	str	r3, [r7, #16]
 8016c88:	e033      	b.n	8016cf2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016c8a:	4a27      	ldr	r2, [pc, #156]	@ (8016d28 <cmp_lfn+0xdc>)
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	4413      	add	r3, r2
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	461a      	mov	r2, r3
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	4413      	add	r3, r2
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7fe fbc9 	bl	8015430 <ld_word>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016ca2:	89fb      	ldrh	r3, [r7, #14]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d01a      	beq.n	8016cde <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	2bfe      	cmp	r3, #254	@ 0xfe
 8016cac:	d812      	bhi.n	8016cd4 <cmp_lfn+0x88>
 8016cae:	89bb      	ldrh	r3, [r7, #12]
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f002 fc9f 	bl	80195f4 <ff_wtoupper>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	461c      	mov	r4, r3
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	1c5a      	adds	r2, r3, #1
 8016cbe:	617a      	str	r2, [r7, #20]
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	687a      	ldr	r2, [r7, #4]
 8016cc4:	4413      	add	r3, r2
 8016cc6:	881b      	ldrh	r3, [r3, #0]
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f002 fc93 	bl	80195f4 <ff_wtoupper>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	429c      	cmp	r4, r3
 8016cd2:	d001      	beq.n	8016cd8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	e022      	b.n	8016d1e <cmp_lfn+0xd2>
			}
			wc = uc;
 8016cd8:	89bb      	ldrh	r3, [r7, #12]
 8016cda:	81fb      	strh	r3, [r7, #14]
 8016cdc:	e006      	b.n	8016cec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016cde:	89bb      	ldrh	r3, [r7, #12]
 8016ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	d001      	beq.n	8016cec <cmp_lfn+0xa0>
 8016ce8:	2300      	movs	r3, #0
 8016cea:	e018      	b.n	8016d1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	3301      	adds	r3, #1
 8016cf0:	613b      	str	r3, [r7, #16]
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	2b0c      	cmp	r3, #12
 8016cf6:	d9c8      	bls.n	8016c8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d00b      	beq.n	8016d1c <cmp_lfn+0xd0>
 8016d04:	89fb      	ldrh	r3, [r7, #14]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d008      	beq.n	8016d1c <cmp_lfn+0xd0>
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	005b      	lsls	r3, r3, #1
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	4413      	add	r3, r2
 8016d12:	881b      	ldrh	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d001      	beq.n	8016d1c <cmp_lfn+0xd0>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	e000      	b.n	8016d1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016d1c:	2301      	movs	r3, #1
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	371c      	adds	r7, #28
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd90      	pop	{r4, r7, pc}
 8016d26:	bf00      	nop
 8016d28:	0801b2bc 	.word	0x0801b2bc

08016d2c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b086      	sub	sp, #24
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	331a      	adds	r3, #26
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe fb78 	bl	8015430 <ld_word>
 8016d40:	4603      	mov	r3, r0
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d001      	beq.n	8016d4a <pick_lfn+0x1e>
 8016d46:	2300      	movs	r3, #0
 8016d48:	e04d      	b.n	8016de6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016d52:	1e5a      	subs	r2, r3, #1
 8016d54:	4613      	mov	r3, r2
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4413      	add	r3, r2
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	4413      	add	r3, r2
 8016d5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016d60:	2301      	movs	r3, #1
 8016d62:	81fb      	strh	r3, [r7, #14]
 8016d64:	2300      	movs	r3, #0
 8016d66:	613b      	str	r3, [r7, #16]
 8016d68:	e028      	b.n	8016dbc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016d6a:	4a21      	ldr	r2, [pc, #132]	@ (8016df0 <pick_lfn+0xc4>)
 8016d6c:	693b      	ldr	r3, [r7, #16]
 8016d6e:	4413      	add	r3, r2
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	461a      	mov	r2, r3
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	4413      	add	r3, r2
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fe fb59 	bl	8015430 <ld_word>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016d82:	89fb      	ldrh	r3, [r7, #14]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00f      	beq.n	8016da8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8016d8c:	d901      	bls.n	8016d92 <pick_lfn+0x66>
 8016d8e:	2300      	movs	r3, #0
 8016d90:	e029      	b.n	8016de6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016d92:	89bb      	ldrh	r3, [r7, #12]
 8016d94:	81fb      	strh	r3, [r7, #14]
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	1c5a      	adds	r2, r3, #1
 8016d9a:	617a      	str	r2, [r7, #20]
 8016d9c:	005b      	lsls	r3, r3, #1
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	4413      	add	r3, r2
 8016da2:	89fa      	ldrh	r2, [r7, #14]
 8016da4:	801a      	strh	r2, [r3, #0]
 8016da6:	e006      	b.n	8016db6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016da8:	89bb      	ldrh	r3, [r7, #12]
 8016daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016dae:	4293      	cmp	r3, r2
 8016db0:	d001      	beq.n	8016db6 <pick_lfn+0x8a>
 8016db2:	2300      	movs	r3, #0
 8016db4:	e017      	b.n	8016de6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	3301      	adds	r3, #1
 8016dba:	613b      	str	r3, [r7, #16]
 8016dbc:	693b      	ldr	r3, [r7, #16]
 8016dbe:	2b0c      	cmp	r3, #12
 8016dc0:	d9d3      	bls.n	8016d6a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00a      	beq.n	8016de4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	2bfe      	cmp	r3, #254	@ 0xfe
 8016dd2:	d901      	bls.n	8016dd8 <pick_lfn+0xac>
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	e006      	b.n	8016de6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	005b      	lsls	r3, r3, #1
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	4413      	add	r3, r2
 8016de0:	2200      	movs	r2, #0
 8016de2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8016de4:	2301      	movs	r3, #1
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3718      	adds	r7, #24
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	0801b2bc 	.word	0x0801b2bc

08016df4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b088      	sub	sp, #32
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	4611      	mov	r1, r2
 8016e00:	461a      	mov	r2, r3
 8016e02:	460b      	mov	r3, r1
 8016e04:	71fb      	strb	r3, [r7, #7]
 8016e06:	4613      	mov	r3, r2
 8016e08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	330d      	adds	r3, #13
 8016e0e:	79ba      	ldrb	r2, [r7, #6]
 8016e10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	330b      	adds	r3, #11
 8016e16:	220f      	movs	r2, #15
 8016e18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	330c      	adds	r3, #12
 8016e1e:	2200      	movs	r2, #0
 8016e20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	331a      	adds	r3, #26
 8016e26:	2100      	movs	r1, #0
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7fe fc17 	bl	801565c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016e2e:	79fb      	ldrb	r3, [r7, #7]
 8016e30:	1e5a      	subs	r2, r3, #1
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	009b      	lsls	r3, r3, #2
 8016e3a:	4413      	add	r3, r2
 8016e3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	82fb      	strh	r3, [r7, #22]
 8016e42:	2300      	movs	r3, #0
 8016e44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016e46:	8afb      	ldrh	r3, [r7, #22]
 8016e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d007      	beq.n	8016e60 <put_lfn+0x6c>
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	1c5a      	adds	r2, r3, #1
 8016e54:	61fa      	str	r2, [r7, #28]
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016e60:	4a17      	ldr	r2, [pc, #92]	@ (8016ec0 <put_lfn+0xcc>)
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	4413      	add	r3, r2
 8016e66:	781b      	ldrb	r3, [r3, #0]
 8016e68:	461a      	mov	r2, r3
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	8afa      	ldrh	r2, [r7, #22]
 8016e70:	4611      	mov	r1, r2
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7fe fbf2 	bl	801565c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016e78:	8afb      	ldrh	r3, [r7, #22]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d102      	bne.n	8016e84 <put_lfn+0x90>
 8016e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016e84:	69bb      	ldr	r3, [r7, #24]
 8016e86:	3301      	adds	r3, #1
 8016e88:	61bb      	str	r3, [r7, #24]
 8016e8a:	69bb      	ldr	r3, [r7, #24]
 8016e8c:	2b0c      	cmp	r3, #12
 8016e8e:	d9da      	bls.n	8016e46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016e90:	8afb      	ldrh	r3, [r7, #22]
 8016e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e96:	4293      	cmp	r3, r2
 8016e98:	d006      	beq.n	8016ea8 <put_lfn+0xb4>
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	68fa      	ldr	r2, [r7, #12]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	881b      	ldrh	r3, [r3, #0]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d103      	bne.n	8016eb0 <put_lfn+0xbc>
 8016ea8:	79fb      	ldrb	r3, [r7, #7]
 8016eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016eae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	79fa      	ldrb	r2, [r7, #7]
 8016eb4:	701a      	strb	r2, [r3, #0]
}
 8016eb6:	bf00      	nop
 8016eb8:	3720      	adds	r7, #32
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	0801b2bc 	.word	0x0801b2bc

08016ec4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b08c      	sub	sp, #48	@ 0x30
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	60f8      	str	r0, [r7, #12]
 8016ecc:	60b9      	str	r1, [r7, #8]
 8016ece:	607a      	str	r2, [r7, #4]
 8016ed0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8016ed2:	220b      	movs	r2, #11
 8016ed4:	68b9      	ldr	r1, [r7, #8]
 8016ed6:	68f8      	ldr	r0, [r7, #12]
 8016ed8:	f7fe fc8f 	bl	80157fa <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	2b05      	cmp	r3, #5
 8016ee0:	d929      	bls.n	8016f36 <gen_numname+0x72>
		sr = seq;
 8016ee2:	683b      	ldr	r3, [r7, #0]
 8016ee4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8016ee6:	e020      	b.n	8016f2a <gen_numname+0x66>
			wc = *lfn++;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	1c9a      	adds	r2, r3, #2
 8016eec:	607a      	str	r2, [r7, #4]
 8016eee:	881b      	ldrh	r3, [r3, #0]
 8016ef0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016ef6:	e015      	b.n	8016f24 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	005a      	lsls	r2, r3, #1
 8016efc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016efe:	f003 0301 	and.w	r3, r3, #1
 8016f02:	4413      	add	r3, r2
 8016f04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016f06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f08:	085b      	lsrs	r3, r3, #1
 8016f0a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d003      	beq.n	8016f1e <gen_numname+0x5a>
 8016f16:	69fa      	ldr	r2, [r7, #28]
 8016f18:	4b30      	ldr	r3, [pc, #192]	@ (8016fdc <gen_numname+0x118>)
 8016f1a:	4053      	eors	r3, r2
 8016f1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f20:	3301      	adds	r3, #1
 8016f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f26:	2b0f      	cmp	r3, #15
 8016f28:	d9e6      	bls.n	8016ef8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d1da      	bne.n	8016ee8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016f36:	2307      	movs	r3, #7
 8016f38:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	f003 030f 	and.w	r3, r3, #15
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	3330      	adds	r3, #48	@ 0x30
 8016f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8016f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016f4e:	2b39      	cmp	r3, #57	@ 0x39
 8016f50:	d904      	bls.n	8016f5c <gen_numname+0x98>
 8016f52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016f56:	3307      	adds	r3, #7
 8016f58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8016f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f5e:	1e5a      	subs	r2, r3, #1
 8016f60:	62ba      	str	r2, [r7, #40]	@ 0x28
 8016f62:	3330      	adds	r3, #48	@ 0x30
 8016f64:	443b      	add	r3, r7
 8016f66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016f6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	091b      	lsrs	r3, r3, #4
 8016f72:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d1df      	bne.n	8016f3a <gen_numname+0x76>
	ns[i] = '~';
 8016f7a:	f107 0214 	add.w	r2, r7, #20
 8016f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f80:	4413      	add	r3, r2
 8016f82:	227e      	movs	r2, #126	@ 0x7e
 8016f84:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016f86:	2300      	movs	r3, #0
 8016f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f8a:	e002      	b.n	8016f92 <gen_numname+0xce>
 8016f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f8e:	3301      	adds	r3, #1
 8016f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d205      	bcs.n	8016fa6 <gen_numname+0xe2>
 8016f9a:	68fa      	ldr	r2, [r7, #12]
 8016f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9e:	4413      	add	r3, r2
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	2b20      	cmp	r3, #32
 8016fa4:	d1f2      	bne.n	8016f8c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fa8:	2b07      	cmp	r3, #7
 8016faa:	d807      	bhi.n	8016fbc <gen_numname+0xf8>
 8016fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fae:	1c5a      	adds	r2, r3, #1
 8016fb0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8016fb2:	3330      	adds	r3, #48	@ 0x30
 8016fb4:	443b      	add	r3, r7
 8016fb6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8016fba:	e000      	b.n	8016fbe <gen_numname+0xfa>
 8016fbc:	2120      	movs	r1, #32
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc0:	1c5a      	adds	r2, r3, #1
 8016fc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8016fc4:	68fa      	ldr	r2, [r7, #12]
 8016fc6:	4413      	add	r3, r2
 8016fc8:	460a      	mov	r2, r1
 8016fca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fce:	2b07      	cmp	r3, #7
 8016fd0:	d9e9      	bls.n	8016fa6 <gen_numname+0xe2>
}
 8016fd2:	bf00      	nop
 8016fd4:	bf00      	nop
 8016fd6:	3730      	adds	r7, #48	@ 0x30
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	00011021 	.word	0x00011021

08016fe0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016fe0:	b480      	push	{r7}
 8016fe2:	b085      	sub	sp, #20
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016fec:	230b      	movs	r3, #11
 8016fee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016ff0:	7bfb      	ldrb	r3, [r7, #15]
 8016ff2:	b2da      	uxtb	r2, r3
 8016ff4:	0852      	lsrs	r2, r2, #1
 8016ff6:	01db      	lsls	r3, r3, #7
 8016ff8:	4313      	orrs	r3, r2
 8016ffa:	b2da      	uxtb	r2, r3
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	1c59      	adds	r1, r3, #1
 8017000:	6079      	str	r1, [r7, #4]
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	4413      	add	r3, r2
 8017006:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	3b01      	subs	r3, #1
 801700c:	60bb      	str	r3, [r7, #8]
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d1ed      	bne.n	8016ff0 <sum_sfn+0x10>
	return sum;
 8017014:	7bfb      	ldrb	r3, [r7, #15]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3714      	adds	r7, #20
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr

08017022 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8017022:	b480      	push	{r7}
 8017024:	b087      	sub	sp, #28
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	3301      	adds	r3, #1
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	3301      	adds	r3, #1
 8017032:	015b      	lsls	r3, r3, #5
 8017034:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8017036:	2300      	movs	r3, #0
 8017038:	827b      	strh	r3, [r7, #18]
 801703a:	2300      	movs	r3, #0
 801703c:	617b      	str	r3, [r7, #20]
 801703e:	e017      	b.n	8017070 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	2b02      	cmp	r3, #2
 8017044:	d103      	bne.n	801704e <xdir_sum+0x2c>
			i++;
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	3301      	adds	r3, #1
 801704a:	617b      	str	r3, [r7, #20]
 801704c:	e00d      	b.n	801706a <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 801704e:	8a7b      	ldrh	r3, [r7, #18]
 8017050:	03db      	lsls	r3, r3, #15
 8017052:	b29a      	uxth	r2, r3
 8017054:	8a7b      	ldrh	r3, [r7, #18]
 8017056:	085b      	lsrs	r3, r3, #1
 8017058:	b29b      	uxth	r3, r3
 801705a:	4413      	add	r3, r2
 801705c:	b29b      	uxth	r3, r3
 801705e:	6879      	ldr	r1, [r7, #4]
 8017060:	697a      	ldr	r2, [r7, #20]
 8017062:	440a      	add	r2, r1
 8017064:	7812      	ldrb	r2, [r2, #0]
 8017066:	4413      	add	r3, r2
 8017068:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	3301      	adds	r3, #1
 801706e:	617b      	str	r3, [r7, #20]
 8017070:	697a      	ldr	r2, [r7, #20]
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	429a      	cmp	r2, r3
 8017076:	d3e3      	bcc.n	8017040 <xdir_sum+0x1e>
		}
	}
	return sum;
 8017078:	8a7b      	ldrh	r3, [r7, #18]
}
 801707a:	4618      	mov	r0, r3
 801707c:	371c      	adds	r7, #28
 801707e:	46bd      	mov	sp, r7
 8017080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017084:	4770      	bx	lr

08017086 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8017086:	b580      	push	{r7, lr}
 8017088:	b084      	sub	sp, #16
 801708a:	af00      	add	r7, sp, #0
 801708c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801708e:	2300      	movs	r3, #0
 8017090:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8017092:	e01f      	b.n	80170d4 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8017094:	89bb      	ldrh	r3, [r7, #12]
 8017096:	4618      	mov	r0, r3
 8017098:	f002 faac 	bl	80195f4 <ff_wtoupper>
 801709c:	4603      	mov	r3, r0
 801709e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80170a0:	89fb      	ldrh	r3, [r7, #14]
 80170a2:	03db      	lsls	r3, r3, #15
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	89fb      	ldrh	r3, [r7, #14]
 80170a8:	085b      	lsrs	r3, r3, #1
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	4413      	add	r3, r2
 80170ae:	b29a      	uxth	r2, r3
 80170b0:	89bb      	ldrh	r3, [r7, #12]
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	b29b      	uxth	r3, r3
 80170b6:	4413      	add	r3, r2
 80170b8:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80170ba:	89fb      	ldrh	r3, [r7, #14]
 80170bc:	03db      	lsls	r3, r3, #15
 80170be:	b29a      	uxth	r2, r3
 80170c0:	89fb      	ldrh	r3, [r7, #14]
 80170c2:	085b      	lsrs	r3, r3, #1
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	4413      	add	r3, r2
 80170c8:	b29a      	uxth	r2, r3
 80170ca:	89bb      	ldrh	r3, [r7, #12]
 80170cc:	0a1b      	lsrs	r3, r3, #8
 80170ce:	b29b      	uxth	r3, r3
 80170d0:	4413      	add	r3, r2
 80170d2:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	1c9a      	adds	r2, r3, #2
 80170d8:	607a      	str	r2, [r7, #4]
 80170da:	881b      	ldrh	r3, [r3, #0]
 80170dc:	81bb      	strh	r3, [r7, #12]
 80170de:	89bb      	ldrh	r3, [r7, #12]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d1d7      	bne.n	8017094 <xname_sum+0xe>
	}
	return sum;
 80170e4:	89fb      	ldrh	r3, [r7, #14]
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3710      	adds	r7, #16
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
	...

080170f0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80170f0:	b590      	push	{r4, r7, lr}
 80170f2:	b087      	sub	sp, #28
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	691b      	ldr	r3, [r3, #16]
 80170fe:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017108:	4619      	mov	r1, r3
 801710a:	4610      	mov	r0, r2
 801710c:	f7fe fda4 	bl	8015c58 <move_window>
 8017110:	4603      	mov	r3, r0
 8017112:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8017114:	7bfb      	ldrb	r3, [r7, #15]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d001      	beq.n	801711e <load_xdir+0x2e>
 801711a:	7bfb      	ldrb	r3, [r7, #15]
 801711c:	e09f      	b.n	801725e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	2b85      	cmp	r3, #133	@ 0x85
 8017126:	d001      	beq.n	801712c <load_xdir+0x3c>
 8017128:	2302      	movs	r3, #2
 801712a:	e098      	b.n	801725e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017130:	2220      	movs	r2, #32
 8017132:	4619      	mov	r1, r3
 8017134:	6938      	ldr	r0, [r7, #16]
 8017136:	f7fe fb60 	bl	80157fa <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 801713a:	693b      	ldr	r3, [r7, #16]
 801713c:	3301      	adds	r3, #1
 801713e:	781b      	ldrb	r3, [r3, #0]
 8017140:	3301      	adds	r3, #1
 8017142:	015b      	lsls	r3, r3, #5
 8017144:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	2b5f      	cmp	r3, #95	@ 0x5f
 801714a:	d903      	bls.n	8017154 <load_xdir+0x64>
 801714c:	68bb      	ldr	r3, [r7, #8]
 801714e:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8017152:	d901      	bls.n	8017158 <load_xdir+0x68>
 8017154:	2302      	movs	r3, #2
 8017156:	e082      	b.n	801725e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8017158:	2100      	movs	r1, #0
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f7ff fc05 	bl	801696a <dir_next>
 8017160:	4603      	mov	r3, r0
 8017162:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8017164:	7bfb      	ldrb	r3, [r7, #15]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <load_xdir+0x7e>
 801716a:	7bfb      	ldrb	r3, [r7, #15]
 801716c:	e077      	b.n	801725e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017176:	4619      	mov	r1, r3
 8017178:	4610      	mov	r0, r2
 801717a:	f7fe fd6d 	bl	8015c58 <move_window>
 801717e:	4603      	mov	r3, r0
 8017180:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8017182:	7bfb      	ldrb	r3, [r7, #15]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d001      	beq.n	801718c <load_xdir+0x9c>
 8017188:	7bfb      	ldrb	r3, [r7, #15]
 801718a:	e068      	b.n	801725e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2bc0      	cmp	r3, #192	@ 0xc0
 8017194:	d001      	beq.n	801719a <load_xdir+0xaa>
 8017196:	2302      	movs	r3, #2
 8017198:	e061      	b.n	801725e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	f103 0020 	add.w	r0, r3, #32
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171a4:	2220      	movs	r2, #32
 80171a6:	4619      	mov	r1, r3
 80171a8:	f7fe fb27 	bl	80157fa <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	3323      	adds	r3, #35	@ 0x23
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	332c      	adds	r3, #44	@ 0x2c
 80171b4:	4a2c      	ldr	r2, [pc, #176]	@ (8017268 <load_xdir+0x178>)
 80171b6:	fba2 2303 	umull	r2, r3, r2, r3
 80171ba:	08db      	lsrs	r3, r3, #3
 80171bc:	015b      	lsls	r3, r3, #5
 80171be:	68ba      	ldr	r2, [r7, #8]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d201      	bcs.n	80171c8 <load_xdir+0xd8>
 80171c4:	2302      	movs	r3, #2
 80171c6:	e04a      	b.n	801725e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80171c8:	2340      	movs	r3, #64	@ 0x40
 80171ca:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80171cc:	2100      	movs	r1, #0
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7ff fbcb 	bl	801696a <dir_next>
 80171d4:	4603      	mov	r3, r0
 80171d6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80171d8:	7bfb      	ldrb	r3, [r7, #15]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d001      	beq.n	80171e2 <load_xdir+0xf2>
 80171de:	7bfb      	ldrb	r3, [r7, #15]
 80171e0:	e03d      	b.n	801725e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171ea:	4619      	mov	r1, r3
 80171ec:	4610      	mov	r0, r2
 80171ee:	f7fe fd33 	bl	8015c58 <move_window>
 80171f2:	4603      	mov	r3, r0
 80171f4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80171f6:	7bfb      	ldrb	r3, [r7, #15]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d001      	beq.n	8017200 <load_xdir+0x110>
 80171fc:	7bfb      	ldrb	r3, [r7, #15]
 80171fe:	e02e      	b.n	801725e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2bc1      	cmp	r3, #193	@ 0xc1
 8017208:	d001      	beq.n	801720e <load_xdir+0x11e>
 801720a:	2302      	movs	r3, #2
 801720c:	e027      	b.n	801725e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8017214:	d208      	bcs.n	8017228 <load_xdir+0x138>
 8017216:	693a      	ldr	r2, [r7, #16]
 8017218:	697b      	ldr	r3, [r7, #20]
 801721a:	18d0      	adds	r0, r2, r3
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017220:	2220      	movs	r2, #32
 8017222:	4619      	mov	r1, r3
 8017224:	f7fe fae9 	bl	80157fa <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	3320      	adds	r3, #32
 801722c:	617b      	str	r3, [r7, #20]
 801722e:	697a      	ldr	r2, [r7, #20]
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	429a      	cmp	r2, r3
 8017234:	d3ca      	bcc.n	80171cc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 801723c:	d80e      	bhi.n	801725c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 801723e:	6938      	ldr	r0, [r7, #16]
 8017240:	f7ff feef 	bl	8017022 <xdir_sum>
 8017244:	4603      	mov	r3, r0
 8017246:	461c      	mov	r4, r3
 8017248:	693b      	ldr	r3, [r7, #16]
 801724a:	3302      	adds	r3, #2
 801724c:	4618      	mov	r0, r3
 801724e:	f7fe f8ef 	bl	8015430 <ld_word>
 8017252:	4603      	mov	r3, r0
 8017254:	429c      	cmp	r4, r3
 8017256:	d001      	beq.n	801725c <load_xdir+0x16c>
 8017258:	2302      	movs	r3, #2
 801725a:	e000      	b.n	801725e <load_xdir+0x16e>
	}
	return FR_OK;
 801725c:	2300      	movs	r3, #0
}
 801725e:	4618      	mov	r0, r3
 8017260:	371c      	adds	r7, #28
 8017262:	46bd      	mov	sp, r7
 8017264:	bd90      	pop	{r4, r7, pc}
 8017266:	bf00      	nop
 8017268:	88888889 	.word	0x88888889

0801726c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 801726c:	b5b0      	push	{r4, r5, r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8017276:	6839      	ldr	r1, [r7, #0]
 8017278:	6808      	ldr	r0, [r1, #0]
 801727a:	6879      	ldr	r1, [r7, #4]
 801727c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 801727e:	6839      	ldr	r1, [r7, #0]
 8017280:	6a08      	ldr	r0, [r1, #32]
 8017282:	6879      	ldr	r1, [r7, #4]
 8017284:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8017286:	6839      	ldr	r1, [r7, #0]
 8017288:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 801728a:	b2c8      	uxtb	r0, r1
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8017290:	6839      	ldr	r1, [r7, #0]
 8017292:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8017294:	2000      	movs	r0, #0
 8017296:	460c      	mov	r4, r1
 8017298:	4605      	mov	r5, r0
 801729a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 801729e:	2300      	movs	r3, #0
 80172a0:	6879      	ldr	r1, [r7, #4]
 80172a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172b2:	4619      	mov	r1, r3
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f7ff fad2 	bl	801685e <dir_sdi>
 80172ba:	4603      	mov	r3, r0
 80172bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80172be:	7bfb      	ldrb	r3, [r7, #15]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d104      	bne.n	80172ce <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f7ff ff13 	bl	80170f0 <load_xdir>
 80172ca:	4603      	mov	r3, r0
 80172cc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80172ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3710      	adds	r7, #16
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bdb0      	pop	{r4, r5, r7, pc}

080172d8 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80172d8:	b590      	push	{r4, r7, lr}
 80172da:	b087      	sub	sp, #28
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	691b      	ldr	r3, [r3, #16]
 80172e6:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	1c9c      	adds	r4, r3, #2
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f7ff fe98 	bl	8017022 <xdir_sum>
 80172f2:	4603      	mov	r3, r0
 80172f4:	4619      	mov	r1, r3
 80172f6:	4620      	mov	r0, r4
 80172f8:	f7fe f9b0 	bl	801565c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	3301      	adds	r3, #1
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	3301      	adds	r3, #1
 8017304:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801730a:	4619      	mov	r1, r3
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f7ff faa6 	bl	801685e <dir_sdi>
 8017312:	4603      	mov	r3, r0
 8017314:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8017316:	e026      	b.n	8017366 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017320:	4619      	mov	r1, r3
 8017322:	4610      	mov	r0, r2
 8017324:	f7fe fc98 	bl	8015c58 <move_window>
 8017328:	4603      	mov	r3, r0
 801732a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801732c:	7dfb      	ldrb	r3, [r7, #23]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d11d      	bne.n	801736e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017336:	2220      	movs	r2, #32
 8017338:	68f9      	ldr	r1, [r7, #12]
 801733a:	4618      	mov	r0, r3
 801733c:	f7fe fa5d 	bl	80157fa <mem_cpy>
		dp->obj.fs->wflag = 1;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	2201      	movs	r2, #1
 8017346:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	3b01      	subs	r3, #1
 801734c:	613b      	str	r3, [r7, #16]
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00e      	beq.n	8017372 <store_xdir+0x9a>
		dirb += SZDIRE;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	3320      	adds	r3, #32
 8017358:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 801735a:	2100      	movs	r1, #0
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f7ff fb04 	bl	801696a <dir_next>
 8017362:	4603      	mov	r3, r0
 8017364:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8017366:	7dfb      	ldrb	r3, [r7, #23]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d0d5      	beq.n	8017318 <store_xdir+0x40>
 801736c:	e002      	b.n	8017374 <store_xdir+0x9c>
		if (res != FR_OK) break;
 801736e:	bf00      	nop
 8017370:	e000      	b.n	8017374 <store_xdir+0x9c>
		if (--nent == 0) break;
 8017372:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8017374:	7dfb      	ldrb	r3, [r7, #23]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d002      	beq.n	8017380 <store_xdir+0xa8>
 801737a:	7dfb      	ldrb	r3, [r7, #23]
 801737c:	2b01      	cmp	r3, #1
 801737e:	d101      	bne.n	8017384 <store_xdir+0xac>
 8017380:	7dfb      	ldrb	r3, [r7, #23]
 8017382:	e000      	b.n	8017386 <store_xdir+0xae>
 8017384:	2302      	movs	r3, #2
}
 8017386:	4618      	mov	r0, r3
 8017388:	371c      	adds	r7, #28
 801738a:	46bd      	mov	sp, r7
 801738c:	bd90      	pop	{r4, r7, pc}

0801738e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 801738e:	b590      	push	{r4, r7, lr}
 8017390:	b085      	sub	sp, #20
 8017392:	af00      	add	r7, sp, #0
 8017394:	6078      	str	r0, [r7, #4]
 8017396:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8017398:	2240      	movs	r2, #64	@ 0x40
 801739a:	2100      	movs	r1, #0
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7fe fa4d 	bl	801583c <mem_set>
	dirb[XDIR_Type] = 0x85;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2285      	movs	r2, #133	@ 0x85
 80173a6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	3320      	adds	r3, #32
 80173ac:	22c0      	movs	r2, #192	@ 0xc0
 80173ae:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80173b0:	2300      	movs	r3, #0
 80173b2:	72bb      	strb	r3, [r7, #10]
 80173b4:	2301      	movs	r3, #1
 80173b6:	72fb      	strb	r3, [r7, #11]
 80173b8:	2301      	movs	r3, #1
 80173ba:	813b      	strh	r3, [r7, #8]
 80173bc:	2340      	movs	r3, #64	@ 0x40
 80173be:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	1c5a      	adds	r2, r3, #1
 80173c4:	60fa      	str	r2, [r7, #12]
 80173c6:	687a      	ldr	r2, [r7, #4]
 80173c8:	4413      	add	r3, r2
 80173ca:	22c1      	movs	r2, #193	@ 0xc1
 80173cc:	701a      	strb	r2, [r3, #0]
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	1c5a      	adds	r2, r3, #1
 80173d2:	60fa      	str	r2, [r7, #12]
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	4413      	add	r3, r2
 80173d8:	2200      	movs	r2, #0
 80173da:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80173dc:	893b      	ldrh	r3, [r7, #8]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d00b      	beq.n	80173fa <create_xdir+0x6c>
 80173e2:	7abb      	ldrb	r3, [r7, #10]
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	683a      	ldr	r2, [r7, #0]
 80173e8:	4413      	add	r3, r2
 80173ea:	881b      	ldrh	r3, [r3, #0]
 80173ec:	813b      	strh	r3, [r7, #8]
 80173ee:	893b      	ldrh	r3, [r7, #8]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d002      	beq.n	80173fa <create_xdir+0x6c>
 80173f4:	7abb      	ldrb	r3, [r7, #10]
 80173f6:	3301      	adds	r3, #1
 80173f8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80173fa:	687a      	ldr	r2, [r7, #4]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	4413      	add	r3, r2
 8017400:	893a      	ldrh	r2, [r7, #8]
 8017402:	4611      	mov	r1, r2
 8017404:	4618      	mov	r0, r3
 8017406:	f7fe f929 	bl	801565c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	3302      	adds	r3, #2
 801740e:	60fb      	str	r3, [r7, #12]
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	f003 031f 	and.w	r3, r3, #31
 8017416:	2b00      	cmp	r3, #0
 8017418:	d1e0      	bne.n	80173dc <create_xdir+0x4e>
		nb++;
 801741a:	7afb      	ldrb	r3, [r7, #11]
 801741c:	3301      	adds	r3, #1
 801741e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8017420:	7abb      	ldrb	r3, [r7, #10]
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	683a      	ldr	r2, [r7, #0]
 8017426:	4413      	add	r3, r2
 8017428:	881b      	ldrh	r3, [r3, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d1c8      	bne.n	80173c0 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	3323      	adds	r3, #35	@ 0x23
 8017432:	7aba      	ldrb	r2, [r7, #10]
 8017434:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	3301      	adds	r3, #1
 801743a:	7afa      	ldrb	r2, [r7, #11]
 801743c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017444:	6838      	ldr	r0, [r7, #0]
 8017446:	f7ff fe1e 	bl	8017086 <xname_sum>
 801744a:	4603      	mov	r3, r0
 801744c:	4619      	mov	r1, r3
 801744e:	4620      	mov	r0, r4
 8017450:	f7fe f904 	bl	801565c <st_word>
}
 8017454:	bf00      	nop
 8017456:	3714      	adds	r7, #20
 8017458:	46bd      	mov	sp, r7
 801745a:	bd90      	pop	{r4, r7, pc}

0801745c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8017466:	2304      	movs	r3, #4
 8017468:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8017470:	23ff      	movs	r3, #255	@ 0xff
 8017472:	757b      	strb	r3, [r7, #21]
 8017474:	23ff      	movs	r3, #255	@ 0xff
 8017476:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8017478:	e09f      	b.n	80175ba <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801747e:	4619      	mov	r1, r3
 8017480:	6938      	ldr	r0, [r7, #16]
 8017482:	f7fe fbe9 	bl	8015c58 <move_window>
 8017486:	4603      	mov	r3, r0
 8017488:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801748a:	7dfb      	ldrb	r3, [r7, #23]
 801748c:	2b00      	cmp	r3, #0
 801748e:	f040 809a 	bne.w	80175c6 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017496:	781b      	ldrb	r3, [r3, #0]
 8017498:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801749a:	7dbb      	ldrb	r3, [r7, #22]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d102      	bne.n	80174a6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80174a0:	2304      	movs	r3, #4
 80174a2:	75fb      	strb	r3, [r7, #23]
 80174a4:	e096      	b.n	80175d4 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	781b      	ldrb	r3, [r3, #0]
 80174aa:	2b04      	cmp	r3, #4
 80174ac:	d118      	bne.n	80174e0 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80174ae:	7dbb      	ldrb	r3, [r7, #22]
 80174b0:	2b85      	cmp	r3, #133	@ 0x85
 80174b2:	d179      	bne.n	80175a8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7ff fe17 	bl	80170f0 <load_xdir>
 80174c2:	4603      	mov	r3, r0
 80174c4:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80174c6:	7dfb      	ldrb	r3, [r7, #23]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d17e      	bne.n	80175ca <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	691b      	ldr	r3, [r3, #16]
 80174d0:	3304      	adds	r3, #4
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80174d8:	b2da      	uxtb	r2, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	719a      	strb	r2, [r3, #6]
					}
					break;
 80174de:	e074      	b.n	80175ca <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174e4:	330b      	adds	r3, #11
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80174ec:	73fb      	strb	r3, [r7, #15]
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	7bfa      	ldrb	r2, [r7, #15]
 80174f2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80174f4:	7dbb      	ldrb	r3, [r7, #22]
 80174f6:	2be5      	cmp	r3, #229	@ 0xe5
 80174f8:	d00e      	beq.n	8017518 <dir_read+0xbc>
 80174fa:	7dbb      	ldrb	r3, [r7, #22]
 80174fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80174fe:	d00b      	beq.n	8017518 <dir_read+0xbc>
 8017500:	7bfb      	ldrb	r3, [r7, #15]
 8017502:	f023 0320 	bic.w	r3, r3, #32
 8017506:	2b08      	cmp	r3, #8
 8017508:	bf0c      	ite	eq
 801750a:	2301      	moveq	r3, #1
 801750c:	2300      	movne	r3, #0
 801750e:	b2db      	uxtb	r3, r3
 8017510:	461a      	mov	r2, r3
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	4293      	cmp	r3, r2
 8017516:	d002      	beq.n	801751e <dir_read+0xc2>
				ord = 0xFF;
 8017518:	23ff      	movs	r3, #255	@ 0xff
 801751a:	757b      	strb	r3, [r7, #21]
 801751c:	e044      	b.n	80175a8 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801751e:	7bfb      	ldrb	r3, [r7, #15]
 8017520:	2b0f      	cmp	r3, #15
 8017522:	d12f      	bne.n	8017584 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8017524:	7dbb      	ldrb	r3, [r7, #22]
 8017526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801752a:	2b00      	cmp	r3, #0
 801752c:	d00d      	beq.n	801754a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017532:	7b5b      	ldrb	r3, [r3, #13]
 8017534:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8017536:	7dbb      	ldrb	r3, [r7, #22]
 8017538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801753c:	75bb      	strb	r3, [r7, #22]
 801753e:	7dbb      	ldrb	r3, [r7, #22]
 8017540:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801754a:	7dba      	ldrb	r2, [r7, #22]
 801754c:	7d7b      	ldrb	r3, [r7, #21]
 801754e:	429a      	cmp	r2, r3
 8017550:	d115      	bne.n	801757e <dir_read+0x122>
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017556:	330d      	adds	r3, #13
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	7d3a      	ldrb	r2, [r7, #20]
 801755c:	429a      	cmp	r2, r3
 801755e:	d10e      	bne.n	801757e <dir_read+0x122>
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	68da      	ldr	r2, [r3, #12]
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017568:	4619      	mov	r1, r3
 801756a:	4610      	mov	r0, r2
 801756c:	f7ff fbde 	bl	8016d2c <pick_lfn>
 8017570:	4603      	mov	r3, r0
 8017572:	2b00      	cmp	r3, #0
 8017574:	d003      	beq.n	801757e <dir_read+0x122>
 8017576:	7d7b      	ldrb	r3, [r7, #21]
 8017578:	3b01      	subs	r3, #1
 801757a:	b2db      	uxtb	r3, r3
 801757c:	e000      	b.n	8017580 <dir_read+0x124>
 801757e:	23ff      	movs	r3, #255	@ 0xff
 8017580:	757b      	strb	r3, [r7, #21]
 8017582:	e011      	b.n	80175a8 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8017584:	7d7b      	ldrb	r3, [r7, #21]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d109      	bne.n	801759e <dir_read+0x142>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801758e:	4618      	mov	r0, r3
 8017590:	f7ff fd26 	bl	8016fe0 <sum_sfn>
 8017594:	4603      	mov	r3, r0
 8017596:	461a      	mov	r2, r3
 8017598:	7d3b      	ldrb	r3, [r7, #20]
 801759a:	4293      	cmp	r3, r2
 801759c:	d017      	beq.n	80175ce <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f04f 32ff 	mov.w	r2, #4294967295
 80175a4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80175a6:	e012      	b.n	80175ce <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80175a8:	2100      	movs	r1, #0
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	f7ff f9dd 	bl	801696a <dir_next>
 80175b0:	4603      	mov	r3, r0
 80175b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80175b4:	7dfb      	ldrb	r3, [r7, #23]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d10b      	bne.n	80175d2 <dir_read+0x176>
	while (dp->sect) {
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175be:	2b00      	cmp	r3, #0
 80175c0:	f47f af5b 	bne.w	801747a <dir_read+0x1e>
 80175c4:	e006      	b.n	80175d4 <dir_read+0x178>
		if (res != FR_OK) break;
 80175c6:	bf00      	nop
 80175c8:	e004      	b.n	80175d4 <dir_read+0x178>
					break;
 80175ca:	bf00      	nop
 80175cc:	e002      	b.n	80175d4 <dir_read+0x178>
					break;
 80175ce:	bf00      	nop
 80175d0:	e000      	b.n	80175d4 <dir_read+0x178>
		if (res != FR_OK) break;
 80175d2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80175d4:	7dfb      	ldrb	r3, [r7, #23]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d002      	beq.n	80175e0 <dir_read+0x184>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	2200      	movs	r2, #0
 80175de:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 80175e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3718      	adds	r7, #24
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80175ea:	b590      	push	{r4, r7, lr}
 80175ec:	b089      	sub	sp, #36	@ 0x24
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80175f8:	2100      	movs	r1, #0
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f7ff f92f 	bl	801685e <dir_sdi>
 8017600:	4603      	mov	r3, r0
 8017602:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8017604:	7ffb      	ldrb	r3, [r7, #31]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d001      	beq.n	801760e <dir_find+0x24>
 801760a:	7ffb      	ldrb	r3, [r7, #31]
 801760c:	e113      	b.n	8017836 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	2b04      	cmp	r3, #4
 8017614:	d165      	bne.n	80176e2 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	68db      	ldr	r3, [r3, #12]
 801761a:	4618      	mov	r0, r3
 801761c:	f7ff fd33 	bl	8017086 <xname_sum>
 8017620:	4603      	mov	r3, r0
 8017622:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8017624:	e050      	b.n	80176c8 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	691b      	ldr	r3, [r3, #16]
 801762a:	3324      	adds	r3, #36	@ 0x24
 801762c:	4618      	mov	r0, r3
 801762e:	f7fd feff 	bl	8015430 <ld_word>
 8017632:	4603      	mov	r3, r0
 8017634:	461a      	mov	r2, r3
 8017636:	893b      	ldrh	r3, [r7, #8]
 8017638:	4293      	cmp	r3, r2
 801763a:	d144      	bne.n	80176c6 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	691b      	ldr	r3, [r3, #16]
 8017640:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8017644:	76fb      	strb	r3, [r7, #27]
 8017646:	2340      	movs	r3, #64	@ 0x40
 8017648:	617b      	str	r3, [r7, #20]
 801764a:	2300      	movs	r3, #0
 801764c:	613b      	str	r3, [r7, #16]
 801764e:	e029      	b.n	80176a4 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	f003 031f 	and.w	r3, r3, #31
 8017656:	2b00      	cmp	r3, #0
 8017658:	d102      	bne.n	8017660 <dir_find+0x76>
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	3302      	adds	r3, #2
 801765e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	691a      	ldr	r2, [r3, #16]
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	4413      	add	r3, r2
 8017668:	4618      	mov	r0, r3
 801766a:	f7fd fee1 	bl	8015430 <ld_word>
 801766e:	4603      	mov	r3, r0
 8017670:	4618      	mov	r0, r3
 8017672:	f001 ffbf 	bl	80195f4 <ff_wtoupper>
 8017676:	4603      	mov	r3, r0
 8017678:	461c      	mov	r4, r3
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	68da      	ldr	r2, [r3, #12]
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	005b      	lsls	r3, r3, #1
 8017682:	4413      	add	r3, r2
 8017684:	881b      	ldrh	r3, [r3, #0]
 8017686:	4618      	mov	r0, r3
 8017688:	f001 ffb4 	bl	80195f4 <ff_wtoupper>
 801768c:	4603      	mov	r3, r0
 801768e:	429c      	cmp	r4, r3
 8017690:	d10c      	bne.n	80176ac <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8017692:	7efb      	ldrb	r3, [r7, #27]
 8017694:	3b01      	subs	r3, #1
 8017696:	76fb      	strb	r3, [r7, #27]
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	3302      	adds	r3, #2
 801769c:	617b      	str	r3, [r7, #20]
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	3301      	adds	r3, #1
 80176a2:	613b      	str	r3, [r7, #16]
 80176a4:	7efb      	ldrb	r3, [r7, #27]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d1d2      	bne.n	8017650 <dir_find+0x66>
 80176aa:	e000      	b.n	80176ae <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80176ac:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80176ae:	7efb      	ldrb	r3, [r7, #27]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d109      	bne.n	80176c8 <dir_find+0xde>
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	68da      	ldr	r2, [r3, #12]
 80176b8:	693b      	ldr	r3, [r7, #16]
 80176ba:	005b      	lsls	r3, r3, #1
 80176bc:	4413      	add	r3, r2
 80176be:	881b      	ldrh	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d00b      	beq.n	80176dc <dir_find+0xf2>
 80176c4:	e000      	b.n	80176c8 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80176c6:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80176c8:	2100      	movs	r1, #0
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f7ff fec6 	bl	801745c <dir_read>
 80176d0:	4603      	mov	r3, r0
 80176d2:	77fb      	strb	r3, [r7, #31]
 80176d4:	7ffb      	ldrb	r3, [r7, #31]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d0a5      	beq.n	8017626 <dir_find+0x3c>
 80176da:	e000      	b.n	80176de <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80176dc:	bf00      	nop
		}
		return res;
 80176de:	7ffb      	ldrb	r3, [r7, #31]
 80176e0:	e0a9      	b.n	8017836 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80176e2:	23ff      	movs	r3, #255	@ 0xff
 80176e4:	773b      	strb	r3, [r7, #28]
 80176e6:	7f3b      	ldrb	r3, [r7, #28]
 80176e8:	777b      	strb	r3, [r7, #29]
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f04f 32ff 	mov.w	r2, #4294967295
 80176f0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176f6:	4619      	mov	r1, r3
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7fe faad 	bl	8015c58 <move_window>
 80176fe:	4603      	mov	r3, r0
 8017700:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8017702:	7ffb      	ldrb	r3, [r7, #31]
 8017704:	2b00      	cmp	r3, #0
 8017706:	f040 8090 	bne.w	801782a <dir_find+0x240>
		c = dp->dir[DIR_Name];
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017712:	7fbb      	ldrb	r3, [r7, #30]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d102      	bne.n	801771e <dir_find+0x134>
 8017718:	2304      	movs	r3, #4
 801771a:	77fb      	strb	r3, [r7, #31]
 801771c:	e08a      	b.n	8017834 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017722:	330b      	adds	r3, #11
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801772a:	72fb      	strb	r3, [r7, #11]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	7afa      	ldrb	r2, [r7, #11]
 8017730:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017732:	7fbb      	ldrb	r3, [r7, #30]
 8017734:	2be5      	cmp	r3, #229	@ 0xe5
 8017736:	d007      	beq.n	8017748 <dir_find+0x15e>
 8017738:	7afb      	ldrb	r3, [r7, #11]
 801773a:	f003 0308 	and.w	r3, r3, #8
 801773e:	2b00      	cmp	r3, #0
 8017740:	d009      	beq.n	8017756 <dir_find+0x16c>
 8017742:	7afb      	ldrb	r3, [r7, #11]
 8017744:	2b0f      	cmp	r3, #15
 8017746:	d006      	beq.n	8017756 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017748:	23ff      	movs	r3, #255	@ 0xff
 801774a:	777b      	strb	r3, [r7, #29]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f04f 32ff 	mov.w	r2, #4294967295
 8017752:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017754:	e05e      	b.n	8017814 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017756:	7afb      	ldrb	r3, [r7, #11]
 8017758:	2b0f      	cmp	r3, #15
 801775a:	d136      	bne.n	80177ca <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8017762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017766:	2b00      	cmp	r3, #0
 8017768:	d154      	bne.n	8017814 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801776a:	7fbb      	ldrb	r3, [r7, #30]
 801776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017770:	2b00      	cmp	r3, #0
 8017772:	d00d      	beq.n	8017790 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017778:	7b5b      	ldrb	r3, [r3, #13]
 801777a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801777c:	7fbb      	ldrb	r3, [r7, #30]
 801777e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017782:	77bb      	strb	r3, [r7, #30]
 8017784:	7fbb      	ldrb	r3, [r7, #30]
 8017786:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017790:	7fba      	ldrb	r2, [r7, #30]
 8017792:	7f7b      	ldrb	r3, [r7, #29]
 8017794:	429a      	cmp	r2, r3
 8017796:	d115      	bne.n	80177c4 <dir_find+0x1da>
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801779c:	330d      	adds	r3, #13
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	7f3a      	ldrb	r2, [r7, #28]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d10e      	bne.n	80177c4 <dir_find+0x1da>
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	68da      	ldr	r2, [r3, #12]
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177ae:	4619      	mov	r1, r3
 80177b0:	4610      	mov	r0, r2
 80177b2:	f7ff fa4b 	bl	8016c4c <cmp_lfn>
 80177b6:	4603      	mov	r3, r0
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d003      	beq.n	80177c4 <dir_find+0x1da>
 80177bc:	7f7b      	ldrb	r3, [r7, #29]
 80177be:	3b01      	subs	r3, #1
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	e000      	b.n	80177c6 <dir_find+0x1dc>
 80177c4:	23ff      	movs	r3, #255	@ 0xff
 80177c6:	777b      	strb	r3, [r7, #29]
 80177c8:	e024      	b.n	8017814 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80177ca:	7f7b      	ldrb	r3, [r7, #29]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d109      	bne.n	80177e4 <dir_find+0x1fa>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7ff fc03 	bl	8016fe0 <sum_sfn>
 80177da:	4603      	mov	r3, r0
 80177dc:	461a      	mov	r2, r3
 80177de:	7f3b      	ldrb	r3, [r7, #28]
 80177e0:	4293      	cmp	r3, r2
 80177e2:	d024      	beq.n	801782e <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80177ea:	f003 0301 	and.w	r3, r3, #1
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d10a      	bne.n	8017808 <dir_find+0x21e>
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	3340      	adds	r3, #64	@ 0x40
 80177fa:	220b      	movs	r2, #11
 80177fc:	4619      	mov	r1, r3
 80177fe:	f7fe f838 	bl	8015872 <mem_cmp>
 8017802:	4603      	mov	r3, r0
 8017804:	2b00      	cmp	r3, #0
 8017806:	d014      	beq.n	8017832 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017808:	23ff      	movs	r3, #255	@ 0xff
 801780a:	777b      	strb	r3, [r7, #29]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f04f 32ff 	mov.w	r2, #4294967295
 8017812:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017814:	2100      	movs	r1, #0
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7ff f8a7 	bl	801696a <dir_next>
 801781c:	4603      	mov	r3, r0
 801781e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8017820:	7ffb      	ldrb	r3, [r7, #31]
 8017822:	2b00      	cmp	r3, #0
 8017824:	f43f af65 	beq.w	80176f2 <dir_find+0x108>
 8017828:	e004      	b.n	8017834 <dir_find+0x24a>
		if (res != FR_OK) break;
 801782a:	bf00      	nop
 801782c:	e002      	b.n	8017834 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801782e:	bf00      	nop
 8017830:	e000      	b.n	8017834 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017832:	bf00      	nop

	return res;
 8017834:	7ffb      	ldrb	r3, [r7, #31]
}
 8017836:	4618      	mov	r0, r3
 8017838:	3724      	adds	r7, #36	@ 0x24
 801783a:	46bd      	mov	sp, r7
 801783c:	bd90      	pop	{r4, r7, pc}
	...

08017840 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017844:	b0a0      	sub	sp, #128	@ 0x80
 8017846:	af00      	add	r7, sp, #0
 8017848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8017856:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801785a:	2b00      	cmp	r3, #0
 801785c:	d001      	beq.n	8017862 <dir_register+0x22>
 801785e:	2306      	movs	r3, #6
 8017860:	e18e      	b.n	8017b80 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017862:	2300      	movs	r3, #0
 8017864:	677b      	str	r3, [r7, #116]	@ 0x74
 8017866:	e002      	b.n	801786e <dir_register+0x2e>
 8017868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801786a:	3301      	adds	r3, #1
 801786c:	677b      	str	r3, [r7, #116]	@ 0x74
 801786e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017870:	68da      	ldr	r2, [r3, #12]
 8017872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017874:	005b      	lsls	r3, r3, #1
 8017876:	4413      	add	r3, r2
 8017878:	881b      	ldrh	r3, [r3, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1f4      	bne.n	8017868 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801787e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	2b04      	cmp	r3, #4
 8017884:	f040 809f 	bne.w	80179c6 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8017888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801788a:	330e      	adds	r3, #14
 801788c:	4aa2      	ldr	r2, [pc, #648]	@ (8017b18 <dir_register+0x2d8>)
 801788e:	fba2 2303 	umull	r2, r3, r2, r3
 8017892:	08db      	lsrs	r3, r3, #3
 8017894:	3302      	adds	r3, #2
 8017896:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8017898:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7ff f93a 	bl	8016b14 <dir_alloc>
 80178a0:	4603      	mov	r3, r0
 80178a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 80178a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d002      	beq.n	80178b4 <dir_register+0x74>
 80178ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80178b2:	e165      	b.n	8017b80 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80178b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80178ba:	3b01      	subs	r3, #1
 80178bc:	015b      	lsls	r3, r3, #5
 80178be:	1ad2      	subs	r2, r2, r3
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	689b      	ldr	r3, [r3, #8]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d072      	beq.n	80179b2 <dir_register+0x172>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	79db      	ldrb	r3, [r3, #7]
 80178d0:	f003 0304 	and.w	r3, r3, #4
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d06c      	beq.n	80179b2 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80178de:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80178e0:	8949      	ldrh	r1, [r1, #10]
 80178e2:	0249      	lsls	r1, r1, #9
 80178e4:	2000      	movs	r0, #0
 80178e6:	460c      	mov	r4, r1
 80178e8:	4605      	mov	r5, r0
 80178ea:	eb12 0804 	adds.w	r8, r2, r4
 80178ee:	eb43 0905 	adc.w	r9, r3, r5
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7fe fd56 	bl	80163ac <fill_first_frag>
 8017900:	4603      	mov	r3, r0
 8017902:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8017906:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801790a:	2b00      	cmp	r3, #0
 801790c:	d002      	beq.n	8017914 <dir_register+0xd4>
 801790e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017912:	e135      	b.n	8017b80 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801791a:	f04f 32ff 	mov.w	r2, #4294967295
 801791e:	4619      	mov	r1, r3
 8017920:	f7fe fd73 	bl	801640a <fill_last_frag>
 8017924:	4603      	mov	r3, r0
 8017926:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 801792a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801792e:	2b00      	cmp	r3, #0
 8017930:	d002      	beq.n	8017938 <dir_register+0xf8>
 8017932:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017936:	e123      	b.n	8017b80 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	f107 0308 	add.w	r3, r7, #8
 801793e:	4611      	mov	r1, r2
 8017940:	4618      	mov	r0, r3
 8017942:	f7ff fc93 	bl	801726c <load_obj_dir>
 8017946:	4603      	mov	r3, r0
 8017948:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 801794c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <dir_register+0x11a>
 8017954:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017958:	e112      	b.n	8017b80 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801795a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801795c:	691b      	ldr	r3, [r3, #16]
 801795e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8017968:	4608      	mov	r0, r1
 801796a:	f7fd febe 	bl	80156ea <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 801796e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017970:	691b      	ldr	r3, [r3, #16]
 8017972:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801797c:	4608      	mov	r0, r1
 801797e:	f7fd feb4 	bl	80156ea <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	79da      	ldrb	r2, [r3, #7]
 8017986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017988:	691b      	ldr	r3, [r3, #16]
 801798a:	3321      	adds	r3, #33	@ 0x21
 801798c:	f042 0201 	orr.w	r2, r2, #1
 8017990:	b2d2      	uxtb	r2, r2
 8017992:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8017994:	f107 0308 	add.w	r3, r7, #8
 8017998:	4618      	mov	r0, r3
 801799a:	f7ff fc9d 	bl	80172d8 <store_xdir>
 801799e:	4603      	mov	r3, r0
 80179a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80179a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d002      	beq.n	80179b2 <dir_register+0x172>
 80179ac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80179b0:	e0e6      	b.n	8017b80 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80179b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179b4:	691a      	ldr	r2, [r3, #16]
 80179b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	4619      	mov	r1, r3
 80179bc:	4610      	mov	r0, r2
 80179be:	f7ff fce6 	bl	801738e <create_xdir>
		return FR_OK;
 80179c2:	2300      	movs	r3, #0
 80179c4:	e0dc      	b.n	8017b80 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80179cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80179d0:	220c      	movs	r2, #12
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7fd ff11 	bl	80157fa <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80179d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80179dc:	f003 0301 	and.w	r3, r3, #1
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d033      	beq.n	8017a4c <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2240      	movs	r2, #64	@ 0x40
 80179e8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 80179ec:	2301      	movs	r3, #1
 80179ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80179f0:	e016      	b.n	8017a20 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80179f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179fa:	68da      	ldr	r2, [r3, #12]
 80179fc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a02:	f7ff fa5f 	bl	8016ec4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7ff fdef 	bl	80175ea <dir_find>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8017a12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d106      	bne.n	8017a28 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8017a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a22:	2b63      	cmp	r3, #99	@ 0x63
 8017a24:	d9e5      	bls.n	80179f2 <dir_register+0x1b2>
 8017a26:	e000      	b.n	8017a2a <dir_register+0x1ea>
			if (res != FR_OK) break;
 8017a28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017a2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017a2c:	2b64      	cmp	r3, #100	@ 0x64
 8017a2e:	d101      	bne.n	8017a34 <dir_register+0x1f4>
 8017a30:	2307      	movs	r3, #7
 8017a32:	e0a5      	b.n	8017b80 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017a34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a38:	2b04      	cmp	r3, #4
 8017a3a:	d002      	beq.n	8017a42 <dir_register+0x202>
 8017a3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a40:	e09e      	b.n	8017b80 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017a42:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8017a50:	f003 0302 	and.w	r3, r3, #2
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d007      	beq.n	8017a68 <dir_register+0x228>
 8017a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017a5a:	330c      	adds	r3, #12
 8017a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8017b1c <dir_register+0x2dc>)
 8017a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8017a62:	089b      	lsrs	r3, r3, #2
 8017a64:	3301      	adds	r3, #1
 8017a66:	e000      	b.n	8017a6a <dir_register+0x22a>
 8017a68:	2301      	movs	r3, #1
 8017a6a:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017a6c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f7ff f850 	bl	8016b14 <dir_alloc>
 8017a74:	4603      	mov	r3, r0
 8017a76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017a7a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d14f      	bne.n	8017b22 <dir_register+0x2e2>
 8017a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a84:	3b01      	subs	r3, #1
 8017a86:	673b      	str	r3, [r7, #112]	@ 0x70
 8017a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d049      	beq.n	8017b22 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017a94:	015b      	lsls	r3, r3, #5
 8017a96:	1ad3      	subs	r3, r2, r3
 8017a98:	4619      	mov	r1, r3
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f7fe fedf 	bl	801685e <dir_sdi>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8017aa6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d139      	bne.n	8017b22 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	3340      	adds	r3, #64	@ 0x40
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7ff fa94 	bl	8016fe0 <sum_sfn>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017ac6:	f7fe f8c7 	bl	8015c58 <move_window>
 8017aca:	4603      	mov	r3, r0
 8017acc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8017ad0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d123      	bne.n	8017b20 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017ada:	68d8      	ldr	r0, [r3, #12]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8017ae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017ae2:	b2da      	uxtb	r2, r3
 8017ae4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8017ae8:	f7ff f984 	bl	8016df4 <put_lfn>
				fs->wflag = 1;
 8017aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017aee:	2201      	movs	r2, #1
 8017af0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017af2:	2100      	movs	r1, #0
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f7fe ff38 	bl	801696a <dir_next>
 8017afa:	4603      	mov	r3, r0
 8017afc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8017b00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d10c      	bne.n	8017b22 <dir_register+0x2e2>
 8017b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b0a:	3b01      	subs	r3, #1
 8017b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8017b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d1d4      	bne.n	8017abe <dir_register+0x27e>
 8017b14:	e005      	b.n	8017b22 <dir_register+0x2e2>
 8017b16:	bf00      	nop
 8017b18:	88888889 	.word	0x88888889
 8017b1c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8017b20:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017b22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d128      	bne.n	8017b7c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b2e:	4619      	mov	r1, r3
 8017b30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017b32:	f7fe f891 	bl	8015c58 <move_window>
 8017b36:	4603      	mov	r3, r0
 8017b38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8017b3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d11b      	bne.n	8017b7c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b48:	2220      	movs	r2, #32
 8017b4a:	2100      	movs	r1, #0
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7fd fe75 	bl	801583c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	3340      	adds	r3, #64	@ 0x40
 8017b5a:	220b      	movs	r2, #11
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	f7fd fe4c 	bl	80157fa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b6c:	330c      	adds	r3, #12
 8017b6e:	f002 0218 	and.w	r2, r2, #24
 8017b72:	b2d2      	uxtb	r2, r2
 8017b74:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b78:	2201      	movs	r2, #1
 8017b7a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017b7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3780      	adds	r7, #128	@ 0x80
 8017b84:	46bd      	mov	sp, r7
 8017b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017b8a:	bf00      	nop

08017b8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b08a      	sub	sp, #40	@ 0x28
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
 8017b94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8017b96:	683b      	ldr	r3, [r7, #0]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	613b      	str	r3, [r7, #16]
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	68db      	ldr	r3, [r3, #12]
 8017ba2:	60fb      	str	r3, [r7, #12]
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	617b      	str	r3, [r7, #20]
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017bac:	69bb      	ldr	r3, [r7, #24]
 8017bae:	1c5a      	adds	r2, r3, #1
 8017bb0:	61ba      	str	r2, [r7, #24]
 8017bb2:	693a      	ldr	r2, [r7, #16]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8017bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bbc:	2b1f      	cmp	r3, #31
 8017bbe:	d940      	bls.n	8017c42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017bc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017bc4:	d006      	beq.n	8017bd4 <create_name+0x48>
 8017bc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8017bca:	d110      	bne.n	8017bee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017bcc:	e002      	b.n	8017bd4 <create_name+0x48>
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	61bb      	str	r3, [r7, #24]
 8017bd4:	693a      	ldr	r2, [r7, #16]
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	4413      	add	r3, r2
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8017bde:	d0f6      	beq.n	8017bce <create_name+0x42>
 8017be0:	693a      	ldr	r2, [r7, #16]
 8017be2:	69bb      	ldr	r3, [r7, #24]
 8017be4:	4413      	add	r3, r2
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	2b5c      	cmp	r3, #92	@ 0x5c
 8017bea:	d0f0      	beq.n	8017bce <create_name+0x42>
			break;
 8017bec:	e02a      	b.n	8017c44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	2bfe      	cmp	r3, #254	@ 0xfe
 8017bf2:	d901      	bls.n	8017bf8 <create_name+0x6c>
 8017bf4:	2306      	movs	r3, #6
 8017bf6:	e17d      	b.n	8017ef4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bfa:	b2db      	uxtb	r3, r3
 8017bfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c00:	2101      	movs	r1, #1
 8017c02:	4618      	mov	r0, r3
 8017c04:	f001 fcba 	bl	801957c <ff_convert>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017c0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d101      	bne.n	8017c16 <create_name+0x8a>
 8017c12:	2306      	movs	r3, #6
 8017c14:	e16e      	b.n	8017ef4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8017c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c18:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c1a:	d809      	bhi.n	8017c30 <create_name+0xa4>
 8017c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c1e:	4619      	mov	r1, r3
 8017c20:	488d      	ldr	r0, [pc, #564]	@ (8017e58 <create_name+0x2cc>)
 8017c22:	f7fd fe4d 	bl	80158c0 <chk_chr>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d001      	beq.n	8017c30 <create_name+0xa4>
 8017c2c:	2306      	movs	r3, #6
 8017c2e:	e161      	b.n	8017ef4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	1c5a      	adds	r2, r3, #1
 8017c34:	617a      	str	r2, [r7, #20]
 8017c36:	005b      	lsls	r3, r3, #1
 8017c38:	68fa      	ldr	r2, [r7, #12]
 8017c3a:	4413      	add	r3, r2
 8017c3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017c3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017c40:	e7b4      	b.n	8017bac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017c42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017c44:	693a      	ldr	r2, [r7, #16]
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	441a      	add	r2, r3
 8017c4a:	683b      	ldr	r3, [r7, #0]
 8017c4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c50:	2b1f      	cmp	r3, #31
 8017c52:	d801      	bhi.n	8017c58 <create_name+0xcc>
 8017c54:	2304      	movs	r3, #4
 8017c56:	e000      	b.n	8017c5a <create_name+0xce>
 8017c58:	2300      	movs	r3, #0
 8017c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017c5e:	e011      	b.n	8017c84 <create_name+0xf8>
		w = lfn[di - 1];
 8017c60:	697a      	ldr	r2, [r7, #20]
 8017c62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017c66:	4413      	add	r3, r2
 8017c68:	005b      	lsls	r3, r3, #1
 8017c6a:	68fa      	ldr	r2, [r7, #12]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8017c72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c74:	2b20      	cmp	r3, #32
 8017c76:	d002      	beq.n	8017c7e <create_name+0xf2>
 8017c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c7c:	d106      	bne.n	8017c8c <create_name+0x100>
		di--;
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	3b01      	subs	r3, #1
 8017c82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017c84:	697b      	ldr	r3, [r7, #20]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d1ea      	bne.n	8017c60 <create_name+0xd4>
 8017c8a:	e000      	b.n	8017c8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017c8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	005b      	lsls	r3, r3, #1
 8017c92:	68fa      	ldr	r2, [r7, #12]
 8017c94:	4413      	add	r3, r2
 8017c96:	2200      	movs	r2, #0
 8017c98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d101      	bne.n	8017ca4 <create_name+0x118>
 8017ca0:	2306      	movs	r3, #6
 8017ca2:	e127      	b.n	8017ef4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	3340      	adds	r3, #64	@ 0x40
 8017ca8:	220b      	movs	r2, #11
 8017caa:	2120      	movs	r1, #32
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7fd fdc5 	bl	801583c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	61bb      	str	r3, [r7, #24]
 8017cb6:	e002      	b.n	8017cbe <create_name+0x132>
 8017cb8:	69bb      	ldr	r3, [r7, #24]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	61bb      	str	r3, [r7, #24]
 8017cbe:	69bb      	ldr	r3, [r7, #24]
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	68fa      	ldr	r2, [r7, #12]
 8017cc4:	4413      	add	r3, r2
 8017cc6:	881b      	ldrh	r3, [r3, #0]
 8017cc8:	2b20      	cmp	r3, #32
 8017cca:	d0f5      	beq.n	8017cb8 <create_name+0x12c>
 8017ccc:	69bb      	ldr	r3, [r7, #24]
 8017cce:	005b      	lsls	r3, r3, #1
 8017cd0:	68fa      	ldr	r2, [r7, #12]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	881b      	ldrh	r3, [r3, #0]
 8017cd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8017cd8:	d0ee      	beq.n	8017cb8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017cda:	69bb      	ldr	r3, [r7, #24]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d009      	beq.n	8017cf4 <create_name+0x168>
 8017ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ce4:	f043 0303 	orr.w	r3, r3, #3
 8017ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017cec:	e002      	b.n	8017cf4 <create_name+0x168>
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	617b      	str	r3, [r7, #20]
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d009      	beq.n	8017d0e <create_name+0x182>
 8017cfa:	697a      	ldr	r2, [r7, #20]
 8017cfc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d00:	4413      	add	r3, r2
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	4413      	add	r3, r2
 8017d08:	881b      	ldrh	r3, [r3, #0]
 8017d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d0c:	d1ef      	bne.n	8017cee <create_name+0x162>

	i = b = 0; ni = 8;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017d14:	2300      	movs	r3, #0
 8017d16:	623b      	str	r3, [r7, #32]
 8017d18:	2308      	movs	r3, #8
 8017d1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017d1c:	69bb      	ldr	r3, [r7, #24]
 8017d1e:	1c5a      	adds	r2, r3, #1
 8017d20:	61ba      	str	r2, [r7, #24]
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	68fa      	ldr	r2, [r7, #12]
 8017d26:	4413      	add	r3, r2
 8017d28:	881b      	ldrh	r3, [r3, #0]
 8017d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	f000 8090 	beq.w	8017e54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017d34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d36:	2b20      	cmp	r3, #32
 8017d38:	d006      	beq.n	8017d48 <create_name+0x1bc>
 8017d3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d3e:	d10a      	bne.n	8017d56 <create_name+0x1ca>
 8017d40:	69ba      	ldr	r2, [r7, #24]
 8017d42:	697b      	ldr	r3, [r7, #20]
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d006      	beq.n	8017d56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d4c:	f043 0303 	orr.w	r3, r3, #3
 8017d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017d54:	e07d      	b.n	8017e52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017d56:	6a3a      	ldr	r2, [r7, #32]
 8017d58:	69fb      	ldr	r3, [r7, #28]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d203      	bcs.n	8017d66 <create_name+0x1da>
 8017d5e:	69ba      	ldr	r2, [r7, #24]
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d123      	bne.n	8017dae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	2b0b      	cmp	r3, #11
 8017d6a:	d106      	bne.n	8017d7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d70:	f043 0303 	orr.w	r3, r3, #3
 8017d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017d78:	e075      	b.n	8017e66 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017d7a:	69ba      	ldr	r2, [r7, #24]
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	d005      	beq.n	8017d8e <create_name+0x202>
 8017d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d86:	f043 0303 	orr.w	r3, r3, #3
 8017d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8017d8e:	69ba      	ldr	r2, [r7, #24]
 8017d90:	697b      	ldr	r3, [r7, #20]
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d866      	bhi.n	8017e64 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	61bb      	str	r3, [r7, #24]
 8017d9a:	2308      	movs	r3, #8
 8017d9c:	623b      	str	r3, [r7, #32]
 8017d9e:	230b      	movs	r3, #11
 8017da0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017da2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017da6:	009b      	lsls	r3, r3, #2
 8017da8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017dac:	e051      	b.n	8017e52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8017db2:	d914      	bls.n	8017dde <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017db4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017db6:	2100      	movs	r1, #0
 8017db8:	4618      	mov	r0, r3
 8017dba:	f001 fbdf 	bl	801957c <ff_convert>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d004      	beq.n	8017dd2 <create_name+0x246>
 8017dc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017dca:	3b80      	subs	r3, #128	@ 0x80
 8017dcc:	4a23      	ldr	r2, [pc, #140]	@ (8017e5c <create_name+0x2d0>)
 8017dce:	5cd3      	ldrb	r3, [r2, r3]
 8017dd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017dd6:	f043 0302 	orr.w	r3, r3, #2
 8017dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017dde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d007      	beq.n	8017df4 <create_name+0x268>
 8017de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017de6:	4619      	mov	r1, r3
 8017de8:	481d      	ldr	r0, [pc, #116]	@ (8017e60 <create_name+0x2d4>)
 8017dea:	f7fd fd69 	bl	80158c0 <chk_chr>
 8017dee:	4603      	mov	r3, r0
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d008      	beq.n	8017e06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017df4:	235f      	movs	r3, #95	@ 0x5f
 8017df6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017dfc:	f043 0303 	orr.w	r3, r3, #3
 8017e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e04:	e01b      	b.n	8017e3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017e06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e08:	2b40      	cmp	r3, #64	@ 0x40
 8017e0a:	d909      	bls.n	8017e20 <create_name+0x294>
 8017e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8017e10:	d806      	bhi.n	8017e20 <create_name+0x294>
					b |= 2;
 8017e12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e16:	f043 0302 	orr.w	r3, r3, #2
 8017e1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e1e:	e00e      	b.n	8017e3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e22:	2b60      	cmp	r3, #96	@ 0x60
 8017e24:	d90b      	bls.n	8017e3e <create_name+0x2b2>
 8017e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e28:	2b7a      	cmp	r3, #122	@ 0x7a
 8017e2a:	d808      	bhi.n	8017e3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e30:	f043 0301 	orr.w	r3, r3, #1
 8017e34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e3a:	3b20      	subs	r3, #32
 8017e3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017e3e:	6a3b      	ldr	r3, [r7, #32]
 8017e40:	1c5a      	adds	r2, r3, #1
 8017e42:	623a      	str	r2, [r7, #32]
 8017e44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017e46:	b2d1      	uxtb	r1, r2
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	4413      	add	r3, r2
 8017e4c:	460a      	mov	r2, r1
 8017e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8017e52:	e763      	b.n	8017d1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017e54:	bf00      	nop
 8017e56:	e006      	b.n	8017e66 <create_name+0x2da>
 8017e58:	0801aa50 	.word	0x0801aa50
 8017e5c:	0801b23c 	.word	0x0801b23c
 8017e60:	0801aa5c 	.word	0x0801aa5c
			if (si > di) break;			/* No extension */
 8017e64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017e6c:	2be5      	cmp	r3, #229	@ 0xe5
 8017e6e:	d103      	bne.n	8017e78 <create_name+0x2ec>
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2205      	movs	r2, #5
 8017e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	2b08      	cmp	r3, #8
 8017e7c:	d104      	bne.n	8017e88 <create_name+0x2fc>
 8017e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e82:	009b      	lsls	r3, r3, #2
 8017e84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e8c:	f003 030c 	and.w	r3, r3, #12
 8017e90:	2b0c      	cmp	r3, #12
 8017e92:	d005      	beq.n	8017ea0 <create_name+0x314>
 8017e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017e98:	f003 0303 	and.w	r3, r3, #3
 8017e9c:	2b03      	cmp	r3, #3
 8017e9e:	d105      	bne.n	8017eac <create_name+0x320>
 8017ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ea4:	f043 0302 	orr.w	r3, r3, #2
 8017ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017eb0:	f003 0302 	and.w	r3, r3, #2
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d117      	bne.n	8017ee8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ebc:	f003 0303 	and.w	r3, r3, #3
 8017ec0:	2b01      	cmp	r3, #1
 8017ec2:	d105      	bne.n	8017ed0 <create_name+0x344>
 8017ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ec8:	f043 0310 	orr.w	r3, r3, #16
 8017ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ed4:	f003 030c 	and.w	r3, r3, #12
 8017ed8:	2b04      	cmp	r3, #4
 8017eda:	d105      	bne.n	8017ee8 <create_name+0x35c>
 8017edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ee0:	f043 0308 	orr.w	r3, r3, #8
 8017ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017eee:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8017ef2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3728      	adds	r7, #40	@ 0x28
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}

08017efc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b086      	sub	sp, #24
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
 8017f04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017f10:	e002      	b.n	8017f18 <follow_path+0x1c>
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	3301      	adds	r3, #1
 8017f16:	603b      	str	r3, [r7, #0]
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8017f1e:	d0f8      	beq.n	8017f12 <follow_path+0x16>
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	781b      	ldrb	r3, [r3, #0]
 8017f24:	2b5c      	cmp	r3, #92	@ 0x5c
 8017f26:	d0f4      	beq.n	8017f12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	2200      	movs	r2, #0
 8017f32:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	781b      	ldrb	r3, [r3, #0]
 8017f38:	2b1f      	cmp	r3, #31
 8017f3a:	d80a      	bhi.n	8017f52 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	2280      	movs	r2, #128	@ 0x80
 8017f40:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8017f44:	2100      	movs	r1, #0
 8017f46:	6878      	ldr	r0, [r7, #4]
 8017f48:	f7fe fc89 	bl	801685e <dir_sdi>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	75fb      	strb	r3, [r7, #23]
 8017f50:	e078      	b.n	8018044 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017f52:	463b      	mov	r3, r7
 8017f54:	4619      	mov	r1, r3
 8017f56:	6878      	ldr	r0, [r7, #4]
 8017f58:	f7ff fe18 	bl	8017b8c <create_name>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017f60:	7dfb      	ldrb	r3, [r7, #23]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d169      	bne.n	801803a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f7ff fb3f 	bl	80175ea <dir_find>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8017f76:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017f78:	7dfb      	ldrb	r3, [r7, #23]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d00a      	beq.n	8017f94 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017f7e:	7dfb      	ldrb	r3, [r7, #23]
 8017f80:	2b04      	cmp	r3, #4
 8017f82:	d15c      	bne.n	801803e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017f84:	7afb      	ldrb	r3, [r7, #11]
 8017f86:	f003 0304 	and.w	r3, r3, #4
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d157      	bne.n	801803e <follow_path+0x142>
 8017f8e:	2305      	movs	r3, #5
 8017f90:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017f92:	e054      	b.n	801803e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017f94:	7afb      	ldrb	r3, [r7, #11]
 8017f96:	f003 0304 	and.w	r3, r3, #4
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d151      	bne.n	8018042 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017f9e:	693b      	ldr	r3, [r7, #16]
 8017fa0:	799b      	ldrb	r3, [r3, #6]
 8017fa2:	f003 0310 	and.w	r3, r3, #16
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d102      	bne.n	8017fb0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8017faa:	2305      	movs	r3, #5
 8017fac:	75fb      	strb	r3, [r7, #23]
 8017fae:	e049      	b.n	8018044 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	2b04      	cmp	r3, #4
 8017fb6:	d130      	bne.n	801801a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8017fb8:	693b      	ldr	r3, [r7, #16]
 8017fba:	689a      	ldr	r2, [r3, #8]
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8017fc0:	693b      	ldr	r3, [r7, #16]
 8017fc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017fcc:	693a      	ldr	r2, [r7, #16]
 8017fce:	79d2      	ldrb	r2, [r2, #7]
 8017fd0:	431a      	orrs	r2, r3
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	691b      	ldr	r3, [r3, #16]
 8017fe2:	3334      	adds	r3, #52	@ 0x34
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7fd fa3b 	bl	8015460 <ld_dword>
 8017fea:	4602      	mov	r2, r0
 8017fec:	693b      	ldr	r3, [r7, #16]
 8017fee:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	691b      	ldr	r3, [r3, #16]
 8017ff4:	3321      	adds	r3, #33	@ 0x21
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	f003 0302 	and.w	r3, r3, #2
 8017ffc:	b2da      	uxtb	r2, r3
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	3338      	adds	r3, #56	@ 0x38
 8018008:	4618      	mov	r0, r3
 801800a:	f7fd fa4c 	bl	80154a6 <ld_qword>
 801800e:	4602      	mov	r2, r0
 8018010:	460b      	mov	r3, r1
 8018012:	6939      	ldr	r1, [r7, #16]
 8018014:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8018018:	e79b      	b.n	8017f52 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018028:	4413      	add	r3, r2
 801802a:	4619      	mov	r1, r3
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f7fe fdcd 	bl	8016bcc <ld_clust>
 8018032:	4602      	mov	r2, r0
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018038:	e78b      	b.n	8017f52 <follow_path+0x56>
			if (res != FR_OK) break;
 801803a:	bf00      	nop
 801803c:	e002      	b.n	8018044 <follow_path+0x148>
				break;
 801803e:	bf00      	nop
 8018040:	e000      	b.n	8018044 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018042:	bf00      	nop
			}
		}
	}

	return res;
 8018044:	7dfb      	ldrb	r3, [r7, #23]
}
 8018046:	4618      	mov	r0, r3
 8018048:	3718      	adds	r7, #24
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}

0801804e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801804e:	b480      	push	{r7}
 8018050:	b087      	sub	sp, #28
 8018052:	af00      	add	r7, sp, #0
 8018054:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018056:	f04f 33ff 	mov.w	r3, #4294967295
 801805a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d031      	beq.n	80180c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	617b      	str	r3, [r7, #20]
 801806a:	e002      	b.n	8018072 <get_ldnumber+0x24>
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	3301      	adds	r3, #1
 8018070:	617b      	str	r3, [r7, #20]
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	781b      	ldrb	r3, [r3, #0]
 8018076:	2b1f      	cmp	r3, #31
 8018078:	d903      	bls.n	8018082 <get_ldnumber+0x34>
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	2b3a      	cmp	r3, #58	@ 0x3a
 8018080:	d1f4      	bne.n	801806c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	781b      	ldrb	r3, [r3, #0]
 8018086:	2b3a      	cmp	r3, #58	@ 0x3a
 8018088:	d11c      	bne.n	80180c4 <get_ldnumber+0x76>
			tp = *path;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	1c5a      	adds	r2, r3, #1
 8018094:	60fa      	str	r2, [r7, #12]
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	3b30      	subs	r3, #48	@ 0x30
 801809a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	2b09      	cmp	r3, #9
 80180a0:	d80e      	bhi.n	80180c0 <get_ldnumber+0x72>
 80180a2:	68fa      	ldr	r2, [r7, #12]
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d10a      	bne.n	80180c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80180aa:	68bb      	ldr	r3, [r7, #8]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d107      	bne.n	80180c0 <get_ldnumber+0x72>
					vol = (int)i;
 80180b0:	68bb      	ldr	r3, [r7, #8]
 80180b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80180b4:	697b      	ldr	r3, [r7, #20]
 80180b6:	3301      	adds	r3, #1
 80180b8:	617b      	str	r3, [r7, #20]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	697a      	ldr	r2, [r7, #20]
 80180be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80180c0:	693b      	ldr	r3, [r7, #16]
 80180c2:	e002      	b.n	80180ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80180c4:	2300      	movs	r3, #0
 80180c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80180c8:	693b      	ldr	r3, [r7, #16]
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	371c      	adds	r7, #28
 80180ce:	46bd      	mov	sp, r7
 80180d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d4:	4770      	bx	lr
	...

080180d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	70da      	strb	r2, [r3, #3]
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f04f 32ff 	mov.w	r2, #4294967295
 80180ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80180f0:	6839      	ldr	r1, [r7, #0]
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7fd fdb0 	bl	8015c58 <move_window>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d001      	beq.n	8018102 <check_fs+0x2a>
 80180fe:	2304      	movs	r3, #4
 8018100:	e044      	b.n	801818c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	3338      	adds	r3, #56	@ 0x38
 8018106:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801810a:	4618      	mov	r0, r3
 801810c:	f7fd f990 	bl	8015430 <ld_word>
 8018110:	4603      	mov	r3, r0
 8018112:	461a      	mov	r2, r3
 8018114:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8018118:	429a      	cmp	r2, r3
 801811a:	d001      	beq.n	8018120 <check_fs+0x48>
 801811c:	2303      	movs	r3, #3
 801811e:	e035      	b.n	801818c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018126:	2be9      	cmp	r3, #233	@ 0xe9
 8018128:	d009      	beq.n	801813e <check_fs+0x66>
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018130:	2beb      	cmp	r3, #235	@ 0xeb
 8018132:	d11e      	bne.n	8018172 <check_fs+0x9a>
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801813a:	2b90      	cmp	r3, #144	@ 0x90
 801813c:	d119      	bne.n	8018172 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	3338      	adds	r3, #56	@ 0x38
 8018142:	3336      	adds	r3, #54	@ 0x36
 8018144:	4618      	mov	r0, r3
 8018146:	f7fd f98b 	bl	8015460 <ld_dword>
 801814a:	4603      	mov	r3, r0
 801814c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8018150:	4a10      	ldr	r2, [pc, #64]	@ (8018194 <check_fs+0xbc>)
 8018152:	4293      	cmp	r3, r2
 8018154:	d101      	bne.n	801815a <check_fs+0x82>
 8018156:	2300      	movs	r3, #0
 8018158:	e018      	b.n	801818c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	3338      	adds	r3, #56	@ 0x38
 801815e:	3352      	adds	r3, #82	@ 0x52
 8018160:	4618      	mov	r0, r3
 8018162:	f7fd f97d 	bl	8015460 <ld_dword>
 8018166:	4603      	mov	r3, r0
 8018168:	4a0b      	ldr	r2, [pc, #44]	@ (8018198 <check_fs+0xc0>)
 801816a:	4293      	cmp	r3, r2
 801816c:	d101      	bne.n	8018172 <check_fs+0x9a>
 801816e:	2300      	movs	r3, #0
 8018170:	e00c      	b.n	801818c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	3338      	adds	r3, #56	@ 0x38
 8018176:	220b      	movs	r2, #11
 8018178:	4908      	ldr	r1, [pc, #32]	@ (801819c <check_fs+0xc4>)
 801817a:	4618      	mov	r0, r3
 801817c:	f7fd fb79 	bl	8015872 <mem_cmp>
 8018180:	4603      	mov	r3, r0
 8018182:	2b00      	cmp	r3, #0
 8018184:	d101      	bne.n	801818a <check_fs+0xb2>
 8018186:	2301      	movs	r3, #1
 8018188:	e000      	b.n	801818c <check_fs+0xb4>
#endif
	return 2;
 801818a:	2302      	movs	r3, #2
}
 801818c:	4618      	mov	r0, r3
 801818e:	3708      	adds	r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}
 8018194:	00544146 	.word	0x00544146
 8018198:	33544146 	.word	0x33544146
 801819c:	0801aa64 	.word	0x0801aa64

080181a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80181a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80181a4:	b09c      	sub	sp, #112	@ 0x70
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	61f8      	str	r0, [r7, #28]
 80181aa:	61b9      	str	r1, [r7, #24]
 80181ac:	4613      	mov	r3, r2
 80181ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80181b0:	69bb      	ldr	r3, [r7, #24]
 80181b2:	2200      	movs	r2, #0
 80181b4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80181b6:	69f8      	ldr	r0, [r7, #28]
 80181b8:	f7ff ff49 	bl	801804e <get_ldnumber>
 80181bc:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 80181be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	da01      	bge.n	80181c8 <find_volume+0x28>
 80181c4:	230b      	movs	r3, #11
 80181c6:	e337      	b.n	8018838 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80181c8:	4a99      	ldr	r2, [pc, #612]	@ (8018430 <find_volume+0x290>)
 80181ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181d0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80181d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d101      	bne.n	80181dc <find_volume+0x3c>
 80181d8:	230c      	movs	r3, #12
 80181da:	e32d      	b.n	8018838 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80181dc:	69bb      	ldr	r3, [r7, #24]
 80181de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80181e0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80181e2:	7dfb      	ldrb	r3, [r7, #23]
 80181e4:	f023 0301 	bic.w	r3, r3, #1
 80181e8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80181ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80181ec:	781b      	ldrb	r3, [r3, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d01a      	beq.n	8018228 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80181f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80181f4:	785b      	ldrb	r3, [r3, #1]
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fd f87a 	bl	80152f0 <disk_status>
 80181fc:	4603      	mov	r3, r0
 80181fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018202:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018206:	f003 0301 	and.w	r3, r3, #1
 801820a:	2b00      	cmp	r3, #0
 801820c:	d10c      	bne.n	8018228 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801820e:	7dfb      	ldrb	r3, [r7, #23]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d007      	beq.n	8018224 <find_volume+0x84>
 8018214:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018218:	f003 0304 	and.w	r3, r3, #4
 801821c:	2b00      	cmp	r3, #0
 801821e:	d001      	beq.n	8018224 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8018220:	230a      	movs	r3, #10
 8018222:	e309      	b.n	8018838 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 8018224:	2300      	movs	r3, #0
 8018226:	e307      	b.n	8018838 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801822a:	2200      	movs	r2, #0
 801822c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801822e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018230:	b2da      	uxtb	r2, r3
 8018232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018234:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018238:	785b      	ldrb	r3, [r3, #1]
 801823a:	4618      	mov	r0, r3
 801823c:	f7fd f872 	bl	8015324 <disk_initialize>
 8018240:	4603      	mov	r3, r0
 8018242:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018246:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801824a:	f003 0301 	and.w	r3, r3, #1
 801824e:	2b00      	cmp	r3, #0
 8018250:	d001      	beq.n	8018256 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018252:	2303      	movs	r3, #3
 8018254:	e2f0      	b.n	8018838 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018256:	7dfb      	ldrb	r3, [r7, #23]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d007      	beq.n	801826c <find_volume+0xcc>
 801825c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018260:	f003 0304 	and.w	r3, r3, #4
 8018264:	2b00      	cmp	r3, #0
 8018266:	d001      	beq.n	801826c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8018268:	230a      	movs	r3, #10
 801826a:	e2e5      	b.n	8018838 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801826c:	2300      	movs	r3, #0
 801826e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018270:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018272:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018274:	f7ff ff30 	bl	80180d8 <check_fs>
 8018278:	4603      	mov	r3, r0
 801827a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801827e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018282:	2b02      	cmp	r3, #2
 8018284:	d14d      	bne.n	8018322 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018286:	2300      	movs	r3, #0
 8018288:	65bb      	str	r3, [r7, #88]	@ 0x58
 801828a:	e020      	b.n	80182ce <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801828c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801828e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018294:	011b      	lsls	r3, r3, #4
 8018296:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801829a:	4413      	add	r3, r2
 801829c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801829e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182a0:	3304      	adds	r3, #4
 80182a2:	781b      	ldrb	r3, [r3, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d006      	beq.n	80182b6 <find_volume+0x116>
 80182a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182aa:	3308      	adds	r3, #8
 80182ac:	4618      	mov	r0, r3
 80182ae:	f7fd f8d7 	bl	8015460 <ld_dword>
 80182b2:	4602      	mov	r2, r0
 80182b4:	e000      	b.n	80182b8 <find_volume+0x118>
 80182b6:	2200      	movs	r2, #0
 80182b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182ba:	009b      	lsls	r3, r3, #2
 80182bc:	3360      	adds	r3, #96	@ 0x60
 80182be:	f107 0110 	add.w	r1, r7, #16
 80182c2:	440b      	add	r3, r1
 80182c4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182ca:	3301      	adds	r3, #1
 80182cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80182ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182d0:	2b03      	cmp	r3, #3
 80182d2:	d9db      	bls.n	801828c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80182d4:	2300      	movs	r3, #0
 80182d6:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 80182d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <find_volume+0x144>
 80182de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182e0:	3b01      	subs	r3, #1
 80182e2:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80182e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182e6:	009b      	lsls	r3, r3, #2
 80182e8:	3360      	adds	r3, #96	@ 0x60
 80182ea:	f107 0210 	add.w	r2, r7, #16
 80182ee:	4413      	add	r3, r2
 80182f0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80182f4:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80182f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d005      	beq.n	8018308 <find_volume+0x168>
 80182fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80182fe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018300:	f7ff feea 	bl	80180d8 <check_fs>
 8018304:	4603      	mov	r3, r0
 8018306:	e000      	b.n	801830a <find_volume+0x16a>
 8018308:	2303      	movs	r3, #3
 801830a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801830e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018312:	2b01      	cmp	r3, #1
 8018314:	d905      	bls.n	8018322 <find_volume+0x182>
 8018316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018318:	3301      	adds	r3, #1
 801831a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801831c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801831e:	2b03      	cmp	r3, #3
 8018320:	d9e0      	bls.n	80182e4 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018322:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018326:	2b04      	cmp	r3, #4
 8018328:	d101      	bne.n	801832e <find_volume+0x18e>
 801832a:	2301      	movs	r3, #1
 801832c:	e284      	b.n	8018838 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801832e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018332:	2b01      	cmp	r3, #1
 8018334:	d901      	bls.n	801833a <find_volume+0x19a>
 8018336:	230d      	movs	r3, #13
 8018338:	e27e      	b.n	8018838 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801833a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801833e:	2b01      	cmp	r3, #1
 8018340:	f040 80fa 	bne.w	8018538 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8018344:	230b      	movs	r3, #11
 8018346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018348:	e002      	b.n	8018350 <find_volume+0x1b0>
 801834a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801834c:	3301      	adds	r3, #1
 801834e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018352:	2b3f      	cmp	r3, #63	@ 0x3f
 8018354:	d806      	bhi.n	8018364 <find_volume+0x1c4>
 8018356:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801835a:	4413      	add	r3, r2
 801835c:	3338      	adds	r3, #56	@ 0x38
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d0f2      	beq.n	801834a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8018364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018366:	2b3f      	cmp	r3, #63	@ 0x3f
 8018368:	d801      	bhi.n	801836e <find_volume+0x1ce>
 801836a:	230d      	movs	r3, #13
 801836c:	e264      	b.n	8018838 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801836e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018370:	3338      	adds	r3, #56	@ 0x38
 8018372:	3368      	adds	r3, #104	@ 0x68
 8018374:	4618      	mov	r0, r3
 8018376:	f7fd f85b 	bl	8015430 <ld_word>
 801837a:	4603      	mov	r3, r0
 801837c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018380:	d001      	beq.n	8018386 <find_volume+0x1e6>
 8018382:	230d      	movs	r3, #13
 8018384:	e258      	b.n	8018838 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8018386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018388:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801838c:	2b09      	cmp	r3, #9
 801838e:	d001      	beq.n	8018394 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8018390:	230d      	movs	r3, #13
 8018392:	e251      	b.n	8018838 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8018394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018396:	3338      	adds	r3, #56	@ 0x38
 8018398:	3348      	adds	r3, #72	@ 0x48
 801839a:	4618      	mov	r0, r3
 801839c:	f7fd f883 	bl	80154a6 <ld_qword>
 80183a0:	4602      	mov	r2, r0
 80183a2:	460b      	mov	r3, r1
 80183a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80183a6:	2000      	movs	r0, #0
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	60f8      	str	r0, [r7, #12]
 80183ac:	68b9      	ldr	r1, [r7, #8]
 80183ae:	1851      	adds	r1, r2, r1
 80183b0:	6039      	str	r1, [r7, #0]
 80183b2:	68f9      	ldr	r1, [r7, #12]
 80183b4:	eb43 0101 	adc.w	r1, r3, r1
 80183b8:	6079      	str	r1, [r7, #4]
 80183ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80183be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80183c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d301      	bcc.n	80183ce <find_volume+0x22e>
 80183ca:	230d      	movs	r3, #13
 80183cc:	e234      	b.n	8018838 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80183ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183d0:	3338      	adds	r3, #56	@ 0x38
 80183d2:	3354      	adds	r3, #84	@ 0x54
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7fd f843 	bl	8015460 <ld_dword>
 80183da:	4602      	mov	r2, r0
 80183dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183de:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80183e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183e2:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 80183e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183e8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80183ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183ec:	789b      	ldrb	r3, [r3, #2]
 80183ee:	2b01      	cmp	r3, #1
 80183f0:	d001      	beq.n	80183f6 <find_volume+0x256>
 80183f2:	230d      	movs	r3, #13
 80183f4:	e220      	b.n	8018838 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80183f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80183fc:	461a      	mov	r2, r3
 80183fe:	2301      	movs	r3, #1
 8018400:	4093      	lsls	r3, r2
 8018402:	b29a      	uxth	r2, r3
 8018404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018406:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8018408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801840a:	895b      	ldrh	r3, [r3, #10]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d101      	bne.n	8018414 <find_volume+0x274>
 8018410:	230d      	movs	r3, #13
 8018412:	e211      	b.n	8018838 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8018414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018416:	3338      	adds	r3, #56	@ 0x38
 8018418:	335c      	adds	r3, #92	@ 0x5c
 801841a:	4618      	mov	r0, r3
 801841c:	f7fd f820 	bl	8015460 <ld_dword>
 8018420:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8018422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018424:	4a03      	ldr	r2, [pc, #12]	@ (8018434 <find_volume+0x294>)
 8018426:	4293      	cmp	r3, r2
 8018428:	d906      	bls.n	8018438 <find_volume+0x298>
 801842a:	230d      	movs	r3, #13
 801842c:	e204      	b.n	8018838 <find_volume+0x698>
 801842e:	bf00      	nop
 8018430:	240011e8 	.word	0x240011e8
 8018434:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8018438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801843a:	1c9a      	adds	r2, r3, #2
 801843c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801843e:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8018440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018442:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018444:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8018446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018448:	3338      	adds	r3, #56	@ 0x38
 801844a:	3358      	adds	r3, #88	@ 0x58
 801844c:	4618      	mov	r0, r3
 801844e:	f7fd f807 	bl	8015460 <ld_dword>
 8018452:	4602      	mov	r2, r0
 8018454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018456:	441a      	add	r2, r3
 8018458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801845a:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801845c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801845e:	3338      	adds	r3, #56	@ 0x38
 8018460:	3350      	adds	r3, #80	@ 0x50
 8018462:	4618      	mov	r0, r3
 8018464:	f7fc fffc 	bl	8015460 <ld_dword>
 8018468:	4602      	mov	r2, r0
 801846a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801846c:	441a      	add	r2, r3
 801846e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018470:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8018472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018476:	2200      	movs	r2, #0
 8018478:	469a      	mov	sl, r3
 801847a:	4693      	mov	fp, r2
 801847c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801847e:	895b      	ldrh	r3, [r3, #10]
 8018480:	461a      	mov	r2, r3
 8018482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018484:	fb02 f303 	mul.w	r3, r2, r3
 8018488:	2200      	movs	r2, #0
 801848a:	4698      	mov	r8, r3
 801848c:	4691      	mov	r9, r2
 801848e:	eb1a 0408 	adds.w	r4, sl, r8
 8018492:	eb4b 0509 	adc.w	r5, fp, r9
 8018496:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801849a:	42a2      	cmp	r2, r4
 801849c:	41ab      	sbcs	r3, r5
 801849e:	d201      	bcs.n	80184a4 <find_volume+0x304>
 80184a0:	230d      	movs	r3, #13
 80184a2:	e1c9      	b.n	8018838 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80184a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184a6:	3338      	adds	r3, #56	@ 0x38
 80184a8:	3360      	adds	r3, #96	@ 0x60
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7fc ffd8 	bl	8015460 <ld_dword>
 80184b0:	4602      	mov	r2, r0
 80184b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184b4:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80184b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184ba:	4619      	mov	r1, r3
 80184bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80184be:	f7fd fc67 	bl	8015d90 <clust2sect>
 80184c2:	4603      	mov	r3, r0
 80184c4:	4619      	mov	r1, r3
 80184c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80184c8:	f7fd fbc6 	bl	8015c58 <move_window>
 80184cc:	4603      	mov	r3, r0
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d001      	beq.n	80184d6 <find_volume+0x336>
 80184d2:	2301      	movs	r3, #1
 80184d4:	e1b0      	b.n	8018838 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80184d6:	2300      	movs	r3, #0
 80184d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80184da:	e015      	b.n	8018508 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80184dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80184de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184e0:	4413      	add	r3, r2
 80184e2:	3338      	adds	r3, #56	@ 0x38
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	2b81      	cmp	r3, #129	@ 0x81
 80184e8:	d10b      	bne.n	8018502 <find_volume+0x362>
 80184ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80184f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184f2:	3314      	adds	r3, #20
 80184f4:	4413      	add	r3, r2
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fc ffb2 	bl	8015460 <ld_dword>
 80184fc:	4603      	mov	r3, r0
 80184fe:	2b02      	cmp	r3, #2
 8018500:	d007      	beq.n	8018512 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8018502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018504:	3320      	adds	r3, #32
 8018506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801850a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801850e:	d3e5      	bcc.n	80184dc <find_volume+0x33c>
 8018510:	e000      	b.n	8018514 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8018512:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8018514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801851a:	d101      	bne.n	8018520 <find_volume+0x380>
 801851c:	230d      	movs	r3, #13
 801851e:	e18b      	b.n	8018838 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018522:	f04f 32ff 	mov.w	r2, #4294967295
 8018526:	619a      	str	r2, [r3, #24]
 8018528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801852a:	699a      	ldr	r2, [r3, #24]
 801852c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801852e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8018530:	2304      	movs	r3, #4
 8018532:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8018536:	e167      	b.n	8018808 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801853a:	3338      	adds	r3, #56	@ 0x38
 801853c:	330b      	adds	r3, #11
 801853e:	4618      	mov	r0, r3
 8018540:	f7fc ff76 	bl	8015430 <ld_word>
 8018544:	4603      	mov	r3, r0
 8018546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801854a:	d001      	beq.n	8018550 <find_volume+0x3b0>
 801854c:	230d      	movs	r3, #13
 801854e:	e173      	b.n	8018838 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018552:	3338      	adds	r3, #56	@ 0x38
 8018554:	3316      	adds	r3, #22
 8018556:	4618      	mov	r0, r3
 8018558:	f7fc ff6a 	bl	8015430 <ld_word>
 801855c:	4603      	mov	r3, r0
 801855e:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018562:	2b00      	cmp	r3, #0
 8018564:	d106      	bne.n	8018574 <find_volume+0x3d4>
 8018566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018568:	3338      	adds	r3, #56	@ 0x38
 801856a:	3324      	adds	r3, #36	@ 0x24
 801856c:	4618      	mov	r0, r3
 801856e:	f7fc ff77 	bl	8015460 <ld_dword>
 8018572:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 8018574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018576:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018578:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801857a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801857c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8018580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018582:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018586:	789b      	ldrb	r3, [r3, #2]
 8018588:	2b01      	cmp	r3, #1
 801858a:	d005      	beq.n	8018598 <find_volume+0x3f8>
 801858c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801858e:	789b      	ldrb	r3, [r3, #2]
 8018590:	2b02      	cmp	r3, #2
 8018592:	d001      	beq.n	8018598 <find_volume+0x3f8>
 8018594:	230d      	movs	r3, #13
 8018596:	e14f      	b.n	8018838 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801859a:	789b      	ldrb	r3, [r3, #2]
 801859c:	461a      	mov	r2, r3
 801859e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80185a0:	fb02 f303 	mul.w	r3, r2, r3
 80185a4:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80185a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80185ac:	461a      	mov	r2, r3
 80185ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80185b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185b4:	895b      	ldrh	r3, [r3, #10]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d008      	beq.n	80185cc <find_volume+0x42c>
 80185ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185bc:	895b      	ldrh	r3, [r3, #10]
 80185be:	461a      	mov	r2, r3
 80185c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185c2:	895b      	ldrh	r3, [r3, #10]
 80185c4:	3b01      	subs	r3, #1
 80185c6:	4013      	ands	r3, r2
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d001      	beq.n	80185d0 <find_volume+0x430>
 80185cc:	230d      	movs	r3, #13
 80185ce:	e133      	b.n	8018838 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80185d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185d2:	3338      	adds	r3, #56	@ 0x38
 80185d4:	3311      	adds	r3, #17
 80185d6:	4618      	mov	r0, r3
 80185d8:	f7fc ff2a 	bl	8015430 <ld_word>
 80185dc:	4603      	mov	r3, r0
 80185de:	461a      	mov	r2, r3
 80185e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80185e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185e6:	891b      	ldrh	r3, [r3, #8]
 80185e8:	f003 030f 	and.w	r3, r3, #15
 80185ec:	b29b      	uxth	r3, r3
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d001      	beq.n	80185f6 <find_volume+0x456>
 80185f2:	230d      	movs	r3, #13
 80185f4:	e120      	b.n	8018838 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80185f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185f8:	3338      	adds	r3, #56	@ 0x38
 80185fa:	3313      	adds	r3, #19
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7fc ff17 	bl	8015430 <ld_word>
 8018602:	4603      	mov	r3, r0
 8018604:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018608:	2b00      	cmp	r3, #0
 801860a:	d106      	bne.n	801861a <find_volume+0x47a>
 801860c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801860e:	3338      	adds	r3, #56	@ 0x38
 8018610:	3320      	adds	r3, #32
 8018612:	4618      	mov	r0, r3
 8018614:	f7fc ff24 	bl	8015460 <ld_dword>
 8018618:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801861a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801861c:	3338      	adds	r3, #56	@ 0x38
 801861e:	330e      	adds	r3, #14
 8018620:	4618      	mov	r0, r3
 8018622:	f7fc ff05 	bl	8015430 <ld_word>
 8018626:	4603      	mov	r3, r0
 8018628:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801862c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018630:	2b00      	cmp	r3, #0
 8018632:	d101      	bne.n	8018638 <find_volume+0x498>
 8018634:	230d      	movs	r3, #13
 8018636:	e0ff      	b.n	8018838 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018638:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801863c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801863e:	4413      	add	r3, r2
 8018640:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018642:	8912      	ldrh	r2, [r2, #8]
 8018644:	0912      	lsrs	r2, r2, #4
 8018646:	b292      	uxth	r2, r2
 8018648:	4413      	add	r3, r2
 801864a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801864c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801864e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018650:	429a      	cmp	r2, r3
 8018652:	d201      	bcs.n	8018658 <find_volume+0x4b8>
 8018654:	230d      	movs	r3, #13
 8018656:	e0ef      	b.n	8018838 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018658:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801865a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018660:	8952      	ldrh	r2, [r2, #10]
 8018662:	fbb3 f3f2 	udiv	r3, r3, r2
 8018666:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801866a:	2b00      	cmp	r3, #0
 801866c:	d101      	bne.n	8018672 <find_volume+0x4d2>
 801866e:	230d      	movs	r3, #13
 8018670:	e0e2      	b.n	8018838 <find_volume+0x698>
		fmt = FS_FAT32;
 8018672:	2303      	movs	r3, #3
 8018674:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801867a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801867e:	4293      	cmp	r3, r2
 8018680:	d802      	bhi.n	8018688 <find_volume+0x4e8>
 8018682:	2302      	movs	r3, #2
 8018684:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801868a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801868e:	4293      	cmp	r3, r2
 8018690:	d802      	bhi.n	8018698 <find_volume+0x4f8>
 8018692:	2301      	movs	r3, #1
 8018694:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801869a:	1c9a      	adds	r2, r3, #2
 801869c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801869e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80186a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80186a4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80186a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80186aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80186ac:	441a      	add	r2, r3
 80186ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186b0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80186b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80186b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186b6:	441a      	add	r2, r3
 80186b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186ba:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80186bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80186c0:	2b03      	cmp	r3, #3
 80186c2:	d11e      	bne.n	8018702 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80186c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186c6:	3338      	adds	r3, #56	@ 0x38
 80186c8:	332a      	adds	r3, #42	@ 0x2a
 80186ca:	4618      	mov	r0, r3
 80186cc:	f7fc feb0 	bl	8015430 <ld_word>
 80186d0:	4603      	mov	r3, r0
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d001      	beq.n	80186da <find_volume+0x53a>
 80186d6:	230d      	movs	r3, #13
 80186d8:	e0ae      	b.n	8018838 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80186da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186dc:	891b      	ldrh	r3, [r3, #8]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d001      	beq.n	80186e6 <find_volume+0x546>
 80186e2:	230d      	movs	r3, #13
 80186e4:	e0a8      	b.n	8018838 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80186e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186e8:	3338      	adds	r3, #56	@ 0x38
 80186ea:	332c      	adds	r3, #44	@ 0x2c
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7fc feb7 	bl	8015460 <ld_dword>
 80186f2:	4602      	mov	r2, r0
 80186f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80186f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186fa:	69db      	ldr	r3, [r3, #28]
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018700:	e01f      	b.n	8018742 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018704:	891b      	ldrh	r3, [r3, #8]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d101      	bne.n	801870e <find_volume+0x56e>
 801870a:	230d      	movs	r3, #13
 801870c:	e094      	b.n	8018838 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801870e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018714:	441a      	add	r2, r3
 8018716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018718:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801871a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801871e:	2b02      	cmp	r3, #2
 8018720:	d103      	bne.n	801872a <find_volume+0x58a>
 8018722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018724:	69db      	ldr	r3, [r3, #28]
 8018726:	005b      	lsls	r3, r3, #1
 8018728:	e00a      	b.n	8018740 <find_volume+0x5a0>
 801872a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801872c:	69da      	ldr	r2, [r3, #28]
 801872e:	4613      	mov	r3, r2
 8018730:	005b      	lsls	r3, r3, #1
 8018732:	4413      	add	r3, r2
 8018734:	085a      	lsrs	r2, r3, #1
 8018736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018738:	69db      	ldr	r3, [r3, #28]
 801873a:	f003 0301 	and.w	r3, r3, #1
 801873e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018740:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018744:	6a1a      	ldr	r2, [r3, #32]
 8018746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018748:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801874c:	0a5b      	lsrs	r3, r3, #9
 801874e:	429a      	cmp	r2, r3
 8018750:	d201      	bcs.n	8018756 <find_volume+0x5b6>
 8018752:	230d      	movs	r3, #13
 8018754:	e070      	b.n	8018838 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018758:	f04f 32ff 	mov.w	r2, #4294967295
 801875c:	619a      	str	r2, [r3, #24]
 801875e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018760:	699a      	ldr	r2, [r3, #24]
 8018762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018764:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8018766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018768:	2280      	movs	r2, #128	@ 0x80
 801876a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801876c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8018770:	2b03      	cmp	r3, #3
 8018772:	d149      	bne.n	8018808 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018776:	3338      	adds	r3, #56	@ 0x38
 8018778:	3330      	adds	r3, #48	@ 0x30
 801877a:	4618      	mov	r0, r3
 801877c:	f7fc fe58 	bl	8015430 <ld_word>
 8018780:	4603      	mov	r3, r0
 8018782:	2b01      	cmp	r3, #1
 8018784:	d140      	bne.n	8018808 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018788:	3301      	adds	r3, #1
 801878a:	4619      	mov	r1, r3
 801878c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801878e:	f7fd fa63 	bl	8015c58 <move_window>
 8018792:	4603      	mov	r3, r0
 8018794:	2b00      	cmp	r3, #0
 8018796:	d137      	bne.n	8018808 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8018798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801879a:	2200      	movs	r2, #0
 801879c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801879e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187a0:	3338      	adds	r3, #56	@ 0x38
 80187a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7fc fe42 	bl	8015430 <ld_word>
 80187ac:	4603      	mov	r3, r0
 80187ae:	461a      	mov	r2, r3
 80187b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80187b4:	429a      	cmp	r2, r3
 80187b6:	d127      	bne.n	8018808 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80187b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187ba:	3338      	adds	r3, #56	@ 0x38
 80187bc:	4618      	mov	r0, r3
 80187be:	f7fc fe4f 	bl	8015460 <ld_dword>
 80187c2:	4603      	mov	r3, r0
 80187c4:	4a1f      	ldr	r2, [pc, #124]	@ (8018844 <find_volume+0x6a4>)
 80187c6:	4293      	cmp	r3, r2
 80187c8:	d11e      	bne.n	8018808 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80187ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187cc:	3338      	adds	r3, #56	@ 0x38
 80187ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80187d2:	4618      	mov	r0, r3
 80187d4:	f7fc fe44 	bl	8015460 <ld_dword>
 80187d8:	4603      	mov	r3, r0
 80187da:	4a1b      	ldr	r2, [pc, #108]	@ (8018848 <find_volume+0x6a8>)
 80187dc:	4293      	cmp	r3, r2
 80187de:	d113      	bne.n	8018808 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80187e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187e2:	3338      	adds	r3, #56	@ 0x38
 80187e4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7fc fe39 	bl	8015460 <ld_dword>
 80187ee:	4602      	mov	r2, r0
 80187f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187f2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80187f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187f6:	3338      	adds	r3, #56	@ 0x38
 80187f8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7fc fe2f 	bl	8015460 <ld_dword>
 8018802:	4602      	mov	r2, r0
 8018804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018806:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801880a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 801880e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018810:	4b0e      	ldr	r3, [pc, #56]	@ (801884c <find_volume+0x6ac>)
 8018812:	881b      	ldrh	r3, [r3, #0]
 8018814:	3301      	adds	r3, #1
 8018816:	b29a      	uxth	r2, r3
 8018818:	4b0c      	ldr	r3, [pc, #48]	@ (801884c <find_volume+0x6ac>)
 801881a:	801a      	strh	r2, [r3, #0]
 801881c:	4b0b      	ldr	r3, [pc, #44]	@ (801884c <find_volume+0x6ac>)
 801881e:	881a      	ldrh	r2, [r3, #0]
 8018820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018822:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018826:	4a0a      	ldr	r2, [pc, #40]	@ (8018850 <find_volume+0x6b0>)
 8018828:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 801882a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801882c:	4a09      	ldr	r2, [pc, #36]	@ (8018854 <find_volume+0x6b4>)
 801882e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018830:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018832:	f7fd f9a9 	bl	8015b88 <clear_lock>
#endif
	return FR_OK;
 8018836:	2300      	movs	r3, #0
}
 8018838:	4618      	mov	r0, r3
 801883a:	3770      	adds	r7, #112	@ 0x70
 801883c:	46bd      	mov	sp, r7
 801883e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018842:	bf00      	nop
 8018844:	41615252 	.word	0x41615252
 8018848:	61417272 	.word	0x61417272
 801884c:	240011ec 	.word	0x240011ec
 8018850:	24001470 	.word	0x24001470
 8018854:	24001210 	.word	0x24001210

08018858 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
 8018860:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018862:	2309      	movs	r3, #9
 8018864:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d01c      	beq.n	80188a6 <validate+0x4e>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d018      	beq.n	80188a6 <validate+0x4e>
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	781b      	ldrb	r3, [r3, #0]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d013      	beq.n	80188a6 <validate+0x4e>
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	889a      	ldrh	r2, [r3, #4]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	88db      	ldrh	r3, [r3, #6]
 8018888:	429a      	cmp	r2, r3
 801888a:	d10c      	bne.n	80188a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	785b      	ldrb	r3, [r3, #1]
 8018892:	4618      	mov	r0, r3
 8018894:	f7fc fd2c 	bl	80152f0 <disk_status>
 8018898:	4603      	mov	r3, r0
 801889a:	f003 0301 	and.w	r3, r3, #1
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d101      	bne.n	80188a6 <validate+0x4e>
			res = FR_OK;
 80188a2:	2300      	movs	r3, #0
 80188a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80188a6:	7bfb      	ldrb	r3, [r7, #15]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d102      	bne.n	80188b2 <validate+0x5a>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	e000      	b.n	80188b4 <validate+0x5c>
 80188b2:	2300      	movs	r3, #0
 80188b4:	683a      	ldr	r2, [r7, #0]
 80188b6:	6013      	str	r3, [r2, #0]
	return res;
 80188b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
	...

080188c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b088      	sub	sp, #32
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	60f8      	str	r0, [r7, #12]
 80188cc:	60b9      	str	r1, [r7, #8]
 80188ce:	4613      	mov	r3, r2
 80188d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80188d6:	f107 0310 	add.w	r3, r7, #16
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff fbb7 	bl	801804e <get_ldnumber>
 80188e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80188e2:	69fb      	ldr	r3, [r7, #28]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	da01      	bge.n	80188ec <f_mount+0x28>
 80188e8:	230b      	movs	r3, #11
 80188ea:	e02b      	b.n	8018944 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80188ec:	4a17      	ldr	r2, [pc, #92]	@ (801894c <f_mount+0x88>)
 80188ee:	69fb      	ldr	r3, [r7, #28]
 80188f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80188f6:	69bb      	ldr	r3, [r7, #24]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d005      	beq.n	8018908 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80188fc:	69b8      	ldr	r0, [r7, #24]
 80188fe:	f7fd f943 	bl	8015b88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018902:	69bb      	ldr	r3, [r7, #24]
 8018904:	2200      	movs	r2, #0
 8018906:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d002      	beq.n	8018914 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2200      	movs	r2, #0
 8018912:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	490d      	ldr	r1, [pc, #52]	@ (801894c <f_mount+0x88>)
 8018918:	69fb      	ldr	r3, [r7, #28]
 801891a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d002      	beq.n	801892a <f_mount+0x66>
 8018924:	79fb      	ldrb	r3, [r7, #7]
 8018926:	2b01      	cmp	r3, #1
 8018928:	d001      	beq.n	801892e <f_mount+0x6a>
 801892a:	2300      	movs	r3, #0
 801892c:	e00a      	b.n	8018944 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801892e:	f107 010c 	add.w	r1, r7, #12
 8018932:	f107 0308 	add.w	r3, r7, #8
 8018936:	2200      	movs	r2, #0
 8018938:	4618      	mov	r0, r3
 801893a:	f7ff fc31 	bl	80181a0 <find_volume>
 801893e:	4603      	mov	r3, r0
 8018940:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018942:	7dfb      	ldrb	r3, [r7, #23]
}
 8018944:	4618      	mov	r0, r3
 8018946:	3720      	adds	r7, #32
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	240011e8 	.word	0x240011e8

08018950 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018954:	b0a6      	sub	sp, #152	@ 0x98
 8018956:	af00      	add	r7, sp, #0
 8018958:	61f8      	str	r0, [r7, #28]
 801895a:	61b9      	str	r1, [r7, #24]
 801895c:	4613      	mov	r3, r2
 801895e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018960:	69fb      	ldr	r3, [r7, #28]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d101      	bne.n	801896a <f_open+0x1a>
 8018966:	2309      	movs	r3, #9
 8018968:	e2aa      	b.n	8018ec0 <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801896a:	7dfb      	ldrb	r3, [r7, #23]
 801896c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018970:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8018972:	7dfa      	ldrb	r2, [r7, #23]
 8018974:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8018978:	f107 0318 	add.w	r3, r7, #24
 801897c:	4618      	mov	r0, r3
 801897e:	f7ff fc0f 	bl	80181a0 <find_volume>
 8018982:	4603      	mov	r3, r0
 8018984:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 8018988:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801898c:	2b00      	cmp	r3, #0
 801898e:	f040 828e 	bne.w	8018eae <f_open+0x55e>
		dj.obj.fs = fs;
 8018992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018994:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018996:	69ba      	ldr	r2, [r7, #24]
 8018998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801899c:	4611      	mov	r1, r2
 801899e:	4618      	mov	r0, r3
 80189a0:	f7ff faac 	bl	8017efc <follow_path>
 80189a4:	4603      	mov	r3, r0
 80189a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80189aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d118      	bne.n	80189e4 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80189b2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80189b6:	b25b      	sxtb	r3, r3
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	da03      	bge.n	80189c4 <f_open+0x74>
				res = FR_INVALID_NAME;
 80189bc:	2306      	movs	r3, #6
 80189be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80189c2:	e00f      	b.n	80189e4 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80189c4:	7dfb      	ldrb	r3, [r7, #23]
 80189c6:	2b01      	cmp	r3, #1
 80189c8:	bf8c      	ite	hi
 80189ca:	2301      	movhi	r3, #1
 80189cc:	2300      	movls	r3, #0
 80189ce:	b2db      	uxtb	r3, r3
 80189d0:	461a      	mov	r2, r3
 80189d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80189d6:	4611      	mov	r1, r2
 80189d8:	4618      	mov	r0, r3
 80189da:	f7fc ff8d 	bl	80158f8 <chk_lock>
 80189de:	4603      	mov	r3, r0
 80189e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80189e4:	7dfb      	ldrb	r3, [r7, #23]
 80189e6:	f003 031c 	and.w	r3, r3, #28
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 8115 	beq.w	8018c1a <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 80189f0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d017      	beq.n	8018a28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80189f8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80189fc:	2b04      	cmp	r3, #4
 80189fe:	d10e      	bne.n	8018a1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018a00:	f7fc ffd6 	bl	80159b0 <enq_lock>
 8018a04:	4603      	mov	r3, r0
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d006      	beq.n	8018a18 <f_open+0xc8>
 8018a0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fe ff16 	bl	8017840 <dir_register>
 8018a14:	4603      	mov	r3, r0
 8018a16:	e000      	b.n	8018a1a <f_open+0xca>
 8018a18:	2312      	movs	r3, #18
 8018a1a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018a1e:	7dfb      	ldrb	r3, [r7, #23]
 8018a20:	f043 0308 	orr.w	r3, r3, #8
 8018a24:	75fb      	strb	r3, [r7, #23]
 8018a26:	e011      	b.n	8018a4c <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018a28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018a2c:	f003 0311 	and.w	r3, r3, #17
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d003      	beq.n	8018a3c <f_open+0xec>
					res = FR_DENIED;
 8018a34:	2307      	movs	r3, #7
 8018a36:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018a3a:	e007      	b.n	8018a4c <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018a3c:	7dfb      	ldrb	r3, [r7, #23]
 8018a3e:	f003 0304 	and.w	r3, r3, #4
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d002      	beq.n	8018a4c <f_open+0xfc>
 8018a46:	2308      	movs	r3, #8
 8018a48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018a4c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	f040 80fe 	bne.w	8018c52 <f_open+0x302>
 8018a56:	7dfb      	ldrb	r3, [r7, #23]
 8018a58:	f003 0308 	and.w	r3, r3, #8
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f000 80f8 	beq.w	8018c52 <f_open+0x302>
				dw = GET_FATTIME();
 8018a62:	f7fc f953 	bl	8014d0c <get_fattime>
 8018a66:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	2b04      	cmp	r3, #4
 8018a70:	f040 8084 	bne.w	8018b7c <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8018a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a7c:	691b      	ldr	r3, [r3, #16]
 8018a7e:	3334      	adds	r3, #52	@ 0x34
 8018a80:	4618      	mov	r0, r3
 8018a82:	f7fc fced 	bl	8015460 <ld_dword>
 8018a86:	4602      	mov	r2, r0
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a8e:	691b      	ldr	r3, [r3, #16]
 8018a90:	3338      	adds	r3, #56	@ 0x38
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7fc fd07 	bl	80154a6 <ld_qword>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	69f9      	ldr	r1, [r7, #28]
 8018a9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aa4:	691b      	ldr	r3, [r3, #16]
 8018aa6:	3321      	adds	r3, #33	@ 0x21
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	f003 0302 	and.w	r3, r3, #2
 8018aae:	b2da      	uxtb	r2, r3
 8018ab0:	69fb      	ldr	r3, [r7, #28]
 8018ab2:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8018ab4:	69fb      	ldr	r3, [r7, #28]
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8018aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018abc:	691b      	ldr	r3, [r3, #16]
 8018abe:	3308      	adds	r3, #8
 8018ac0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f7fc fde4 	bl	8015692 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8018aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018acc:	691b      	ldr	r3, [r3, #16]
 8018ace:	3314      	adds	r3, #20
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8018ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad6:	691b      	ldr	r3, [r3, #16]
 8018ad8:	330c      	adds	r3, #12
 8018ada:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fc fdd7 	bl	8015692 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ae6:	691b      	ldr	r3, [r3, #16]
 8018ae8:	3315      	adds	r3, #21
 8018aea:	2200      	movs	r2, #0
 8018aec:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8018aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018af0:	691b      	ldr	r3, [r3, #16]
 8018af2:	3304      	adds	r3, #4
 8018af4:	2220      	movs	r2, #32
 8018af6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8018af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018afa:	691b      	ldr	r3, [r3, #16]
 8018afc:	3334      	adds	r3, #52	@ 0x34
 8018afe:	2100      	movs	r1, #0
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7fc fdc6 	bl	8015692 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8018b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b08:	691b      	ldr	r3, [r3, #16]
 8018b0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8018b0e:	f04f 0200 	mov.w	r2, #0
 8018b12:	f04f 0300 	mov.w	r3, #0
 8018b16:	4608      	mov	r0, r1
 8018b18:	f7fc fde7 	bl	80156ea <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8018b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b1e:	691b      	ldr	r3, [r3, #16]
 8018b20:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8018b24:	f04f 0200 	mov.w	r2, #0
 8018b28:	f04f 0300 	mov.w	r3, #0
 8018b2c:	4608      	mov	r0, r1
 8018b2e:	f7fc fddc 	bl	80156ea <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8018b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b34:	691b      	ldr	r3, [r3, #16]
 8018b36:	3321      	adds	r3, #33	@ 0x21
 8018b38:	2201      	movs	r2, #1
 8018b3a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8018b3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7fe fbc9 	bl	80172d8 <store_xdir>
 8018b46:	4603      	mov	r3, r0
 8018b48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8018b4c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d17e      	bne.n	8018c52 <f_open+0x302>
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	689b      	ldr	r3, [r3, #8]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d07a      	beq.n	8018c52 <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8018b5c:	69f8      	ldr	r0, [r7, #28]
 8018b5e:	69fb      	ldr	r3, [r7, #28]
 8018b60:	689b      	ldr	r3, [r3, #8]
 8018b62:	2200      	movs	r2, #0
 8018b64:	4619      	mov	r1, r3
 8018b66:	f7fd fc81 	bl	801646c <remove_chain>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	689a      	ldr	r2, [r3, #8]
 8018b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b76:	3a01      	subs	r2, #1
 8018b78:	615a      	str	r2, [r3, #20]
 8018b7a:	e06a      	b.n	8018c52 <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b7e:	330e      	adds	r3, #14
 8018b80:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018b84:	4618      	mov	r0, r3
 8018b86:	f7fc fd84 	bl	8015692 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b8c:	3316      	adds	r3, #22
 8018b8e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7fc fd7d 	bl	8015692 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018b9a:	330b      	adds	r3, #11
 8018b9c:	2220      	movs	r2, #32
 8018b9e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018ba4:	4611      	mov	r1, r2
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7fe f810 	bl	8016bcc <ld_clust>
 8018bac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bb2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7fe f827 	bl	8016c0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018bbe:	331c      	adds	r3, #28
 8018bc0:	2100      	movs	r1, #0
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7fc fd65 	bl	8015692 <st_dword>
					fs->wflag = 1;
 8018bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bca:	2201      	movs	r2, #1
 8018bcc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d03d      	beq.n	8018c52 <f_open+0x302>
						dw = fs->winsect;
 8018bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8018bde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018be2:	2200      	movs	r2, #0
 8018be4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7fd fc3f 	bl	801646c <remove_chain>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 8018bf4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d12a      	bne.n	8018c52 <f_open+0x302>
							res = move_window(fs, dw);
 8018bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bfe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fd f828 	bl	8015c58 <move_window>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018c14:	3a01      	subs	r2, #1
 8018c16:	615a      	str	r2, [r3, #20]
 8018c18:	e01b      	b.n	8018c52 <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018c1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d117      	bne.n	8018c52 <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018c22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018c26:	f003 0310 	and.w	r3, r3, #16
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d003      	beq.n	8018c36 <f_open+0x2e6>
					res = FR_NO_FILE;
 8018c2e:	2304      	movs	r3, #4
 8018c30:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018c34:	e00d      	b.n	8018c52 <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018c36:	7dfb      	ldrb	r3, [r7, #23]
 8018c38:	f003 0302 	and.w	r3, r3, #2
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d008      	beq.n	8018c52 <f_open+0x302>
 8018c40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018c44:	f003 0301 	and.w	r3, r3, #1
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d002      	beq.n	8018c52 <f_open+0x302>
						res = FR_DENIED;
 8018c4c:	2307      	movs	r3, #7
 8018c4e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8018c52:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d126      	bne.n	8018ca8 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018c5a:	7dfb      	ldrb	r3, [r7, #23]
 8018c5c:	f003 0308 	and.w	r3, r3, #8
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d003      	beq.n	8018c6c <f_open+0x31c>
				mode |= FA_MODIFIED;
 8018c64:	7dfb      	ldrb	r3, [r7, #23]
 8018c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c6a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8018c74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018c7a:	7dfb      	ldrb	r3, [r7, #23]
 8018c7c:	2b01      	cmp	r3, #1
 8018c7e:	bf8c      	ite	hi
 8018c80:	2301      	movhi	r3, #1
 8018c82:	2300      	movls	r3, #0
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	461a      	mov	r2, r3
 8018c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018c8c:	4611      	mov	r1, r2
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7fc feb0 	bl	80159f4 <inc_lock>
 8018c94:	4602      	mov	r2, r0
 8018c96:	69fb      	ldr	r3, [r7, #28]
 8018c98:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018c9a:	69fb      	ldr	r3, [r7, #28]
 8018c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d102      	bne.n	8018ca8 <f_open+0x358>
 8018ca2:	2302      	movs	r3, #2
 8018ca4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018ca8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	f040 80fe 	bne.w	8018eae <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8018cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	2b04      	cmp	r3, #4
 8018cb8:	d12d      	bne.n	8018d16 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8018cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8018cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8018cc4:	4613      	mov	r3, r2
 8018cc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018cca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018cce:	431a      	orrs	r2, r3
 8018cd0:	69fb      	ldr	r3, [r7, #28]
 8018cd2:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8018cd4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8018cd6:	69fb      	ldr	r3, [r7, #28]
 8018cd8:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8018cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cdc:	691b      	ldr	r3, [r3, #16]
 8018cde:	3334      	adds	r3, #52	@ 0x34
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7fc fbbd 	bl	8015460 <ld_dword>
 8018ce6:	4602      	mov	r2, r0
 8018ce8:	69fb      	ldr	r3, [r7, #28]
 8018cea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cee:	691b      	ldr	r3, [r3, #16]
 8018cf0:	3338      	adds	r3, #56	@ 0x38
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fc fbd7 	bl	80154a6 <ld_qword>
 8018cf8:	4602      	mov	r2, r0
 8018cfa:	460b      	mov	r3, r1
 8018cfc:	69f9      	ldr	r1, [r7, #28]
 8018cfe:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d04:	691b      	ldr	r3, [r3, #16]
 8018d06:	3321      	adds	r3, #33	@ 0x21
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	f003 0302 	and.w	r3, r3, #2
 8018d0e:	b2da      	uxtb	r2, r3
 8018d10:	69fb      	ldr	r3, [r7, #28]
 8018d12:	71da      	strb	r2, [r3, #7]
 8018d14:	e016      	b.n	8018d44 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018d1a:	4611      	mov	r1, r2
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7fd ff55 	bl	8016bcc <ld_clust>
 8018d22:	4602      	mov	r2, r0
 8018d24:	69fb      	ldr	r3, [r7, #28]
 8018d26:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018d2a:	331c      	adds	r3, #28
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7fc fb97 	bl	8015460 <ld_dword>
 8018d32:	4603      	mov	r3, r0
 8018d34:	2200      	movs	r2, #0
 8018d36:	60bb      	str	r3, [r7, #8]
 8018d38:	60fa      	str	r2, [r7, #12]
 8018d3a:	69fb      	ldr	r3, [r7, #28]
 8018d3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8018d40:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018d44:	69fb      	ldr	r3, [r7, #28]
 8018d46:	2200      	movs	r2, #0
 8018d48:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d4c:	69fb      	ldr	r3, [r7, #28]
 8018d4e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d52:	88da      	ldrh	r2, [r3, #6]
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018d58:	69fb      	ldr	r3, [r7, #28]
 8018d5a:	7dfa      	ldrb	r2, [r7, #23]
 8018d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8018d60:	69fb      	ldr	r3, [r7, #28]
 8018d62:	2200      	movs	r2, #0
 8018d64:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018d6e:	69f9      	ldr	r1, [r7, #28]
 8018d70:	f04f 0200 	mov.w	r2, #0
 8018d74:	f04f 0300 	mov.w	r3, #0
 8018d78:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018d7c:	69fb      	ldr	r3, [r7, #28]
 8018d7e:	3354      	adds	r3, #84	@ 0x54
 8018d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018d84:	2100      	movs	r1, #0
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7fc fd58 	bl	801583c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018d8c:	7dfb      	ldrb	r3, [r7, #23]
 8018d8e:	f003 0320 	and.w	r3, r3, #32
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	f000 808b 	beq.w	8018eae <f_open+0x55e>
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018d9e:	4313      	orrs	r3, r2
 8018da0:	f000 8085 	beq.w	8018eae <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018da4:	69fb      	ldr	r3, [r7, #28]
 8018da6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018daa:	69f9      	ldr	r1, [r7, #28]
 8018dac:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018db2:	895b      	ldrh	r3, [r3, #10]
 8018db4:	025b      	lsls	r3, r3, #9
 8018db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018db8:	69fb      	ldr	r3, [r7, #28]
 8018dba:	689b      	ldr	r3, [r3, #8]
 8018dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018dc0:	69fb      	ldr	r3, [r7, #28]
 8018dc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8018dc6:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8018dca:	e026      	b.n	8018e1a <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7fc fffc 	bl	8015dd0 <get_fat>
 8018dd8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8018ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8018de0:	2b01      	cmp	r3, #1
 8018de2:	d802      	bhi.n	8018dea <f_open+0x49a>
 8018de4:	2302      	movs	r3, #2
 8018de6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8018dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018df2:	d102      	bne.n	8018dfa <f_open+0x4aa>
 8018df4:	2301      	movs	r3, #1
 8018df6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018dfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	469a      	mov	sl, r3
 8018e00:	4693      	mov	fp, r2
 8018e02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018e06:	ebb2 010a 	subs.w	r1, r2, sl
 8018e0a:	6039      	str	r1, [r7, #0]
 8018e0c:	eb63 030b 	sbc.w	r3, r3, fp
 8018e10:	607b      	str	r3, [r7, #4]
 8018e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e16:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8018e1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d109      	bne.n	8018e36 <f_open+0x4e6>
 8018e22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e24:	2200      	movs	r2, #0
 8018e26:	4698      	mov	r8, r3
 8018e28:	4691      	mov	r9, r2
 8018e2a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018e2e:	4590      	cmp	r8, r2
 8018e30:	eb79 0303 	sbcs.w	r3, r9, r3
 8018e34:	d3ca      	bcc.n	8018dcc <f_open+0x47c>
				}
				fp->clust = clst;
 8018e36:	69fb      	ldr	r3, [r7, #28]
 8018e38:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8018e3c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018e3e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d133      	bne.n	8018eae <f_open+0x55e>
 8018e46:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8018e4a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8018e4e:	2500      	movs	r5, #0
 8018e50:	ea54 0305 	orrs.w	r3, r4, r5
 8018e54:	d02b      	beq.n	8018eae <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7fc ff97 	bl	8015d90 <clust2sect>
 8018e62:	67b8      	str	r0, [r7, #120]	@ 0x78
 8018e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d103      	bne.n	8018e72 <f_open+0x522>
						res = FR_INT_ERR;
 8018e6a:	2302      	movs	r3, #2
 8018e6c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018e70:	e01d      	b.n	8018eae <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018e72:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8018e76:	f04f 0200 	mov.w	r2, #0
 8018e7a:	f04f 0300 	mov.w	r3, #0
 8018e7e:	0a42      	lsrs	r2, r0, #9
 8018e80:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8018e84:	0a4b      	lsrs	r3, r1, #9
 8018e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018e88:	441a      	add	r2, r3
 8018e8a:	69fb      	ldr	r3, [r7, #28]
 8018e8c:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e90:	7858      	ldrb	r0, [r3, #1]
 8018e92:	69fb      	ldr	r3, [r7, #28]
 8018e94:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8018e98:	69fb      	ldr	r3, [r7, #28]
 8018e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	f7fc fa69 	bl	8015374 <disk_read>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d002      	beq.n	8018eae <f_open+0x55e>
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018eae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d002      	beq.n	8018ebc <f_open+0x56c>
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018ebc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3798      	adds	r7, #152	@ 0x98
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08018eca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ece:	b08d      	sub	sp, #52	@ 0x34
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	60f8      	str	r0, [r7, #12]
 8018ed4:	60b9      	str	r1, [r7, #8]
 8018ed6:	607a      	str	r2, [r7, #4]
 8018ed8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	f107 0210 	add.w	r2, r7, #16
 8018eea:	4611      	mov	r1, r2
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7ff fcb3 	bl	8018858 <validate>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d108      	bne.n	8018f12 <f_write+0x48>
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d002      	beq.n	8018f18 <f_write+0x4e>
 8018f12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018f16:	e187      	b.n	8019228 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018f1e:	f003 0302 	and.w	r3, r3, #2
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d101      	bne.n	8018f2a <f_write+0x60>
 8018f26:	2307      	movs	r3, #7
 8018f28:	e17e      	b.n	8019228 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018f2a:	693b      	ldr	r3, [r7, #16]
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	2b04      	cmp	r3, #4
 8018f30:	f000 816a 	beq.w	8019208 <f_write+0x33e>
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	18d1      	adds	r1, r2, r3
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018f44:	4613      	mov	r3, r2
 8018f46:	4299      	cmp	r1, r3
 8018f48:	f080 815e 	bcs.w	8019208 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018f52:	4613      	mov	r3, r2
 8018f54:	43db      	mvns	r3, r3
 8018f56:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018f58:	e156      	b.n	8019208 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018f60:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8018f64:	2500      	movs	r5, #0
 8018f66:	ea54 0305 	orrs.w	r3, r4, r5
 8018f6a:	f040 80fb 	bne.w	8019164 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8018f74:	f04f 0200 	mov.w	r2, #0
 8018f78:	f04f 0300 	mov.w	r3, #0
 8018f7c:	0a42      	lsrs	r2, r0, #9
 8018f7e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8018f82:	0a4b      	lsrs	r3, r1, #9
 8018f84:	693b      	ldr	r3, [r7, #16]
 8018f86:	895b      	ldrh	r3, [r3, #10]
 8018f88:	3b01      	subs	r3, #1
 8018f8a:	4013      	ands	r3, r2
 8018f8c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d146      	bne.n	8019022 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018f9a:	4313      	orrs	r3, r2
 8018f9c:	d10c      	bne.n	8018fb8 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	689b      	ldr	r3, [r3, #8]
 8018fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d11a      	bne.n	8018fe0 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	2100      	movs	r1, #0
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fd fb10 	bl	80165d4 <create_chain>
 8018fb4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8018fb6:	e013      	b.n	8018fe0 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d007      	beq.n	8018fd0 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8018fc6:	68f8      	ldr	r0, [r7, #12]
 8018fc8:	f7fd fc05 	bl	80167d6 <clmt_clust>
 8018fcc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8018fce:	e007      	b.n	8018fe0 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018fd0:	68fa      	ldr	r2, [r7, #12]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4610      	mov	r0, r2
 8018fda:	f7fd fafb 	bl	80165d4 <create_chain>
 8018fde:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f000 8115 	beq.w	8019212 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d105      	bne.n	8018ffa <f_write+0x130>
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	2202      	movs	r2, #2
 8018ff2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8018ff6:	2302      	movs	r3, #2
 8018ff8:	e116      	b.n	8019228 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019000:	d105      	bne.n	801900e <f_write+0x144>
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	2201      	movs	r2, #1
 8019006:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801900a:	2301      	movs	r3, #1
 801900c:	e10c      	b.n	8019228 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019012:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	689b      	ldr	r3, [r3, #8]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d102      	bne.n	8019022 <f_write+0x158>
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019020:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019028:	b25b      	sxtb	r3, r3
 801902a:	2b00      	cmp	r3, #0
 801902c:	da1b      	bge.n	8019066 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801902e:	693b      	ldr	r3, [r7, #16]
 8019030:	7858      	ldrb	r0, [r3, #1]
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801903c:	2301      	movs	r3, #1
 801903e:	f7fc f9b9 	bl	80153b4 <disk_write>
 8019042:	4603      	mov	r3, r0
 8019044:	2b00      	cmp	r3, #0
 8019046:	d005      	beq.n	8019054 <f_write+0x18a>
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2201      	movs	r2, #1
 801904c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8019050:	2301      	movs	r3, #1
 8019052:	e0e9      	b.n	8019228 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801905a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801905e:	b2da      	uxtb	r2, r3
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019066:	693a      	ldr	r2, [r7, #16]
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801906c:	4619      	mov	r1, r3
 801906e:	4610      	mov	r0, r2
 8019070:	f7fc fe8e 	bl	8015d90 <clust2sect>
 8019074:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d105      	bne.n	8019088 <f_write+0x1be>
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	2202      	movs	r2, #2
 8019080:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8019084:	2302      	movs	r3, #2
 8019086:	e0cf      	b.n	8019228 <f_write+0x35e>
			sect += csect;
 8019088:	697a      	ldr	r2, [r7, #20]
 801908a:	69bb      	ldr	r3, [r7, #24]
 801908c:	4413      	add	r3, r2
 801908e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	0a5b      	lsrs	r3, r3, #9
 8019094:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019096:	6a3b      	ldr	r3, [r7, #32]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d03f      	beq.n	801911c <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801909c:	69ba      	ldr	r2, [r7, #24]
 801909e:	6a3b      	ldr	r3, [r7, #32]
 80190a0:	4413      	add	r3, r2
 80190a2:	693a      	ldr	r2, [r7, #16]
 80190a4:	8952      	ldrh	r2, [r2, #10]
 80190a6:	4293      	cmp	r3, r2
 80190a8:	d905      	bls.n	80190b6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80190aa:	693b      	ldr	r3, [r7, #16]
 80190ac:	895b      	ldrh	r3, [r3, #10]
 80190ae:	461a      	mov	r2, r3
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	1ad3      	subs	r3, r2, r3
 80190b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	7858      	ldrb	r0, [r3, #1]
 80190ba:	6a3b      	ldr	r3, [r7, #32]
 80190bc:	697a      	ldr	r2, [r7, #20]
 80190be:	69f9      	ldr	r1, [r7, #28]
 80190c0:	f7fc f978 	bl	80153b4 <disk_write>
 80190c4:	4603      	mov	r3, r0
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d005      	beq.n	80190d6 <f_write+0x20c>
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	2201      	movs	r2, #1
 80190ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80190d2:	2301      	movs	r3, #1
 80190d4:	e0a8      	b.n	8019228 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	1ad3      	subs	r3, r2, r3
 80190de:	6a3a      	ldr	r2, [r7, #32]
 80190e0:	429a      	cmp	r2, r3
 80190e2:	d917      	bls.n	8019114 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80190ee:	697b      	ldr	r3, [r7, #20]
 80190f0:	1ad3      	subs	r3, r2, r3
 80190f2:	025b      	lsls	r3, r3, #9
 80190f4:	69fa      	ldr	r2, [r7, #28]
 80190f6:	4413      	add	r3, r2
 80190f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80190fc:	4619      	mov	r1, r3
 80190fe:	f7fc fb7c 	bl	80157fa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801910c:	b2da      	uxtb	r2, r3
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019114:	6a3b      	ldr	r3, [r7, #32]
 8019116:	025b      	lsls	r3, r3, #9
 8019118:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801911a:	e04a      	b.n	80191b2 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019120:	697a      	ldr	r2, [r7, #20]
 8019122:	429a      	cmp	r2, r3
 8019124:	d01b      	beq.n	801915e <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019132:	4290      	cmp	r0, r2
 8019134:	eb71 0303 	sbcs.w	r3, r1, r3
 8019138:	d211      	bcs.n	801915e <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	7858      	ldrb	r0, [r3, #1]
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8019144:	2301      	movs	r3, #1
 8019146:	697a      	ldr	r2, [r7, #20]
 8019148:	f7fc f914 	bl	8015374 <disk_read>
 801914c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801914e:	2b00      	cmp	r3, #0
 8019150:	d005      	beq.n	801915e <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	2201      	movs	r2, #1
 8019156:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801915a:	2301      	movs	r3, #1
 801915c:	e064      	b.n	8019228 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	697a      	ldr	r2, [r7, #20]
 8019162:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801916a:	4613      	mov	r3, r2
 801916c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019170:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8019174:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	429a      	cmp	r2, r3
 801917c:	d901      	bls.n	8019182 <f_write+0x2b8>
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801918e:	4613      	mov	r3, r2
 8019190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019194:	440b      	add	r3, r1
 8019196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019198:	69f9      	ldr	r1, [r7, #28]
 801919a:	4618      	mov	r0, r3
 801919c:	f7fc fb2d 	bl	80157fa <mem_cpy>
		fp->flag |= FA_DIRTY;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80191a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80191aa:	b2da      	uxtb	r2, r3
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80191b2:	69fa      	ldr	r2, [r7, #28]
 80191b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b6:	4413      	add	r3, r2
 80191b8:	61fb      	str	r3, [r7, #28]
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80191c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80191c2:	2000      	movs	r0, #0
 80191c4:	4688      	mov	r8, r1
 80191c6:	4681      	mov	r9, r0
 80191c8:	eb12 0a08 	adds.w	sl, r2, r8
 80191cc:	eb43 0b09 	adc.w	fp, r3, r9
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80191dc:	68f9      	ldr	r1, [r7, #12]
 80191de:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 80191e2:	4282      	cmp	r2, r0
 80191e4:	eb73 0601 	sbcs.w	r6, r3, r1
 80191e8:	d201      	bcs.n	80191ee <f_write+0x324>
 80191ea:	4602      	mov	r2, r0
 80191ec:	460b      	mov	r3, r1
 80191ee:	68f9      	ldr	r1, [r7, #12]
 80191f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80191f4:	683b      	ldr	r3, [r7, #0]
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191fa:	441a      	add	r2, r3
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	601a      	str	r2, [r3, #0]
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019204:	1ad3      	subs	r3, r2, r3
 8019206:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2b00      	cmp	r3, #0
 801920c:	f47f aea5 	bne.w	8018f5a <f_write+0x90>
 8019210:	e000      	b.n	8019214 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019212:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801921a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801921e:	b2da      	uxtb	r2, r3
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8019226:	2300      	movs	r3, #0
}
 8019228:	4618      	mov	r0, r3
 801922a:	3734      	adds	r7, #52	@ 0x34
 801922c:	46bd      	mov	sp, r7
 801922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019232 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019232:	b580      	push	{r7, lr}
 8019234:	b09a      	sub	sp, #104	@ 0x68
 8019236:	af00      	add	r7, sp, #0
 8019238:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8019240:	4611      	mov	r1, r2
 8019242:	4618      	mov	r0, r3
 8019244:	f7ff fb08 	bl	8018858 <validate>
 8019248:	4603      	mov	r3, r0
 801924a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801924e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019252:	2b00      	cmp	r3, #0
 8019254:	f040 8105 	bne.w	8019462 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801925e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019262:	2b00      	cmp	r3, #0
 8019264:	f000 80fd 	beq.w	8019462 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801926e:	b25b      	sxtb	r3, r3
 8019270:	2b00      	cmp	r3, #0
 8019272:	da17      	bge.n	80192a4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019276:	7858      	ldrb	r0, [r3, #1]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019282:	2301      	movs	r3, #1
 8019284:	f7fc f896 	bl	80153b4 <disk_write>
 8019288:	4603      	mov	r3, r0
 801928a:	2b00      	cmp	r3, #0
 801928c:	d001      	beq.n	8019292 <f_sync+0x60>
 801928e:	2301      	movs	r3, #1
 8019290:	e0e9      	b.n	8019466 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801929c:	b2da      	uxtb	r2, r3
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80192a4:	f7fb fd32 	bl	8014d0c <get_fattime>
 80192a8:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80192aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	2b04      	cmp	r3, #4
 80192b0:	f040 808c 	bne.w	80193cc <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7fd f878 	bl	80163ac <fill_first_frag>
 80192bc:	4603      	mov	r3, r0
 80192be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 80192c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d10a      	bne.n	80192e0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80192ca:	6878      	ldr	r0, [r7, #4]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80192d0:	f04f 32ff 	mov.w	r2, #4294967295
 80192d4:	4619      	mov	r1, r3
 80192d6:	f7fd f898 	bl	801640a <fill_last_frag>
 80192da:	4603      	mov	r3, r0
 80192dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 80192e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	f040 80bc 	bne.w	8019462 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80192ea:	687a      	ldr	r2, [r7, #4]
 80192ec:	f107 0308 	add.w	r3, r7, #8
 80192f0:	4611      	mov	r1, r2
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7fd ffba 	bl	801726c <load_obj_dir>
 80192f8:	4603      	mov	r3, r0
 80192fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 80192fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8019302:	2b00      	cmp	r3, #0
 8019304:	f040 80ad 	bne.w	8019462 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8019308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801930a:	691b      	ldr	r3, [r3, #16]
 801930c:	3304      	adds	r3, #4
 801930e:	781a      	ldrb	r2, [r3, #0]
 8019310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019312:	691b      	ldr	r3, [r3, #16]
 8019314:	3304      	adds	r3, #4
 8019316:	f042 0220 	orr.w	r2, r2, #32
 801931a:	b2d2      	uxtb	r2, r2
 801931c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	79da      	ldrb	r2, [r3, #7]
 8019322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019324:	691b      	ldr	r3, [r3, #16]
 8019326:	3321      	adds	r3, #33	@ 0x21
 8019328:	f042 0201 	orr.w	r2, r2, #1
 801932c:	b2d2      	uxtb	r2, r2
 801932e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8019330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019332:	691b      	ldr	r3, [r3, #16]
 8019334:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	689b      	ldr	r3, [r3, #8]
 801933c:	4619      	mov	r1, r3
 801933e:	4610      	mov	r0, r2
 8019340:	f7fc f9a7 	bl	8015692 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8019344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019346:	691b      	ldr	r3, [r3, #16]
 8019348:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019352:	4608      	mov	r0, r1
 8019354:	f7fc f9c9 	bl	80156ea <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8019358:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801935a:	691b      	ldr	r3, [r3, #16]
 801935c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019366:	4608      	mov	r0, r1
 8019368:	f7fc f9bf 	bl	80156ea <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801936c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801936e:	691b      	ldr	r3, [r3, #16]
 8019370:	330c      	adds	r3, #12
 8019372:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019374:	4618      	mov	r0, r3
 8019376:	f7fc f98c 	bl	8015692 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801937a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801937c:	691b      	ldr	r3, [r3, #16]
 801937e:	3315      	adds	r3, #21
 8019380:	2200      	movs	r2, #0
 8019382:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8019384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019386:	691b      	ldr	r3, [r3, #16]
 8019388:	3310      	adds	r3, #16
 801938a:	2100      	movs	r1, #0
 801938c:	4618      	mov	r0, r3
 801938e:	f7fc f980 	bl	8015692 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8019392:	f107 0308 	add.w	r3, r7, #8
 8019396:	4618      	mov	r0, r3
 8019398:	f7fd ff9e 	bl	80172d8 <store_xdir>
 801939c:	4603      	mov	r3, r0
 801939e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80193a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d15b      	bne.n	8019462 <f_sync+0x230>
							res = sync_fs(fs);
 80193aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7fc fc81 	bl	8015cb4 <sync_fs>
 80193b2:	4603      	mov	r3, r0
 80193b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80193be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80193c2:	b2da      	uxtb	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80193ca:	e04a      	b.n	8019462 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80193cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80193d2:	4619      	mov	r1, r3
 80193d4:	4610      	mov	r0, r2
 80193d6:	f7fc fc3f 	bl	8015c58 <move_window>
 80193da:	4603      	mov	r3, r0
 80193dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 80193e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d13c      	bne.n	8019462 <f_sync+0x230>
					dir = fp->dir_ptr;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80193ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80193ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80193f0:	330b      	adds	r3, #11
 80193f2:	781a      	ldrb	r2, [r3, #0]
 80193f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80193f6:	330b      	adds	r3, #11
 80193f8:	f042 0220 	orr.w	r2, r2, #32
 80193fc:	b2d2      	uxtb	r2, r2
 80193fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	6818      	ldr	r0, [r3, #0]
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	689b      	ldr	r3, [r3, #8]
 8019408:	461a      	mov	r2, r3
 801940a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801940c:	f7fd fbfd 	bl	8016c0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019412:	f103 001c 	add.w	r0, r3, #28
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801941c:	4613      	mov	r3, r2
 801941e:	4619      	mov	r1, r3
 8019420:	f7fc f937 	bl	8015692 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019426:	3316      	adds	r3, #22
 8019428:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801942a:	4618      	mov	r0, r3
 801942c:	f7fc f931 	bl	8015692 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019432:	3312      	adds	r3, #18
 8019434:	2100      	movs	r1, #0
 8019436:	4618      	mov	r0, r3
 8019438:	f7fc f910 	bl	801565c <st_word>
					fs->wflag = 1;
 801943c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801943e:	2201      	movs	r2, #1
 8019440:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019444:	4618      	mov	r0, r3
 8019446:	f7fc fc35 	bl	8015cb4 <sync_fs>
 801944a:	4603      	mov	r3, r0
 801944c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801945a:	b2da      	uxtb	r2, r3
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019462:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8019466:	4618      	mov	r0, r3
 8019468:	3768      	adds	r7, #104	@ 0x68
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}

0801946e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801946e:	b580      	push	{r7, lr}
 8019470:	b084      	sub	sp, #16
 8019472:	af00      	add	r7, sp, #0
 8019474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f7ff fedb 	bl	8019232 <f_sync>
 801947c:	4603      	mov	r3, r0
 801947e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019480:	7bfb      	ldrb	r3, [r7, #15]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d118      	bne.n	80194b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f107 0208 	add.w	r2, r7, #8
 801948c:	4611      	mov	r1, r2
 801948e:	4618      	mov	r0, r3
 8019490:	f7ff f9e2 	bl	8018858 <validate>
 8019494:	4603      	mov	r3, r0
 8019496:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019498:	7bfb      	ldrb	r3, [r7, #15]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d10c      	bne.n	80194b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194a2:	4618      	mov	r0, r3
 80194a4:	f7fc fb34 	bl	8015b10 <dec_lock>
 80194a8:	4603      	mov	r3, r0
 80194aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80194ac:	7bfb      	ldrb	r3, [r7, #15]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d102      	bne.n	80194b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	2200      	movs	r2, #0
 80194b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80194b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3710      	adds	r7, #16
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
	...

080194c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80194c4:	b480      	push	{r7}
 80194c6:	b087      	sub	sp, #28
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	4613      	mov	r3, r2
 80194d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80194d2:	2301      	movs	r3, #1
 80194d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80194d6:	2300      	movs	r3, #0
 80194d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80194da:	4b1f      	ldr	r3, [pc, #124]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 80194dc:	7a5b      	ldrb	r3, [r3, #9]
 80194de:	b2db      	uxtb	r3, r3
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d131      	bne.n	8019548 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80194e4:	4b1c      	ldr	r3, [pc, #112]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 80194e6:	7a5b      	ldrb	r3, [r3, #9]
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	461a      	mov	r2, r3
 80194ec:	4b1a      	ldr	r3, [pc, #104]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 80194ee:	2100      	movs	r1, #0
 80194f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80194f2:	4b19      	ldr	r3, [pc, #100]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 80194f4:	7a5b      	ldrb	r3, [r3, #9]
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	4a17      	ldr	r2, [pc, #92]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 80194fa:	009b      	lsls	r3, r3, #2
 80194fc:	4413      	add	r3, r2
 80194fe:	68fa      	ldr	r2, [r7, #12]
 8019500:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019502:	4b15      	ldr	r3, [pc, #84]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 8019504:	7a5b      	ldrb	r3, [r3, #9]
 8019506:	b2db      	uxtb	r3, r3
 8019508:	461a      	mov	r2, r3
 801950a:	4b13      	ldr	r3, [pc, #76]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 801950c:	4413      	add	r3, r2
 801950e:	79fa      	ldrb	r2, [r7, #7]
 8019510:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019512:	4b11      	ldr	r3, [pc, #68]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 8019514:	7a5b      	ldrb	r3, [r3, #9]
 8019516:	b2db      	uxtb	r3, r3
 8019518:	1c5a      	adds	r2, r3, #1
 801951a:	b2d1      	uxtb	r1, r2
 801951c:	4a0e      	ldr	r2, [pc, #56]	@ (8019558 <FATFS_LinkDriverEx+0x94>)
 801951e:	7251      	strb	r1, [r2, #9]
 8019520:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019522:	7dbb      	ldrb	r3, [r7, #22]
 8019524:	3330      	adds	r3, #48	@ 0x30
 8019526:	b2da      	uxtb	r2, r3
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	3301      	adds	r3, #1
 8019530:	223a      	movs	r2, #58	@ 0x3a
 8019532:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019534:	68bb      	ldr	r3, [r7, #8]
 8019536:	3302      	adds	r3, #2
 8019538:	222f      	movs	r2, #47	@ 0x2f
 801953a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801953c:	68bb      	ldr	r3, [r7, #8]
 801953e:	3303      	adds	r3, #3
 8019540:	2200      	movs	r2, #0
 8019542:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019544:	2300      	movs	r3, #0
 8019546:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019548:	7dfb      	ldrb	r3, [r7, #23]
}
 801954a:	4618      	mov	r0, r3
 801954c:	371c      	adds	r7, #28
 801954e:	46bd      	mov	sp, r7
 8019550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	24001670 	.word	0x24001670

0801955c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019566:	2200      	movs	r2, #0
 8019568:	6839      	ldr	r1, [r7, #0]
 801956a:	6878      	ldr	r0, [r7, #4]
 801956c:	f7ff ffaa 	bl	80194c4 <FATFS_LinkDriverEx>
 8019570:	4603      	mov	r3, r0
}
 8019572:	4618      	mov	r0, r3
 8019574:	3708      	adds	r7, #8
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
	...

0801957c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801957c:	b480      	push	{r7}
 801957e:	b085      	sub	sp, #20
 8019580:	af00      	add	r7, sp, #0
 8019582:	4603      	mov	r3, r0
 8019584:	6039      	str	r1, [r7, #0]
 8019586:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019588:	88fb      	ldrh	r3, [r7, #6]
 801958a:	2b7f      	cmp	r3, #127	@ 0x7f
 801958c:	d802      	bhi.n	8019594 <ff_convert+0x18>
		c = chr;
 801958e:	88fb      	ldrh	r3, [r7, #6]
 8019590:	81fb      	strh	r3, [r7, #14]
 8019592:	e025      	b.n	80195e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d00b      	beq.n	80195b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801959a:	88fb      	ldrh	r3, [r7, #6]
 801959c:	2bff      	cmp	r3, #255	@ 0xff
 801959e:	d805      	bhi.n	80195ac <ff_convert+0x30>
 80195a0:	88fb      	ldrh	r3, [r7, #6]
 80195a2:	3b80      	subs	r3, #128	@ 0x80
 80195a4:	4a12      	ldr	r2, [pc, #72]	@ (80195f0 <ff_convert+0x74>)
 80195a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195aa:	e000      	b.n	80195ae <ff_convert+0x32>
 80195ac:	2300      	movs	r3, #0
 80195ae:	81fb      	strh	r3, [r7, #14]
 80195b0:	e016      	b.n	80195e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80195b2:	2300      	movs	r3, #0
 80195b4:	81fb      	strh	r3, [r7, #14]
 80195b6:	e009      	b.n	80195cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80195b8:	89fb      	ldrh	r3, [r7, #14]
 80195ba:	4a0d      	ldr	r2, [pc, #52]	@ (80195f0 <ff_convert+0x74>)
 80195bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195c0:	88fa      	ldrh	r2, [r7, #6]
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d006      	beq.n	80195d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80195c6:	89fb      	ldrh	r3, [r7, #14]
 80195c8:	3301      	adds	r3, #1
 80195ca:	81fb      	strh	r3, [r7, #14]
 80195cc:	89fb      	ldrh	r3, [r7, #14]
 80195ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80195d0:	d9f2      	bls.n	80195b8 <ff_convert+0x3c>
 80195d2:	e000      	b.n	80195d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80195d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80195d6:	89fb      	ldrh	r3, [r7, #14]
 80195d8:	3380      	adds	r3, #128	@ 0x80
 80195da:	b29b      	uxth	r3, r3
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80195e0:	89fb      	ldrh	r3, [r7, #14]
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3714      	adds	r7, #20
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr
 80195ee:	bf00      	nop
 80195f0:	0801b2cc 	.word	0x0801b2cc

080195f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80195f4:	b480      	push	{r7}
 80195f6:	b087      	sub	sp, #28
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	4603      	mov	r3, r0
 80195fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80195fe:	88fb      	ldrh	r3, [r7, #6]
 8019600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019604:	d201      	bcs.n	801960a <ff_wtoupper+0x16>
 8019606:	4b3e      	ldr	r3, [pc, #248]	@ (8019700 <ff_wtoupper+0x10c>)
 8019608:	e000      	b.n	801960c <ff_wtoupper+0x18>
 801960a:	4b3e      	ldr	r3, [pc, #248]	@ (8019704 <ff_wtoupper+0x110>)
 801960c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801960e:	697b      	ldr	r3, [r7, #20]
 8019610:	1c9a      	adds	r2, r3, #2
 8019612:	617a      	str	r2, [r7, #20]
 8019614:	881b      	ldrh	r3, [r3, #0]
 8019616:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019618:	8a7b      	ldrh	r3, [r7, #18]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d068      	beq.n	80196f0 <ff_wtoupper+0xfc>
 801961e:	88fa      	ldrh	r2, [r7, #6]
 8019620:	8a7b      	ldrh	r3, [r7, #18]
 8019622:	429a      	cmp	r2, r3
 8019624:	d364      	bcc.n	80196f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	1c9a      	adds	r2, r3, #2
 801962a:	617a      	str	r2, [r7, #20]
 801962c:	881b      	ldrh	r3, [r3, #0]
 801962e:	823b      	strh	r3, [r7, #16]
 8019630:	8a3b      	ldrh	r3, [r7, #16]
 8019632:	0a1b      	lsrs	r3, r3, #8
 8019634:	81fb      	strh	r3, [r7, #14]
 8019636:	8a3b      	ldrh	r3, [r7, #16]
 8019638:	b2db      	uxtb	r3, r3
 801963a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801963c:	88fa      	ldrh	r2, [r7, #6]
 801963e:	8a79      	ldrh	r1, [r7, #18]
 8019640:	8a3b      	ldrh	r3, [r7, #16]
 8019642:	440b      	add	r3, r1
 8019644:	429a      	cmp	r2, r3
 8019646:	da49      	bge.n	80196dc <ff_wtoupper+0xe8>
			switch (cmd) {
 8019648:	89fb      	ldrh	r3, [r7, #14]
 801964a:	2b08      	cmp	r3, #8
 801964c:	d84f      	bhi.n	80196ee <ff_wtoupper+0xfa>
 801964e:	a201      	add	r2, pc, #4	@ (adr r2, 8019654 <ff_wtoupper+0x60>)
 8019650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019654:	08019679 	.word	0x08019679
 8019658:	0801968b 	.word	0x0801968b
 801965c:	080196a1 	.word	0x080196a1
 8019660:	080196a9 	.word	0x080196a9
 8019664:	080196b1 	.word	0x080196b1
 8019668:	080196b9 	.word	0x080196b9
 801966c:	080196c1 	.word	0x080196c1
 8019670:	080196c9 	.word	0x080196c9
 8019674:	080196d1 	.word	0x080196d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019678:	88fa      	ldrh	r2, [r7, #6]
 801967a:	8a7b      	ldrh	r3, [r7, #18]
 801967c:	1ad3      	subs	r3, r2, r3
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	697a      	ldr	r2, [r7, #20]
 8019682:	4413      	add	r3, r2
 8019684:	881b      	ldrh	r3, [r3, #0]
 8019686:	80fb      	strh	r3, [r7, #6]
 8019688:	e027      	b.n	80196da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801968a:	88fa      	ldrh	r2, [r7, #6]
 801968c:	8a7b      	ldrh	r3, [r7, #18]
 801968e:	1ad3      	subs	r3, r2, r3
 8019690:	b29b      	uxth	r3, r3
 8019692:	f003 0301 	and.w	r3, r3, #1
 8019696:	b29b      	uxth	r3, r3
 8019698:	88fa      	ldrh	r2, [r7, #6]
 801969a:	1ad3      	subs	r3, r2, r3
 801969c:	80fb      	strh	r3, [r7, #6]
 801969e:	e01c      	b.n	80196da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	3b10      	subs	r3, #16
 80196a4:	80fb      	strh	r3, [r7, #6]
 80196a6:	e018      	b.n	80196da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80196a8:	88fb      	ldrh	r3, [r7, #6]
 80196aa:	3b20      	subs	r3, #32
 80196ac:	80fb      	strh	r3, [r7, #6]
 80196ae:	e014      	b.n	80196da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80196b0:	88fb      	ldrh	r3, [r7, #6]
 80196b2:	3b30      	subs	r3, #48	@ 0x30
 80196b4:	80fb      	strh	r3, [r7, #6]
 80196b6:	e010      	b.n	80196da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80196b8:	88fb      	ldrh	r3, [r7, #6]
 80196ba:	3b1a      	subs	r3, #26
 80196bc:	80fb      	strh	r3, [r7, #6]
 80196be:	e00c      	b.n	80196da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80196c0:	88fb      	ldrh	r3, [r7, #6]
 80196c2:	3308      	adds	r3, #8
 80196c4:	80fb      	strh	r3, [r7, #6]
 80196c6:	e008      	b.n	80196da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80196c8:	88fb      	ldrh	r3, [r7, #6]
 80196ca:	3b50      	subs	r3, #80	@ 0x50
 80196cc:	80fb      	strh	r3, [r7, #6]
 80196ce:	e004      	b.n	80196da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80196d0:	88fb      	ldrh	r3, [r7, #6]
 80196d2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80196d6:	80fb      	strh	r3, [r7, #6]
 80196d8:	bf00      	nop
			}
			break;
 80196da:	e008      	b.n	80196ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80196dc:	89fb      	ldrh	r3, [r7, #14]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d195      	bne.n	801960e <ff_wtoupper+0x1a>
 80196e2:	8a3b      	ldrh	r3, [r7, #16]
 80196e4:	005b      	lsls	r3, r3, #1
 80196e6:	697a      	ldr	r2, [r7, #20]
 80196e8:	4413      	add	r3, r2
 80196ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80196ec:	e78f      	b.n	801960e <ff_wtoupper+0x1a>
			break;
 80196ee:	bf00      	nop
	}

	return chr;
 80196f0:	88fb      	ldrh	r3, [r7, #6]
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	371c      	adds	r7, #28
 80196f6:	46bd      	mov	sp, r7
 80196f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fc:	4770      	bx	lr
 80196fe:	bf00      	nop
 8019700:	0801b3cc 	.word	0x0801b3cc
 8019704:	0801b5c0 	.word	0x0801b5c0

08019708 <std>:
 8019708:	2300      	movs	r3, #0
 801970a:	b510      	push	{r4, lr}
 801970c:	4604      	mov	r4, r0
 801970e:	e9c0 3300 	strd	r3, r3, [r0]
 8019712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019716:	6083      	str	r3, [r0, #8]
 8019718:	8181      	strh	r1, [r0, #12]
 801971a:	6643      	str	r3, [r0, #100]	@ 0x64
 801971c:	81c2      	strh	r2, [r0, #14]
 801971e:	6183      	str	r3, [r0, #24]
 8019720:	4619      	mov	r1, r3
 8019722:	2208      	movs	r2, #8
 8019724:	305c      	adds	r0, #92	@ 0x5c
 8019726:	f000 f926 	bl	8019976 <memset>
 801972a:	4b0d      	ldr	r3, [pc, #52]	@ (8019760 <std+0x58>)
 801972c:	6263      	str	r3, [r4, #36]	@ 0x24
 801972e:	4b0d      	ldr	r3, [pc, #52]	@ (8019764 <std+0x5c>)
 8019730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019732:	4b0d      	ldr	r3, [pc, #52]	@ (8019768 <std+0x60>)
 8019734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019736:	4b0d      	ldr	r3, [pc, #52]	@ (801976c <std+0x64>)
 8019738:	6323      	str	r3, [r4, #48]	@ 0x30
 801973a:	4b0d      	ldr	r3, [pc, #52]	@ (8019770 <std+0x68>)
 801973c:	6224      	str	r4, [r4, #32]
 801973e:	429c      	cmp	r4, r3
 8019740:	d006      	beq.n	8019750 <std+0x48>
 8019742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019746:	4294      	cmp	r4, r2
 8019748:	d002      	beq.n	8019750 <std+0x48>
 801974a:	33d0      	adds	r3, #208	@ 0xd0
 801974c:	429c      	cmp	r4, r3
 801974e:	d105      	bne.n	801975c <std+0x54>
 8019750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019758:	f000 b986 	b.w	8019a68 <__retarget_lock_init_recursive>
 801975c:	bd10      	pop	{r4, pc}
 801975e:	bf00      	nop
 8019760:	080198f1 	.word	0x080198f1
 8019764:	08019913 	.word	0x08019913
 8019768:	0801994b 	.word	0x0801994b
 801976c:	0801996f 	.word	0x0801996f
 8019770:	2400167c 	.word	0x2400167c

08019774 <stdio_exit_handler>:
 8019774:	4a02      	ldr	r2, [pc, #8]	@ (8019780 <stdio_exit_handler+0xc>)
 8019776:	4903      	ldr	r1, [pc, #12]	@ (8019784 <stdio_exit_handler+0x10>)
 8019778:	4803      	ldr	r0, [pc, #12]	@ (8019788 <stdio_exit_handler+0x14>)
 801977a:	f000 b869 	b.w	8019850 <_fwalk_sglue>
 801977e:	bf00      	nop
 8019780:	24000238 	.word	0x24000238
 8019784:	0801a5d5 	.word	0x0801a5d5
 8019788:	24000248 	.word	0x24000248

0801978c <cleanup_stdio>:
 801978c:	6841      	ldr	r1, [r0, #4]
 801978e:	4b0c      	ldr	r3, [pc, #48]	@ (80197c0 <cleanup_stdio+0x34>)
 8019790:	4299      	cmp	r1, r3
 8019792:	b510      	push	{r4, lr}
 8019794:	4604      	mov	r4, r0
 8019796:	d001      	beq.n	801979c <cleanup_stdio+0x10>
 8019798:	f000 ff1c 	bl	801a5d4 <_fflush_r>
 801979c:	68a1      	ldr	r1, [r4, #8]
 801979e:	4b09      	ldr	r3, [pc, #36]	@ (80197c4 <cleanup_stdio+0x38>)
 80197a0:	4299      	cmp	r1, r3
 80197a2:	d002      	beq.n	80197aa <cleanup_stdio+0x1e>
 80197a4:	4620      	mov	r0, r4
 80197a6:	f000 ff15 	bl	801a5d4 <_fflush_r>
 80197aa:	68e1      	ldr	r1, [r4, #12]
 80197ac:	4b06      	ldr	r3, [pc, #24]	@ (80197c8 <cleanup_stdio+0x3c>)
 80197ae:	4299      	cmp	r1, r3
 80197b0:	d004      	beq.n	80197bc <cleanup_stdio+0x30>
 80197b2:	4620      	mov	r0, r4
 80197b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197b8:	f000 bf0c 	b.w	801a5d4 <_fflush_r>
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	bf00      	nop
 80197c0:	2400167c 	.word	0x2400167c
 80197c4:	240016e4 	.word	0x240016e4
 80197c8:	2400174c 	.word	0x2400174c

080197cc <global_stdio_init.part.0>:
 80197cc:	b510      	push	{r4, lr}
 80197ce:	4b0b      	ldr	r3, [pc, #44]	@ (80197fc <global_stdio_init.part.0+0x30>)
 80197d0:	4c0b      	ldr	r4, [pc, #44]	@ (8019800 <global_stdio_init.part.0+0x34>)
 80197d2:	4a0c      	ldr	r2, [pc, #48]	@ (8019804 <global_stdio_init.part.0+0x38>)
 80197d4:	601a      	str	r2, [r3, #0]
 80197d6:	4620      	mov	r0, r4
 80197d8:	2200      	movs	r2, #0
 80197da:	2104      	movs	r1, #4
 80197dc:	f7ff ff94 	bl	8019708 <std>
 80197e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80197e4:	2201      	movs	r2, #1
 80197e6:	2109      	movs	r1, #9
 80197e8:	f7ff ff8e 	bl	8019708 <std>
 80197ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197f0:	2202      	movs	r2, #2
 80197f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197f6:	2112      	movs	r1, #18
 80197f8:	f7ff bf86 	b.w	8019708 <std>
 80197fc:	240017b4 	.word	0x240017b4
 8019800:	2400167c 	.word	0x2400167c
 8019804:	08019775 	.word	0x08019775

08019808 <__sfp_lock_acquire>:
 8019808:	4801      	ldr	r0, [pc, #4]	@ (8019810 <__sfp_lock_acquire+0x8>)
 801980a:	f000 b92e 	b.w	8019a6a <__retarget_lock_acquire_recursive>
 801980e:	bf00      	nop
 8019810:	240017bd 	.word	0x240017bd

08019814 <__sfp_lock_release>:
 8019814:	4801      	ldr	r0, [pc, #4]	@ (801981c <__sfp_lock_release+0x8>)
 8019816:	f000 b929 	b.w	8019a6c <__retarget_lock_release_recursive>
 801981a:	bf00      	nop
 801981c:	240017bd 	.word	0x240017bd

08019820 <__sinit>:
 8019820:	b510      	push	{r4, lr}
 8019822:	4604      	mov	r4, r0
 8019824:	f7ff fff0 	bl	8019808 <__sfp_lock_acquire>
 8019828:	6a23      	ldr	r3, [r4, #32]
 801982a:	b11b      	cbz	r3, 8019834 <__sinit+0x14>
 801982c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019830:	f7ff bff0 	b.w	8019814 <__sfp_lock_release>
 8019834:	4b04      	ldr	r3, [pc, #16]	@ (8019848 <__sinit+0x28>)
 8019836:	6223      	str	r3, [r4, #32]
 8019838:	4b04      	ldr	r3, [pc, #16]	@ (801984c <__sinit+0x2c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d1f5      	bne.n	801982c <__sinit+0xc>
 8019840:	f7ff ffc4 	bl	80197cc <global_stdio_init.part.0>
 8019844:	e7f2      	b.n	801982c <__sinit+0xc>
 8019846:	bf00      	nop
 8019848:	0801978d 	.word	0x0801978d
 801984c:	240017b4 	.word	0x240017b4

08019850 <_fwalk_sglue>:
 8019850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019854:	4607      	mov	r7, r0
 8019856:	4688      	mov	r8, r1
 8019858:	4614      	mov	r4, r2
 801985a:	2600      	movs	r6, #0
 801985c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019860:	f1b9 0901 	subs.w	r9, r9, #1
 8019864:	d505      	bpl.n	8019872 <_fwalk_sglue+0x22>
 8019866:	6824      	ldr	r4, [r4, #0]
 8019868:	2c00      	cmp	r4, #0
 801986a:	d1f7      	bne.n	801985c <_fwalk_sglue+0xc>
 801986c:	4630      	mov	r0, r6
 801986e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019872:	89ab      	ldrh	r3, [r5, #12]
 8019874:	2b01      	cmp	r3, #1
 8019876:	d907      	bls.n	8019888 <_fwalk_sglue+0x38>
 8019878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801987c:	3301      	adds	r3, #1
 801987e:	d003      	beq.n	8019888 <_fwalk_sglue+0x38>
 8019880:	4629      	mov	r1, r5
 8019882:	4638      	mov	r0, r7
 8019884:	47c0      	blx	r8
 8019886:	4306      	orrs	r6, r0
 8019888:	3568      	adds	r5, #104	@ 0x68
 801988a:	e7e9      	b.n	8019860 <_fwalk_sglue+0x10>

0801988c <iprintf>:
 801988c:	b40f      	push	{r0, r1, r2, r3}
 801988e:	b507      	push	{r0, r1, r2, lr}
 8019890:	4906      	ldr	r1, [pc, #24]	@ (80198ac <iprintf+0x20>)
 8019892:	ab04      	add	r3, sp, #16
 8019894:	6808      	ldr	r0, [r1, #0]
 8019896:	f853 2b04 	ldr.w	r2, [r3], #4
 801989a:	6881      	ldr	r1, [r0, #8]
 801989c:	9301      	str	r3, [sp, #4]
 801989e:	f000 fb6f 	bl	8019f80 <_vfiprintf_r>
 80198a2:	b003      	add	sp, #12
 80198a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80198a8:	b004      	add	sp, #16
 80198aa:	4770      	bx	lr
 80198ac:	24000244 	.word	0x24000244

080198b0 <siprintf>:
 80198b0:	b40e      	push	{r1, r2, r3}
 80198b2:	b500      	push	{lr}
 80198b4:	b09c      	sub	sp, #112	@ 0x70
 80198b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80198b8:	9002      	str	r0, [sp, #8]
 80198ba:	9006      	str	r0, [sp, #24]
 80198bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80198c0:	4809      	ldr	r0, [pc, #36]	@ (80198e8 <siprintf+0x38>)
 80198c2:	9107      	str	r1, [sp, #28]
 80198c4:	9104      	str	r1, [sp, #16]
 80198c6:	4909      	ldr	r1, [pc, #36]	@ (80198ec <siprintf+0x3c>)
 80198c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80198cc:	9105      	str	r1, [sp, #20]
 80198ce:	6800      	ldr	r0, [r0, #0]
 80198d0:	9301      	str	r3, [sp, #4]
 80198d2:	a902      	add	r1, sp, #8
 80198d4:	f000 fa2e 	bl	8019d34 <_svfiprintf_r>
 80198d8:	9b02      	ldr	r3, [sp, #8]
 80198da:	2200      	movs	r2, #0
 80198dc:	701a      	strb	r2, [r3, #0]
 80198de:	b01c      	add	sp, #112	@ 0x70
 80198e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80198e4:	b003      	add	sp, #12
 80198e6:	4770      	bx	lr
 80198e8:	24000244 	.word	0x24000244
 80198ec:	ffff0208 	.word	0xffff0208

080198f0 <__sread>:
 80198f0:	b510      	push	{r4, lr}
 80198f2:	460c      	mov	r4, r1
 80198f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198f8:	f000 f868 	bl	80199cc <_read_r>
 80198fc:	2800      	cmp	r0, #0
 80198fe:	bfab      	itete	ge
 8019900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019902:	89a3      	ldrhlt	r3, [r4, #12]
 8019904:	181b      	addge	r3, r3, r0
 8019906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801990a:	bfac      	ite	ge
 801990c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801990e:	81a3      	strhlt	r3, [r4, #12]
 8019910:	bd10      	pop	{r4, pc}

08019912 <__swrite>:
 8019912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019916:	461f      	mov	r7, r3
 8019918:	898b      	ldrh	r3, [r1, #12]
 801991a:	05db      	lsls	r3, r3, #23
 801991c:	4605      	mov	r5, r0
 801991e:	460c      	mov	r4, r1
 8019920:	4616      	mov	r6, r2
 8019922:	d505      	bpl.n	8019930 <__swrite+0x1e>
 8019924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019928:	2302      	movs	r3, #2
 801992a:	2200      	movs	r2, #0
 801992c:	f000 f83c 	bl	80199a8 <_lseek_r>
 8019930:	89a3      	ldrh	r3, [r4, #12]
 8019932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801993a:	81a3      	strh	r3, [r4, #12]
 801993c:	4632      	mov	r2, r6
 801993e:	463b      	mov	r3, r7
 8019940:	4628      	mov	r0, r5
 8019942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019946:	f000 b853 	b.w	80199f0 <_write_r>

0801994a <__sseek>:
 801994a:	b510      	push	{r4, lr}
 801994c:	460c      	mov	r4, r1
 801994e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019952:	f000 f829 	bl	80199a8 <_lseek_r>
 8019956:	1c43      	adds	r3, r0, #1
 8019958:	89a3      	ldrh	r3, [r4, #12]
 801995a:	bf15      	itete	ne
 801995c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801995e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019966:	81a3      	strheq	r3, [r4, #12]
 8019968:	bf18      	it	ne
 801996a:	81a3      	strhne	r3, [r4, #12]
 801996c:	bd10      	pop	{r4, pc}

0801996e <__sclose>:
 801996e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019972:	f000 b809 	b.w	8019988 <_close_r>

08019976 <memset>:
 8019976:	4402      	add	r2, r0
 8019978:	4603      	mov	r3, r0
 801997a:	4293      	cmp	r3, r2
 801997c:	d100      	bne.n	8019980 <memset+0xa>
 801997e:	4770      	bx	lr
 8019980:	f803 1b01 	strb.w	r1, [r3], #1
 8019984:	e7f9      	b.n	801997a <memset+0x4>
	...

08019988 <_close_r>:
 8019988:	b538      	push	{r3, r4, r5, lr}
 801998a:	4d06      	ldr	r5, [pc, #24]	@ (80199a4 <_close_r+0x1c>)
 801998c:	2300      	movs	r3, #0
 801998e:	4604      	mov	r4, r0
 8019990:	4608      	mov	r0, r1
 8019992:	602b      	str	r3, [r5, #0]
 8019994:	f7ea fba7 	bl	80040e6 <_close>
 8019998:	1c43      	adds	r3, r0, #1
 801999a:	d102      	bne.n	80199a2 <_close_r+0x1a>
 801999c:	682b      	ldr	r3, [r5, #0]
 801999e:	b103      	cbz	r3, 80199a2 <_close_r+0x1a>
 80199a0:	6023      	str	r3, [r4, #0]
 80199a2:	bd38      	pop	{r3, r4, r5, pc}
 80199a4:	240017b8 	.word	0x240017b8

080199a8 <_lseek_r>:
 80199a8:	b538      	push	{r3, r4, r5, lr}
 80199aa:	4d07      	ldr	r5, [pc, #28]	@ (80199c8 <_lseek_r+0x20>)
 80199ac:	4604      	mov	r4, r0
 80199ae:	4608      	mov	r0, r1
 80199b0:	4611      	mov	r1, r2
 80199b2:	2200      	movs	r2, #0
 80199b4:	602a      	str	r2, [r5, #0]
 80199b6:	461a      	mov	r2, r3
 80199b8:	f7ea fbbc 	bl	8004134 <_lseek>
 80199bc:	1c43      	adds	r3, r0, #1
 80199be:	d102      	bne.n	80199c6 <_lseek_r+0x1e>
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	b103      	cbz	r3, 80199c6 <_lseek_r+0x1e>
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	bd38      	pop	{r3, r4, r5, pc}
 80199c8:	240017b8 	.word	0x240017b8

080199cc <_read_r>:
 80199cc:	b538      	push	{r3, r4, r5, lr}
 80199ce:	4d07      	ldr	r5, [pc, #28]	@ (80199ec <_read_r+0x20>)
 80199d0:	4604      	mov	r4, r0
 80199d2:	4608      	mov	r0, r1
 80199d4:	4611      	mov	r1, r2
 80199d6:	2200      	movs	r2, #0
 80199d8:	602a      	str	r2, [r5, #0]
 80199da:	461a      	mov	r2, r3
 80199dc:	f7ea fb4a 	bl	8004074 <_read>
 80199e0:	1c43      	adds	r3, r0, #1
 80199e2:	d102      	bne.n	80199ea <_read_r+0x1e>
 80199e4:	682b      	ldr	r3, [r5, #0]
 80199e6:	b103      	cbz	r3, 80199ea <_read_r+0x1e>
 80199e8:	6023      	str	r3, [r4, #0]
 80199ea:	bd38      	pop	{r3, r4, r5, pc}
 80199ec:	240017b8 	.word	0x240017b8

080199f0 <_write_r>:
 80199f0:	b538      	push	{r3, r4, r5, lr}
 80199f2:	4d07      	ldr	r5, [pc, #28]	@ (8019a10 <_write_r+0x20>)
 80199f4:	4604      	mov	r4, r0
 80199f6:	4608      	mov	r0, r1
 80199f8:	4611      	mov	r1, r2
 80199fa:	2200      	movs	r2, #0
 80199fc:	602a      	str	r2, [r5, #0]
 80199fe:	461a      	mov	r2, r3
 8019a00:	f7ea fb55 	bl	80040ae <_write>
 8019a04:	1c43      	adds	r3, r0, #1
 8019a06:	d102      	bne.n	8019a0e <_write_r+0x1e>
 8019a08:	682b      	ldr	r3, [r5, #0]
 8019a0a:	b103      	cbz	r3, 8019a0e <_write_r+0x1e>
 8019a0c:	6023      	str	r3, [r4, #0]
 8019a0e:	bd38      	pop	{r3, r4, r5, pc}
 8019a10:	240017b8 	.word	0x240017b8

08019a14 <__errno>:
 8019a14:	4b01      	ldr	r3, [pc, #4]	@ (8019a1c <__errno+0x8>)
 8019a16:	6818      	ldr	r0, [r3, #0]
 8019a18:	4770      	bx	lr
 8019a1a:	bf00      	nop
 8019a1c:	24000244 	.word	0x24000244

08019a20 <__libc_init_array>:
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	4d0d      	ldr	r5, [pc, #52]	@ (8019a58 <__libc_init_array+0x38>)
 8019a24:	4c0d      	ldr	r4, [pc, #52]	@ (8019a5c <__libc_init_array+0x3c>)
 8019a26:	1b64      	subs	r4, r4, r5
 8019a28:	10a4      	asrs	r4, r4, #2
 8019a2a:	2600      	movs	r6, #0
 8019a2c:	42a6      	cmp	r6, r4
 8019a2e:	d109      	bne.n	8019a44 <__libc_init_array+0x24>
 8019a30:	4d0b      	ldr	r5, [pc, #44]	@ (8019a60 <__libc_init_array+0x40>)
 8019a32:	4c0c      	ldr	r4, [pc, #48]	@ (8019a64 <__libc_init_array+0x44>)
 8019a34:	f000 ff6e 	bl	801a914 <_init>
 8019a38:	1b64      	subs	r4, r4, r5
 8019a3a:	10a4      	asrs	r4, r4, #2
 8019a3c:	2600      	movs	r6, #0
 8019a3e:	42a6      	cmp	r6, r4
 8019a40:	d105      	bne.n	8019a4e <__libc_init_array+0x2e>
 8019a42:	bd70      	pop	{r4, r5, r6, pc}
 8019a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a48:	4798      	blx	r3
 8019a4a:	3601      	adds	r6, #1
 8019a4c:	e7ee      	b.n	8019a2c <__libc_init_array+0xc>
 8019a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a52:	4798      	blx	r3
 8019a54:	3601      	adds	r6, #1
 8019a56:	e7f2      	b.n	8019a3e <__libc_init_array+0x1e>
 8019a58:	0801b6b8 	.word	0x0801b6b8
 8019a5c:	0801b6b8 	.word	0x0801b6b8
 8019a60:	0801b6b8 	.word	0x0801b6b8
 8019a64:	0801b6bc 	.word	0x0801b6bc

08019a68 <__retarget_lock_init_recursive>:
 8019a68:	4770      	bx	lr

08019a6a <__retarget_lock_acquire_recursive>:
 8019a6a:	4770      	bx	lr

08019a6c <__retarget_lock_release_recursive>:
 8019a6c:	4770      	bx	lr

08019a6e <memcpy>:
 8019a6e:	440a      	add	r2, r1
 8019a70:	4291      	cmp	r1, r2
 8019a72:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a76:	d100      	bne.n	8019a7a <memcpy+0xc>
 8019a78:	4770      	bx	lr
 8019a7a:	b510      	push	{r4, lr}
 8019a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a84:	4291      	cmp	r1, r2
 8019a86:	d1f9      	bne.n	8019a7c <memcpy+0xe>
 8019a88:	bd10      	pop	{r4, pc}
	...

08019a8c <_free_r>:
 8019a8c:	b538      	push	{r3, r4, r5, lr}
 8019a8e:	4605      	mov	r5, r0
 8019a90:	2900      	cmp	r1, #0
 8019a92:	d041      	beq.n	8019b18 <_free_r+0x8c>
 8019a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a98:	1f0c      	subs	r4, r1, #4
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	bfb8      	it	lt
 8019a9e:	18e4      	addlt	r4, r4, r3
 8019aa0:	f000 f8e0 	bl	8019c64 <__malloc_lock>
 8019aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8019b1c <_free_r+0x90>)
 8019aa6:	6813      	ldr	r3, [r2, #0]
 8019aa8:	b933      	cbnz	r3, 8019ab8 <_free_r+0x2c>
 8019aaa:	6063      	str	r3, [r4, #4]
 8019aac:	6014      	str	r4, [r2, #0]
 8019aae:	4628      	mov	r0, r5
 8019ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ab4:	f000 b8dc 	b.w	8019c70 <__malloc_unlock>
 8019ab8:	42a3      	cmp	r3, r4
 8019aba:	d908      	bls.n	8019ace <_free_r+0x42>
 8019abc:	6820      	ldr	r0, [r4, #0]
 8019abe:	1821      	adds	r1, r4, r0
 8019ac0:	428b      	cmp	r3, r1
 8019ac2:	bf01      	itttt	eq
 8019ac4:	6819      	ldreq	r1, [r3, #0]
 8019ac6:	685b      	ldreq	r3, [r3, #4]
 8019ac8:	1809      	addeq	r1, r1, r0
 8019aca:	6021      	streq	r1, [r4, #0]
 8019acc:	e7ed      	b.n	8019aaa <_free_r+0x1e>
 8019ace:	461a      	mov	r2, r3
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	b10b      	cbz	r3, 8019ad8 <_free_r+0x4c>
 8019ad4:	42a3      	cmp	r3, r4
 8019ad6:	d9fa      	bls.n	8019ace <_free_r+0x42>
 8019ad8:	6811      	ldr	r1, [r2, #0]
 8019ada:	1850      	adds	r0, r2, r1
 8019adc:	42a0      	cmp	r0, r4
 8019ade:	d10b      	bne.n	8019af8 <_free_r+0x6c>
 8019ae0:	6820      	ldr	r0, [r4, #0]
 8019ae2:	4401      	add	r1, r0
 8019ae4:	1850      	adds	r0, r2, r1
 8019ae6:	4283      	cmp	r3, r0
 8019ae8:	6011      	str	r1, [r2, #0]
 8019aea:	d1e0      	bne.n	8019aae <_free_r+0x22>
 8019aec:	6818      	ldr	r0, [r3, #0]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	6053      	str	r3, [r2, #4]
 8019af2:	4408      	add	r0, r1
 8019af4:	6010      	str	r0, [r2, #0]
 8019af6:	e7da      	b.n	8019aae <_free_r+0x22>
 8019af8:	d902      	bls.n	8019b00 <_free_r+0x74>
 8019afa:	230c      	movs	r3, #12
 8019afc:	602b      	str	r3, [r5, #0]
 8019afe:	e7d6      	b.n	8019aae <_free_r+0x22>
 8019b00:	6820      	ldr	r0, [r4, #0]
 8019b02:	1821      	adds	r1, r4, r0
 8019b04:	428b      	cmp	r3, r1
 8019b06:	bf04      	itt	eq
 8019b08:	6819      	ldreq	r1, [r3, #0]
 8019b0a:	685b      	ldreq	r3, [r3, #4]
 8019b0c:	6063      	str	r3, [r4, #4]
 8019b0e:	bf04      	itt	eq
 8019b10:	1809      	addeq	r1, r1, r0
 8019b12:	6021      	streq	r1, [r4, #0]
 8019b14:	6054      	str	r4, [r2, #4]
 8019b16:	e7ca      	b.n	8019aae <_free_r+0x22>
 8019b18:	bd38      	pop	{r3, r4, r5, pc}
 8019b1a:	bf00      	nop
 8019b1c:	240017c4 	.word	0x240017c4

08019b20 <sbrk_aligned>:
 8019b20:	b570      	push	{r4, r5, r6, lr}
 8019b22:	4e0f      	ldr	r6, [pc, #60]	@ (8019b60 <sbrk_aligned+0x40>)
 8019b24:	460c      	mov	r4, r1
 8019b26:	6831      	ldr	r1, [r6, #0]
 8019b28:	4605      	mov	r5, r0
 8019b2a:	b911      	cbnz	r1, 8019b32 <sbrk_aligned+0x12>
 8019b2c:	f000 fe28 	bl	801a780 <_sbrk_r>
 8019b30:	6030      	str	r0, [r6, #0]
 8019b32:	4621      	mov	r1, r4
 8019b34:	4628      	mov	r0, r5
 8019b36:	f000 fe23 	bl	801a780 <_sbrk_r>
 8019b3a:	1c43      	adds	r3, r0, #1
 8019b3c:	d103      	bne.n	8019b46 <sbrk_aligned+0x26>
 8019b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8019b42:	4620      	mov	r0, r4
 8019b44:	bd70      	pop	{r4, r5, r6, pc}
 8019b46:	1cc4      	adds	r4, r0, #3
 8019b48:	f024 0403 	bic.w	r4, r4, #3
 8019b4c:	42a0      	cmp	r0, r4
 8019b4e:	d0f8      	beq.n	8019b42 <sbrk_aligned+0x22>
 8019b50:	1a21      	subs	r1, r4, r0
 8019b52:	4628      	mov	r0, r5
 8019b54:	f000 fe14 	bl	801a780 <_sbrk_r>
 8019b58:	3001      	adds	r0, #1
 8019b5a:	d1f2      	bne.n	8019b42 <sbrk_aligned+0x22>
 8019b5c:	e7ef      	b.n	8019b3e <sbrk_aligned+0x1e>
 8019b5e:	bf00      	nop
 8019b60:	240017c0 	.word	0x240017c0

08019b64 <_malloc_r>:
 8019b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b68:	1ccd      	adds	r5, r1, #3
 8019b6a:	f025 0503 	bic.w	r5, r5, #3
 8019b6e:	3508      	adds	r5, #8
 8019b70:	2d0c      	cmp	r5, #12
 8019b72:	bf38      	it	cc
 8019b74:	250c      	movcc	r5, #12
 8019b76:	2d00      	cmp	r5, #0
 8019b78:	4606      	mov	r6, r0
 8019b7a:	db01      	blt.n	8019b80 <_malloc_r+0x1c>
 8019b7c:	42a9      	cmp	r1, r5
 8019b7e:	d904      	bls.n	8019b8a <_malloc_r+0x26>
 8019b80:	230c      	movs	r3, #12
 8019b82:	6033      	str	r3, [r6, #0]
 8019b84:	2000      	movs	r0, #0
 8019b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019c60 <_malloc_r+0xfc>
 8019b8e:	f000 f869 	bl	8019c64 <__malloc_lock>
 8019b92:	f8d8 3000 	ldr.w	r3, [r8]
 8019b96:	461c      	mov	r4, r3
 8019b98:	bb44      	cbnz	r4, 8019bec <_malloc_r+0x88>
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	f7ff ffbf 	bl	8019b20 <sbrk_aligned>
 8019ba2:	1c43      	adds	r3, r0, #1
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	d158      	bne.n	8019c5a <_malloc_r+0xf6>
 8019ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8019bac:	4627      	mov	r7, r4
 8019bae:	2f00      	cmp	r7, #0
 8019bb0:	d143      	bne.n	8019c3a <_malloc_r+0xd6>
 8019bb2:	2c00      	cmp	r4, #0
 8019bb4:	d04b      	beq.n	8019c4e <_malloc_r+0xea>
 8019bb6:	6823      	ldr	r3, [r4, #0]
 8019bb8:	4639      	mov	r1, r7
 8019bba:	4630      	mov	r0, r6
 8019bbc:	eb04 0903 	add.w	r9, r4, r3
 8019bc0:	f000 fdde 	bl	801a780 <_sbrk_r>
 8019bc4:	4581      	cmp	r9, r0
 8019bc6:	d142      	bne.n	8019c4e <_malloc_r+0xea>
 8019bc8:	6821      	ldr	r1, [r4, #0]
 8019bca:	1a6d      	subs	r5, r5, r1
 8019bcc:	4629      	mov	r1, r5
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f7ff ffa6 	bl	8019b20 <sbrk_aligned>
 8019bd4:	3001      	adds	r0, #1
 8019bd6:	d03a      	beq.n	8019c4e <_malloc_r+0xea>
 8019bd8:	6823      	ldr	r3, [r4, #0]
 8019bda:	442b      	add	r3, r5
 8019bdc:	6023      	str	r3, [r4, #0]
 8019bde:	f8d8 3000 	ldr.w	r3, [r8]
 8019be2:	685a      	ldr	r2, [r3, #4]
 8019be4:	bb62      	cbnz	r2, 8019c40 <_malloc_r+0xdc>
 8019be6:	f8c8 7000 	str.w	r7, [r8]
 8019bea:	e00f      	b.n	8019c0c <_malloc_r+0xa8>
 8019bec:	6822      	ldr	r2, [r4, #0]
 8019bee:	1b52      	subs	r2, r2, r5
 8019bf0:	d420      	bmi.n	8019c34 <_malloc_r+0xd0>
 8019bf2:	2a0b      	cmp	r2, #11
 8019bf4:	d917      	bls.n	8019c26 <_malloc_r+0xc2>
 8019bf6:	1961      	adds	r1, r4, r5
 8019bf8:	42a3      	cmp	r3, r4
 8019bfa:	6025      	str	r5, [r4, #0]
 8019bfc:	bf18      	it	ne
 8019bfe:	6059      	strne	r1, [r3, #4]
 8019c00:	6863      	ldr	r3, [r4, #4]
 8019c02:	bf08      	it	eq
 8019c04:	f8c8 1000 	streq.w	r1, [r8]
 8019c08:	5162      	str	r2, [r4, r5]
 8019c0a:	604b      	str	r3, [r1, #4]
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	f000 f82f 	bl	8019c70 <__malloc_unlock>
 8019c12:	f104 000b 	add.w	r0, r4, #11
 8019c16:	1d23      	adds	r3, r4, #4
 8019c18:	f020 0007 	bic.w	r0, r0, #7
 8019c1c:	1ac2      	subs	r2, r0, r3
 8019c1e:	bf1c      	itt	ne
 8019c20:	1a1b      	subne	r3, r3, r0
 8019c22:	50a3      	strne	r3, [r4, r2]
 8019c24:	e7af      	b.n	8019b86 <_malloc_r+0x22>
 8019c26:	6862      	ldr	r2, [r4, #4]
 8019c28:	42a3      	cmp	r3, r4
 8019c2a:	bf0c      	ite	eq
 8019c2c:	f8c8 2000 	streq.w	r2, [r8]
 8019c30:	605a      	strne	r2, [r3, #4]
 8019c32:	e7eb      	b.n	8019c0c <_malloc_r+0xa8>
 8019c34:	4623      	mov	r3, r4
 8019c36:	6864      	ldr	r4, [r4, #4]
 8019c38:	e7ae      	b.n	8019b98 <_malloc_r+0x34>
 8019c3a:	463c      	mov	r4, r7
 8019c3c:	687f      	ldr	r7, [r7, #4]
 8019c3e:	e7b6      	b.n	8019bae <_malloc_r+0x4a>
 8019c40:	461a      	mov	r2, r3
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	42a3      	cmp	r3, r4
 8019c46:	d1fb      	bne.n	8019c40 <_malloc_r+0xdc>
 8019c48:	2300      	movs	r3, #0
 8019c4a:	6053      	str	r3, [r2, #4]
 8019c4c:	e7de      	b.n	8019c0c <_malloc_r+0xa8>
 8019c4e:	230c      	movs	r3, #12
 8019c50:	6033      	str	r3, [r6, #0]
 8019c52:	4630      	mov	r0, r6
 8019c54:	f000 f80c 	bl	8019c70 <__malloc_unlock>
 8019c58:	e794      	b.n	8019b84 <_malloc_r+0x20>
 8019c5a:	6005      	str	r5, [r0, #0]
 8019c5c:	e7d6      	b.n	8019c0c <_malloc_r+0xa8>
 8019c5e:	bf00      	nop
 8019c60:	240017c4 	.word	0x240017c4

08019c64 <__malloc_lock>:
 8019c64:	4801      	ldr	r0, [pc, #4]	@ (8019c6c <__malloc_lock+0x8>)
 8019c66:	f7ff bf00 	b.w	8019a6a <__retarget_lock_acquire_recursive>
 8019c6a:	bf00      	nop
 8019c6c:	240017bc 	.word	0x240017bc

08019c70 <__malloc_unlock>:
 8019c70:	4801      	ldr	r0, [pc, #4]	@ (8019c78 <__malloc_unlock+0x8>)
 8019c72:	f7ff befb 	b.w	8019a6c <__retarget_lock_release_recursive>
 8019c76:	bf00      	nop
 8019c78:	240017bc 	.word	0x240017bc

08019c7c <__ssputs_r>:
 8019c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c80:	688e      	ldr	r6, [r1, #8]
 8019c82:	461f      	mov	r7, r3
 8019c84:	42be      	cmp	r6, r7
 8019c86:	680b      	ldr	r3, [r1, #0]
 8019c88:	4682      	mov	sl, r0
 8019c8a:	460c      	mov	r4, r1
 8019c8c:	4690      	mov	r8, r2
 8019c8e:	d82d      	bhi.n	8019cec <__ssputs_r+0x70>
 8019c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019c98:	d026      	beq.n	8019ce8 <__ssputs_r+0x6c>
 8019c9a:	6965      	ldr	r5, [r4, #20]
 8019c9c:	6909      	ldr	r1, [r1, #16]
 8019c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ca2:	eba3 0901 	sub.w	r9, r3, r1
 8019ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019caa:	1c7b      	adds	r3, r7, #1
 8019cac:	444b      	add	r3, r9
 8019cae:	106d      	asrs	r5, r5, #1
 8019cb0:	429d      	cmp	r5, r3
 8019cb2:	bf38      	it	cc
 8019cb4:	461d      	movcc	r5, r3
 8019cb6:	0553      	lsls	r3, r2, #21
 8019cb8:	d527      	bpl.n	8019d0a <__ssputs_r+0x8e>
 8019cba:	4629      	mov	r1, r5
 8019cbc:	f7ff ff52 	bl	8019b64 <_malloc_r>
 8019cc0:	4606      	mov	r6, r0
 8019cc2:	b360      	cbz	r0, 8019d1e <__ssputs_r+0xa2>
 8019cc4:	6921      	ldr	r1, [r4, #16]
 8019cc6:	464a      	mov	r2, r9
 8019cc8:	f7ff fed1 	bl	8019a6e <memcpy>
 8019ccc:	89a3      	ldrh	r3, [r4, #12]
 8019cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019cd6:	81a3      	strh	r3, [r4, #12]
 8019cd8:	6126      	str	r6, [r4, #16]
 8019cda:	6165      	str	r5, [r4, #20]
 8019cdc:	444e      	add	r6, r9
 8019cde:	eba5 0509 	sub.w	r5, r5, r9
 8019ce2:	6026      	str	r6, [r4, #0]
 8019ce4:	60a5      	str	r5, [r4, #8]
 8019ce6:	463e      	mov	r6, r7
 8019ce8:	42be      	cmp	r6, r7
 8019cea:	d900      	bls.n	8019cee <__ssputs_r+0x72>
 8019cec:	463e      	mov	r6, r7
 8019cee:	6820      	ldr	r0, [r4, #0]
 8019cf0:	4632      	mov	r2, r6
 8019cf2:	4641      	mov	r1, r8
 8019cf4:	f000 fd2a 	bl	801a74c <memmove>
 8019cf8:	68a3      	ldr	r3, [r4, #8]
 8019cfa:	1b9b      	subs	r3, r3, r6
 8019cfc:	60a3      	str	r3, [r4, #8]
 8019cfe:	6823      	ldr	r3, [r4, #0]
 8019d00:	4433      	add	r3, r6
 8019d02:	6023      	str	r3, [r4, #0]
 8019d04:	2000      	movs	r0, #0
 8019d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d0a:	462a      	mov	r2, r5
 8019d0c:	f000 fd48 	bl	801a7a0 <_realloc_r>
 8019d10:	4606      	mov	r6, r0
 8019d12:	2800      	cmp	r0, #0
 8019d14:	d1e0      	bne.n	8019cd8 <__ssputs_r+0x5c>
 8019d16:	6921      	ldr	r1, [r4, #16]
 8019d18:	4650      	mov	r0, sl
 8019d1a:	f7ff feb7 	bl	8019a8c <_free_r>
 8019d1e:	230c      	movs	r3, #12
 8019d20:	f8ca 3000 	str.w	r3, [sl]
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d2a:	81a3      	strh	r3, [r4, #12]
 8019d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d30:	e7e9      	b.n	8019d06 <__ssputs_r+0x8a>
	...

08019d34 <_svfiprintf_r>:
 8019d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d38:	4698      	mov	r8, r3
 8019d3a:	898b      	ldrh	r3, [r1, #12]
 8019d3c:	061b      	lsls	r3, r3, #24
 8019d3e:	b09d      	sub	sp, #116	@ 0x74
 8019d40:	4607      	mov	r7, r0
 8019d42:	460d      	mov	r5, r1
 8019d44:	4614      	mov	r4, r2
 8019d46:	d510      	bpl.n	8019d6a <_svfiprintf_r+0x36>
 8019d48:	690b      	ldr	r3, [r1, #16]
 8019d4a:	b973      	cbnz	r3, 8019d6a <_svfiprintf_r+0x36>
 8019d4c:	2140      	movs	r1, #64	@ 0x40
 8019d4e:	f7ff ff09 	bl	8019b64 <_malloc_r>
 8019d52:	6028      	str	r0, [r5, #0]
 8019d54:	6128      	str	r0, [r5, #16]
 8019d56:	b930      	cbnz	r0, 8019d66 <_svfiprintf_r+0x32>
 8019d58:	230c      	movs	r3, #12
 8019d5a:	603b      	str	r3, [r7, #0]
 8019d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d60:	b01d      	add	sp, #116	@ 0x74
 8019d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d66:	2340      	movs	r3, #64	@ 0x40
 8019d68:	616b      	str	r3, [r5, #20]
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d6e:	2320      	movs	r3, #32
 8019d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d78:	2330      	movs	r3, #48	@ 0x30
 8019d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019f18 <_svfiprintf_r+0x1e4>
 8019d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019d82:	f04f 0901 	mov.w	r9, #1
 8019d86:	4623      	mov	r3, r4
 8019d88:	469a      	mov	sl, r3
 8019d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d8e:	b10a      	cbz	r2, 8019d94 <_svfiprintf_r+0x60>
 8019d90:	2a25      	cmp	r2, #37	@ 0x25
 8019d92:	d1f9      	bne.n	8019d88 <_svfiprintf_r+0x54>
 8019d94:	ebba 0b04 	subs.w	fp, sl, r4
 8019d98:	d00b      	beq.n	8019db2 <_svfiprintf_r+0x7e>
 8019d9a:	465b      	mov	r3, fp
 8019d9c:	4622      	mov	r2, r4
 8019d9e:	4629      	mov	r1, r5
 8019da0:	4638      	mov	r0, r7
 8019da2:	f7ff ff6b 	bl	8019c7c <__ssputs_r>
 8019da6:	3001      	adds	r0, #1
 8019da8:	f000 80a7 	beq.w	8019efa <_svfiprintf_r+0x1c6>
 8019dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019dae:	445a      	add	r2, fp
 8019db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8019db2:	f89a 3000 	ldrb.w	r3, [sl]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f000 809f 	beq.w	8019efa <_svfiprintf_r+0x1c6>
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8019dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019dc6:	f10a 0a01 	add.w	sl, sl, #1
 8019dca:	9304      	str	r3, [sp, #16]
 8019dcc:	9307      	str	r3, [sp, #28]
 8019dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8019dd4:	4654      	mov	r4, sl
 8019dd6:	2205      	movs	r2, #5
 8019dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ddc:	484e      	ldr	r0, [pc, #312]	@ (8019f18 <_svfiprintf_r+0x1e4>)
 8019dde:	f7e6 fa7f 	bl	80002e0 <memchr>
 8019de2:	9a04      	ldr	r2, [sp, #16]
 8019de4:	b9d8      	cbnz	r0, 8019e1e <_svfiprintf_r+0xea>
 8019de6:	06d0      	lsls	r0, r2, #27
 8019de8:	bf44      	itt	mi
 8019dea:	2320      	movmi	r3, #32
 8019dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019df0:	0711      	lsls	r1, r2, #28
 8019df2:	bf44      	itt	mi
 8019df4:	232b      	movmi	r3, #43	@ 0x2b
 8019df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8019dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e00:	d015      	beq.n	8019e2e <_svfiprintf_r+0xfa>
 8019e02:	9a07      	ldr	r2, [sp, #28]
 8019e04:	4654      	mov	r4, sl
 8019e06:	2000      	movs	r0, #0
 8019e08:	f04f 0c0a 	mov.w	ip, #10
 8019e0c:	4621      	mov	r1, r4
 8019e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e12:	3b30      	subs	r3, #48	@ 0x30
 8019e14:	2b09      	cmp	r3, #9
 8019e16:	d94b      	bls.n	8019eb0 <_svfiprintf_r+0x17c>
 8019e18:	b1b0      	cbz	r0, 8019e48 <_svfiprintf_r+0x114>
 8019e1a:	9207      	str	r2, [sp, #28]
 8019e1c:	e014      	b.n	8019e48 <_svfiprintf_r+0x114>
 8019e1e:	eba0 0308 	sub.w	r3, r0, r8
 8019e22:	fa09 f303 	lsl.w	r3, r9, r3
 8019e26:	4313      	orrs	r3, r2
 8019e28:	9304      	str	r3, [sp, #16]
 8019e2a:	46a2      	mov	sl, r4
 8019e2c:	e7d2      	b.n	8019dd4 <_svfiprintf_r+0xa0>
 8019e2e:	9b03      	ldr	r3, [sp, #12]
 8019e30:	1d19      	adds	r1, r3, #4
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	9103      	str	r1, [sp, #12]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	bfbb      	ittet	lt
 8019e3a:	425b      	neglt	r3, r3
 8019e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8019e40:	9307      	strge	r3, [sp, #28]
 8019e42:	9307      	strlt	r3, [sp, #28]
 8019e44:	bfb8      	it	lt
 8019e46:	9204      	strlt	r2, [sp, #16]
 8019e48:	7823      	ldrb	r3, [r4, #0]
 8019e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019e4c:	d10a      	bne.n	8019e64 <_svfiprintf_r+0x130>
 8019e4e:	7863      	ldrb	r3, [r4, #1]
 8019e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e52:	d132      	bne.n	8019eba <_svfiprintf_r+0x186>
 8019e54:	9b03      	ldr	r3, [sp, #12]
 8019e56:	1d1a      	adds	r2, r3, #4
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	9203      	str	r2, [sp, #12]
 8019e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019e60:	3402      	adds	r4, #2
 8019e62:	9305      	str	r3, [sp, #20]
 8019e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019f28 <_svfiprintf_r+0x1f4>
 8019e68:	7821      	ldrb	r1, [r4, #0]
 8019e6a:	2203      	movs	r2, #3
 8019e6c:	4650      	mov	r0, sl
 8019e6e:	f7e6 fa37 	bl	80002e0 <memchr>
 8019e72:	b138      	cbz	r0, 8019e84 <_svfiprintf_r+0x150>
 8019e74:	9b04      	ldr	r3, [sp, #16]
 8019e76:	eba0 000a 	sub.w	r0, r0, sl
 8019e7a:	2240      	movs	r2, #64	@ 0x40
 8019e7c:	4082      	lsls	r2, r0
 8019e7e:	4313      	orrs	r3, r2
 8019e80:	3401      	adds	r4, #1
 8019e82:	9304      	str	r3, [sp, #16]
 8019e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e88:	4824      	ldr	r0, [pc, #144]	@ (8019f1c <_svfiprintf_r+0x1e8>)
 8019e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019e8e:	2206      	movs	r2, #6
 8019e90:	f7e6 fa26 	bl	80002e0 <memchr>
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d036      	beq.n	8019f06 <_svfiprintf_r+0x1d2>
 8019e98:	4b21      	ldr	r3, [pc, #132]	@ (8019f20 <_svfiprintf_r+0x1ec>)
 8019e9a:	bb1b      	cbnz	r3, 8019ee4 <_svfiprintf_r+0x1b0>
 8019e9c:	9b03      	ldr	r3, [sp, #12]
 8019e9e:	3307      	adds	r3, #7
 8019ea0:	f023 0307 	bic.w	r3, r3, #7
 8019ea4:	3308      	adds	r3, #8
 8019ea6:	9303      	str	r3, [sp, #12]
 8019ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019eaa:	4433      	add	r3, r6
 8019eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8019eae:	e76a      	b.n	8019d86 <_svfiprintf_r+0x52>
 8019eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8019eb4:	460c      	mov	r4, r1
 8019eb6:	2001      	movs	r0, #1
 8019eb8:	e7a8      	b.n	8019e0c <_svfiprintf_r+0xd8>
 8019eba:	2300      	movs	r3, #0
 8019ebc:	3401      	adds	r4, #1
 8019ebe:	9305      	str	r3, [sp, #20]
 8019ec0:	4619      	mov	r1, r3
 8019ec2:	f04f 0c0a 	mov.w	ip, #10
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ecc:	3a30      	subs	r2, #48	@ 0x30
 8019ece:	2a09      	cmp	r2, #9
 8019ed0:	d903      	bls.n	8019eda <_svfiprintf_r+0x1a6>
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d0c6      	beq.n	8019e64 <_svfiprintf_r+0x130>
 8019ed6:	9105      	str	r1, [sp, #20]
 8019ed8:	e7c4      	b.n	8019e64 <_svfiprintf_r+0x130>
 8019eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ede:	4604      	mov	r4, r0
 8019ee0:	2301      	movs	r3, #1
 8019ee2:	e7f0      	b.n	8019ec6 <_svfiprintf_r+0x192>
 8019ee4:	ab03      	add	r3, sp, #12
 8019ee6:	9300      	str	r3, [sp, #0]
 8019ee8:	462a      	mov	r2, r5
 8019eea:	4b0e      	ldr	r3, [pc, #56]	@ (8019f24 <_svfiprintf_r+0x1f0>)
 8019eec:	a904      	add	r1, sp, #16
 8019eee:	4638      	mov	r0, r7
 8019ef0:	f3af 8000 	nop.w
 8019ef4:	1c42      	adds	r2, r0, #1
 8019ef6:	4606      	mov	r6, r0
 8019ef8:	d1d6      	bne.n	8019ea8 <_svfiprintf_r+0x174>
 8019efa:	89ab      	ldrh	r3, [r5, #12]
 8019efc:	065b      	lsls	r3, r3, #25
 8019efe:	f53f af2d 	bmi.w	8019d5c <_svfiprintf_r+0x28>
 8019f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f04:	e72c      	b.n	8019d60 <_svfiprintf_r+0x2c>
 8019f06:	ab03      	add	r3, sp, #12
 8019f08:	9300      	str	r3, [sp, #0]
 8019f0a:	462a      	mov	r2, r5
 8019f0c:	4b05      	ldr	r3, [pc, #20]	@ (8019f24 <_svfiprintf_r+0x1f0>)
 8019f0e:	a904      	add	r1, sp, #16
 8019f10:	4638      	mov	r0, r7
 8019f12:	f000 f9bb 	bl	801a28c <_printf_i>
 8019f16:	e7ed      	b.n	8019ef4 <_svfiprintf_r+0x1c0>
 8019f18:	0801b67c 	.word	0x0801b67c
 8019f1c:	0801b686 	.word	0x0801b686
 8019f20:	00000000 	.word	0x00000000
 8019f24:	08019c7d 	.word	0x08019c7d
 8019f28:	0801b682 	.word	0x0801b682

08019f2c <__sfputc_r>:
 8019f2c:	6893      	ldr	r3, [r2, #8]
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	b410      	push	{r4}
 8019f34:	6093      	str	r3, [r2, #8]
 8019f36:	da08      	bge.n	8019f4a <__sfputc_r+0x1e>
 8019f38:	6994      	ldr	r4, [r2, #24]
 8019f3a:	42a3      	cmp	r3, r4
 8019f3c:	db01      	blt.n	8019f42 <__sfputc_r+0x16>
 8019f3e:	290a      	cmp	r1, #10
 8019f40:	d103      	bne.n	8019f4a <__sfputc_r+0x1e>
 8019f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f46:	f000 bb6d 	b.w	801a624 <__swbuf_r>
 8019f4a:	6813      	ldr	r3, [r2, #0]
 8019f4c:	1c58      	adds	r0, r3, #1
 8019f4e:	6010      	str	r0, [r2, #0]
 8019f50:	7019      	strb	r1, [r3, #0]
 8019f52:	4608      	mov	r0, r1
 8019f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f58:	4770      	bx	lr

08019f5a <__sfputs_r>:
 8019f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	460f      	mov	r7, r1
 8019f60:	4614      	mov	r4, r2
 8019f62:	18d5      	adds	r5, r2, r3
 8019f64:	42ac      	cmp	r4, r5
 8019f66:	d101      	bne.n	8019f6c <__sfputs_r+0x12>
 8019f68:	2000      	movs	r0, #0
 8019f6a:	e007      	b.n	8019f7c <__sfputs_r+0x22>
 8019f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f70:	463a      	mov	r2, r7
 8019f72:	4630      	mov	r0, r6
 8019f74:	f7ff ffda 	bl	8019f2c <__sfputc_r>
 8019f78:	1c43      	adds	r3, r0, #1
 8019f7a:	d1f3      	bne.n	8019f64 <__sfputs_r+0xa>
 8019f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f80 <_vfiprintf_r>:
 8019f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f84:	460d      	mov	r5, r1
 8019f86:	b09d      	sub	sp, #116	@ 0x74
 8019f88:	4614      	mov	r4, r2
 8019f8a:	4698      	mov	r8, r3
 8019f8c:	4606      	mov	r6, r0
 8019f8e:	b118      	cbz	r0, 8019f98 <_vfiprintf_r+0x18>
 8019f90:	6a03      	ldr	r3, [r0, #32]
 8019f92:	b90b      	cbnz	r3, 8019f98 <_vfiprintf_r+0x18>
 8019f94:	f7ff fc44 	bl	8019820 <__sinit>
 8019f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f9a:	07d9      	lsls	r1, r3, #31
 8019f9c:	d405      	bmi.n	8019faa <_vfiprintf_r+0x2a>
 8019f9e:	89ab      	ldrh	r3, [r5, #12]
 8019fa0:	059a      	lsls	r2, r3, #22
 8019fa2:	d402      	bmi.n	8019faa <_vfiprintf_r+0x2a>
 8019fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fa6:	f7ff fd60 	bl	8019a6a <__retarget_lock_acquire_recursive>
 8019faa:	89ab      	ldrh	r3, [r5, #12]
 8019fac:	071b      	lsls	r3, r3, #28
 8019fae:	d501      	bpl.n	8019fb4 <_vfiprintf_r+0x34>
 8019fb0:	692b      	ldr	r3, [r5, #16]
 8019fb2:	b99b      	cbnz	r3, 8019fdc <_vfiprintf_r+0x5c>
 8019fb4:	4629      	mov	r1, r5
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	f000 fb72 	bl	801a6a0 <__swsetup_r>
 8019fbc:	b170      	cbz	r0, 8019fdc <_vfiprintf_r+0x5c>
 8019fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019fc0:	07dc      	lsls	r4, r3, #31
 8019fc2:	d504      	bpl.n	8019fce <_vfiprintf_r+0x4e>
 8019fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc8:	b01d      	add	sp, #116	@ 0x74
 8019fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fce:	89ab      	ldrh	r3, [r5, #12]
 8019fd0:	0598      	lsls	r0, r3, #22
 8019fd2:	d4f7      	bmi.n	8019fc4 <_vfiprintf_r+0x44>
 8019fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fd6:	f7ff fd49 	bl	8019a6c <__retarget_lock_release_recursive>
 8019fda:	e7f3      	b.n	8019fc4 <_vfiprintf_r+0x44>
 8019fdc:	2300      	movs	r3, #0
 8019fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fe0:	2320      	movs	r3, #32
 8019fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fea:	2330      	movs	r3, #48	@ 0x30
 8019fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a19c <_vfiprintf_r+0x21c>
 8019ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ff4:	f04f 0901 	mov.w	r9, #1
 8019ff8:	4623      	mov	r3, r4
 8019ffa:	469a      	mov	sl, r3
 8019ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a000:	b10a      	cbz	r2, 801a006 <_vfiprintf_r+0x86>
 801a002:	2a25      	cmp	r2, #37	@ 0x25
 801a004:	d1f9      	bne.n	8019ffa <_vfiprintf_r+0x7a>
 801a006:	ebba 0b04 	subs.w	fp, sl, r4
 801a00a:	d00b      	beq.n	801a024 <_vfiprintf_r+0xa4>
 801a00c:	465b      	mov	r3, fp
 801a00e:	4622      	mov	r2, r4
 801a010:	4629      	mov	r1, r5
 801a012:	4630      	mov	r0, r6
 801a014:	f7ff ffa1 	bl	8019f5a <__sfputs_r>
 801a018:	3001      	adds	r0, #1
 801a01a:	f000 80a7 	beq.w	801a16c <_vfiprintf_r+0x1ec>
 801a01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a020:	445a      	add	r2, fp
 801a022:	9209      	str	r2, [sp, #36]	@ 0x24
 801a024:	f89a 3000 	ldrb.w	r3, [sl]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f000 809f 	beq.w	801a16c <_vfiprintf_r+0x1ec>
 801a02e:	2300      	movs	r3, #0
 801a030:	f04f 32ff 	mov.w	r2, #4294967295
 801a034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a038:	f10a 0a01 	add.w	sl, sl, #1
 801a03c:	9304      	str	r3, [sp, #16]
 801a03e:	9307      	str	r3, [sp, #28]
 801a040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a044:	931a      	str	r3, [sp, #104]	@ 0x68
 801a046:	4654      	mov	r4, sl
 801a048:	2205      	movs	r2, #5
 801a04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a04e:	4853      	ldr	r0, [pc, #332]	@ (801a19c <_vfiprintf_r+0x21c>)
 801a050:	f7e6 f946 	bl	80002e0 <memchr>
 801a054:	9a04      	ldr	r2, [sp, #16]
 801a056:	b9d8      	cbnz	r0, 801a090 <_vfiprintf_r+0x110>
 801a058:	06d1      	lsls	r1, r2, #27
 801a05a:	bf44      	itt	mi
 801a05c:	2320      	movmi	r3, #32
 801a05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a062:	0713      	lsls	r3, r2, #28
 801a064:	bf44      	itt	mi
 801a066:	232b      	movmi	r3, #43	@ 0x2b
 801a068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a06c:	f89a 3000 	ldrb.w	r3, [sl]
 801a070:	2b2a      	cmp	r3, #42	@ 0x2a
 801a072:	d015      	beq.n	801a0a0 <_vfiprintf_r+0x120>
 801a074:	9a07      	ldr	r2, [sp, #28]
 801a076:	4654      	mov	r4, sl
 801a078:	2000      	movs	r0, #0
 801a07a:	f04f 0c0a 	mov.w	ip, #10
 801a07e:	4621      	mov	r1, r4
 801a080:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a084:	3b30      	subs	r3, #48	@ 0x30
 801a086:	2b09      	cmp	r3, #9
 801a088:	d94b      	bls.n	801a122 <_vfiprintf_r+0x1a2>
 801a08a:	b1b0      	cbz	r0, 801a0ba <_vfiprintf_r+0x13a>
 801a08c:	9207      	str	r2, [sp, #28]
 801a08e:	e014      	b.n	801a0ba <_vfiprintf_r+0x13a>
 801a090:	eba0 0308 	sub.w	r3, r0, r8
 801a094:	fa09 f303 	lsl.w	r3, r9, r3
 801a098:	4313      	orrs	r3, r2
 801a09a:	9304      	str	r3, [sp, #16]
 801a09c:	46a2      	mov	sl, r4
 801a09e:	e7d2      	b.n	801a046 <_vfiprintf_r+0xc6>
 801a0a0:	9b03      	ldr	r3, [sp, #12]
 801a0a2:	1d19      	adds	r1, r3, #4
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	9103      	str	r1, [sp, #12]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	bfbb      	ittet	lt
 801a0ac:	425b      	neglt	r3, r3
 801a0ae:	f042 0202 	orrlt.w	r2, r2, #2
 801a0b2:	9307      	strge	r3, [sp, #28]
 801a0b4:	9307      	strlt	r3, [sp, #28]
 801a0b6:	bfb8      	it	lt
 801a0b8:	9204      	strlt	r2, [sp, #16]
 801a0ba:	7823      	ldrb	r3, [r4, #0]
 801a0bc:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0be:	d10a      	bne.n	801a0d6 <_vfiprintf_r+0x156>
 801a0c0:	7863      	ldrb	r3, [r4, #1]
 801a0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0c4:	d132      	bne.n	801a12c <_vfiprintf_r+0x1ac>
 801a0c6:	9b03      	ldr	r3, [sp, #12]
 801a0c8:	1d1a      	adds	r2, r3, #4
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	9203      	str	r2, [sp, #12]
 801a0ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0d2:	3402      	adds	r4, #2
 801a0d4:	9305      	str	r3, [sp, #20]
 801a0d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a1ac <_vfiprintf_r+0x22c>
 801a0da:	7821      	ldrb	r1, [r4, #0]
 801a0dc:	2203      	movs	r2, #3
 801a0de:	4650      	mov	r0, sl
 801a0e0:	f7e6 f8fe 	bl	80002e0 <memchr>
 801a0e4:	b138      	cbz	r0, 801a0f6 <_vfiprintf_r+0x176>
 801a0e6:	9b04      	ldr	r3, [sp, #16]
 801a0e8:	eba0 000a 	sub.w	r0, r0, sl
 801a0ec:	2240      	movs	r2, #64	@ 0x40
 801a0ee:	4082      	lsls	r2, r0
 801a0f0:	4313      	orrs	r3, r2
 801a0f2:	3401      	adds	r4, #1
 801a0f4:	9304      	str	r3, [sp, #16]
 801a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0fa:	4829      	ldr	r0, [pc, #164]	@ (801a1a0 <_vfiprintf_r+0x220>)
 801a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a100:	2206      	movs	r2, #6
 801a102:	f7e6 f8ed 	bl	80002e0 <memchr>
 801a106:	2800      	cmp	r0, #0
 801a108:	d03f      	beq.n	801a18a <_vfiprintf_r+0x20a>
 801a10a:	4b26      	ldr	r3, [pc, #152]	@ (801a1a4 <_vfiprintf_r+0x224>)
 801a10c:	bb1b      	cbnz	r3, 801a156 <_vfiprintf_r+0x1d6>
 801a10e:	9b03      	ldr	r3, [sp, #12]
 801a110:	3307      	adds	r3, #7
 801a112:	f023 0307 	bic.w	r3, r3, #7
 801a116:	3308      	adds	r3, #8
 801a118:	9303      	str	r3, [sp, #12]
 801a11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a11c:	443b      	add	r3, r7
 801a11e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a120:	e76a      	b.n	8019ff8 <_vfiprintf_r+0x78>
 801a122:	fb0c 3202 	mla	r2, ip, r2, r3
 801a126:	460c      	mov	r4, r1
 801a128:	2001      	movs	r0, #1
 801a12a:	e7a8      	b.n	801a07e <_vfiprintf_r+0xfe>
 801a12c:	2300      	movs	r3, #0
 801a12e:	3401      	adds	r4, #1
 801a130:	9305      	str	r3, [sp, #20]
 801a132:	4619      	mov	r1, r3
 801a134:	f04f 0c0a 	mov.w	ip, #10
 801a138:	4620      	mov	r0, r4
 801a13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a13e:	3a30      	subs	r2, #48	@ 0x30
 801a140:	2a09      	cmp	r2, #9
 801a142:	d903      	bls.n	801a14c <_vfiprintf_r+0x1cc>
 801a144:	2b00      	cmp	r3, #0
 801a146:	d0c6      	beq.n	801a0d6 <_vfiprintf_r+0x156>
 801a148:	9105      	str	r1, [sp, #20]
 801a14a:	e7c4      	b.n	801a0d6 <_vfiprintf_r+0x156>
 801a14c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a150:	4604      	mov	r4, r0
 801a152:	2301      	movs	r3, #1
 801a154:	e7f0      	b.n	801a138 <_vfiprintf_r+0x1b8>
 801a156:	ab03      	add	r3, sp, #12
 801a158:	9300      	str	r3, [sp, #0]
 801a15a:	462a      	mov	r2, r5
 801a15c:	4b12      	ldr	r3, [pc, #72]	@ (801a1a8 <_vfiprintf_r+0x228>)
 801a15e:	a904      	add	r1, sp, #16
 801a160:	4630      	mov	r0, r6
 801a162:	f3af 8000 	nop.w
 801a166:	4607      	mov	r7, r0
 801a168:	1c78      	adds	r0, r7, #1
 801a16a:	d1d6      	bne.n	801a11a <_vfiprintf_r+0x19a>
 801a16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a16e:	07d9      	lsls	r1, r3, #31
 801a170:	d405      	bmi.n	801a17e <_vfiprintf_r+0x1fe>
 801a172:	89ab      	ldrh	r3, [r5, #12]
 801a174:	059a      	lsls	r2, r3, #22
 801a176:	d402      	bmi.n	801a17e <_vfiprintf_r+0x1fe>
 801a178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a17a:	f7ff fc77 	bl	8019a6c <__retarget_lock_release_recursive>
 801a17e:	89ab      	ldrh	r3, [r5, #12]
 801a180:	065b      	lsls	r3, r3, #25
 801a182:	f53f af1f 	bmi.w	8019fc4 <_vfiprintf_r+0x44>
 801a186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a188:	e71e      	b.n	8019fc8 <_vfiprintf_r+0x48>
 801a18a:	ab03      	add	r3, sp, #12
 801a18c:	9300      	str	r3, [sp, #0]
 801a18e:	462a      	mov	r2, r5
 801a190:	4b05      	ldr	r3, [pc, #20]	@ (801a1a8 <_vfiprintf_r+0x228>)
 801a192:	a904      	add	r1, sp, #16
 801a194:	4630      	mov	r0, r6
 801a196:	f000 f879 	bl	801a28c <_printf_i>
 801a19a:	e7e4      	b.n	801a166 <_vfiprintf_r+0x1e6>
 801a19c:	0801b67c 	.word	0x0801b67c
 801a1a0:	0801b686 	.word	0x0801b686
 801a1a4:	00000000 	.word	0x00000000
 801a1a8:	08019f5b 	.word	0x08019f5b
 801a1ac:	0801b682 	.word	0x0801b682

0801a1b0 <_printf_common>:
 801a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1b4:	4616      	mov	r6, r2
 801a1b6:	4698      	mov	r8, r3
 801a1b8:	688a      	ldr	r2, [r1, #8]
 801a1ba:	690b      	ldr	r3, [r1, #16]
 801a1bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	bfb8      	it	lt
 801a1c4:	4613      	movlt	r3, r2
 801a1c6:	6033      	str	r3, [r6, #0]
 801a1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a1cc:	4607      	mov	r7, r0
 801a1ce:	460c      	mov	r4, r1
 801a1d0:	b10a      	cbz	r2, 801a1d6 <_printf_common+0x26>
 801a1d2:	3301      	adds	r3, #1
 801a1d4:	6033      	str	r3, [r6, #0]
 801a1d6:	6823      	ldr	r3, [r4, #0]
 801a1d8:	0699      	lsls	r1, r3, #26
 801a1da:	bf42      	ittt	mi
 801a1dc:	6833      	ldrmi	r3, [r6, #0]
 801a1de:	3302      	addmi	r3, #2
 801a1e0:	6033      	strmi	r3, [r6, #0]
 801a1e2:	6825      	ldr	r5, [r4, #0]
 801a1e4:	f015 0506 	ands.w	r5, r5, #6
 801a1e8:	d106      	bne.n	801a1f8 <_printf_common+0x48>
 801a1ea:	f104 0a19 	add.w	sl, r4, #25
 801a1ee:	68e3      	ldr	r3, [r4, #12]
 801a1f0:	6832      	ldr	r2, [r6, #0]
 801a1f2:	1a9b      	subs	r3, r3, r2
 801a1f4:	42ab      	cmp	r3, r5
 801a1f6:	dc26      	bgt.n	801a246 <_printf_common+0x96>
 801a1f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a1fc:	6822      	ldr	r2, [r4, #0]
 801a1fe:	3b00      	subs	r3, #0
 801a200:	bf18      	it	ne
 801a202:	2301      	movne	r3, #1
 801a204:	0692      	lsls	r2, r2, #26
 801a206:	d42b      	bmi.n	801a260 <_printf_common+0xb0>
 801a208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a20c:	4641      	mov	r1, r8
 801a20e:	4638      	mov	r0, r7
 801a210:	47c8      	blx	r9
 801a212:	3001      	adds	r0, #1
 801a214:	d01e      	beq.n	801a254 <_printf_common+0xa4>
 801a216:	6823      	ldr	r3, [r4, #0]
 801a218:	6922      	ldr	r2, [r4, #16]
 801a21a:	f003 0306 	and.w	r3, r3, #6
 801a21e:	2b04      	cmp	r3, #4
 801a220:	bf02      	ittt	eq
 801a222:	68e5      	ldreq	r5, [r4, #12]
 801a224:	6833      	ldreq	r3, [r6, #0]
 801a226:	1aed      	subeq	r5, r5, r3
 801a228:	68a3      	ldr	r3, [r4, #8]
 801a22a:	bf0c      	ite	eq
 801a22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a230:	2500      	movne	r5, #0
 801a232:	4293      	cmp	r3, r2
 801a234:	bfc4      	itt	gt
 801a236:	1a9b      	subgt	r3, r3, r2
 801a238:	18ed      	addgt	r5, r5, r3
 801a23a:	2600      	movs	r6, #0
 801a23c:	341a      	adds	r4, #26
 801a23e:	42b5      	cmp	r5, r6
 801a240:	d11a      	bne.n	801a278 <_printf_common+0xc8>
 801a242:	2000      	movs	r0, #0
 801a244:	e008      	b.n	801a258 <_printf_common+0xa8>
 801a246:	2301      	movs	r3, #1
 801a248:	4652      	mov	r2, sl
 801a24a:	4641      	mov	r1, r8
 801a24c:	4638      	mov	r0, r7
 801a24e:	47c8      	blx	r9
 801a250:	3001      	adds	r0, #1
 801a252:	d103      	bne.n	801a25c <_printf_common+0xac>
 801a254:	f04f 30ff 	mov.w	r0, #4294967295
 801a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a25c:	3501      	adds	r5, #1
 801a25e:	e7c6      	b.n	801a1ee <_printf_common+0x3e>
 801a260:	18e1      	adds	r1, r4, r3
 801a262:	1c5a      	adds	r2, r3, #1
 801a264:	2030      	movs	r0, #48	@ 0x30
 801a266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a26a:	4422      	add	r2, r4
 801a26c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a274:	3302      	adds	r3, #2
 801a276:	e7c7      	b.n	801a208 <_printf_common+0x58>
 801a278:	2301      	movs	r3, #1
 801a27a:	4622      	mov	r2, r4
 801a27c:	4641      	mov	r1, r8
 801a27e:	4638      	mov	r0, r7
 801a280:	47c8      	blx	r9
 801a282:	3001      	adds	r0, #1
 801a284:	d0e6      	beq.n	801a254 <_printf_common+0xa4>
 801a286:	3601      	adds	r6, #1
 801a288:	e7d9      	b.n	801a23e <_printf_common+0x8e>
	...

0801a28c <_printf_i>:
 801a28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a290:	7e0f      	ldrb	r7, [r1, #24]
 801a292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a294:	2f78      	cmp	r7, #120	@ 0x78
 801a296:	4691      	mov	r9, r2
 801a298:	4680      	mov	r8, r0
 801a29a:	460c      	mov	r4, r1
 801a29c:	469a      	mov	sl, r3
 801a29e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a2a2:	d807      	bhi.n	801a2b4 <_printf_i+0x28>
 801a2a4:	2f62      	cmp	r7, #98	@ 0x62
 801a2a6:	d80a      	bhi.n	801a2be <_printf_i+0x32>
 801a2a8:	2f00      	cmp	r7, #0
 801a2aa:	f000 80d2 	beq.w	801a452 <_printf_i+0x1c6>
 801a2ae:	2f58      	cmp	r7, #88	@ 0x58
 801a2b0:	f000 80b9 	beq.w	801a426 <_printf_i+0x19a>
 801a2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a2b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a2bc:	e03a      	b.n	801a334 <_printf_i+0xa8>
 801a2be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a2c2:	2b15      	cmp	r3, #21
 801a2c4:	d8f6      	bhi.n	801a2b4 <_printf_i+0x28>
 801a2c6:	a101      	add	r1, pc, #4	@ (adr r1, 801a2cc <_printf_i+0x40>)
 801a2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a2cc:	0801a325 	.word	0x0801a325
 801a2d0:	0801a339 	.word	0x0801a339
 801a2d4:	0801a2b5 	.word	0x0801a2b5
 801a2d8:	0801a2b5 	.word	0x0801a2b5
 801a2dc:	0801a2b5 	.word	0x0801a2b5
 801a2e0:	0801a2b5 	.word	0x0801a2b5
 801a2e4:	0801a339 	.word	0x0801a339
 801a2e8:	0801a2b5 	.word	0x0801a2b5
 801a2ec:	0801a2b5 	.word	0x0801a2b5
 801a2f0:	0801a2b5 	.word	0x0801a2b5
 801a2f4:	0801a2b5 	.word	0x0801a2b5
 801a2f8:	0801a439 	.word	0x0801a439
 801a2fc:	0801a363 	.word	0x0801a363
 801a300:	0801a3f3 	.word	0x0801a3f3
 801a304:	0801a2b5 	.word	0x0801a2b5
 801a308:	0801a2b5 	.word	0x0801a2b5
 801a30c:	0801a45b 	.word	0x0801a45b
 801a310:	0801a2b5 	.word	0x0801a2b5
 801a314:	0801a363 	.word	0x0801a363
 801a318:	0801a2b5 	.word	0x0801a2b5
 801a31c:	0801a2b5 	.word	0x0801a2b5
 801a320:	0801a3fb 	.word	0x0801a3fb
 801a324:	6833      	ldr	r3, [r6, #0]
 801a326:	1d1a      	adds	r2, r3, #4
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	6032      	str	r2, [r6, #0]
 801a32c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a334:	2301      	movs	r3, #1
 801a336:	e09d      	b.n	801a474 <_printf_i+0x1e8>
 801a338:	6833      	ldr	r3, [r6, #0]
 801a33a:	6820      	ldr	r0, [r4, #0]
 801a33c:	1d19      	adds	r1, r3, #4
 801a33e:	6031      	str	r1, [r6, #0]
 801a340:	0606      	lsls	r6, r0, #24
 801a342:	d501      	bpl.n	801a348 <_printf_i+0xbc>
 801a344:	681d      	ldr	r5, [r3, #0]
 801a346:	e003      	b.n	801a350 <_printf_i+0xc4>
 801a348:	0645      	lsls	r5, r0, #25
 801a34a:	d5fb      	bpl.n	801a344 <_printf_i+0xb8>
 801a34c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a350:	2d00      	cmp	r5, #0
 801a352:	da03      	bge.n	801a35c <_printf_i+0xd0>
 801a354:	232d      	movs	r3, #45	@ 0x2d
 801a356:	426d      	negs	r5, r5
 801a358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a35c:	4859      	ldr	r0, [pc, #356]	@ (801a4c4 <_printf_i+0x238>)
 801a35e:	230a      	movs	r3, #10
 801a360:	e011      	b.n	801a386 <_printf_i+0xfa>
 801a362:	6821      	ldr	r1, [r4, #0]
 801a364:	6833      	ldr	r3, [r6, #0]
 801a366:	0608      	lsls	r0, r1, #24
 801a368:	f853 5b04 	ldr.w	r5, [r3], #4
 801a36c:	d402      	bmi.n	801a374 <_printf_i+0xe8>
 801a36e:	0649      	lsls	r1, r1, #25
 801a370:	bf48      	it	mi
 801a372:	b2ad      	uxthmi	r5, r5
 801a374:	2f6f      	cmp	r7, #111	@ 0x6f
 801a376:	4853      	ldr	r0, [pc, #332]	@ (801a4c4 <_printf_i+0x238>)
 801a378:	6033      	str	r3, [r6, #0]
 801a37a:	bf14      	ite	ne
 801a37c:	230a      	movne	r3, #10
 801a37e:	2308      	moveq	r3, #8
 801a380:	2100      	movs	r1, #0
 801a382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a386:	6866      	ldr	r6, [r4, #4]
 801a388:	60a6      	str	r6, [r4, #8]
 801a38a:	2e00      	cmp	r6, #0
 801a38c:	bfa2      	ittt	ge
 801a38e:	6821      	ldrge	r1, [r4, #0]
 801a390:	f021 0104 	bicge.w	r1, r1, #4
 801a394:	6021      	strge	r1, [r4, #0]
 801a396:	b90d      	cbnz	r5, 801a39c <_printf_i+0x110>
 801a398:	2e00      	cmp	r6, #0
 801a39a:	d04b      	beq.n	801a434 <_printf_i+0x1a8>
 801a39c:	4616      	mov	r6, r2
 801a39e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a3a2:	fb03 5711 	mls	r7, r3, r1, r5
 801a3a6:	5dc7      	ldrb	r7, [r0, r7]
 801a3a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a3ac:	462f      	mov	r7, r5
 801a3ae:	42bb      	cmp	r3, r7
 801a3b0:	460d      	mov	r5, r1
 801a3b2:	d9f4      	bls.n	801a39e <_printf_i+0x112>
 801a3b4:	2b08      	cmp	r3, #8
 801a3b6:	d10b      	bne.n	801a3d0 <_printf_i+0x144>
 801a3b8:	6823      	ldr	r3, [r4, #0]
 801a3ba:	07df      	lsls	r7, r3, #31
 801a3bc:	d508      	bpl.n	801a3d0 <_printf_i+0x144>
 801a3be:	6923      	ldr	r3, [r4, #16]
 801a3c0:	6861      	ldr	r1, [r4, #4]
 801a3c2:	4299      	cmp	r1, r3
 801a3c4:	bfde      	ittt	le
 801a3c6:	2330      	movle	r3, #48	@ 0x30
 801a3c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a3d0:	1b92      	subs	r2, r2, r6
 801a3d2:	6122      	str	r2, [r4, #16]
 801a3d4:	f8cd a000 	str.w	sl, [sp]
 801a3d8:	464b      	mov	r3, r9
 801a3da:	aa03      	add	r2, sp, #12
 801a3dc:	4621      	mov	r1, r4
 801a3de:	4640      	mov	r0, r8
 801a3e0:	f7ff fee6 	bl	801a1b0 <_printf_common>
 801a3e4:	3001      	adds	r0, #1
 801a3e6:	d14a      	bne.n	801a47e <_printf_i+0x1f2>
 801a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ec:	b004      	add	sp, #16
 801a3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f2:	6823      	ldr	r3, [r4, #0]
 801a3f4:	f043 0320 	orr.w	r3, r3, #32
 801a3f8:	6023      	str	r3, [r4, #0]
 801a3fa:	4833      	ldr	r0, [pc, #204]	@ (801a4c8 <_printf_i+0x23c>)
 801a3fc:	2778      	movs	r7, #120	@ 0x78
 801a3fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a402:	6823      	ldr	r3, [r4, #0]
 801a404:	6831      	ldr	r1, [r6, #0]
 801a406:	061f      	lsls	r7, r3, #24
 801a408:	f851 5b04 	ldr.w	r5, [r1], #4
 801a40c:	d402      	bmi.n	801a414 <_printf_i+0x188>
 801a40e:	065f      	lsls	r7, r3, #25
 801a410:	bf48      	it	mi
 801a412:	b2ad      	uxthmi	r5, r5
 801a414:	6031      	str	r1, [r6, #0]
 801a416:	07d9      	lsls	r1, r3, #31
 801a418:	bf44      	itt	mi
 801a41a:	f043 0320 	orrmi.w	r3, r3, #32
 801a41e:	6023      	strmi	r3, [r4, #0]
 801a420:	b11d      	cbz	r5, 801a42a <_printf_i+0x19e>
 801a422:	2310      	movs	r3, #16
 801a424:	e7ac      	b.n	801a380 <_printf_i+0xf4>
 801a426:	4827      	ldr	r0, [pc, #156]	@ (801a4c4 <_printf_i+0x238>)
 801a428:	e7e9      	b.n	801a3fe <_printf_i+0x172>
 801a42a:	6823      	ldr	r3, [r4, #0]
 801a42c:	f023 0320 	bic.w	r3, r3, #32
 801a430:	6023      	str	r3, [r4, #0]
 801a432:	e7f6      	b.n	801a422 <_printf_i+0x196>
 801a434:	4616      	mov	r6, r2
 801a436:	e7bd      	b.n	801a3b4 <_printf_i+0x128>
 801a438:	6833      	ldr	r3, [r6, #0]
 801a43a:	6825      	ldr	r5, [r4, #0]
 801a43c:	6961      	ldr	r1, [r4, #20]
 801a43e:	1d18      	adds	r0, r3, #4
 801a440:	6030      	str	r0, [r6, #0]
 801a442:	062e      	lsls	r6, r5, #24
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	d501      	bpl.n	801a44c <_printf_i+0x1c0>
 801a448:	6019      	str	r1, [r3, #0]
 801a44a:	e002      	b.n	801a452 <_printf_i+0x1c6>
 801a44c:	0668      	lsls	r0, r5, #25
 801a44e:	d5fb      	bpl.n	801a448 <_printf_i+0x1bc>
 801a450:	8019      	strh	r1, [r3, #0]
 801a452:	2300      	movs	r3, #0
 801a454:	6123      	str	r3, [r4, #16]
 801a456:	4616      	mov	r6, r2
 801a458:	e7bc      	b.n	801a3d4 <_printf_i+0x148>
 801a45a:	6833      	ldr	r3, [r6, #0]
 801a45c:	1d1a      	adds	r2, r3, #4
 801a45e:	6032      	str	r2, [r6, #0]
 801a460:	681e      	ldr	r6, [r3, #0]
 801a462:	6862      	ldr	r2, [r4, #4]
 801a464:	2100      	movs	r1, #0
 801a466:	4630      	mov	r0, r6
 801a468:	f7e5 ff3a 	bl	80002e0 <memchr>
 801a46c:	b108      	cbz	r0, 801a472 <_printf_i+0x1e6>
 801a46e:	1b80      	subs	r0, r0, r6
 801a470:	6060      	str	r0, [r4, #4]
 801a472:	6863      	ldr	r3, [r4, #4]
 801a474:	6123      	str	r3, [r4, #16]
 801a476:	2300      	movs	r3, #0
 801a478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a47c:	e7aa      	b.n	801a3d4 <_printf_i+0x148>
 801a47e:	6923      	ldr	r3, [r4, #16]
 801a480:	4632      	mov	r2, r6
 801a482:	4649      	mov	r1, r9
 801a484:	4640      	mov	r0, r8
 801a486:	47d0      	blx	sl
 801a488:	3001      	adds	r0, #1
 801a48a:	d0ad      	beq.n	801a3e8 <_printf_i+0x15c>
 801a48c:	6823      	ldr	r3, [r4, #0]
 801a48e:	079b      	lsls	r3, r3, #30
 801a490:	d413      	bmi.n	801a4ba <_printf_i+0x22e>
 801a492:	68e0      	ldr	r0, [r4, #12]
 801a494:	9b03      	ldr	r3, [sp, #12]
 801a496:	4298      	cmp	r0, r3
 801a498:	bfb8      	it	lt
 801a49a:	4618      	movlt	r0, r3
 801a49c:	e7a6      	b.n	801a3ec <_printf_i+0x160>
 801a49e:	2301      	movs	r3, #1
 801a4a0:	4632      	mov	r2, r6
 801a4a2:	4649      	mov	r1, r9
 801a4a4:	4640      	mov	r0, r8
 801a4a6:	47d0      	blx	sl
 801a4a8:	3001      	adds	r0, #1
 801a4aa:	d09d      	beq.n	801a3e8 <_printf_i+0x15c>
 801a4ac:	3501      	adds	r5, #1
 801a4ae:	68e3      	ldr	r3, [r4, #12]
 801a4b0:	9903      	ldr	r1, [sp, #12]
 801a4b2:	1a5b      	subs	r3, r3, r1
 801a4b4:	42ab      	cmp	r3, r5
 801a4b6:	dcf2      	bgt.n	801a49e <_printf_i+0x212>
 801a4b8:	e7eb      	b.n	801a492 <_printf_i+0x206>
 801a4ba:	2500      	movs	r5, #0
 801a4bc:	f104 0619 	add.w	r6, r4, #25
 801a4c0:	e7f5      	b.n	801a4ae <_printf_i+0x222>
 801a4c2:	bf00      	nop
 801a4c4:	0801b68d 	.word	0x0801b68d
 801a4c8:	0801b69e 	.word	0x0801b69e

0801a4cc <__sflush_r>:
 801a4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d4:	0716      	lsls	r6, r2, #28
 801a4d6:	4605      	mov	r5, r0
 801a4d8:	460c      	mov	r4, r1
 801a4da:	d454      	bmi.n	801a586 <__sflush_r+0xba>
 801a4dc:	684b      	ldr	r3, [r1, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	dc02      	bgt.n	801a4e8 <__sflush_r+0x1c>
 801a4e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	dd48      	ble.n	801a57a <__sflush_r+0xae>
 801a4e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4ea:	2e00      	cmp	r6, #0
 801a4ec:	d045      	beq.n	801a57a <__sflush_r+0xae>
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a4f4:	682f      	ldr	r7, [r5, #0]
 801a4f6:	6a21      	ldr	r1, [r4, #32]
 801a4f8:	602b      	str	r3, [r5, #0]
 801a4fa:	d030      	beq.n	801a55e <__sflush_r+0x92>
 801a4fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a4fe:	89a3      	ldrh	r3, [r4, #12]
 801a500:	0759      	lsls	r1, r3, #29
 801a502:	d505      	bpl.n	801a510 <__sflush_r+0x44>
 801a504:	6863      	ldr	r3, [r4, #4]
 801a506:	1ad2      	subs	r2, r2, r3
 801a508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a50a:	b10b      	cbz	r3, 801a510 <__sflush_r+0x44>
 801a50c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a50e:	1ad2      	subs	r2, r2, r3
 801a510:	2300      	movs	r3, #0
 801a512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a514:	6a21      	ldr	r1, [r4, #32]
 801a516:	4628      	mov	r0, r5
 801a518:	47b0      	blx	r6
 801a51a:	1c43      	adds	r3, r0, #1
 801a51c:	89a3      	ldrh	r3, [r4, #12]
 801a51e:	d106      	bne.n	801a52e <__sflush_r+0x62>
 801a520:	6829      	ldr	r1, [r5, #0]
 801a522:	291d      	cmp	r1, #29
 801a524:	d82b      	bhi.n	801a57e <__sflush_r+0xb2>
 801a526:	4a2a      	ldr	r2, [pc, #168]	@ (801a5d0 <__sflush_r+0x104>)
 801a528:	410a      	asrs	r2, r1
 801a52a:	07d6      	lsls	r6, r2, #31
 801a52c:	d427      	bmi.n	801a57e <__sflush_r+0xb2>
 801a52e:	2200      	movs	r2, #0
 801a530:	6062      	str	r2, [r4, #4]
 801a532:	04d9      	lsls	r1, r3, #19
 801a534:	6922      	ldr	r2, [r4, #16]
 801a536:	6022      	str	r2, [r4, #0]
 801a538:	d504      	bpl.n	801a544 <__sflush_r+0x78>
 801a53a:	1c42      	adds	r2, r0, #1
 801a53c:	d101      	bne.n	801a542 <__sflush_r+0x76>
 801a53e:	682b      	ldr	r3, [r5, #0]
 801a540:	b903      	cbnz	r3, 801a544 <__sflush_r+0x78>
 801a542:	6560      	str	r0, [r4, #84]	@ 0x54
 801a544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a546:	602f      	str	r7, [r5, #0]
 801a548:	b1b9      	cbz	r1, 801a57a <__sflush_r+0xae>
 801a54a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a54e:	4299      	cmp	r1, r3
 801a550:	d002      	beq.n	801a558 <__sflush_r+0x8c>
 801a552:	4628      	mov	r0, r5
 801a554:	f7ff fa9a 	bl	8019a8c <_free_r>
 801a558:	2300      	movs	r3, #0
 801a55a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a55c:	e00d      	b.n	801a57a <__sflush_r+0xae>
 801a55e:	2301      	movs	r3, #1
 801a560:	4628      	mov	r0, r5
 801a562:	47b0      	blx	r6
 801a564:	4602      	mov	r2, r0
 801a566:	1c50      	adds	r0, r2, #1
 801a568:	d1c9      	bne.n	801a4fe <__sflush_r+0x32>
 801a56a:	682b      	ldr	r3, [r5, #0]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d0c6      	beq.n	801a4fe <__sflush_r+0x32>
 801a570:	2b1d      	cmp	r3, #29
 801a572:	d001      	beq.n	801a578 <__sflush_r+0xac>
 801a574:	2b16      	cmp	r3, #22
 801a576:	d11e      	bne.n	801a5b6 <__sflush_r+0xea>
 801a578:	602f      	str	r7, [r5, #0]
 801a57a:	2000      	movs	r0, #0
 801a57c:	e022      	b.n	801a5c4 <__sflush_r+0xf8>
 801a57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a582:	b21b      	sxth	r3, r3
 801a584:	e01b      	b.n	801a5be <__sflush_r+0xf2>
 801a586:	690f      	ldr	r7, [r1, #16]
 801a588:	2f00      	cmp	r7, #0
 801a58a:	d0f6      	beq.n	801a57a <__sflush_r+0xae>
 801a58c:	0793      	lsls	r3, r2, #30
 801a58e:	680e      	ldr	r6, [r1, #0]
 801a590:	bf08      	it	eq
 801a592:	694b      	ldreq	r3, [r1, #20]
 801a594:	600f      	str	r7, [r1, #0]
 801a596:	bf18      	it	ne
 801a598:	2300      	movne	r3, #0
 801a59a:	eba6 0807 	sub.w	r8, r6, r7
 801a59e:	608b      	str	r3, [r1, #8]
 801a5a0:	f1b8 0f00 	cmp.w	r8, #0
 801a5a4:	dde9      	ble.n	801a57a <__sflush_r+0xae>
 801a5a6:	6a21      	ldr	r1, [r4, #32]
 801a5a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a5aa:	4643      	mov	r3, r8
 801a5ac:	463a      	mov	r2, r7
 801a5ae:	4628      	mov	r0, r5
 801a5b0:	47b0      	blx	r6
 801a5b2:	2800      	cmp	r0, #0
 801a5b4:	dc08      	bgt.n	801a5c8 <__sflush_r+0xfc>
 801a5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a5be:	81a3      	strh	r3, [r4, #12]
 801a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5c8:	4407      	add	r7, r0
 801a5ca:	eba8 0800 	sub.w	r8, r8, r0
 801a5ce:	e7e7      	b.n	801a5a0 <__sflush_r+0xd4>
 801a5d0:	dfbffffe 	.word	0xdfbffffe

0801a5d4 <_fflush_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	690b      	ldr	r3, [r1, #16]
 801a5d8:	4605      	mov	r5, r0
 801a5da:	460c      	mov	r4, r1
 801a5dc:	b913      	cbnz	r3, 801a5e4 <_fflush_r+0x10>
 801a5de:	2500      	movs	r5, #0
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	bd38      	pop	{r3, r4, r5, pc}
 801a5e4:	b118      	cbz	r0, 801a5ee <_fflush_r+0x1a>
 801a5e6:	6a03      	ldr	r3, [r0, #32]
 801a5e8:	b90b      	cbnz	r3, 801a5ee <_fflush_r+0x1a>
 801a5ea:	f7ff f919 	bl	8019820 <__sinit>
 801a5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d0f3      	beq.n	801a5de <_fflush_r+0xa>
 801a5f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a5f8:	07d0      	lsls	r0, r2, #31
 801a5fa:	d404      	bmi.n	801a606 <_fflush_r+0x32>
 801a5fc:	0599      	lsls	r1, r3, #22
 801a5fe:	d402      	bmi.n	801a606 <_fflush_r+0x32>
 801a600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a602:	f7ff fa32 	bl	8019a6a <__retarget_lock_acquire_recursive>
 801a606:	4628      	mov	r0, r5
 801a608:	4621      	mov	r1, r4
 801a60a:	f7ff ff5f 	bl	801a4cc <__sflush_r>
 801a60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a610:	07da      	lsls	r2, r3, #31
 801a612:	4605      	mov	r5, r0
 801a614:	d4e4      	bmi.n	801a5e0 <_fflush_r+0xc>
 801a616:	89a3      	ldrh	r3, [r4, #12]
 801a618:	059b      	lsls	r3, r3, #22
 801a61a:	d4e1      	bmi.n	801a5e0 <_fflush_r+0xc>
 801a61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a61e:	f7ff fa25 	bl	8019a6c <__retarget_lock_release_recursive>
 801a622:	e7dd      	b.n	801a5e0 <_fflush_r+0xc>

0801a624 <__swbuf_r>:
 801a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a626:	460e      	mov	r6, r1
 801a628:	4614      	mov	r4, r2
 801a62a:	4605      	mov	r5, r0
 801a62c:	b118      	cbz	r0, 801a636 <__swbuf_r+0x12>
 801a62e:	6a03      	ldr	r3, [r0, #32]
 801a630:	b90b      	cbnz	r3, 801a636 <__swbuf_r+0x12>
 801a632:	f7ff f8f5 	bl	8019820 <__sinit>
 801a636:	69a3      	ldr	r3, [r4, #24]
 801a638:	60a3      	str	r3, [r4, #8]
 801a63a:	89a3      	ldrh	r3, [r4, #12]
 801a63c:	071a      	lsls	r2, r3, #28
 801a63e:	d501      	bpl.n	801a644 <__swbuf_r+0x20>
 801a640:	6923      	ldr	r3, [r4, #16]
 801a642:	b943      	cbnz	r3, 801a656 <__swbuf_r+0x32>
 801a644:	4621      	mov	r1, r4
 801a646:	4628      	mov	r0, r5
 801a648:	f000 f82a 	bl	801a6a0 <__swsetup_r>
 801a64c:	b118      	cbz	r0, 801a656 <__swbuf_r+0x32>
 801a64e:	f04f 37ff 	mov.w	r7, #4294967295
 801a652:	4638      	mov	r0, r7
 801a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a656:	6823      	ldr	r3, [r4, #0]
 801a658:	6922      	ldr	r2, [r4, #16]
 801a65a:	1a98      	subs	r0, r3, r2
 801a65c:	6963      	ldr	r3, [r4, #20]
 801a65e:	b2f6      	uxtb	r6, r6
 801a660:	4283      	cmp	r3, r0
 801a662:	4637      	mov	r7, r6
 801a664:	dc05      	bgt.n	801a672 <__swbuf_r+0x4e>
 801a666:	4621      	mov	r1, r4
 801a668:	4628      	mov	r0, r5
 801a66a:	f7ff ffb3 	bl	801a5d4 <_fflush_r>
 801a66e:	2800      	cmp	r0, #0
 801a670:	d1ed      	bne.n	801a64e <__swbuf_r+0x2a>
 801a672:	68a3      	ldr	r3, [r4, #8]
 801a674:	3b01      	subs	r3, #1
 801a676:	60a3      	str	r3, [r4, #8]
 801a678:	6823      	ldr	r3, [r4, #0]
 801a67a:	1c5a      	adds	r2, r3, #1
 801a67c:	6022      	str	r2, [r4, #0]
 801a67e:	701e      	strb	r6, [r3, #0]
 801a680:	6962      	ldr	r2, [r4, #20]
 801a682:	1c43      	adds	r3, r0, #1
 801a684:	429a      	cmp	r2, r3
 801a686:	d004      	beq.n	801a692 <__swbuf_r+0x6e>
 801a688:	89a3      	ldrh	r3, [r4, #12]
 801a68a:	07db      	lsls	r3, r3, #31
 801a68c:	d5e1      	bpl.n	801a652 <__swbuf_r+0x2e>
 801a68e:	2e0a      	cmp	r6, #10
 801a690:	d1df      	bne.n	801a652 <__swbuf_r+0x2e>
 801a692:	4621      	mov	r1, r4
 801a694:	4628      	mov	r0, r5
 801a696:	f7ff ff9d 	bl	801a5d4 <_fflush_r>
 801a69a:	2800      	cmp	r0, #0
 801a69c:	d0d9      	beq.n	801a652 <__swbuf_r+0x2e>
 801a69e:	e7d6      	b.n	801a64e <__swbuf_r+0x2a>

0801a6a0 <__swsetup_r>:
 801a6a0:	b538      	push	{r3, r4, r5, lr}
 801a6a2:	4b29      	ldr	r3, [pc, #164]	@ (801a748 <__swsetup_r+0xa8>)
 801a6a4:	4605      	mov	r5, r0
 801a6a6:	6818      	ldr	r0, [r3, #0]
 801a6a8:	460c      	mov	r4, r1
 801a6aa:	b118      	cbz	r0, 801a6b4 <__swsetup_r+0x14>
 801a6ac:	6a03      	ldr	r3, [r0, #32]
 801a6ae:	b90b      	cbnz	r3, 801a6b4 <__swsetup_r+0x14>
 801a6b0:	f7ff f8b6 	bl	8019820 <__sinit>
 801a6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6b8:	0719      	lsls	r1, r3, #28
 801a6ba:	d422      	bmi.n	801a702 <__swsetup_r+0x62>
 801a6bc:	06da      	lsls	r2, r3, #27
 801a6be:	d407      	bmi.n	801a6d0 <__swsetup_r+0x30>
 801a6c0:	2209      	movs	r2, #9
 801a6c2:	602a      	str	r2, [r5, #0]
 801a6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a6c8:	81a3      	strh	r3, [r4, #12]
 801a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a6ce:	e033      	b.n	801a738 <__swsetup_r+0x98>
 801a6d0:	0758      	lsls	r0, r3, #29
 801a6d2:	d512      	bpl.n	801a6fa <__swsetup_r+0x5a>
 801a6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a6d6:	b141      	cbz	r1, 801a6ea <__swsetup_r+0x4a>
 801a6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a6dc:	4299      	cmp	r1, r3
 801a6de:	d002      	beq.n	801a6e6 <__swsetup_r+0x46>
 801a6e0:	4628      	mov	r0, r5
 801a6e2:	f7ff f9d3 	bl	8019a8c <_free_r>
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801a6ea:	89a3      	ldrh	r3, [r4, #12]
 801a6ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a6f0:	81a3      	strh	r3, [r4, #12]
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	6063      	str	r3, [r4, #4]
 801a6f6:	6923      	ldr	r3, [r4, #16]
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	89a3      	ldrh	r3, [r4, #12]
 801a6fc:	f043 0308 	orr.w	r3, r3, #8
 801a700:	81a3      	strh	r3, [r4, #12]
 801a702:	6923      	ldr	r3, [r4, #16]
 801a704:	b94b      	cbnz	r3, 801a71a <__swsetup_r+0x7a>
 801a706:	89a3      	ldrh	r3, [r4, #12]
 801a708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a70c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a710:	d003      	beq.n	801a71a <__swsetup_r+0x7a>
 801a712:	4621      	mov	r1, r4
 801a714:	4628      	mov	r0, r5
 801a716:	f000 f897 	bl	801a848 <__smakebuf_r>
 801a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a71e:	f013 0201 	ands.w	r2, r3, #1
 801a722:	d00a      	beq.n	801a73a <__swsetup_r+0x9a>
 801a724:	2200      	movs	r2, #0
 801a726:	60a2      	str	r2, [r4, #8]
 801a728:	6962      	ldr	r2, [r4, #20]
 801a72a:	4252      	negs	r2, r2
 801a72c:	61a2      	str	r2, [r4, #24]
 801a72e:	6922      	ldr	r2, [r4, #16]
 801a730:	b942      	cbnz	r2, 801a744 <__swsetup_r+0xa4>
 801a732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a736:	d1c5      	bne.n	801a6c4 <__swsetup_r+0x24>
 801a738:	bd38      	pop	{r3, r4, r5, pc}
 801a73a:	0799      	lsls	r1, r3, #30
 801a73c:	bf58      	it	pl
 801a73e:	6962      	ldrpl	r2, [r4, #20]
 801a740:	60a2      	str	r2, [r4, #8]
 801a742:	e7f4      	b.n	801a72e <__swsetup_r+0x8e>
 801a744:	2000      	movs	r0, #0
 801a746:	e7f7      	b.n	801a738 <__swsetup_r+0x98>
 801a748:	24000244 	.word	0x24000244

0801a74c <memmove>:
 801a74c:	4288      	cmp	r0, r1
 801a74e:	b510      	push	{r4, lr}
 801a750:	eb01 0402 	add.w	r4, r1, r2
 801a754:	d902      	bls.n	801a75c <memmove+0x10>
 801a756:	4284      	cmp	r4, r0
 801a758:	4623      	mov	r3, r4
 801a75a:	d807      	bhi.n	801a76c <memmove+0x20>
 801a75c:	1e43      	subs	r3, r0, #1
 801a75e:	42a1      	cmp	r1, r4
 801a760:	d008      	beq.n	801a774 <memmove+0x28>
 801a762:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a766:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a76a:	e7f8      	b.n	801a75e <memmove+0x12>
 801a76c:	4402      	add	r2, r0
 801a76e:	4601      	mov	r1, r0
 801a770:	428a      	cmp	r2, r1
 801a772:	d100      	bne.n	801a776 <memmove+0x2a>
 801a774:	bd10      	pop	{r4, pc}
 801a776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a77e:	e7f7      	b.n	801a770 <memmove+0x24>

0801a780 <_sbrk_r>:
 801a780:	b538      	push	{r3, r4, r5, lr}
 801a782:	4d06      	ldr	r5, [pc, #24]	@ (801a79c <_sbrk_r+0x1c>)
 801a784:	2300      	movs	r3, #0
 801a786:	4604      	mov	r4, r0
 801a788:	4608      	mov	r0, r1
 801a78a:	602b      	str	r3, [r5, #0]
 801a78c:	f7e9 fce0 	bl	8004150 <_sbrk>
 801a790:	1c43      	adds	r3, r0, #1
 801a792:	d102      	bne.n	801a79a <_sbrk_r+0x1a>
 801a794:	682b      	ldr	r3, [r5, #0]
 801a796:	b103      	cbz	r3, 801a79a <_sbrk_r+0x1a>
 801a798:	6023      	str	r3, [r4, #0]
 801a79a:	bd38      	pop	{r3, r4, r5, pc}
 801a79c:	240017b8 	.word	0x240017b8

0801a7a0 <_realloc_r>:
 801a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7a4:	4680      	mov	r8, r0
 801a7a6:	4615      	mov	r5, r2
 801a7a8:	460c      	mov	r4, r1
 801a7aa:	b921      	cbnz	r1, 801a7b6 <_realloc_r+0x16>
 801a7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b0:	4611      	mov	r1, r2
 801a7b2:	f7ff b9d7 	b.w	8019b64 <_malloc_r>
 801a7b6:	b92a      	cbnz	r2, 801a7c4 <_realloc_r+0x24>
 801a7b8:	f7ff f968 	bl	8019a8c <_free_r>
 801a7bc:	2400      	movs	r4, #0
 801a7be:	4620      	mov	r0, r4
 801a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7c4:	f000 f89e 	bl	801a904 <_malloc_usable_size_r>
 801a7c8:	4285      	cmp	r5, r0
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	d802      	bhi.n	801a7d4 <_realloc_r+0x34>
 801a7ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a7d2:	d8f4      	bhi.n	801a7be <_realloc_r+0x1e>
 801a7d4:	4629      	mov	r1, r5
 801a7d6:	4640      	mov	r0, r8
 801a7d8:	f7ff f9c4 	bl	8019b64 <_malloc_r>
 801a7dc:	4607      	mov	r7, r0
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d0ec      	beq.n	801a7bc <_realloc_r+0x1c>
 801a7e2:	42b5      	cmp	r5, r6
 801a7e4:	462a      	mov	r2, r5
 801a7e6:	4621      	mov	r1, r4
 801a7e8:	bf28      	it	cs
 801a7ea:	4632      	movcs	r2, r6
 801a7ec:	f7ff f93f 	bl	8019a6e <memcpy>
 801a7f0:	4621      	mov	r1, r4
 801a7f2:	4640      	mov	r0, r8
 801a7f4:	f7ff f94a 	bl	8019a8c <_free_r>
 801a7f8:	463c      	mov	r4, r7
 801a7fa:	e7e0      	b.n	801a7be <_realloc_r+0x1e>

0801a7fc <__swhatbuf_r>:
 801a7fc:	b570      	push	{r4, r5, r6, lr}
 801a7fe:	460c      	mov	r4, r1
 801a800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a804:	2900      	cmp	r1, #0
 801a806:	b096      	sub	sp, #88	@ 0x58
 801a808:	4615      	mov	r5, r2
 801a80a:	461e      	mov	r6, r3
 801a80c:	da0d      	bge.n	801a82a <__swhatbuf_r+0x2e>
 801a80e:	89a3      	ldrh	r3, [r4, #12]
 801a810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a814:	f04f 0100 	mov.w	r1, #0
 801a818:	bf14      	ite	ne
 801a81a:	2340      	movne	r3, #64	@ 0x40
 801a81c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a820:	2000      	movs	r0, #0
 801a822:	6031      	str	r1, [r6, #0]
 801a824:	602b      	str	r3, [r5, #0]
 801a826:	b016      	add	sp, #88	@ 0x58
 801a828:	bd70      	pop	{r4, r5, r6, pc}
 801a82a:	466a      	mov	r2, sp
 801a82c:	f000 f848 	bl	801a8c0 <_fstat_r>
 801a830:	2800      	cmp	r0, #0
 801a832:	dbec      	blt.n	801a80e <__swhatbuf_r+0x12>
 801a834:	9901      	ldr	r1, [sp, #4]
 801a836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a83a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a83e:	4259      	negs	r1, r3
 801a840:	4159      	adcs	r1, r3
 801a842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a846:	e7eb      	b.n	801a820 <__swhatbuf_r+0x24>

0801a848 <__smakebuf_r>:
 801a848:	898b      	ldrh	r3, [r1, #12]
 801a84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a84c:	079d      	lsls	r5, r3, #30
 801a84e:	4606      	mov	r6, r0
 801a850:	460c      	mov	r4, r1
 801a852:	d507      	bpl.n	801a864 <__smakebuf_r+0x1c>
 801a854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a858:	6023      	str	r3, [r4, #0]
 801a85a:	6123      	str	r3, [r4, #16]
 801a85c:	2301      	movs	r3, #1
 801a85e:	6163      	str	r3, [r4, #20]
 801a860:	b003      	add	sp, #12
 801a862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a864:	ab01      	add	r3, sp, #4
 801a866:	466a      	mov	r2, sp
 801a868:	f7ff ffc8 	bl	801a7fc <__swhatbuf_r>
 801a86c:	9f00      	ldr	r7, [sp, #0]
 801a86e:	4605      	mov	r5, r0
 801a870:	4639      	mov	r1, r7
 801a872:	4630      	mov	r0, r6
 801a874:	f7ff f976 	bl	8019b64 <_malloc_r>
 801a878:	b948      	cbnz	r0, 801a88e <__smakebuf_r+0x46>
 801a87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a87e:	059a      	lsls	r2, r3, #22
 801a880:	d4ee      	bmi.n	801a860 <__smakebuf_r+0x18>
 801a882:	f023 0303 	bic.w	r3, r3, #3
 801a886:	f043 0302 	orr.w	r3, r3, #2
 801a88a:	81a3      	strh	r3, [r4, #12]
 801a88c:	e7e2      	b.n	801a854 <__smakebuf_r+0xc>
 801a88e:	89a3      	ldrh	r3, [r4, #12]
 801a890:	6020      	str	r0, [r4, #0]
 801a892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a896:	81a3      	strh	r3, [r4, #12]
 801a898:	9b01      	ldr	r3, [sp, #4]
 801a89a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a89e:	b15b      	cbz	r3, 801a8b8 <__smakebuf_r+0x70>
 801a8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f000 f81d 	bl	801a8e4 <_isatty_r>
 801a8aa:	b128      	cbz	r0, 801a8b8 <__smakebuf_r+0x70>
 801a8ac:	89a3      	ldrh	r3, [r4, #12]
 801a8ae:	f023 0303 	bic.w	r3, r3, #3
 801a8b2:	f043 0301 	orr.w	r3, r3, #1
 801a8b6:	81a3      	strh	r3, [r4, #12]
 801a8b8:	89a3      	ldrh	r3, [r4, #12]
 801a8ba:	431d      	orrs	r5, r3
 801a8bc:	81a5      	strh	r5, [r4, #12]
 801a8be:	e7cf      	b.n	801a860 <__smakebuf_r+0x18>

0801a8c0 <_fstat_r>:
 801a8c0:	b538      	push	{r3, r4, r5, lr}
 801a8c2:	4d07      	ldr	r5, [pc, #28]	@ (801a8e0 <_fstat_r+0x20>)
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	4604      	mov	r4, r0
 801a8c8:	4608      	mov	r0, r1
 801a8ca:	4611      	mov	r1, r2
 801a8cc:	602b      	str	r3, [r5, #0]
 801a8ce:	f7e9 fc16 	bl	80040fe <_fstat>
 801a8d2:	1c43      	adds	r3, r0, #1
 801a8d4:	d102      	bne.n	801a8dc <_fstat_r+0x1c>
 801a8d6:	682b      	ldr	r3, [r5, #0]
 801a8d8:	b103      	cbz	r3, 801a8dc <_fstat_r+0x1c>
 801a8da:	6023      	str	r3, [r4, #0]
 801a8dc:	bd38      	pop	{r3, r4, r5, pc}
 801a8de:	bf00      	nop
 801a8e0:	240017b8 	.word	0x240017b8

0801a8e4 <_isatty_r>:
 801a8e4:	b538      	push	{r3, r4, r5, lr}
 801a8e6:	4d06      	ldr	r5, [pc, #24]	@ (801a900 <_isatty_r+0x1c>)
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	4608      	mov	r0, r1
 801a8ee:	602b      	str	r3, [r5, #0]
 801a8f0:	f7e9 fc15 	bl	800411e <_isatty>
 801a8f4:	1c43      	adds	r3, r0, #1
 801a8f6:	d102      	bne.n	801a8fe <_isatty_r+0x1a>
 801a8f8:	682b      	ldr	r3, [r5, #0]
 801a8fa:	b103      	cbz	r3, 801a8fe <_isatty_r+0x1a>
 801a8fc:	6023      	str	r3, [r4, #0]
 801a8fe:	bd38      	pop	{r3, r4, r5, pc}
 801a900:	240017b8 	.word	0x240017b8

0801a904 <_malloc_usable_size_r>:
 801a904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a908:	1f18      	subs	r0, r3, #4
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	bfbc      	itt	lt
 801a90e:	580b      	ldrlt	r3, [r1, r0]
 801a910:	18c0      	addlt	r0, r0, r3
 801a912:	4770      	bx	lr

0801a914 <_init>:
 801a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a916:	bf00      	nop
 801a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a91a:	bc08      	pop	{r3}
 801a91c:	469e      	mov	lr, r3
 801a91e:	4770      	bx	lr

0801a920 <_fini>:
 801a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a922:	bf00      	nop
 801a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a926:	bc08      	pop	{r3}
 801a928:	469e      	mov	lr, r3
 801a92a:	4770      	bx	lr
